def _hx_resources__():
	return {'res2.bin':'','res1.txt':'SMOpbGxvIFdvcmxkICE='}
import builtins as _hx_builtin

_hx_classes = dict()

class _hx_AnonObject(object):
    def __init__(self, **kwargs):
        self.__dict__.update(kwargs)

_hx_c = _hx_AnonObject()

_hx_c._hx_AnonObject = _hx_AnonObject


import functools as _hx_functools

class Enum:
    # String tag;
    # int index;
    # List params;
    def __init__(self, tag, index, params):
        self.tag = tag
        self.index = index
        self.params = params
    
    def __str__(self):
        if self.params == None:
            res = self.tag
        else:
            res = self.tag + '(' + ','.join(self.params) + ')'
        res

Enum._hx_class_name = 'Enum'
Enum._hx_class = Enum
_hx_classes['Enum'] = Enum
_hx_c.Enum = Enum

class _HxException(Exception):
    # String tag;
    # int index;
    # List params;
    def __init__(self, val):
        try:
            message = _hx_c.Std.string(val)
        except Exception:
            message = '_HxException'
        Exception.__init__(self, message)
        self.val = val

class Int:
    pass

Int._hx_class_name = 'Int'
Int._hx_class = Int
_hx_classes['Int'] = Int
_hx_c.Int = Int

class Bool:
    pass

Bool._hx_class_name = 'Bool'
Bool._hx_class = Bool

_hx_classes['Bool'] = Bool
_hx_c.Bool = Bool

class Float:
    pass

Float._hx_class_name = 'Float'
Float._hx_class = Float
_hx_classes['Float'] = Float
_hx_c.Float = Float

class Dynamic:
    pass

Dynamic._hx_class_name = 'Dynamic'
Dynamic._hx_class = Dynamic
_hx_classes['Dynamic'] = Dynamic
_hx_c.Dynamic = Dynamic

class Class:
    pass

Class._hx_class_name = 'Class'
Class._hx_class = Class
_hx_classes['Class'] = Class
_hx_c.Class = Class

def _hx_rshift(val, n):
    return (val % 0x100000000) >> n
def _hx_modf(a,b):
    return float('nan') if (b == 0.0) else a % b if a > 0 else -(-a % b)
def _hx_array_get(a,i):
    return a[i] if (i < len(a) and i > -1) else None
def _hx_array_set(a,i,v):
    l = len(a)
    while l < i:
        a.append(None)
        l+=1
    if l == i:
        a.append(v)
    else:
        a[i] = v
    return v

def _hx_toUpperCase (x):
    if isinstance(x, str):
        return x.upper()
    return x.toUpperCase()

import math as _hx_math


def HxOverrides_iterator(x):
    if isinstance(x, list):
        return _hx_c.python_internal_ArrayImpl.iterator(x)
    else:
        return x.iterator()

def HxOverrides_shift(x):
    if isinstance(x, list):
        return _hx_c.python_internal_ArrayImpl.shift(x)
    else:
        return x.shift()

def HxOverrides_filter(x, f):
    if isinstance(x, list):
        return _hx_c.python_internal_ArrayImpl.filter(x,f)
    else:
        return x.filter(f)

def HxOverrides_map(x, f):
    if isinstance(x, list):
        return _hx_c.python_internal_ArrayImpl.map(x,f)
    else:
        return x.filter(f)

def HxOverrides_length(x):
    if isinstance(x, list) or isinstance(x, str):
        return _hx_builtin.len(x)
    else:
        return x.length# print python.Boot.Boot
class python_Boot:

	pass




python_Boot._hx_class = python_Boot
python_Boot._hx_class_name = "python.Boot"
_hx_classes["python.Boot"] = python_Boot
_hx_c.python_Boot = python_Boot
python_Boot._hx_fields = []
python_Boot._hx_props = []
python_Boot._hx_methods = []
python_Boot._hx_statics = ["inspect","builtin","isClass","isAnonObject","_add_dynamic","__string_rec"]
python_Boot._hx_interfaces = []
python_Boot._hx_meta = _hx_c._hx_AnonObject(obj=_hx_c._hx_AnonObject(),statics=_hx_c._hx_AnonObject(),fields=_hx_c._hx_AnonObject())
def python_Boot_hx_empty_init (_hx_o):
	pass
python_Boot._hx_empty_init = python_Boot_hx_empty_init
# print python.internal.ArrayImpl.ArrayImpl
class python_internal_ArrayImpl:

	pass




python_internal_ArrayImpl._hx_class = python_internal_ArrayImpl
python_internal_ArrayImpl._hx_class_name = "python.internal.ArrayImpl"
_hx_classes["python.internal.ArrayImpl"] = python_internal_ArrayImpl
_hx_c.python_internal_ArrayImpl = python_internal_ArrayImpl
python_internal_ArrayImpl._hx_fields = []
python_internal_ArrayImpl._hx_props = []
python_internal_ArrayImpl._hx_methods = []
python_internal_ArrayImpl._hx_statics = ["get_length","concat","copy","iterator","indexOf","lastIndexOf","join","toString","pop","push","unshift","remove","shift","slice","sort","splice","map","filter","__get","__set","__unsafe_get","__unsafe_set"]
python_internal_ArrayImpl._hx_interfaces = []
python_internal_ArrayImpl._hx_meta = _hx_c._hx_AnonObject(obj=_hx_c._hx_AnonObject(),statics=_hx_c._hx_AnonObject(),fields=_hx_c._hx_AnonObject())
def python_internal_ArrayImpl_hx_empty_init (_hx_o):
	pass
python_internal_ArrayImpl._hx_empty_init = python_internal_ArrayImpl_hx_empty_init
# print Array.list
# print Date.Date
class Date:


	def __init__(self,year,month,day,hour,min,sec):
		self.date = None
		if year < _hx_c.python_lib_datetime_DateTime.min.year:
			year = _hx_c.python_lib_datetime_DateTime.min.year
		
		if day == 0:
			day = 1
		
		self.date = _hx_c.python_lib_datetime_DateTime(year, month + 1, day, hour, min, sec)
		
	
	# var date
	def getTime(self):
		return self.date.timestamp() * 1000.0

	def getHours(self):
		return self.date.hour

	def getMinutes(self):
		return self.date.minute

	def getSeconds(self):
		return self.date.second

	def getFullYear(self):
		return self.date.year

	def getMonth(self):
		return self.date.month - 1

	def getDate(self):
		return self.date.day

	def getDay(self):
		return self.date.isoweekday()

	def toString(self):
		m = self.date.month - 1 + 1
		d = self.date.day
		h = self.date.hour
		mi = self.date.minute
		s = self.date.second
		return Std.string(Std.string(Std.string(Std.string(Std.string(Std.string(Std.string(Std.string(Std.string(Std.string(_hx_c.Std.string(self.date.year)) + "-") + Std.string(("0" + Std.string(_hx_c.Std.string(m)) if (m < 10) else "" + Std.string(_hx_c.Std.string(m))))) + "-") + Std.string(("0" + Std.string(_hx_c.Std.string(d)) if (d < 10) else "" + Std.string(_hx_c.Std.string(d))))) + " ") + Std.string(("0" + Std.string(_hx_c.Std.string(h)) if (h < 10) else "" + Std.string(_hx_c.Std.string(h))))) + ":") + Std.string(("0" + Std.string(_hx_c.Std.string(mi)) if (mi < 10) else "" + Std.string(_hx_c.Std.string(mi))))) + ":") + Std.string(("0" + Std.string(_hx_c.Std.string(s)) if (s < 10) else "" + Std.string(_hx_c.Std.string(s))))
	





Date._hx_class = Date
Date._hx_class_name = "Date"
_hx_classes["Date"] = Date
_hx_c.Date = Date
Date._hx_fields = ["date"]
Date._hx_props = []
Date._hx_methods = ["getTime","getHours","getMinutes","getSeconds","getFullYear","getMonth","getDate","getDay","toString"]
Date._hx_statics = ["now","fromTime","UTC","fromString"]
Date._hx_interfaces = []
Date._hx_meta = _hx_c._hx_AnonObject(obj=_hx_c._hx_AnonObject(),statics=_hx_c._hx_AnonObject(),fields=_hx_c._hx_AnonObject())
def Date_hx_empty_init (_hx_o):
	_hx_o.date = None
Date._hx_empty_init = Date_hx_empty_init
# print DateTools.DateTools
class DateTools:

	pass




DateTools._hx_class = DateTools
DateTools._hx_class_name = "DateTools"
_hx_classes["DateTools"] = DateTools
_hx_c.DateTools = DateTools
DateTools._hx_fields = []
DateTools._hx_props = []
DateTools._hx_methods = []
DateTools._hx_statics = ["__format_get","__format","format","delta","DAYS_OF_MONTH","getMonthDays","seconds","minutes","hours","days","parse","make","makeUtc"]
DateTools._hx_interfaces = []
DateTools._hx_meta = _hx_c._hx_AnonObject(obj=_hx_c._hx_AnonObject(),statics=_hx_c._hx_AnonObject(),fields=_hx_c._hx_AnonObject())
def DateTools_hx_empty_init (_hx_o):
	pass
DateTools._hx_empty_init = DateTools_hx_empty_init
# print EReg.EReg
class EReg:


	def __init__(self,r,opt):
		self.pattern = None
		self.matchObj = None
		self._hx_global = None
		self._hx_global = False
		options = 0
		_g1 = 0
		_g = _hx_builtin.len(opt)
		while _g1 < _g:
			i = _g1
			_g1 = _g1 + 1
			
			c = None
			if i >= _hx_builtin.len(opt):
				c = -1
			else:
				c = ord(_hx_array_get(opt,i))
			if c == 109:
				options = options | _hx_c.python_lib_Re.M
			
			if c == 105:
				options = options | _hx_c.python_lib_Re.I
			
			if c == 115:
				options = options | _hx_c.python_lib_Re.S
			
			if c == 117:
				options = options | _hx_c.python_lib_Re.U
			
			if c == 103:
				self._hx_global = True
			
		
		
		self.pattern = _hx_c.python_lib_Re.compile(r, options)
		
	
	# var pattern
	# var matchObj
	# var _hx_global
	def match(self,s):
		self.matchObj = _hx_c.python_lib_Re.search(self.pattern, s)
		return self.matchObj is not None
	

	def matched(self,n):
		return self.matchObj.group(n)

	def matchedLeft(self):
		len = self.matchObj.start()
		return _hx_c.python_Tools.substr(self.matchObj.string, 0, len)
	

	def matchedRight(self):
		pos = self.matchObj.end()
		return _hx_c.python_Tools.substr(self.matchObj.string, pos, None)
	

	def matchedPos(self):
		return _hx_c._hx_AnonObject(pos = self.matchObj.start() ,len = self.matchObj.end() - self.matchObj.start() )

	def matchSub(self,s,pos,len = None):
		if len is None:
			len = None
		
		if len is not None:
			self.matchObj = self.pattern.search(s, pos, pos + len)
		else:
			self.matchObj = self.pattern.search(s, pos)
		return self.matchObj is not None
	

	def split(self,s):
		if self._hx_global:
			ret = []
			lastEnd = 0
			def _hx_local_0():
				p = _hx_c.python_lib_Re.finditer(self.pattern, s)
				return _hx_c.python_HaxeIterator(p)
			
			_it = _hx_local_0()
			while _it.hasNext():
				x = _it.next()
				x1 = None
				endIndex = x.start()
				x1 = _hx_c.python_Tools.substring(s, lastEnd, endIndex)
				
				ret.append(x1)
				_hx_builtin.len(ret)
				
				
				lastEnd = x.end()
			
			x2 = _hx_c.python_Tools.substr(s, lastEnd, None)
			ret.append(x2)
			_hx_builtin.len(ret)
			
			
			return ret
	
		else:
			self.match(s)
			if self.matchObj is None:
				return [s]
			else:
				def _hx_local_3():
					def _hx_local_1():
						endIndex1 = self.matchObj.start()
						return _hx_c.python_Tools.substring(s, 0, endIndex1)
					
					def _hx_local_2():
						pos = self.matchObj.end()
						return _hx_c.python_Tools.substr(s, pos, None)
					
					return [_hx_local_1(), _hx_local_2()]
				
				return _hx_local_3()
			
	

	def replace(self,s,by):
		by1 = None
		_this = _hx_c.python_internal_StringImpl.split(by, "$$")
		by1 = "_hx_#repl#__".join(_hx_builtin.list(_hx_builtin.map(_hx_c.Std.string, _this)))
		
		def _hx_local_0(x):
			res = by1
			g = x.groups()
			_g1 = 0
			_g = _hx_builtin.len(g)
			while _g1 < _g:
				i = _g1
				_g1 = _g1 + 1
				
				_this1 = None
				delimiter = "$" + Std.string(_hx_builtin.str(i + 1))
				_this1 = _hx_c.python_internal_StringImpl.split(res, delimiter)
				
				res = _hx_array_get(g,i).join(_hx_builtin.list(_hx_builtin.map(_hx_c.Std.string, _this1)))
				
			
			
			_this2 = _hx_c.python_internal_StringImpl.split(res, "_hx_#repl#__")
			res = "$".join(_hx_builtin.list(_hx_builtin.map(_hx_c.Std.string, _this2)))
			
			return res
		
		replace = _hx_local_0
		return _hx_c.python_lib_Re.sub(self.pattern, replace, s, 0 if (self._hx_global) else 1)
	

	def map(self,s,f):
		buf = _hx_c.StringBuf()
		pos = 0
		right = s
		cur = self
		while pos < _hx_builtin.len(s):
			if self.matchObj is None:
				self.matchObj = _hx_c.python_lib_Re.search(self.pattern, s)
			else:
				self.matchObj = self.matchObj.re.search(s, pos)
			if self.matchObj is None:
				break
			
			pos1 = self.matchObj.end()
			curPos = cur.matchedPos()
			x = None
			_this = cur.matchedLeft()
			x = _hx_c.python_Tools.substr(_this, pos, None)
			
			s1 = _hx_c.Std.string(x)
			buf.b.write(s1)
			
			
			x1 = f(cur)
			s2 = _hx_c.Std.string(x1)
			buf.b.write(s2)
			
			
			right = cur.matchedRight()
			if not self._hx_global:
				s3 = _hx_c.Std.string(right)
				buf.b.write(s3)
				
				return buf.b.getvalue()
			
			
			if curPos.len == 0:
				x2 = None
				if pos1 < 0 or pos1 >= _hx_builtin.len(s):
					x2 = ""
				else:
					x2 = s[pos1]
				s4 = _hx_c.Std.string(x2)
				buf.b.write(s4)
				
				
				right = _hx_c.python_Tools.substr(right, 1, None)
				pos = pos1 + 1
			
			else:
				pos = pos1
		
		s5 = _hx_c.Std.string(right)
		buf.b.write(s5)
		
		return buf.b.getvalue()
	





EReg._hx_class = EReg
EReg._hx_class_name = "EReg"
_hx_classes["EReg"] = EReg
_hx_c.EReg = EReg
EReg._hx_fields = ["pattern","matchObj","global"]
EReg._hx_props = []
EReg._hx_methods = ["match","matched","matchedLeft","matchedRight","matchedPos","matchSub","split","replace","map"]
EReg._hx_statics = []
EReg._hx_interfaces = []
EReg._hx_meta = _hx_c._hx_AnonObject(obj=_hx_c._hx_AnonObject(),statics=_hx_c._hx_AnonObject(),fields=_hx_c._hx_AnonObject())
def EReg_hx_empty_init (_hx_o):
	_hx_o.pattern = None
	_hx_o.matchObj = None
	_hx_o._hx_global = None
EReg._hx_empty_init = EReg_hx_empty_init
# print IntIterator.IntIterator
class IntIterator:


	def __init__(self,min,max):
		self.min = None
		self.max = None
		self.min = min
		self.max = max
		
	
	# var min
	# var max
	def hasNext(self):
		return self.min < self.max

	def next(self):
		def _hx_local_2():
			def _hx_local_1():
				_hx_local_0 = self.min
				self.min = self.min + 1
				return _hx_local_0
			
			return _hx_local_1()
		
		return _hx_local_2()
	





IntIterator._hx_class = IntIterator
IntIterator._hx_class_name = "IntIterator"
_hx_classes["IntIterator"] = IntIterator
_hx_c.IntIterator = IntIterator
IntIterator._hx_fields = ["min","max"]
IntIterator._hx_props = []
IntIterator._hx_methods = ["hasNext","next"]
IntIterator._hx_statics = []
IntIterator._hx_interfaces = []
IntIterator._hx_meta = _hx_c._hx_AnonObject(obj=_hx_c._hx_AnonObject(),statics=_hx_c._hx_AnonObject(),fields=_hx_c._hx_AnonObject())
def IntIterator_hx_empty_init (_hx_o):
	_hx_o.min = None
	_hx_o.max = None
IntIterator._hx_empty_init = IntIterator_hx_empty_init
# print Lambda.Lambda
class Lambda:

	pass




Lambda._hx_class = Lambda
Lambda._hx_class_name = "Lambda"
_hx_classes["Lambda"] = Lambda
_hx_c.Lambda = Lambda
Lambda._hx_fields = []
Lambda._hx_props = []
Lambda._hx_methods = []
Lambda._hx_statics = ["array","list","map","mapi","has","exists","foreach","iter","filter","fold","count","empty","indexOf","find","concat"]
Lambda._hx_interfaces = []
Lambda._hx_meta = _hx_c._hx_AnonObject(obj=_hx_c._hx_AnonObject(),statics=_hx_c._hx_AnonObject(),fields=_hx_c._hx_AnonObject())
def Lambda_hx_empty_init (_hx_o):
	pass
Lambda._hx_empty_init = Lambda_hx_empty_init
# print List.List
class List:


	def __init__(self):
		self.h = None
		self.q = None
		self.length = None
		self.length = 0
	
	# var h
	# var q
	# var length
	def add(self,item):
		x = [item]
		if self.h is None:
			self.h = x
		else:
			_hx_array_set(self.q,1, x)
		self.q = x
		self.length = self.length + 1
	

	def push(self,item):
		x = [item, self.h]
		self.h = x
		if self.q is None:
			self.q = x
		
		self.length = self.length + 1
	

	def first(self):
		if self.h is None:
			return None
		else:
			return _hx_array_get(self.h,0)

	def last(self):
		if self.q is None:
			return None
		else:
			return _hx_array_get(self.q,0)

	def pop(self):
		if self.h is None:
			return None
		
		x = _hx_array_get(self.h,0)
		self.h = _hx_array_get(self.h,1)
		if self.h is None:
			self.q = None
		
		self.length = self.length - 1
		return x
	

	def isEmpty(self):
		return self.h is None

	def clear(self):
		self.h = None
		self.q = None
		self.length = 0
	

	def remove(self,v):
		prev = None
		l = self.h
		while l is not None:
			if _hx_array_get(l,0) == v:
				if prev is None:
					self.h = _hx_array_get(l,1)
				else:
					_hx_array_set(prev,1, _hx_array_get(l,1))
				if self.q == l:
					self.q = prev
				
				self.length = self.length - 1
				return True
			
			
			prev = l
			l = _hx_array_get(l,1)
		
		return False
	

	def iterator(self):
		h = self.h
		def _hx_local_2():
			def _hx_local_0():
				return h is not None
			def _hx_local_1():
				nonlocal h
				if h is None:
					return None
				
				x = _hx_array_get(h,0)
				h = _hx_array_get(h,1)
				return x
				
			
			return _hx_c._hx_AnonObject(hasNext = _hx_local_0 ,next = _hx_local_1 )
		
		return _hx_local_2()
	

	def toString(self):
		s = _hx_c.StringBuf()
		first = True
		l = self.h
		s1 = _hx_c.Std.string("{")
		s.b.write(s1)
		
		while l is not None:
			if first:
				first = False
			else:
				s2 = _hx_c.Std.string(", ")
				s.b.write(s2)
			
			x = _hx_c.Std.string(_hx_array_get(l,0))
			s3 = _hx_c.Std.string(x)
			s.b.write(s3)
			
			
			l = _hx_array_get(l,1)
		
		s4 = _hx_c.Std.string("}")
		s.b.write(s4)
		
		return s.b.getvalue()
	

	def join(self,sep):
		s = _hx_c.StringBuf()
		first = True
		l = self.h
		while l is not None:
			if first:
				first = False
			else:
				s1 = _hx_c.Std.string(sep)
				s.b.write(s1)
			
			s2 = _hx_c.Std.string(_hx_array_get(l,0))
			s.b.write(s2)
			
			l = _hx_array_get(l,1)
		
		return s.b.getvalue()
	

	def filter(self,f):
		l2 = _hx_c.List()
		l = self.h
		while l is not None:
			v = _hx_array_get(l,0)
			l = _hx_array_get(l,1)
			if f(v):
				l2.add(v)
			
		
		return l2
	

	def map(self,f):
		b = _hx_c.List()
		l = self.h
		while l is not None:
			v = _hx_array_get(l,0)
			l = _hx_array_get(l,1)
			b.add(f(v))
		
		return b
	





List._hx_class = List
List._hx_class_name = "List"
_hx_classes["List"] = List
_hx_c.List = List
List._hx_fields = ["h","q","length"]
List._hx_props = []
List._hx_methods = ["add","push","first","last","pop","isEmpty","clear","remove","iterator","toString","join","filter","map"]
List._hx_statics = []
List._hx_interfaces = []
List._hx_meta = _hx_c._hx_AnonObject(obj=_hx_c._hx_AnonObject(),statics=_hx_c._hx_AnonObject(),fields=_hx_c._hx_AnonObject())
def List_hx_empty_init (_hx_o):
	_hx_o.h = None
	_hx_o.q = None
	_hx_o.length = None
List._hx_empty_init = List_hx_empty_init
# print Map.Map_Impl_
class Map_Map_Impl_:

	pass




Map_Map_Impl_._hx_class = Map_Map_Impl_
Map_Map_Impl_._hx_class_name = "_Map._Map.Map_Impl_"
_hx_classes["_Map._Map.Map_Impl_"] = Map_Map_Impl_
_hx_c.Map_Map_Impl_ = Map_Map_Impl_
Map_Map_Impl_._hx_fields = []
Map_Map_Impl_._hx_props = []
Map_Map_Impl_._hx_methods = []
Map_Map_Impl_._hx_statics = ["_new","set","get","exists","remove","keys","iterator","toString","arrayWrite","toStringMap","toIntMap","toEnumValueMapMap","toObjectMap","fromStringMap","fromIntMap","fromObjectMap"]
Map_Map_Impl_._hx_interfaces = []
Map_Map_Impl_._hx_meta = _hx_c._hx_AnonObject(obj=_hx_c._hx_AnonObject(),statics=_hx_c._hx_AnonObject(),fields=_hx_c._hx_AnonObject())
def Map_Map_Impl__hx_empty_init (_hx_o):
	pass
Map_Map_Impl_._hx_empty_init = Map_Map_Impl__hx_empty_init
# print Map.IMap
class IMap:

	# var get
	# var set
	# var exists
	# var remove
	# var keys
	# var iterator
	# var toString
	pass




IMap._hx_class = IMap
IMap._hx_class_name = "IMap"
_hx_classes["IMap"] = IMap
_hx_c.IMap = IMap
IMap._hx_fields = []
IMap._hx_props = []
IMap._hx_methods = ["get","set","exists","remove","keys","iterator","toString"]
IMap._hx_statics = []
IMap._hx_interfaces = []
IMap._hx_meta = _hx_c._hx_AnonObject(obj=_hx_c._hx_AnonObject(),statics=_hx_c._hx_AnonObject(),fields=_hx_c._hx_AnonObject())
def IMap_hx_empty_init (_hx_o):
	pass
IMap._hx_empty_init = IMap_hx_empty_init
# print Math._hx_math
# print Reflect.Reflect
class Reflect:

	pass




Reflect._hx_class = Reflect
Reflect._hx_class_name = "Reflect"
_hx_classes["Reflect"] = Reflect
_hx_c.Reflect = Reflect
Reflect._hx_fields = []
Reflect._hx_props = []
Reflect._hx_methods = []
Reflect._hx_statics = ["hasField","field","setField","getProperty","setProperty","callMethod","fields","isFunction","compare","compareMethods","isObject","isEnumValue","deleteField","copy","makeVarArgs"]
Reflect._hx_interfaces = []
Reflect._hx_meta = _hx_c._hx_AnonObject(obj=_hx_c._hx_AnonObject(),statics=_hx_c._hx_AnonObject(),fields=_hx_c._hx_AnonObject())
def Reflect_hx_empty_init (_hx_o):
	pass
Reflect._hx_empty_init = Reflect_hx_empty_init
# print Std.Std
class Std:

	pass




Std._hx_class = Std
Std._hx_class_name = "Std"
_hx_classes["Std"] = Std
_hx_c.Std = Std
Std._hx_fields = []
Std._hx_props = []
Std._hx_methods = []
Std._hx_statics = ["instance","is","string","int","parseInt","shortenPossibleNumber","parseFloat","random"]
Std._hx_interfaces = []
Std._hx_meta = _hx_c._hx_AnonObject(obj=_hx_c._hx_AnonObject(),statics=_hx_c._hx_AnonObject(),fields=_hx_c._hx_AnonObject())
def Std_hx_empty_init (_hx_o):
	pass
Std._hx_empty_init = Std_hx_empty_init
# print StdTypes.ArrayAccess
# print python.internal.StringImpl.StringImpl
class python_internal_StringImpl:

	pass




python_internal_StringImpl._hx_class = python_internal_StringImpl
python_internal_StringImpl._hx_class_name = "python.internal.StringImpl"
_hx_classes["python.internal.StringImpl"] = python_internal_StringImpl
_hx_c.python_internal_StringImpl = python_internal_StringImpl
python_internal_StringImpl._hx_fields = []
python_internal_StringImpl._hx_props = []
python_internal_StringImpl._hx_methods = []
python_internal_StringImpl._hx_statics = ["split","charCodeAt","charAt","lastIndexOf","fromCharCode"]
python_internal_StringImpl._hx_interfaces = []
python_internal_StringImpl._hx_meta = _hx_c._hx_AnonObject(obj=_hx_c._hx_AnonObject(),statics=_hx_c._hx_AnonObject(),fields=_hx_c._hx_AnonObject())
def python_internal_StringImpl_hx_empty_init (_hx_o):
	pass
python_internal_StringImpl._hx_empty_init = python_internal_StringImpl_hx_empty_init
# print String.String
# print StringBuf.StringBuf
class StringBuf:


	def __init__(self):
		self.b = None
		self.b = _hx_c.python_lib_io_StringIO()
	
	# var b
	# var length
	def get_length(self):
		_this = self.b.getvalue()
		return _hx_builtin.len(_this)
	

	def add(self,x):
		s = _hx_c.Std.string(x)
		self.b.write(s)
	

	def add1(self,s):
		self.b.write(s)

	def addChar(self,c):
		s = None
		c1 = c
		s = "".join(_hx_builtin.map(_hx_builtin.chr, [c1]))
		
		self.b.write(s)
	

	def addSub(self,s,pos,len = None):
		if len is None:
			len = None
		
		s1 = None
		if len is None:
			s1 = _hx_c.python_Tools.substr(s, pos, None)
		else:
			s1 = _hx_c.python_Tools.substr(s, pos, len)
		self.b.write(s1)
	

	def toString(self):
		return self.b.getvalue()





StringBuf._hx_class = StringBuf
StringBuf._hx_class_name = "StringBuf"
_hx_classes["StringBuf"] = StringBuf
_hx_c.StringBuf = StringBuf
StringBuf._hx_fields = ["b"]
StringBuf._hx_props = ["length"]
StringBuf._hx_methods = ["get_length","add","add1","addChar","addSub","toString"]
StringBuf._hx_statics = []
StringBuf._hx_interfaces = []
StringBuf._hx_meta = _hx_c._hx_AnonObject(obj=_hx_c._hx_AnonObject(),statics=_hx_c._hx_AnonObject(),fields=_hx_c._hx_AnonObject())
def StringBuf_hx_empty_init (_hx_o):
	_hx_o.b = None
StringBuf._hx_empty_init = StringBuf_hx_empty_init
# print StringTools.StringTools
class StringTools:

	pass




StringTools._hx_class = StringTools
StringTools._hx_class_name = "StringTools"
_hx_classes["StringTools"] = StringTools
_hx_c.StringTools = StringTools
StringTools._hx_fields = []
StringTools._hx_props = []
StringTools._hx_methods = []
StringTools._hx_statics = ["urlEncode","urlDecode","htmlEscape","htmlUnescape","startsWith","endsWith","isSpace","ltrim","rtrim","trim","lpad","rpad","replace","hex","fastCodeAt","isEof"]
StringTools._hx_interfaces = []
StringTools._hx_meta = _hx_c._hx_AnonObject(obj=_hx_c._hx_AnonObject(),statics=_hx_c._hx_AnonObject(),fields=_hx_c._hx_AnonObject())
def StringTools_hx_empty_init (_hx_o):
	pass
StringTools._hx_empty_init = StringTools_hx_empty_init
class ValueType(_hx_c.Enum):
	def __init__(self, t, i, p):
		super(ValueType,self).__init__(t, i, p)

ValueType.TInt = ValueType("TInt", 1, list())

ValueType.TUnknown = ValueType("TUnknown", 8, list())

ValueType.TFunction = ValueType("TFunction", 5, list())

ValueType.TNull = ValueType("TNull", 0, list())

def _ValueType_statics_TEnum (e):
	return ValueType("TEnum", 7, [e])
ValueType.TEnum = _ValueType_statics_TEnum

ValueType.TFloat = ValueType("TFloat", 2, list())

def _ValueType_statics_TClass (c):
	return ValueType("TClass", 6, [c])
ValueType.TClass = _ValueType_statics_TClass

ValueType.TBool = ValueType("TBool", 3, list())

ValueType.TObject = ValueType("TObject", 4, list())

ValueType._hx_constructs = ["TNull","TInt","TFloat","TBool","TObject","TFunction","TClass","TEnum","TUnknown"]
ValueType._hx_class = ValueType
ValueType._hx_class_name = "ValueType"
_hx_classes["ValueType"] = ValueType
_hx_c.ValueType = ValueType
ValueType._hx_meta = _hx_c._hx_AnonObject(obj=_hx_c._hx_AnonObject(),fields=_hx_c._hx_AnonObject())
# print Type.Type
class Type:

	pass




Type._hx_class = Type
Type._hx_class_name = "Type"
_hx_classes["Type"] = Type
_hx_c.Type = Type
Type._hx_fields = []
Type._hx_props = []
Type._hx_methods = []
Type._hx_statics = ["getClass","getEnum","getSuperClass","getClassName","getEnumName","resolveClass","resolveEnum","createInstance","createEmptyInstance","createEnum","createEnumIndex","getInstanceFields","getClassFields","getEnumConstructs","typeof","enumEq","enumConstructor","enumParameters","enumIndex","allEnums"]
Type._hx_interfaces = []
Type._hx_meta = _hx_c._hx_AnonObject(obj=_hx_c._hx_AnonObject(),statics=_hx_c._hx_AnonObject(),fields=_hx_c._hx_AnonObject())
def Type_hx_empty_init (_hx_o):
	pass
Type._hx_empty_init = Type_hx_empty_init
class XmlType(_hx_c.Enum):
	def __init__(self, t, i, p):
		super(XmlType,self).__init__(t, i, p)

XmlType._hx_constructs = []
XmlType._hx_class = XmlType
XmlType._hx_class_name = "XmlType"
_hx_classes["XmlType"] = XmlType
_hx_c.XmlType = XmlType
XmlType._hx_meta = _hx_c._hx_AnonObject(obj=_hx_c._hx_AnonObject(),fields=_hx_c._hx_AnonObject())
# print Xml.Xml
class Xml:


	def __init__(self):
		self.nodeType = None
		self._nodeName = None
		self._nodeValue = None
		self._attributes = None
		self._children = None
		self._parent = None
		None
	
	# var nodeType
	# var nodeName
	# var nodeValue
	# var parent
	# var _nodeName
	# var _nodeValue
	# var _attributes
	# var _children
	# var _parent
	def get_nodeName(self):
		if self.nodeType != _hx_c.Xml.Element:
			raise _HxException("bad nodeType")
		
		return self._nodeName
	

	def set_nodeName(self,n):
		if self.nodeType != _hx_c.Xml.Element:
			raise _HxException("bad nodeType")
		
		def _hx_local_1():
			def _hx_local_0():
				self._nodeName = n
				return self._nodeName
			
			return _hx_local_0()
		
		return _hx_local_1()
	

	def get_nodeValue(self):
		if self.nodeType == _hx_c.Xml.Element or self.nodeType == _hx_c.Xml.Document:
			raise _HxException("bad nodeType")
		
		return self._nodeValue
	

	def set_nodeValue(self,v):
		if self.nodeType == _hx_c.Xml.Element or self.nodeType == _hx_c.Xml.Document:
			raise _HxException("bad nodeType")
		
		def _hx_local_1():
			def _hx_local_0():
				self._nodeValue = v
				return self._nodeValue
			
			return _hx_local_0()
		
		return _hx_local_1()
	

	def get_parent(self):
		return self._parent

	def get(self,att):
		if self.nodeType != _hx_c.Xml.Element:
			raise _HxException("bad nodeType")
		
		return self._attributes.get(att)
	

	def set(self,att,value):
		if self.nodeType != _hx_c.Xml.Element:
			raise _HxException("bad nodeType")
		
		self._attributes.set(att, value)
	

	def remove(self,att):
		if self.nodeType != _hx_c.Xml.Element:
			raise _HxException("bad nodeType")
		
		self._attributes.remove(att)
	

	def exists(self,att):
		if self.nodeType != _hx_c.Xml.Element:
			raise _HxException("bad nodeType")
		
		return self._attributes.exists(att)
	

	def attributes(self):
		if self.nodeType != _hx_c.Xml.Element:
			raise _HxException("bad nodeType")
		
		return self._attributes.keys()
	

	def iterator(self):
		if self._children is None:
			raise _HxException("bad nodetype")
		
		cur = 0
		x = self._children
		def _hx_local_5():
			def _hx_local_0():
				return cur < _hx_builtin.len(x)
			def _hx_local_4():
				def _hx_local_3():
					def _hx_local_2():
						nonlocal cur
						_hx_local_1 = cur
						cur = cur + 1
						return _hx_local_1
						
					
					return _hx_array_get(x,_hx_local_2())
				
				return _hx_local_3()
			
			return _hx_c._hx_AnonObject(hasNext = _hx_local_0 ,next = _hx_local_4 )
		
		return _hx_local_5()
	

	def elements(self):
		if self._children is None:
			raise _HxException("bad nodetype")
		
		cur = 0
		x = self._children
		def _hx_local_4():
			def _hx_local_1():
				nonlocal cur
				k = cur
				l = _hx_builtin.len(x)
				while k < l:
					if _hx_array_get(x,k).nodeType == _hx_c.Xml.Element:
						break
					
					k = k + 1
				
				cur = k
				return k < l
				
			
			def _hx_local_3():
				nonlocal cur
				k1 = cur
				l1 = _hx_builtin.len(x)
				while k1 < l1:
					n = _hx_array_get(x,k1)
					k1 = k1 + 1
					if n.nodeType == _hx_c.Xml.Element:
						cur = k1
						return n
					
					
				
				return None
				
			
			return _hx_c._hx_AnonObject(hasNext = _hx_local_1 ,next = _hx_local_3 )
		
		return _hx_local_4()
	

	def elementsNamed(self,name):
		if self._children is None:
			raise _HxException("bad nodetype")
		
		cur = 0
		x = self._children
		def _hx_local_4():
			def _hx_local_1():
				nonlocal cur
				k = cur
				l = _hx_builtin.len(x)
				while k < l:
					n = _hx_array_get(x,k)
					if n.nodeType == _hx_c.Xml.Element and n._nodeName == name:
						break
					
					k = k + 1
				
				cur = k
				return k < l
				
			
			def _hx_local_3():
				nonlocal cur
				k1 = cur
				l1 = _hx_builtin.len(x)
				while k1 < l1:
					n1 = _hx_array_get(x,k1)
					k1 = k1 + 1
					if n1.nodeType == _hx_c.Xml.Element and n1._nodeName == name:
						cur = k1
						return n1
					
					
				
				return None
				
			
			return _hx_c._hx_AnonObject(hasNext = _hx_local_1 ,next = _hx_local_3 )
		
		return _hx_local_4()
	

	def firstChild(self):
		if self._children is None:
			raise _HxException("bad nodetype")
		
		return _hx_array_get(self._children,0)
	

	def firstElement(self):
		if self._children is None:
			raise _HxException("bad nodetype")
		
		cur = 0
		l = _hx_builtin.len(self._children)
		while cur < l:
			n = _hx_array_get(self._children,cur)
			if n.nodeType == _hx_c.Xml.Element:
				return n
			
			cur = cur + 1
		
		return None
	

	def addChild(self,x):
		if self._children is None:
			raise _HxException("bad nodetype")
		
		if x._parent is not None:
			_hx_c.python_internal_ArrayImpl.remove(x._parent._children, x)
		
		x._parent = self
		_this = self._children
		_this.append(x)
		_hx_builtin.len(_this)
		
		
	

	def removeChild(self,x):
		if self._children is None:
			raise _HxException("bad nodetype")
		
		b = _hx_c.python_internal_ArrayImpl.remove(self._children, x)
		if b:
			x._parent = None
		
		return b
	

	def insertChild(self,x,pos):
		if self._children is None:
			raise _HxException("bad nodetype")
		
		if x._parent is not None:
			_hx_c.python_internal_ArrayImpl.remove(x._parent._children, x)
		
		x._parent = self
		self._children.insert(pos, x)
	

	def toString(self):
		if self.nodeType == _hx_c.Xml.PCData:
			return _hx_c.StringTools.htmlEscape(self._nodeValue)
		
		if self.nodeType == _hx_c.Xml.CData:
			return Std.string("<![CDATA[" + Std.string(self._nodeValue)) + "]]>"
		
		if self.nodeType == _hx_c.Xml.Comment:
			return Std.string("<!--" + Std.string(self._nodeValue)) + "-->"
		
		if self.nodeType == _hx_c.Xml.DocType:
			return Std.string("<!DOCTYPE " + Std.string(self._nodeValue)) + ">"
		
		if self.nodeType == _hx_c.Xml.ProcessingInstruction:
			return Std.string("<?" + Std.string(self._nodeValue)) + "?>"
		
		s = _hx_c.StringBuf()
		if self.nodeType == _hx_c.Xml.Element:
			s1 = _hx_c.Std.string("<")
			s.b.write(s1)
			
			s2 = _hx_c.Std.string(self._nodeName)
			s.b.write(s2)
			
			_it = self._attributes.keys()
			while _it.hasNext():
				k = _it.next()
				s3 = _hx_c.Std.string(" ")
				s.b.write(s3)
				
				s4 = _hx_c.Std.string(k)
				s.b.write(s4)
				
				s5 = _hx_c.Std.string("=\"")
				s.b.write(s5)
				
				x = self._attributes.get(k)
				s6 = _hx_c.Std.string(x)
				s.b.write(s6)
				
				
				s7 = _hx_c.Std.string("\"")
				s.b.write(s7)
				
			
			if _hx_builtin.len(self._children) == 0:
				s8 = _hx_c.Std.string("/>")
				s.b.write(s8)
				
				return s.b.getvalue()
			
			
			s9 = _hx_c.Std.string(">")
			s.b.write(s9)
			
		
		
		_it = self.iterator()
		while _it.hasNext():
			x1 = _it.next()
			x2 = x1.toString()
			s10 = _hx_c.Std.string(x2)
			s.b.write(s10)
			
		
		if self.nodeType == _hx_c.Xml.Element:
			s11 = _hx_c.Std.string("</")
			s.b.write(s11)
			
			s12 = _hx_c.Std.string(self._nodeName)
			s.b.write(s12)
			
			s13 = _hx_c.Std.string(">")
			s.b.write(s13)
			
		
		
		return s.b.getvalue()
	





Xml._hx_class = Xml
Xml._hx_class_name = "Xml"
_hx_classes["Xml"] = Xml
_hx_c.Xml = Xml
Xml._hx_fields = ["nodeType","_nodeName","_nodeValue","_attributes","_children","_parent"]
Xml._hx_props = ["nodeName","nodeValue","parent"]
Xml._hx_methods = ["get_nodeName","set_nodeName","get_nodeValue","set_nodeValue","get_parent","get","set","remove","exists","attributes","iterator","elements","elementsNamed","firstChild","firstElement","addChild","removeChild","insertChild","toString"]
Xml._hx_statics = ["Element","PCData","CData","Comment","DocType","ProcessingInstruction","Document","parse","createElement","createPCData","createCData","createComment","createDocType","createProcessingInstruction","createDocument"]
Xml._hx_interfaces = []
Xml._hx_meta = _hx_c._hx_AnonObject(obj=_hx_c._hx_AnonObject(),statics=_hx_c._hx_AnonObject(),fields=_hx_c._hx_AnonObject())
def Xml_hx_empty_init (_hx_o):
	_hx_o.nodeType = None
	_hx_o._nodeName = None
	_hx_o._nodeValue = None
	_hx_o._attributes = None
	_hx_o._children = None
	_hx_o._parent = None
Xml._hx_empty_init = Xml_hx_empty_init
class haxe_StackItem(_hx_c.Enum):
	def __init__(self, t, i, p):
		super(haxe_StackItem,self).__init__(t, i, p)

def _haxe_StackItem_statics_Module (m):
	return haxe_StackItem("Module", 1, [m])
haxe_StackItem.Module = _haxe_StackItem_statics_Module

def _haxe_StackItem_statics_FilePos (s,file,line):
	return haxe_StackItem("FilePos", 2, [s,file,line])
haxe_StackItem.FilePos = _haxe_StackItem_statics_FilePos

def _haxe_StackItem_statics_LocalFunction (v):
	return haxe_StackItem("LocalFunction", 4, [v])
haxe_StackItem.LocalFunction = _haxe_StackItem_statics_LocalFunction

haxe_StackItem.CFunction = haxe_StackItem("CFunction", 0, list())

def _haxe_StackItem_statics_Method (classname,method):
	return haxe_StackItem("Method", 3, [classname,method])
haxe_StackItem.Method = _haxe_StackItem_statics_Method

haxe_StackItem._hx_constructs = ["CFunction","Module","FilePos","Method","LocalFunction"]
haxe_StackItem._hx_class = haxe_StackItem
haxe_StackItem._hx_class_name = "haxe.StackItem"
_hx_classes["haxe.StackItem"] = haxe_StackItem
_hx_c.haxe_StackItem = haxe_StackItem
haxe_StackItem._hx_meta = _hx_c._hx_AnonObject(obj=_hx_c._hx_AnonObject(),fields=_hx_c._hx_AnonObject())
# print haxe.CallStack.CallStack
class haxe_CallStack:

	pass




haxe_CallStack._hx_class = haxe_CallStack
haxe_CallStack._hx_class_name = "haxe.CallStack"
_hx_classes["haxe.CallStack"] = haxe_CallStack
_hx_c.haxe_CallStack = haxe_CallStack
haxe_CallStack._hx_fields = []
haxe_CallStack._hx_props = []
haxe_CallStack._hx_methods = []
haxe_CallStack._hx_statics = ["callStack","exceptionStack","toString","itemToString","makeStack"]
haxe_CallStack._hx_interfaces = []
haxe_CallStack._hx_meta = _hx_c._hx_AnonObject(obj=_hx_c._hx_AnonObject(),statics=_hx_c._hx_AnonObject(),fields=_hx_c._hx_AnonObject())
def haxe_CallStack_hx_empty_init (_hx_o):
	pass
haxe_CallStack._hx_empty_init = haxe_CallStack_hx_empty_init
# print haxe.EnumFlags.EnumFlags_Impl_
class haxe_EnumFlags_EnumFlags_Impl_:

	pass




haxe_EnumFlags_EnumFlags_Impl_._hx_class = haxe_EnumFlags_EnumFlags_Impl_
haxe_EnumFlags_EnumFlags_Impl_._hx_class_name = "haxe._EnumFlags._EnumFlags.EnumFlags_Impl_"
_hx_classes["haxe._EnumFlags._EnumFlags.EnumFlags_Impl_"] = haxe_EnumFlags_EnumFlags_Impl_
_hx_c.haxe_EnumFlags_EnumFlags_Impl_ = haxe_EnumFlags_EnumFlags_Impl_
haxe_EnumFlags_EnumFlags_Impl_._hx_fields = []
haxe_EnumFlags_EnumFlags_Impl_._hx_props = []
haxe_EnumFlags_EnumFlags_Impl_._hx_methods = []
haxe_EnumFlags_EnumFlags_Impl_._hx_statics = ["_new","has","set","unset","ofInt","toInt"]
haxe_EnumFlags_EnumFlags_Impl_._hx_interfaces = []
haxe_EnumFlags_EnumFlags_Impl_._hx_meta = _hx_c._hx_AnonObject(obj=_hx_c._hx_AnonObject(),statics=_hx_c._hx_AnonObject(),fields=_hx_c._hx_AnonObject())
def haxe_EnumFlags_EnumFlags_Impl__hx_empty_init (_hx_o):
	pass
haxe_EnumFlags_EnumFlags_Impl_._hx_empty_init = haxe_EnumFlags_EnumFlags_Impl__hx_empty_init
# print haxe.EnumTools.EnumTools
# print haxe.EnumTools.EnumValueTools
# print haxe.Int32.Int32_Impl_
class haxe_Int32_Int32_Impl_:

	pass




haxe_Int32_Int32_Impl_._hx_class = haxe_Int32_Int32_Impl_
haxe_Int32_Int32_Impl_._hx_class_name = "haxe._Int32._Int32.Int32_Impl_"
_hx_classes["haxe._Int32._Int32.Int32_Impl_"] = haxe_Int32_Int32_Impl_
_hx_c.haxe_Int32_Int32_Impl_ = haxe_Int32_Int32_Impl_
haxe_Int32_Int32_Impl_._hx_fields = []
haxe_Int32_Int32_Impl_._hx_props = []
haxe_Int32_Int32_Impl_._hx_methods = []
haxe_Int32_Int32_Impl_._hx_statics = ["preIncrement","postIncrement","preDecrement","postDecrement","add","addInt","sub","subInt","mul","mulInt","shl","shlInt","toFloat","ucompare","clamp"]
haxe_Int32_Int32_Impl_._hx_interfaces = []
haxe_Int32_Int32_Impl_._hx_meta = _hx_c._hx_AnonObject(obj=_hx_c._hx_AnonObject(),statics=_hx_c._hx_AnonObject(),fields=_hx_c._hx_AnonObject())
def haxe_Int32_Int32_Impl__hx_empty_init (_hx_o):
	pass
haxe_Int32_Int32_Impl_._hx_empty_init = haxe_Int32_Int32_Impl__hx_empty_init
# print haxe.Int64.Int64
class haxe_Int64:


	def __init__(self,high,low):
		self.high = None
		self.low = None
		self.high = _hx_c.haxe_Int64.i32(high)
		self.low = _hx_c.haxe_Int64.i32(low)
		
	
	# var high
	# var low
	def toString(self):
		if (self.high | self.low) == 0:
			return "0"
		
		str = ""
		neg = False
		i = self
		if i.high < 0:
			neg = True
			high = _hx_c.haxe_Int64.i32(~i.high)
			low = _hx_c.haxe_Int64.i32(-i.low)
			if low == 0:
				high = high + 1
			
			i = _hx_c.haxe_Int64(high, low)
			
		
		
		ten = _hx_c.haxe_Int64(10 >> 31, 10)
		while not ((i.high | i.low) == 0):
			r = _hx_c.haxe_Int64.divMod(i, ten)
			str = Std.string(r.modulus.low) + Std.string(str)
			i = r.quotient
		
		if neg:
			str = "-" + Std.string(str)
		
		return str
	





haxe_Int64._hx_class = haxe_Int64
haxe_Int64._hx_class_name = "haxe.Int64"
_hx_classes["haxe.Int64"] = haxe_Int64
_hx_c.haxe_Int64 = haxe_Int64
haxe_Int64._hx_fields = ["high","low"]
haxe_Int64._hx_props = []
haxe_Int64._hx_methods = ["toString"]
haxe_Int64._hx_statics = ["ushr32","i32","make","ofInt","toInt","getLow","getHigh","add","sub","mul","divMod","div","mod","shl","shr","ushr","and","or","xor","neg","isNeg","isZero","uicompare","compare","ucompare","toStr"]
haxe_Int64._hx_interfaces = []
haxe_Int64._hx_meta = _hx_c._hx_AnonObject(obj=_hx_c._hx_AnonObject(),statics=_hx_c._hx_AnonObject(),fields=_hx_c._hx_AnonObject())
def haxe_Int64_hx_empty_init (_hx_o):
	_hx_o.high = None
	_hx_o.low = None
haxe_Int64._hx_empty_init = haxe_Int64_hx_empty_init
# print haxe.Json.Json
class haxe_Json:


	def __init__(self):
		self.buf = None
		self.str = None
		self.pos = None
		self.replacer = None
		None
	
	# var buf
	# var str
	# var pos
	# var replacer
	def toString(self,v,replacer = None):
		if replacer is None:
			replacer = None
		
		self.buf = _hx_c.StringBuf()
		self.replacer = replacer
		self.toStringRec("", v)
		return self.buf.b.getvalue()
	

	def fieldsString(self,v,fields):
		first = True
		s = None
		c = 123
		s = "".join(_hx_builtin.map(_hx_builtin.chr, [c]))
		
		self.buf.b.write(s)
		
		_g = 0
		while _g < _hx_builtin.len(fields):
			f = _hx_array_get(fields,_g)
			_g = _g + 1
			value = _hx_c.Reflect.field(v, f)
			if _hx_c.Reflect.isFunction(value):
				continue
			
			if first:
				first = False
			else:
				s1 = None
				c1 = 44
				s1 = "".join(_hx_builtin.map(_hx_builtin.chr, [c1]))
				
				self.buf.b.write(s1)
			
			self.quote(f)
			s2 = None
			c2 = 58
			s2 = "".join(_hx_builtin.map(_hx_builtin.chr, [c2]))
			
			self.buf.b.write(s2)
			
			self.toStringRec(f, value)
		
		
		s3 = None
		c3 = 125
		s3 = "".join(_hx_builtin.map(_hx_builtin.chr, [c3]))
		
		self.buf.b.write(s3)
		
	

	def objString(self,v):
		self.fieldsString(v, _hx_c.Reflect.fields(v))

	def toStringRec(self,k,v):
		if self.replacer is not None:
			v = self.replacer(k, v)
		
		_g = _hx_c.Type.typeof(v)
		if (_g.index) == 8:
			s = _hx_c.Std.string("\"???\"")
			self.buf.b.write(s)
		
		elif (_g.index) == 4:
			self.objString(v)
		elif (_g.index) == 1:
			v1 = v
			s1 = _hx_c.Std.string(v1)
			self.buf.b.write(s1)
			
		
		elif (_g.index) == 2:
			v2 = None
			def _hx_local_0():
				f = v
				return f != float("inf") and f != float("-inf") and not _hx_math.isnan(f)
			
			if _hx_local_0():
				v2 = v
			else:
				v2 = "null"
			s2 = _hx_c.Std.string(v2)
			self.buf.b.write(s2)
			
		
		elif (_g.index) == 5:
			s3 = _hx_c.Std.string("\"<fun>\"")
			self.buf.b.write(s3)
		
		elif (_g.index) == 6:
			c = _g.params[0]
			if c == _hx_c.String:
				self.quote(v)
			elif c == list:
				v3 = v
				s4 = None
				c1 = 91
				s4 = "".join(_hx_builtin.map(_hx_builtin.chr, [c1]))
				
				self.buf.b.write(s4)
				
				len = _hx_builtin.len(v3)
				if len > 0:
					self.toStringRec(0, _hx_array_get(v3,0))
					i = 1
					while i < len:
						s5 = None
						c2 = 44
						s5 = "".join(_hx_builtin.map(_hx_builtin.chr, [c2]))
						
						self.buf.b.write(s5)
						
						def _hx_local_2():
							nonlocal i
							_hx_local_1 = i
							i = i + 1
							return _hx_local_1
							
						
						self.toStringRec(i, _hx_array_get(v3,_hx_local_2()))
					
				
				
				s6 = None
				c3 = 93
				s6 = "".join(_hx_builtin.map(_hx_builtin.chr, [c3]))
				
				self.buf.b.write(s6)
				
			
			elif c == _hx_c.haxe_ds_StringMap:
				v4 = v
				o = _hx_c._hx_AnonObject()
				_it = v4.keys()
				while _it.hasNext():
					k1 = _it.next()
					value = v4.get(k1)
					field = None
					if _hx_c.python_internal_KeywordHandler.keywords.exists(k1):
						field = "_hx_" + Std.string(k1)
					else:
						field = k1
					_hx_builtin.setattr(o, field, value)
				
				self.objString(o)
			
			else:
				self.objString(v)
		
		elif (_g.index) == 7:
			i1 = None
			e = v
			i1 = e.index
			
			v5 = i1
			s7 = _hx_c.Std.string(v5)
			self.buf.b.write(s7)
			
			
		
		elif (_g.index) == 3:
			v6 = v
			s8 = _hx_c.Std.string(v6)
			self.buf.b.write(s8)
			
		
		elif (_g.index) == 0:
			s9 = _hx_c.Std.string("null")
			self.buf.b.write(s9)
		
		
		
	

	def quote(self,s):
		s1 = None
		c = 34
		s1 = "".join(_hx_builtin.map(_hx_builtin.chr, [c]))
		
		self.buf.b.write(s1)
		
		i = 0
		while True:
			c1 = None
			index = i
			i = i + 1
			
			if index >= _hx_builtin.len(s):
				c1 = -1
			else:
				c1 = ord(_hx_array_get(s,index))
			
			if c1 == -1:
				break
			
			if (c1) == 34:
				s2 = _hx_c.Std.string("\\\"")
				self.buf.b.write(s2)
			
			elif (c1) == 92:
				s3 = _hx_c.Std.string("\\\\")
				self.buf.b.write(s3)
			
			elif (c1) == 10:
				s4 = _hx_c.Std.string("\\n")
				self.buf.b.write(s4)
			
			elif (c1) == 13:
				s5 = _hx_c.Std.string("\\r")
				self.buf.b.write(s5)
			
			elif (c1) == 9:
				s6 = _hx_c.Std.string("\\t")
				self.buf.b.write(s6)
			
			elif (c1) == 8:
				s7 = _hx_c.Std.string("\\b")
				self.buf.b.write(s7)
			
			elif (c1) == 12:
				s8 = _hx_c.Std.string("\\f")
				self.buf.b.write(s8)
			
			else:
				s9 = None
				c2 = c1
				s9 = "".join(_hx_builtin.map(_hx_builtin.chr, [c2]))
				
				self.buf.b.write(s9)
			
		
		s10 = None
		c3 = 34
		s10 = "".join(_hx_builtin.map(_hx_builtin.chr, [c3]))
		
		self.buf.b.write(s10)
		
	

	def doParse(self,str):
		self.str = str
		self.pos = 0
		return self.parseRec()
	

	def invalidChar(self):
		self.pos = self.pos - 1
		def _hx_local_1():
			index = self.pos
			s = self.str
			return -1 if (index >= _hx_builtin.len(s)) else ord(_hx_array_get(s,index))
		
		raise _HxException(Std.string(Std.string("Invalid char " + Std.string(_hx_local_1())) + " at position ") + Std.string(self.pos))
	

	def nextChar(self):
		index = self.pos
		self.pos = self.pos + 1
		
		s = self.str
		if index >= _hx_builtin.len(s):
			return -1
		else:
			return ord(_hx_array_get(s,index))
	

	def parseRec(self):
		while True:
			c = None
			index = self.pos
			self.pos = self.pos + 1
			
			s = self.str
			if index >= _hx_builtin.len(s):
				c = -1
			else:
				c = ord(_hx_array_get(s,index))
			
			if (c) == 9 or (c) == 10 or (c) == 13 or (c) == 32:
				None
			elif (c) == 123:
				obj = _hx_c._hx_AnonObject()
				field = None
				comma = None
				while True:
					c1 = None
					index1 = self.pos
					self.pos = self.pos + 1
					
					s1 = self.str
					if index1 >= _hx_builtin.len(s1):
						c1 = -1
					else:
						c1 = ord(_hx_array_get(s1,index1))
					
					if (c1) == 9 or (c1) == 10 or (c1) == 13 or (c1) == 32:
						None
					elif (c1) == 125:
						if field is not None or comma == False:
							self.invalidChar()
						
						return obj
					
					elif (c1) == 58:
						if field is None:
							self.invalidChar()
						
						value = self.parseRec()
						field1 = None
						if _hx_c.python_internal_KeywordHandler.keywords.exists(field):
							field1 = "_hx_" + Std.string(field)
						else:
							field1 = field
						_hx_builtin.setattr(obj, field1, value)
						
						field = None
						comma = True
					
					elif (c1) == 44:
						if comma:
							comma = False
						else:
							self.invalidChar()
					elif (c1) == 34:
						if comma:
							self.invalidChar()
						
						field = self.parseString()
					
					else:
						self.invalidChar()
				
			
			elif (c) == 91:
				arr = []
				comma1 = None
				while True:
					c2 = None
					index2 = self.pos
					self.pos = self.pos + 1
					
					s2 = self.str
					if index2 >= _hx_builtin.len(s2):
						c2 = -1
					else:
						c2 = ord(_hx_array_get(s2,index2))
					
					if (c2) == 9 or (c2) == 10 or (c2) == 13 or (c2) == 32:
						None
					elif (c2) == 93:
						if comma1 == False:
							self.invalidChar()
						
						return arr
					
					elif (c2) == 44:
						if comma1:
							comma1 = False
						else:
							self.invalidChar()
					else:
						if comma1:
							self.invalidChar()
						
						self.pos = self.pos - 1
						x = self.parseRec()
						arr.append(x)
						_hx_builtin.len(arr)
						
						
						comma1 = True
					
				
			
			elif (c) == 116:
				save = self.pos
				def _hx_local_3():
					index3 = self.pos
					self.pos = self.pos + 1
					
					s3 = self.str
					return -1 if (index3 >= _hx_builtin.len(s3)) else ord(_hx_array_get(s3,index3))
				
				def _hx_local_2():
					index4 = self.pos
					self.pos = self.pos + 1
					
					s4 = self.str
					return -1 if (index4 >= _hx_builtin.len(s4)) else ord(_hx_array_get(s4,index4))
				
				def _hx_local_1():
					index5 = self.pos
					self.pos = self.pos + 1
					
					s5 = self.str
					return -1 if (index5 >= _hx_builtin.len(s5)) else ord(_hx_array_get(s5,index5))
				
				if _hx_local_3() != 114 or _hx_local_2() != 117 or _hx_local_1() != 101:
					self.pos = save
					self.invalidChar()
				
				
				return True
			
			elif (c) == 102:
				save1 = self.pos
				def _hx_local_7():
					index6 = self.pos
					self.pos = self.pos + 1
					
					s6 = self.str
					return -1 if (index6 >= _hx_builtin.len(s6)) else ord(_hx_array_get(s6,index6))
				
				def _hx_local_6():
					index7 = self.pos
					self.pos = self.pos + 1
					
					s7 = self.str
					return -1 if (index7 >= _hx_builtin.len(s7)) else ord(_hx_array_get(s7,index7))
				
				def _hx_local_5():
					index8 = self.pos
					self.pos = self.pos + 1
					
					s8 = self.str
					return -1 if (index8 >= _hx_builtin.len(s8)) else ord(_hx_array_get(s8,index8))
				
				def _hx_local_4():
					index9 = self.pos
					self.pos = self.pos + 1
					
					s9 = self.str
					return -1 if (index9 >= _hx_builtin.len(s9)) else ord(_hx_array_get(s9,index9))
				
				if _hx_local_7() != 97 or _hx_local_6() != 108 or _hx_local_5() != 115 or _hx_local_4() != 101:
					self.pos = save1
					self.invalidChar()
				
				
				return False
			
			elif (c) == 110:
				save2 = self.pos
				def _hx_local_10():
					index10 = self.pos
					self.pos = self.pos + 1
					
					s10 = self.str
					return -1 if (index10 >= _hx_builtin.len(s10)) else ord(_hx_array_get(s10,index10))
				
				def _hx_local_9():
					index11 = self.pos
					self.pos = self.pos + 1
					
					s11 = self.str
					return -1 if (index11 >= _hx_builtin.len(s11)) else ord(_hx_array_get(s11,index11))
				
				def _hx_local_8():
					index12 = self.pos
					self.pos = self.pos + 1
					
					s12 = self.str
					return -1 if (index12 >= _hx_builtin.len(s12)) else ord(_hx_array_get(s12,index12))
				
				if _hx_local_10() != 117 or _hx_local_9() != 108 or _hx_local_8() != 108:
					self.pos = save2
					self.invalidChar()
				
				
				return None
			
			elif (c) == 34:
				return self.parseString()
			elif (c) == 45 or (c) == 57 or (c) == 56 or (c) == 55 or (c) == 54 or (c) == 53 or (c) == 52 or (c) == 51 or (c) == 50 or (c) == 49 or (c) == 48:
				c3 = c
				start = self.pos - 1
				minus = c3 == 45
				digit = not minus
				zero = c3 == 48
				point = False
				e = False
				pm = False
				end = False
				while True:
					index13 = self.pos
					self.pos = self.pos + 1
					
					s13 = self.str
					if index13 >= _hx_builtin.len(s13):
						c3 = -1
					else:
						c3 = ord(_hx_array_get(s13,index13))
					
					if (c3) == 48:
						if zero and not point:
							self.invalidNumber(start)
						
						if minus:
							minus = False
							zero = True
						
						
						digit = True
					
					elif (c3) == 57 or (c3) == 56 or (c3) == 55 or (c3) == 54 or (c3) == 53 or (c3) == 52 or (c3) == 51 or (c3) == 50 or (c3) == 49:
						if zero and not point:
							self.invalidNumber(start)
						
						if minus:
							minus = False
						
						digit = True
						zero = False
					
					elif (c3) == 46:
						if minus or point:
							self.invalidNumber(start)
						
						digit = False
						point = True
					
					elif (c3) == 69 or (c3) == 101:
						if minus or zero or e:
							self.invalidNumber(start)
						
						digit = False
						e = True
					
					elif (c3) == 45 or (c3) == 43:
						if not e or pm:
							self.invalidNumber(start)
						
						digit = False
						pm = True
					
					else:
						if not digit:
							self.invalidNumber(start)
						
						self.pos = self.pos - 1
						end = True
					
					if end:
						break
					
				
				f = _hx_c.Std.parseFloat(_hx_c.python_Tools.substr(self.str, start, self.pos - start))
				i = None
				try:
					i = int(f)
				except Exception as _hx_e:
					_hx_e1 = _hx_e.val if isinstance(_hx_e, _HxException) else _hx_e
					if True:
						e1 = _hx_e1
						i = None
					else:
						raise _hx_e
				if i == f:
					return i
				else:
					return f
			
			else:
				self.invalidChar()
	

	def parseString(self):
		start = self.pos
		buf = _hx_c.StringBuf()
		while True:
			c = None
			index = self.pos
			self.pos = self.pos + 1
			
			s = self.str
			if index >= _hx_builtin.len(s):
				c = -1
			else:
				c = ord(_hx_array_get(s,index))
			
			if c == 34:
				break
			
			if c == 92:
				len = self.pos - start - 1
				s1 = self.str
				s2 = None
				if len is None:
					s2 = _hx_c.python_Tools.substr(s1, start, None)
				else:
					s2 = _hx_c.python_Tools.substr(s1, start, len)
				buf.b.write(s2)
				
				
				index1 = self.pos
				self.pos = self.pos + 1
				
				s3 = self.str
				if index1 >= _hx_builtin.len(s3):
					c = -1
				else:
					c = ord(_hx_array_get(s3,index1))
				
				if (c) == 114:
					s4 = None
					c1 = 13
					s4 = "".join(_hx_builtin.map(_hx_builtin.chr, [c1]))
					
					buf.b.write(s4)
				
				elif (c) == 110:
					s5 = None
					c2 = 10
					s5 = "".join(_hx_builtin.map(_hx_builtin.chr, [c2]))
					
					buf.b.write(s5)
				
				elif (c) == 116:
					s6 = None
					c3 = 9
					s6 = "".join(_hx_builtin.map(_hx_builtin.chr, [c3]))
					
					buf.b.write(s6)
				
				elif (c) == 98:
					s7 = None
					c4 = 8
					s7 = "".join(_hx_builtin.map(_hx_builtin.chr, [c4]))
					
					buf.b.write(s7)
				
				elif (c) == 102:
					s8 = None
					c5 = 12
					s8 = "".join(_hx_builtin.map(_hx_builtin.chr, [c5]))
					
					buf.b.write(s8)
				
				elif (c) == 34 or (c) == 92 or (c) == 47:
					s9 = None
					c6 = c
					s9 = "".join(_hx_builtin.map(_hx_builtin.chr, [c6]))
					
					buf.b.write(s9)
				
				elif (c) == 117:
					uc = _hx_c.Std.parseInt("0x" + Std.string(_hx_c.python_Tools.substr(self.str, self.pos, 4)))
					self.pos = self.pos + 4
					s10 = None
					c7 = uc
					s10 = "".join(_hx_builtin.map(_hx_builtin.chr, [c7]))
					
					buf.b.write(s10)
					
				
				else:
					def _hx_local_1():
						c8 = c
						return "".join(_hx_builtin.map(_hx_builtin.chr, [c8]))
					
					raise _HxException(Std.string(Std.string("Invalid escape sequence \\" + Std.string(_hx_local_1())) + " at position ") + Std.string((self.pos - 1)))
				
				start = self.pos
			
			elif c == -1:
				raise _HxException("Unclosed string")
			
		
		len1 = self.pos - start - 1
		s11 = self.str
		s12 = None
		if len1 is None:
			s12 = _hx_c.python_Tools.substr(s11, start, None)
		else:
			s12 = _hx_c.python_Tools.substr(s11, start, len1)
		buf.b.write(s12)
		
		
		return buf.b.getvalue()
	

	def invalidNumber(self,start):
		raise _HxException(Std.string(Std.string("Invalid number at position " + Std.string(start)) + ": ") + Std.string(_hx_c.python_Tools.substr(self.str, start, self.pos - start)))

	def parseNumber(self,c):
		start = self.pos - 1
		minus = c == 45
		digit = not minus
		zero = c == 48
		point = False
		e = False
		pm = False
		end = False
		while True:
			index = self.pos
			self.pos = self.pos + 1
			
			s = self.str
			if index >= _hx_builtin.len(s):
				c = -1
			else:
				c = ord(_hx_array_get(s,index))
			
			if (c) == 48:
				if zero and not point:
					self.invalidNumber(start)
				
				if minus:
					minus = False
					zero = True
				
				
				digit = True
			
			elif (c) == 57 or (c) == 56 or (c) == 55 or (c) == 54 or (c) == 53 or (c) == 52 or (c) == 51 or (c) == 50 or (c) == 49:
				if zero and not point:
					self.invalidNumber(start)
				
				if minus:
					minus = False
				
				digit = True
				zero = False
			
			elif (c) == 46:
				if minus or point:
					self.invalidNumber(start)
				
				digit = False
				point = True
			
			elif (c) == 69 or (c) == 101:
				if minus or zero or e:
					self.invalidNumber(start)
				
				digit = False
				e = True
			
			elif (c) == 45 or (c) == 43:
				if not e or pm:
					self.invalidNumber(start)
				
				digit = False
				pm = True
			
			else:
				if not digit:
					self.invalidNumber(start)
				
				self.pos = self.pos - 1
				end = True
			
			if end:
				break
			
		
		f = _hx_c.Std.parseFloat(_hx_c.python_Tools.substr(self.str, start, self.pos - start))
		i = None
		try:
			i = int(f)
		except Exception as _hx_e:
			_hx_e1 = _hx_e.val if isinstance(_hx_e, _HxException) else _hx_e
			if True:
				e1 = _hx_e1
				i = None
			else:
				raise _hx_e
		if i == f:
			return i
		else:
			return f
	





haxe_Json._hx_class = haxe_Json
haxe_Json._hx_class_name = "haxe.Json"
_hx_classes["haxe.Json"] = haxe_Json
_hx_c.haxe_Json = haxe_Json
haxe_Json._hx_fields = ["buf","str","pos","replacer"]
haxe_Json._hx_props = []
haxe_Json._hx_methods = ["toString","fieldsString","objString","toStringRec","quote","doParse","invalidChar","nextChar","parseRec","parseString","invalidNumber","parseNumber"]
haxe_Json._hx_statics = ["parse","stringify"]
haxe_Json._hx_interfaces = []
haxe_Json._hx_meta = _hx_c._hx_AnonObject(obj=_hx_c._hx_AnonObject(),statics=_hx_c._hx_AnonObject(),fields=_hx_c._hx_AnonObject())
def haxe_Json_hx_empty_init (_hx_o):
	_hx_o.buf = None
	_hx_o.str = None
	_hx_o.pos = None
	_hx_o.replacer = None
haxe_Json._hx_empty_init = haxe_Json_hx_empty_init
# print haxe.Log.Log
class haxe_Log:

	pass




haxe_Log._hx_class = haxe_Log
haxe_Log._hx_class_name = "haxe.Log"
_hx_classes["haxe.Log"] = haxe_Log
_hx_c.haxe_Log = haxe_Log
haxe_Log._hx_fields = []
haxe_Log._hx_props = []
haxe_Log._hx_methods = []
haxe_Log._hx_statics = ["trace","clear"]
haxe_Log._hx_interfaces = []
haxe_Log._hx_meta = _hx_c._hx_AnonObject(obj=_hx_c._hx_AnonObject(),statics=_hx_c._hx_AnonObject(),fields=_hx_c._hx_AnonObject())
def haxe_Log_hx_empty_init (_hx_o):
	pass
haxe_Log._hx_empty_init = haxe_Log_hx_empty_init
# print haxe.Resource.Resource
class haxe_Resource:

	pass




haxe_Resource._hx_class = haxe_Resource
haxe_Resource._hx_class_name = "haxe.Resource"
_hx_classes["haxe.Resource"] = haxe_Resource
_hx_c.haxe_Resource = haxe_Resource
haxe_Resource._hx_fields = []
haxe_Resource._hx_props = []
haxe_Resource._hx_methods = []
haxe_Resource._hx_statics = ["content","listNames","getString","getBytes"]
haxe_Resource._hx_interfaces = []
haxe_Resource._hx_meta = _hx_c._hx_AnonObject(obj=_hx_c._hx_AnonObject(),statics=_hx_c._hx_AnonObject(),fields=_hx_c._hx_AnonObject())
def haxe_Resource_hx_empty_init (_hx_o):
	pass
haxe_Resource._hx_empty_init = haxe_Resource_hx_empty_init
# print haxe.Serializer.Serializer
class haxe_Serializer:


	def __init__(self):
		self.buf = None
		self.cache = None
		self.shash = None
		self.scount = None
		self.useCache = None
		self.useEnumIndex = None
		self.buf = _hx_c.StringBuf()
		self.cache = list()
		self.useCache = _hx_c.haxe_Serializer.USE_CACHE
		self.useEnumIndex = _hx_c.haxe_Serializer.USE_ENUM_INDEX
		self.shash = _hx_c.haxe_ds_StringMap()
		self.scount = 0
		
	
	# var buf
	# var cache
	# var shash
	# var scount
	# var useCache
	# var useEnumIndex
	def toString(self):
		return self.buf.b.getvalue()

	def serializeString(self,s):
		x = self.shash.get(s)
		if x is not None:
			s1 = _hx_c.Std.string("R")
			self.buf.b.write(s1)
			
			s2 = _hx_c.Std.string(x)
			self.buf.b.write(s2)
			
			return
		
		
		def _hx_local_1():
			_hx_local_0 = self.scount
			self.scount = self.scount + 1
			return _hx_local_0
		
		self.shash.set(s, _hx_local_1())
		s3 = _hx_c.Std.string("y")
		self.buf.b.write(s3)
		
		s = _hx_c.StringTools.urlEncode(s)
		x1 = _hx_builtin.len(s)
		s4 = _hx_c.Std.string(x1)
		self.buf.b.write(s4)
		
		
		s5 = _hx_c.Std.string(":")
		self.buf.b.write(s5)
		
		s6 = _hx_c.Std.string(s)
		self.buf.b.write(s6)
		
	

	def serializeRef(self,v):
		_g1 = 0
		_g = _hx_builtin.len(self.cache)
		while _g1 < _g:
			i = _g1
			_g1 = _g1 + 1
			
			if _hx_array_get(self.cache,i) == v:
				s = _hx_c.Std.string("r")
				self.buf.b.write(s)
				
				s1 = _hx_c.Std.string(i)
				self.buf.b.write(s1)
				
				return True
			
			
		
		
		_this = self.cache
		_this.append(v)
		_hx_builtin.len(_this)
		
		
		return False
	

	def serializeFields(self,v):
		_g = 0
		_g1 = _hx_c.Reflect.fields(v)
		while _g < _hx_builtin.len(_g1):
			f = _hx_array_get(_g1,_g)
			_g = _g + 1
			self.serializeString(f)
			self.serialize(_hx_c.Reflect.field(v, f))
		
		
		s = _hx_c.Std.string("g")
		self.buf.b.write(s)
		
	

	def serialize(self,v):
		_g = _hx_c.Type.typeof(v)
		if (_g.index) == 0:
			s = _hx_c.Std.string("n")
			self.buf.b.write(s)
		
		elif (_g.index) == 1:
			if v == 0:
				s1 = _hx_c.Std.string("z")
				self.buf.b.write(s1)
				
				return
			
			
			s2 = _hx_c.Std.string("i")
			self.buf.b.write(s2)
			
			s3 = _hx_c.Std.string(v)
			self.buf.b.write(s3)
			
		
		elif (_g.index) == 2:
			def _hx_local_0():
				f = v
				return _hx_math.isnan(f)
			
			if _hx_local_0():
				s4 = _hx_c.Std.string("k")
				self.buf.b.write(s4)
			
			else:
				def _hx_local_1():
					f1 = v
					return f1 != float("inf") and f1 != float("-inf") and not _hx_math.isnan(f1)
				
				if not _hx_local_1():
					s5 = _hx_c.Std.string("m" if (v < 0) else "p")
					self.buf.b.write(s5)
				
				else:
					s6 = _hx_c.Std.string("d")
					self.buf.b.write(s6)
					
					s7 = _hx_c.Std.string(v)
					self.buf.b.write(s7)
					
				
			
		
		elif (_g.index) == 3:
			s8 = _hx_c.Std.string("t" if (v) else "f")
			self.buf.b.write(s8)
		
		elif (_g.index) == 6:
			c = _g.params[0]
			if c == _hx_c.String:
				self.serializeString(v)
				return
			
			
			if self.useCache and self.serializeRef(v):
				return
			
			_g1 = _hx_c.Type.getClassName(c)
			if (_g1) == "Array":
				ucount = 0
				s9 = _hx_c.Std.string("a")
				self.buf.b.write(s9)
				
				v1 = v
				l = _hx_builtin.len(v1)
				_g2 = 0
				while _g2 < l:
					i = _g2
					_g2 = _g2 + 1
					
					if _hx_array_get(v1,i) is None:
						ucount = ucount + 1
					else:
						if ucount > 0:
							if ucount == 1:
								s10 = _hx_c.Std.string("n")
								self.buf.b.write(s10)
							
							else:
								s11 = _hx_c.Std.string("u")
								self.buf.b.write(s11)
								
								s12 = _hx_c.Std.string(ucount)
								self.buf.b.write(s12)
								
							
							ucount = 0
						
						
						self.serialize(_hx_array_get(v1,i))
					
				
				
				if ucount > 0:
					if ucount == 1:
						s13 = _hx_c.Std.string("n")
						self.buf.b.write(s13)
				
					else:
						s14 = _hx_c.Std.string("u")
						self.buf.b.write(s14)
						
						s15 = _hx_c.Std.string(ucount)
						self.buf.b.write(s15)
						
				
				
				s16 = _hx_c.Std.string("h")
				self.buf.b.write(s16)
				
			
			elif (_g1) == "List":
				s17 = _hx_c.Std.string("l")
				self.buf.b.write(s17)
				
				v2 = v
				_it = v2.iterator()
				while _it.hasNext():
					i1 = _it.next()
					self.serialize(i1)
				s18 = _hx_c.Std.string("h")
				self.buf.b.write(s18)
				
			
			elif (_g1) == "Date":
				d = v
				s19 = _hx_c.Std.string("v")
				self.buf.b.write(s19)
				
				x = d.toString()
				s20 = _hx_c.Std.string(x)
				self.buf.b.write(s20)
				
				
			
			elif (_g1) == "haxe.ds.StringMap":
				s21 = _hx_c.Std.string("b")
				self.buf.b.write(s21)
				
				v3 = v
				_it = v3.keys()
				while _it.hasNext():
					k = _it.next()
					self.serializeString(k)
					self.serialize(v3.get(k))
				
				s22 = _hx_c.Std.string("h")
				self.buf.b.write(s22)
				
			
			elif (_g1) == "haxe.ds.IntMap":
				s23 = _hx_c.Std.string("q")
				self.buf.b.write(s23)
				
				v4 = v
				_it = v4.keys()
				while _it.hasNext():
					k1 = _it.next()
					s24 = _hx_c.Std.string(":")
					self.buf.b.write(s24)
					
					s25 = _hx_c.Std.string(k1)
					self.buf.b.write(s25)
					
					self.serialize(v4.h.get(k1, None))
				
				s26 = _hx_c.Std.string("h")
				self.buf.b.write(s26)
				
			
			elif (_g1) == "haxe.ds.ObjectMap":
				s27 = _hx_c.Std.string("M")
				self.buf.b.write(s27)
				
				v5 = v
				_it = v5.keys()
				while _it.hasNext():
					k2 = _it.next()
					id = _hx_c.Reflect.field(k2, "__id__")
					_hx_c.Reflect.deleteField(k2, "__id__")
					self.serialize(k2)
					field = None
					if _hx_c.python_internal_KeywordHandler.keywords.exists("__id__"):
						field = "_hx_" + "__id__"
					else:
						field = "__id__"
					_hx_builtin.setattr(k2, field, id)
					
					self.serialize(v5.h.get(k2, None))
				
				s28 = _hx_c.Std.string("h")
				self.buf.b.write(s28)
				
			
			elif (_g1) == "haxe.io.Bytes":
				v6 = v
				i2 = 0
				max = v6.length - 2
				charsBuf = _hx_c.StringBuf()
				b64 = _hx_c.haxe_Serializer.BASE64
				while i2 < max:
					b1 = None
					pos = i2
					i2 = i2 + 1
					
					b1 = _hx_array_get(v6.b,pos)
					
					b2 = None
					pos1 = i2
					i2 = i2 + 1
					
					b2 = _hx_array_get(v6.b,pos1)
					
					b3 = None
					pos2 = i2
					i2 = i2 + 1
					
					b3 = _hx_array_get(v6.b,pos2)
					
					x1 = None
					index = b1 >> 2
					if index < 0 or index >= _hx_builtin.len(b64):
						x1 = ""
					else:
						x1 = b64[index]
					
					s29 = _hx_c.Std.string(x1)
					charsBuf.b.write(s29)
					
					
					x2 = None
					index1 = (b1 << 4 | b2 >> 4) & 63
					if index1 < 0 or index1 >= _hx_builtin.len(b64):
						x2 = ""
					else:
						x2 = b64[index1]
					
					s30 = _hx_c.Std.string(x2)
					charsBuf.b.write(s30)
					
					
					x3 = None
					index2 = (b2 << 2 | b3 >> 6) & 63
					if index2 < 0 or index2 >= _hx_builtin.len(b64):
						x3 = ""
					else:
						x3 = b64[index2]
					
					s31 = _hx_c.Std.string(x3)
					charsBuf.b.write(s31)
					
					
					x4 = None
					index3 = b3 & 63
					if index3 < 0 or index3 >= _hx_builtin.len(b64):
						x4 = ""
					else:
						x4 = b64[index3]
					
					s32 = _hx_c.Std.string(x4)
					charsBuf.b.write(s32)
					
					
				
				if i2 == max:
					b11 = None
					pos3 = i2
					i2 = i2 + 1
					
					b11 = _hx_array_get(v6.b,pos3)
					
					b21 = None
					pos4 = i2
					i2 = i2 + 1
					
					b21 = _hx_array_get(v6.b,pos4)
					
					x5 = None
					index4 = b11 >> 2
					if index4 < 0 or index4 >= _hx_builtin.len(b64):
						x5 = ""
					else:
						x5 = b64[index4]
					
					s33 = _hx_c.Std.string(x5)
					charsBuf.b.write(s33)
					
					
					x6 = None
					index5 = (b11 << 4 | b21 >> 4) & 63
					if index5 < 0 or index5 >= _hx_builtin.len(b64):
						x6 = ""
					else:
						x6 = b64[index5]
					
					s34 = _hx_c.Std.string(x6)
					charsBuf.b.write(s34)
					
					
					x7 = None
					index6 = b21 << 2 & 63
					if index6 < 0 or index6 >= _hx_builtin.len(b64):
						x7 = ""
					else:
						x7 = b64[index6]
					
					s35 = _hx_c.Std.string(x7)
					charsBuf.b.write(s35)
					
					
				
				elif i2 == max + 1:
					b12 = None
					pos5 = i2
					i2 = i2 + 1
					
					b12 = _hx_array_get(v6.b,pos5)
					
					x8 = None
					index7 = b12 >> 2
					if index7 < 0 or index7 >= _hx_builtin.len(b64):
						x8 = ""
					else:
						x8 = b64[index7]
					
					s36 = _hx_c.Std.string(x8)
					charsBuf.b.write(s36)
					
					
					x9 = None
					index8 = b12 << 4 & 63
					if index8 < 0 or index8 >= _hx_builtin.len(b64):
						x9 = ""
					else:
						x9 = b64[index8]
					
					s37 = _hx_c.Std.string(x9)
					charsBuf.b.write(s37)
					
					
				
				
				chars = charsBuf.b.getvalue()
				s38 = _hx_c.Std.string("s")
				self.buf.b.write(s38)
				
				x10 = _hx_builtin.len(chars)
				s39 = _hx_c.Std.string(x10)
				self.buf.b.write(s39)
				
				
				s40 = _hx_c.Std.string(":")
				self.buf.b.write(s40)
				
				s41 = _hx_c.Std.string(chars)
				self.buf.b.write(s41)
				
			
			else:
				_this = self.cache
				if _hx_builtin.len(_this) == 0:
					None
				else:
					_this.pop()
				
				if _hx_c.Reflect.hasField(v, "hxSerialize"):
					s42 = _hx_c.Std.string("C")
					self.buf.b.write(s42)
					
					self.serializeString(_hx_c.Type.getClassName(c))
					x11 = v
					_this1 = self.cache
					_this1.append(x11)
					_hx_builtin.len(_this1)
					
					
					v.hxSerialize(self)
					s43 = _hx_c.Std.string("g")
					self.buf.b.write(s43)
					
				
				else:
					s44 = _hx_c.Std.string("c")
					self.buf.b.write(s44)
					
					self.serializeString(_hx_c.Type.getClassName(c))
					x12 = v
					_this2 = self.cache
					_this2.append(x12)
					_hx_builtin.len(_this2)
					
					
					self.serializeFields(v)
				
			
			
			
		
		elif (_g.index) == 4:
			if self.useCache and self.serializeRef(v):
				return
			
			s45 = _hx_c.Std.string("o")
			self.buf.b.write(s45)
			
			self.serializeFields(v)
		
		elif (_g.index) == 7:
			e = _g.params[0]
			if self.useCache and self.serializeRef(v):
				return
			
			_this3 = self.cache
			if _hx_builtin.len(_this3) == 0:
				None
			else:
				_this3.pop()
			
			s46 = _hx_c.Std.string("j" if (self.useEnumIndex) else "w")
			self.buf.b.write(s46)
			
			self.serializeString(_hx_c.Type.getEnumName(e))
			if self.useEnumIndex:
				s47 = _hx_c.Std.string(":")
				self.buf.b.write(s47)
				
				def _hx_local_3():
					e1 = v
					return e1.index
				
				s48 = _hx_c.Std.string(_hx_local_3())
				self.buf.b.write(s48)
				
			
			else:
				def _hx_local_4():
					e2 = v
					return e2.tag
				
				self.serializeString(_hx_local_4())
			
			s49 = _hx_c.Std.string(":")
			self.buf.b.write(s49)
			
			arr = None
			e3 = v
			arr = e3.params
			
			if arr is not None:
				x13 = _hx_builtin.len(arr)
				s50 = _hx_c.Std.string(x13)
				self.buf.b.write(s50)
				
				
				_g11 = 0
				while _g11 < _hx_builtin.len(arr):
					v7 = _hx_array_get(arr,_g11)
					_g11 = _g11 + 1
					self.serialize(v7)
				
				
			
			else:
				s51 = _hx_c.Std.string("0")
				self.buf.b.write(s51)
			
			x14 = v
			_this4 = self.cache
			_this4.append(x14)
			_hx_builtin.len(_this4)
			
			
			
		
		elif (_g.index) == 5:
			raise _HxException("Cannot serialize function")
		else:
			raise _HxException("Cannot serialize " + Std.string(_hx_c.Std.string(v)))
	

	def serializeException(self,e):
		s = _hx_c.Std.string("x")
		self.buf.b.write(s)
		
		self.serialize(e)
	





haxe_Serializer._hx_class = haxe_Serializer
haxe_Serializer._hx_class_name = "haxe.Serializer"
_hx_classes["haxe.Serializer"] = haxe_Serializer
_hx_c.haxe_Serializer = haxe_Serializer
haxe_Serializer._hx_fields = ["buf","cache","shash","scount","useCache","useEnumIndex"]
haxe_Serializer._hx_props = []
haxe_Serializer._hx_methods = ["toString","serializeString","serializeRef","serializeFields","serialize","serializeException"]
haxe_Serializer._hx_statics = ["USE_CACHE","USE_ENUM_INDEX","BASE64","run"]
haxe_Serializer._hx_interfaces = []
haxe_Serializer._hx_meta = _hx_c._hx_AnonObject(obj=_hx_c._hx_AnonObject(),statics=_hx_c._hx_AnonObject(),fields=_hx_c._hx_AnonObject())
def haxe_Serializer_hx_empty_init (_hx_o):
	_hx_o.buf = None
	_hx_o.cache = None
	_hx_o.shash = None
	_hx_o.scount = None
	_hx_o.useCache = None
	_hx_o.useEnumIndex = None
haxe_Serializer._hx_empty_init = haxe_Serializer_hx_empty_init
class haxe_Template_TemplateExpr(_hx_c.Enum):
	def __init__(self, t, i, p):
		super(haxe_Template_TemplateExpr,self).__init__(t, i, p)

def _haxe_Template_TemplateExpr_statics_OpMacro (name,params):
	return haxe_Template_TemplateExpr("OpMacro", 6, [name,params])
haxe_Template_TemplateExpr.OpMacro = _haxe_Template_TemplateExpr_statics_OpMacro

def _haxe_Template_TemplateExpr_statics_OpVar (v):
	return haxe_Template_TemplateExpr("OpVar", 0, [v])
haxe_Template_TemplateExpr.OpVar = _haxe_Template_TemplateExpr_statics_OpVar

def _haxe_Template_TemplateExpr_statics_OpStr (str):
	return haxe_Template_TemplateExpr("OpStr", 3, [str])
haxe_Template_TemplateExpr.OpStr = _haxe_Template_TemplateExpr_statics_OpStr

def _haxe_Template_TemplateExpr_statics_OpBlock (l):
	return haxe_Template_TemplateExpr("OpBlock", 4, [l])
haxe_Template_TemplateExpr.OpBlock = _haxe_Template_TemplateExpr_statics_OpBlock

def _haxe_Template_TemplateExpr_statics_OpForeach (expr,loop):
	return haxe_Template_TemplateExpr("OpForeach", 5, [expr,loop])
haxe_Template_TemplateExpr.OpForeach = _haxe_Template_TemplateExpr_statics_OpForeach

def _haxe_Template_TemplateExpr_statics_OpExpr (expr):
	return haxe_Template_TemplateExpr("OpExpr", 1, [expr])
haxe_Template_TemplateExpr.OpExpr = _haxe_Template_TemplateExpr_statics_OpExpr

def _haxe_Template_TemplateExpr_statics_OpIf (expr,eif,eelse):
	return haxe_Template_TemplateExpr("OpIf", 2, [expr,eif,eelse])
haxe_Template_TemplateExpr.OpIf = _haxe_Template_TemplateExpr_statics_OpIf

haxe_Template_TemplateExpr._hx_constructs = ["OpVar","OpExpr","OpIf","OpStr","OpBlock","OpForeach","OpMacro"]
haxe_Template_TemplateExpr._hx_class = haxe_Template_TemplateExpr
haxe_Template_TemplateExpr._hx_class_name = "haxe._Template._Template.TemplateExpr"
_hx_classes["haxe._Template._Template.TemplateExpr"] = haxe_Template_TemplateExpr
_hx_c.haxe_Template_TemplateExpr = haxe_Template_TemplateExpr
haxe_Template_TemplateExpr._hx_meta = _hx_c._hx_AnonObject(obj=_hx_c._hx_AnonObject(),fields=_hx_c._hx_AnonObject())
# print python.lib.Builtin._hx_builtin
# print python.lib.Re.Re
# print haxe.Template.Template
class haxe_Template:


	def __init__(self,str):
		self.expr = None
		self.context = None
		self.macros = None
		self.stack = None
		self.buf = None
		tokens = self.parseTokens(str)
		self.expr = self.parseBlock(tokens)
		if not tokens.isEmpty():
			raise _HxException(Std.string("Unexpected '" + Std.string(_hx_c.Std.string(tokens.first().s))) + "'")
		
		
	
	# var expr
	# var context
	# var macros
	# var stack
	# var buf
	def execute(self,context,macros = None):
		if macros is None:
			macros = None
		
		if macros is None:
			self.macros = _hx_c._hx_AnonObject()
		else:
			self.macros = macros
		self.context = context
		self.stack = _hx_c.List()
		self.buf = _hx_c.StringBuf()
		self.run(self.expr)
		return self.buf.b.getvalue()
	

	def resolve(self,v):
		if _hx_c.Reflect.hasField(self.context, v):
			return _hx_c.Reflect.field(self.context, v)
		
		_it = self.stack.iterator()
		while _it.hasNext():
			ctx = _it.next()
			if _hx_c.Reflect.hasField(ctx, v):
				return _hx_c.Reflect.field(ctx, v)
			
		if v == "__current__":
			return self.context
		
		return _hx_c.Reflect.field(_hx_c.haxe_Template.globals, v)
	

	def parseTokens(self,data):
		tokens = _hx_c.List()
		while _hx_c.haxe_Template.splitter.match(data):
			p = _hx_c.haxe_Template.splitter.matchedPos()
			if p.pos > 0:
				tokens.add(_hx_c._hx_AnonObject(p = _hx_c.python_Tools.substr(data, 0, p.pos) ,s = True ,l = None ))
			
			if _hx_c.python_internal_StringImpl.charCodeAt(data, p.pos) == 58:
				tokens.add(_hx_c._hx_AnonObject(p = _hx_c.python_Tools.substr(data, p.pos + 2, p.len - 4) ,s = False ,l = None ))
				data = _hx_c.haxe_Template.splitter.matchedRight()
				continue
			
			
			parp = p.pos + p.len
			npar = 1
			while npar > 0:
				c = _hx_c.python_internal_StringImpl.charCodeAt(data, parp)
				if c == 40:
					npar = npar + 1
				elif c == 41:
					npar = npar - 1
				elif c is None:
					raise _HxException("Unclosed macro parenthesis")
				
				parp = parp + 1
			
			params = None
			_this = _hx_c.python_Tools.substr(data, p.pos + p.len, parp - (p.pos + p.len) - 1)
			params = _hx_c.python_internal_StringImpl.split(_this, ",")
			
			tokens.add(_hx_c._hx_AnonObject(p = _hx_c.haxe_Template.splitter.matched(2) ,s = False ,l = params ))
			len = _hx_builtin.len(data) - parp
			data = _hx_c.python_Tools.substr(data, parp, len)
			
		
		if _hx_builtin.len(data) > 0:
			tokens.add(_hx_c._hx_AnonObject(p = data ,s = True ,l = None ))
		
		return tokens
	

	def parseBlock(self,tokens):
		l = _hx_c.List()
		while True:
			t = tokens.first()
			if t is None:
				break
			
			if not t.s and (t.p == "end" or t.p == "else" or _hx_c.python_Tools.substr(t.p, 0, 7) == "elseif "):
				break
			
			l.add(self.parse(tokens))
		
		if l.length == 1:
			return l.first()
		
		return _hx_c.haxe_Template_TemplateExpr.OpBlock(l)
	

	def parse(self,tokens):
		t = tokens.pop()
		p = t.p
		if t.s:
			return _hx_c.haxe_Template_TemplateExpr.OpStr(p)
		
		if t.l is not None:
			pe = _hx_c.List()
			_g = 0
			_g1 = t.l
			while _g < _hx_builtin.len(_g1):
				p1 = _hx_array_get(_g1,_g)
				_g = _g + 1
				pe.add(self.parseBlock(self.parseTokens(p1)))
			
			
			return _hx_c.haxe_Template_TemplateExpr.OpMacro(p, pe)
		
		
		if _hx_c.python_Tools.substr(p, 0, 3) == "if ":
			len = _hx_builtin.len(p) - 3
			p = _hx_c.python_Tools.substr(p, 3, len)
			
			e = self.parseExpr(p)
			eif = self.parseBlock(tokens)
			t1 = tokens.first()
			eelse = None
			if t1 is None:
				raise _HxException("Unclosed 'if'")
			
			if t1.p == "end":
				tokens.pop()
				eelse = None
			
			elif t1.p == "else":
				tokens.pop()
				eelse = self.parseBlock(tokens)
				t1 = tokens.pop()
				if t1 is None or t1.p != "end":
					raise _HxException("Unclosed 'else'")
				
			
			else:
				len1 = _hx_builtin.len(t1.p) - 4
				t1.p = _hx_c.python_Tools.substr(t1.p, 4, len1)
				
				eelse = self.parse(tokens)
			
			return _hx_c.haxe_Template_TemplateExpr.OpIf(e, eif, eelse)
		
		
		if _hx_c.python_Tools.substr(p, 0, 8) == "foreach ":
			len2 = _hx_builtin.len(p) - 8
			p = _hx_c.python_Tools.substr(p, 8, len2)
			
			e1 = self.parseExpr(p)
			efor = self.parseBlock(tokens)
			t2 = tokens.pop()
			if t2 is None or t2.p != "end":
				raise _HxException("Unclosed 'foreach'")
			
			return _hx_c.haxe_Template_TemplateExpr.OpForeach(e1, efor)
		
		
		if _hx_c.haxe_Template.expr_splitter.match(p):
			return _hx_c.haxe_Template_TemplateExpr.OpExpr(self.parseExpr(p))
		
		return _hx_c.haxe_Template_TemplateExpr.OpVar(p)
	

	def parseExpr(self,data):
		l = _hx_c.List()
		expr = data
		while _hx_c.haxe_Template.expr_splitter.match(data):
			p = _hx_c.haxe_Template.expr_splitter.matchedPos()
			k = p.pos + p.len
			if p.pos != 0:
				l.add(_hx_c._hx_AnonObject(p = _hx_c.python_Tools.substr(data, 0, p.pos) ,s = True ))
			
			p1 = _hx_c.haxe_Template.expr_splitter.matched(0)
			l.add(_hx_c._hx_AnonObject(p = p1 ,s = (p1.find("\"") if (None is None) else p1.find("\"", None)) >= 0 ))
			data = _hx_c.haxe_Template.expr_splitter.matchedRight()
		
		if _hx_builtin.len(data) != 0:
			l.add(_hx_c._hx_AnonObject(p = data ,s = True ))
		
		e = None
		try:
			e = self.makeExpr(l)
			if not l.isEmpty():
				raise _HxException(l.first().p)
			
		
		except Exception as _hx_e:
			_hx_e1 = _hx_e.val if isinstance(_hx_e, _HxException) else _hx_e
			if isinstance(_hx_e1, _hx_c.String):
				s = _hx_e1
				raise _HxException(Std.string(Std.string("Unexpected '" + Std.string(s)) + "' in ") + Std.string(expr))
			else:
				raise _hx_e
		def _hx_local_0():
			try:
				return e()
			except Exception as _hx_e:
				_hx_e1 = _hx_e.val if isinstance(_hx_e, _HxException) else _hx_e
				if True:
					exc = _hx_e1
					raise _HxException(Std.string(Std.string("Error : " + Std.string(_hx_c.Std.string(exc))) + " in ") + Std.string(expr))
				else:
					raise _hx_e
		return _hx_local_0
	

	def makeConst(self,v):
		_hx_c.haxe_Template.expr_trim.match(v)
		v = _hx_c.haxe_Template.expr_trim.matched(1)
		if _hx_c.python_internal_StringImpl.charCodeAt(v, 0) == 34:
			str = None
			len = _hx_builtin.len(v) - 2
			str = _hx_c.python_Tools.substr(v, 1, len)
			
			def _hx_local_0():
				return str
			return _hx_local_0
		
		
		if _hx_c.haxe_Template.expr_int.match(v):
			i = _hx_c.Std.parseInt(v)
			def _hx_local_1():
				return i
			return _hx_local_1
		
		
		if _hx_c.haxe_Template.expr_float.match(v):
			f = _hx_c.Std.parseFloat(v)
			def _hx_local_2():
				return f
			return _hx_local_2
		
		
		me = self
		def _hx_local_3():
			return me.resolve(v)
		return _hx_local_3
	

	def makePath(self,e,l):
		p = l.first()
		if p is None or p.p != ".":
			return e
		
		l.pop()
		field = l.pop()
		if field is None or not field.s:
			raise _HxException(field.p)
		
		f = field.p
		_hx_c.haxe_Template.expr_trim.match(f)
		f = _hx_c.haxe_Template.expr_trim.matched(1)
		def _hx_local_1():
			def _hx_local_0():
				return _hx_c.Reflect.field(e(), f)
			return self.makePath(_hx_local_0, l)
		
		return _hx_local_1()
	

	def makeExpr(self,l):
		return self.makePath(self.makeExpr2(l), l)

	def makeExpr2(self,l):
		p = l.pop()
		if p is None:
			raise _HxException("<eof>")
		
		if p.s:
			return self.makeConst(p.p)
		
		_g = p.p
		if (_g) == "(":
			e1 = self.makeExpr(l)
			p1 = l.pop()
			if p1 is None or p1.s:
				raise _HxException(p1.p)
			
			if p1.p == ")":
				return e1
			
			e2 = self.makeExpr(l)
			p2 = l.pop()
			if p2 is None or p2.p != ")":
				raise _HxException(p2.p)
			
			_g1 = p1.p
			if (_g1) == "+":
				def _hx_local_0():
					return python_Boot._add_dynamic(e1(),e2())
				return _hx_local_0
			
			elif (_g1) == "-":
				def _hx_local_1():
					return e1() - e2()
				return _hx_local_1
			
			elif (_g1) == "*":
				def _hx_local_2():
					return e1() * e2()
				return _hx_local_2
			
			elif (_g1) == "/":
				def _hx_local_3():
					return e1() / e2()
				return _hx_local_3
			
			elif (_g1) == ">":
				def _hx_local_4():
					return e1() > e2()
				return _hx_local_4
			
			elif (_g1) == "<":
				def _hx_local_5():
					return e1() < e2()
				return _hx_local_5
			
			elif (_g1) == ">=":
				def _hx_local_6():
					return e1() >= e2()
				return _hx_local_6
			
			elif (_g1) == "<=":
				def _hx_local_7():
					return e1() <= e2()
				return _hx_local_7
			
			elif (_g1) == "==":
				def _hx_local_8():
					return e1() == e2()
				return _hx_local_8
			
			elif (_g1) == "!=":
				def _hx_local_9():
					return e1() != e2()
				return _hx_local_9
			
			elif (_g1) == "&&":
				def _hx_local_10():
					return e1() and e2()
				return _hx_local_10
			
			elif (_g1) == "||":
				def _hx_local_11():
					return e1() or e2()
				return _hx_local_11
			
			else:
				raise _HxException("Unknown operation " + Std.string(p1.p))
			
		
		elif (_g) == "!":
			e = self.makeExpr(l)
			def _hx_local_12():
				v = e()
				return v is None or v == False
			
			return _hx_local_12
		
		elif (_g) == "-":
			e3 = self.makeExpr(l)
			def _hx_local_13():
				return -e3()
			return _hx_local_13
		
		
		
		raise _HxException(p.p)
	

	def run(self,e):
		if (e.index) == 0:
			v = e.params[0]
			x = _hx_c.Std.string(self.resolve(v))
			s = _hx_c.Std.string(x)
			self.buf.b.write(s)
			
			
	
		elif (e.index) == 1:
			e1 = e.params[0]
			x1 = _hx_c.Std.string(e1())
			s1 = _hx_c.Std.string(x1)
			self.buf.b.write(s1)
			
			
	
		elif (e.index) == 2:
			eelse = e.params[2]
			eif = e.params[1]
			e2 = e.params[0]
			v1 = e2()
			if v1 is None or v1 == False:
				if eelse is not None:
					self.run(eelse)
				
			else:
				self.run(eif)
			
	
		elif (e.index) == 3:
			str = e.params[0]
			s2 = _hx_c.Std.string(str)
			self.buf.b.write(s2)
			
	
		elif (e.index) == 4:
			l = e.params[0]
			_it = l.iterator()
			while _it.hasNext():
				e3 = _it.next()
				self.run(e3)
	
		elif (e.index) == 5:
			loop = e.params[1]
			e4 = e.params[0]
			v2 = e4()
			try:
				x2 = _hx_functools.partial(HxOverrides_iterator, v2)()
				if x2.hasNext is None:
					raise _HxException(None)
				
				v2 = x2
			
			except Exception as _hx_e:
				_hx_e1 = _hx_e.val if isinstance(_hx_e, _HxException) else _hx_e
				if True:
					e5 = _hx_e1
					try:
						if v2.hasNext is None:
							raise _HxException(None)
						
					except Exception as _hx_e:
						_hx_e1 = _hx_e.val if isinstance(_hx_e, _HxException) else _hx_e
						if True:
							e6 = _hx_e1
							raise _HxException("Cannot iter on " + Std.string(_hx_c.Std.string(v2)))
						else:
							raise _hx_e
				else:
					raise _hx_e
			self.stack.push(self.context)
			v3 = v2
			_it = v3
			while _it.hasNext():
				ctx = _it.next()
				self.context = ctx
				self.run(loop)
			
			self.context = self.stack.pop()
			
	
		elif (e.index) == 6:
			params = e.params[1]
			m = e.params[0]
			v4 = _hx_c.Reflect.field(self.macros, m)
			pl = list()
			old = self.buf
			pl.append(self.resolve)
			_hx_builtin.len(pl)
			
			_it = params.iterator()
			while _it.hasNext():
				p = _it.next()
				if (p.index) == 0:
					v5 = p.params[0]
					x3 = self.resolve(v5)
					pl.append(x3)
					_hx_builtin.len(pl)
					
					
			
				else:
					self.buf = _hx_c.StringBuf()
					self.run(p)
					x4 = self.buf.b.getvalue()
					pl.append(x4)
					_hx_builtin.len(pl)
					
					
			
			self.buf = old
			try:
				x5 = _hx_c.Std.string(_hx_c.Reflect.callMethod(self.macros, v4, pl))
				s3 = _hx_c.Std.string(x5)
				self.buf.b.write(s3)
				
			
			except Exception as _hx_e:
				_hx_e1 = _hx_e.val if isinstance(_hx_e, _HxException) else _hx_e
				if True:
					e7 = _hx_e1
					plstr = None
					try:
						plstr = ",".join(_hx_builtin.list(_hx_builtin.map(_hx_c.Std.string, pl)))
					except Exception as _hx_e:
						_hx_e1 = _hx_e.val if isinstance(_hx_e, _HxException) else _hx_e
						if True:
							e8 = _hx_e1
							plstr = "???"
						else:
							raise _hx_e
					msg = Std.string(Std.string(Std.string(Std.string(Std.string("Macro call " + Std.string(m)) + "(") + Std.string(plstr)) + ") failed (") + Std.string(_hx_c.Std.string(e7))) + ")"
					raise _HxException(msg)
			
				else:
					raise _hx_e
			
	
		





haxe_Template._hx_class = haxe_Template
haxe_Template._hx_class_name = "haxe.Template"
_hx_classes["haxe.Template"] = haxe_Template
_hx_c.haxe_Template = haxe_Template
haxe_Template._hx_fields = ["expr","context","macros","stack","buf"]
haxe_Template._hx_props = []
haxe_Template._hx_methods = ["execute","resolve","parseTokens","parseBlock","parse","parseExpr","makeConst","makePath","makeExpr","makeExpr2","run"]
haxe_Template._hx_statics = ["splitter","expr_splitter","expr_trim","expr_int","expr_float","globals"]
haxe_Template._hx_interfaces = []
haxe_Template._hx_meta = _hx_c._hx_AnonObject(obj=_hx_c._hx_AnonObject(),statics=_hx_c._hx_AnonObject(),fields=_hx_c._hx_AnonObject())
def haxe_Template_hx_empty_init (_hx_o):
	_hx_o.expr = None
	_hx_o.context = None
	_hx_o.macros = None
	_hx_o.stack = None
	_hx_o.buf = None
haxe_Template._hx_empty_init = haxe_Template_hx_empty_init
# print haxe.Timer.Timer
class haxe_Timer:

	pass




haxe_Timer._hx_class = haxe_Timer
haxe_Timer._hx_class_name = "haxe.Timer"
_hx_classes["haxe.Timer"] = haxe_Timer
_hx_c.haxe_Timer = haxe_Timer
haxe_Timer._hx_fields = []
haxe_Timer._hx_props = []
haxe_Timer._hx_methods = []
haxe_Timer._hx_statics = ["measure","stamp"]
haxe_Timer._hx_interfaces = []
haxe_Timer._hx_meta = _hx_c._hx_AnonObject(obj=_hx_c._hx_AnonObject(),statics=_hx_c._hx_AnonObject(),fields=_hx_c._hx_AnonObject())
def haxe_Timer_hx_empty_init (_hx_o):
	pass
haxe_Timer._hx_empty_init = haxe_Timer_hx_empty_init
# print haxe.Unserializer.Unserializer
class haxe_Unserializer:


	def __init__(self,buf):
		self.buf = None
		self.pos = None
		self.length = None
		self.cache = None
		self.scache = None
		self.resolver = None
		self.buf = buf
		self.length = _hx_builtin.len(buf)
		self.pos = 0
		self.scache = list()
		self.cache = list()
		r = _hx_c.haxe_Unserializer.DEFAULT_RESOLVER
		if r is None:
			r = _hx_c.Type
			_hx_c.haxe_Unserializer.DEFAULT_RESOLVER = r
		
		
		self.setResolver(r)
		
	
	# var buf
	# var pos
	# var length
	# var cache
	# var scache
	# var resolver
	def setResolver(self,r):
		if r is None:
			def _hx_local_0(_):
				return None
			def _hx_local_1(_1):
				return None
			self.resolver = _hx_c._hx_AnonObject(resolveClass = _hx_local_0 ,resolveEnum = _hx_local_1 )
	
		else:
			self.resolver = r

	def getResolver(self):
		return self.resolver

	def get(self,p):
		s = self.buf
		if p >= _hx_builtin.len(s):
			return -1
		else:
			return ord(_hx_array_get(s,p))
	

	def readDigits(self):
		k = 0
		s = False
		fpos = self.pos
		while True:
			c = None
			p = self.pos
			s1 = self.buf
			if p >= _hx_builtin.len(s1):
				c = -1
			else:
				c = ord(_hx_array_get(s1,p))
			
			
			if c == -1:
				break
			
			if c == 45:
				if self.pos != fpos:
					break
				
				s = True
				self.pos = self.pos + 1
				continue
			
			
			if c < 48 or c > 57:
				break
			
			k = k * 10 + (c - 48)
			self.pos = self.pos + 1
		
		if s:
			k = k * -1
		
		return k
	

	def unserializeObject(self,o):
		while True:
			if self.pos >= self.length:
				raise _HxException("Invalid object")
			
			def _hx_local_0():
				p = self.pos
				def _hx_local_2():
					def _hx_local_1():
						s = self.buf
						return -1 if (p >= _hx_builtin.len(s)) else ord(_hx_array_get(s,p))
					
					return _hx_local_1()
				
				return _hx_local_2()
			
			if _hx_local_0() == 103:
				break
			
			k = self.unserialize()
			if not _hx_c.Std._hx_is(k, _hx_c.String):
				raise _HxException("Invalid object key")
			
			v = self.unserialize()
			field = None
			if _hx_c.python_internal_KeywordHandler.keywords.exists(k):
				field = "_hx_" + Std.string(k)
			else:
				field = k
			_hx_builtin.setattr(o, field, v)
			
		
		self.pos = self.pos + 1
	

	def unserializeEnum(self,edecl,tag):
		def _hx_local_0():
			p = self.pos
			self.pos = self.pos + 1
			
			def _hx_local_2():
				def _hx_local_1():
					s = self.buf
					return -1 if (p >= _hx_builtin.len(s)) else ord(_hx_array_get(s,p))
				
				return _hx_local_1()
			
			return _hx_local_2()
		
		if _hx_local_0() != 58:
			raise _HxException("Invalid enum format")
		
		nargs = self.readDigits()
		if nargs == 0:
			return _hx_c.Type.createEnum(edecl, tag)
		
		args = list()
		def _hx_local_4():
			nonlocal nargs
			_hx_local_3 = nargs
			nargs = nargs - 1
			return _hx_local_3
			
		
		while _hx_local_4() > 0:
			x = self.unserialize()
			args.append(x)
			_hx_builtin.len(args)
			
		
		return _hx_c.Type.createEnum(edecl, tag, args)
	

	def unserialize(self):
		_g = None
		p = self.pos
		self.pos = self.pos + 1
		
		s = self.buf
		if p >= _hx_builtin.len(s):
			_g = -1
		else:
			_g = ord(_hx_array_get(s,p))
		
		
		if (_g) == 110:
			return None
		elif (_g) == 116:
			return True
		elif (_g) == 102:
			return False
		elif (_g) == 122:
			return 0
		elif (_g) == 105:
			return self.readDigits()
		elif (_g) == 100:
			p1 = self.pos
			while True:
				c = None
				p2 = self.pos
				s1 = self.buf
				if p2 >= _hx_builtin.len(s1):
					c = -1
				else:
					c = ord(_hx_array_get(s1,p2))
				
				
				if c >= 43 and c < 58 or c == 101 or c == 69:
					self.pos = self.pos + 1
				else:
					break
			
			return _hx_c.Std.parseFloat(_hx_c.python_Tools.substr(self.buf, p1, self.pos - p1))
		
		elif (_g) == 121:
			len = self.readDigits()
			def _hx_local_1():
				p3 = self.pos
				self.pos = self.pos + 1
				
				def _hx_local_3():
					def _hx_local_2():
						s2 = self.buf
						return -1 if (p3 >= _hx_builtin.len(s2)) else ord(_hx_array_get(s2,p3))
					
					return _hx_local_2()
				
				return _hx_local_3()
			
			if _hx_local_1() != 58 or self.length - self.pos < len:
				raise _HxException("Invalid string length")
			
			s3 = _hx_c.python_Tools.substr(self.buf, self.pos, len)
			self.pos = self.pos + len
			s3 = _hx_c.StringTools.urlDecode(s3)
			_this = self.scache
			_this.append(s3)
			_hx_builtin.len(_this)
			
			
			return s3
		
		elif (_g) == 107:
			return float("nan")
		elif (_g) == 109:
			return float("-inf")
		elif (_g) == 112:
			return float("inf")
		elif (_g) == 97:
			buf = self.buf
			a = list()
			_this1 = self.cache
			_this1.append(a)
			_hx_builtin.len(_this1)
			
			
			while True:
				c1 = None
				p4 = self.pos
				s4 = self.buf
				if p4 >= _hx_builtin.len(s4):
					c1 = -1
				else:
					c1 = ord(_hx_array_get(s4,p4))
				
				
				if c1 == 104:
					self.pos = self.pos + 1
					break
				
				
				if c1 == 117:
					self.pos = self.pos + 1
					n = self.readDigits()
					_hx_array_set(a,_hx_builtin.len(a) + n - 1, None)
				
				else:
					x = self.unserialize()
					a.append(x)
					_hx_builtin.len(a)
					
				
			
			return a
		
		elif (_g) == 111:
			o = _hx_c._hx_AnonObject()
			_this2 = self.cache
			_this2.append(o)
			_hx_builtin.len(_this2)
			
			
			self.unserializeObject(o)
			return o
		
		elif (_g) == 114:
			n1 = self.readDigits()
			if n1 < 0 or n1 >= _hx_builtin.len(self.cache):
				raise _HxException("Invalid reference")
			
			return _hx_array_get(self.cache,n1)
		
		elif (_g) == 82:
			n2 = self.readDigits()
			if n2 < 0 or n2 >= _hx_builtin.len(self.scache):
				raise _HxException("Invalid string reference")
			
			return _hx_array_get(self.scache,n2)
		
		elif (_g) == 120:
			raise _HxException(self.unserialize())
		elif (_g) == 99:
			name = self.unserialize()
			cl = self.resolver.resolveClass(name)
			if cl is None:
				raise _HxException("Class not found " + Std.string(name))
			
			o1 = _hx_c.Type.createEmptyInstance(cl)
			_this3 = self.cache
			_this3.append(o1)
			_hx_builtin.len(_this3)
			
			
			self.unserializeObject(o1)
			return o1
		
		elif (_g) == 119:
			name1 = self.unserialize()
			edecl = self.resolver.resolveEnum(name1)
			if edecl is None:
				raise _HxException("Enum not found " + Std.string(name1))
			
			e = self.unserializeEnum(edecl, self.unserialize())
			_this4 = self.cache
			_this4.append(e)
			_hx_builtin.len(_this4)
			
			
			return e
		
		elif (_g) == 106:
			name2 = self.unserialize()
			edecl1 = self.resolver.resolveEnum(name2)
			if edecl1 is None:
				raise _HxException("Enum not found " + Std.string(name2))
			
			self.pos = self.pos + 1
			index = self.readDigits()
			tag = _hx_array_get(_hx_c.Type.getEnumConstructs(edecl1),index)
			if tag is None:
				raise _HxException(Std.string(Std.string("Unknown enum index " + Std.string(name2)) + "@") + Std.string(index))
			
			e1 = self.unserializeEnum(edecl1, tag)
			_this5 = self.cache
			_this5.append(e1)
			_hx_builtin.len(_this5)
			
			
			return e1
		
		elif (_g) == 108:
			l = _hx_c.List()
			_this6 = self.cache
			_this6.append(l)
			_hx_builtin.len(_this6)
			
			
			buf1 = self.buf
			def _hx_local_8():
				p5 = self.pos
				def _hx_local_10():
					def _hx_local_9():
						s5 = self.buf
						return -1 if (p5 >= _hx_builtin.len(s5)) else ord(_hx_array_get(s5,p5))
					
					return _hx_local_9()
				
				return _hx_local_10()
			
			while _hx_local_8() != 104:
				l.add(self.unserialize())
			self.pos = self.pos + 1
			return l
		
		elif (_g) == 98:
			h = _hx_c.haxe_ds_StringMap()
			_this7 = self.cache
			_this7.append(h)
			_hx_builtin.len(_this7)
			
			
			buf2 = self.buf
			def _hx_local_12():
				p6 = self.pos
				def _hx_local_14():
					def _hx_local_13():
						s6 = self.buf
						return -1 if (p6 >= _hx_builtin.len(s6)) else ord(_hx_array_get(s6,p6))
					
					return _hx_local_13()
				
				return _hx_local_14()
			
			while _hx_local_12() != 104:
				s7 = self.unserialize()
				h.set(s7, self.unserialize())
			
			self.pos = self.pos + 1
			return h
		
		elif (_g) == 113:
			h1 = _hx_c.haxe_ds_IntMap()
			_this8 = self.cache
			_this8.append(h1)
			_hx_builtin.len(_this8)
			
			
			buf3 = self.buf
			c2 = None
			p7 = self.pos
			self.pos = self.pos + 1
			
			s8 = self.buf
			if p7 >= _hx_builtin.len(s8):
				c2 = -1
			else:
				c2 = ord(_hx_array_get(s8,p7))
			
			
			while c2 == 58:
				i = self.readDigits()
				h1.set(i, self.unserialize())
				p8 = self.pos
				self.pos = self.pos + 1
				
				s9 = self.buf
				if p8 >= _hx_builtin.len(s9):
					c2 = -1
				else:
					c2 = ord(_hx_array_get(s9,p8))
				
				
			
			if c2 != 104:
				raise _HxException("Invalid IntMap format")
			
			return h1
		
		elif (_g) == 77:
			h2 = _hx_c.haxe_ds_ObjectMap()
			_this9 = self.cache
			_this9.append(h2)
			_hx_builtin.len(_this9)
			
			
			buf4 = self.buf
			def _hx_local_16():
				p9 = self.pos
				def _hx_local_18():
					def _hx_local_17():
						s10 = self.buf
						return -1 if (p9 >= _hx_builtin.len(s10)) else ord(_hx_array_get(s10,p9))
					
					return _hx_local_17()
				
				return _hx_local_18()
			
			while _hx_local_16() != 104:
				s11 = self.unserialize()
				h2.set(s11, self.unserialize())
			
			self.pos = self.pos + 1
			return h2
		
		elif (_g) == 118:
			d = _hx_c.Date.fromString(_hx_c.python_Tools.substr(self.buf, self.pos, 19))
			_this10 = self.cache
			_this10.append(d)
			_hx_builtin.len(_this10)
			
			
			self.pos = self.pos + 19
			return d
		
		elif (_g) == 115:
			len1 = self.readDigits()
			buf5 = self.buf
			def _hx_local_21():
				p10 = self.pos
				self.pos = self.pos + 1
				
				def _hx_local_23():
					def _hx_local_22():
						s12 = self.buf
						return -1 if (p10 >= _hx_builtin.len(s12)) else ord(_hx_array_get(s12,p10))
					
					return _hx_local_22()
				
				return _hx_local_23()
			
			if _hx_local_21() != 58 or self.length - self.pos < len1:
				raise _HxException("Invalid bytes length")
			
			codes = _hx_c.haxe_Unserializer.CODES
			if codes is None:
				codes = _hx_c.haxe_Unserializer.initCodes()
				_hx_c.haxe_Unserializer.CODES = codes
			
			
			i1 = self.pos
			rest = len1 & 3
			size = None
			size = (len1 >> 2) * 3 + (rest - 1 if (rest >= 2) else 0)
			max = i1 + (len1 - rest)
			bytes = _hx_c.haxe_io_Bytes.alloc(size)
			bpos = 0
			while i1 < max:
				def _hx_local_24():
					nonlocal i1
					index1 = i1
					i1 = i1 + 1
					
					return -1 if (index1 >= _hx_builtin.len(buf5)) else ord(_hx_array_get(buf5,index1))
					
				
				c11 = _hx_array_get(codes,_hx_local_24())
				def _hx_local_25():
					nonlocal i1
					index2 = i1
					i1 = i1 + 1
					
					return -1 if (index2 >= _hx_builtin.len(buf5)) else ord(_hx_array_get(buf5,index2))
					
				
				c21 = _hx_array_get(codes,_hx_local_25())
				pos = bpos
				bpos = bpos + 1
				
				_hx_array_set(bytes.b,pos, (c11 << 2 | c21 >> 4) & 255)
				
				def _hx_local_26():
					nonlocal i1
					index3 = i1
					i1 = i1 + 1
					
					return -1 if (index3 >= _hx_builtin.len(buf5)) else ord(_hx_array_get(buf5,index3))
					
				
				c3 = _hx_array_get(codes,_hx_local_26())
				pos1 = bpos
				bpos = bpos + 1
				
				_hx_array_set(bytes.b,pos1, (c21 << 4 | c3 >> 2) & 255)
				
				def _hx_local_27():
					nonlocal i1
					index4 = i1
					i1 = i1 + 1
					
					return -1 if (index4 >= _hx_builtin.len(buf5)) else ord(_hx_array_get(buf5,index4))
					
				
				c4 = _hx_array_get(codes,_hx_local_27())
				pos2 = bpos
				bpos = bpos + 1
				
				_hx_array_set(bytes.b,pos2, (c3 << 6 | c4) & 255)
				
			
			if rest >= 2:
				def _hx_local_28():
					nonlocal i1
					index5 = i1
					i1 = i1 + 1
					
					return -1 if (index5 >= _hx_builtin.len(buf5)) else ord(_hx_array_get(buf5,index5))
					
				
				c12 = _hx_array_get(codes,_hx_local_28())
				def _hx_local_29():
					nonlocal i1
					index6 = i1
					i1 = i1 + 1
					
					return -1 if (index6 >= _hx_builtin.len(buf5)) else ord(_hx_array_get(buf5,index6))
					
				
				c22 = _hx_array_get(codes,_hx_local_29())
				pos3 = bpos
				bpos = bpos + 1
				
				_hx_array_set(bytes.b,pos3, (c12 << 2 | c22 >> 4) & 255)
				
				if rest == 3:
					def _hx_local_30():
						nonlocal i1
						index7 = i1
						i1 = i1 + 1
						
						return -1 if (index7 >= _hx_builtin.len(buf5)) else ord(_hx_array_get(buf5,index7))
						
					
					c31 = _hx_array_get(codes,_hx_local_30())
					pos4 = bpos
					bpos = bpos + 1
					
					_hx_array_set(bytes.b,pos4, (c22 << 4 | c31 >> 2) & 255)
					
				
				
			
			
			self.pos = self.pos + len1
			_this11 = self.cache
			_this11.append(bytes)
			_hx_builtin.len(_this11)
			
			
			return bytes
		
		elif (_g) == 67:
			name3 = self.unserialize()
			cl1 = self.resolver.resolveClass(name3)
			if cl1 is None:
				raise _HxException("Class not found " + Std.string(name3))
			
			o2 = _hx_c.Type.createEmptyInstance(cl1)
			x1 = o2
			_this12 = self.cache
			_this12.append(x1)
			_hx_builtin.len(_this12)
			
			
			o2.hxUnserialize(self)
			def _hx_local_32():
				p11 = self.pos
				self.pos = self.pos + 1
				
				def _hx_local_34():
					def _hx_local_33():
						s13 = self.buf
						return -1 if (p11 >= _hx_builtin.len(s13)) else ord(_hx_array_get(s13,p11))
					
					return _hx_local_33()
				
				return _hx_local_34()
			
			if _hx_local_32() != 103:
				raise _HxException("Invalid custom data")
			
			return o2
		
		else:
			None
		
		self.pos = self.pos - 1
		def _hx_local_36():
			index8 = self.pos
			_this13 = self.buf
			return "" if (index8 < 0 or index8 >= _hx_builtin.len(_this13)) else _this13[index8]
		
		raise _HxException(Std.string(Std.string("Invalid char " + Std.string(_hx_local_36())) + " at position ") + Std.string(self.pos))
	





haxe_Unserializer._hx_class = haxe_Unserializer
haxe_Unserializer._hx_class_name = "haxe.Unserializer"
_hx_classes["haxe.Unserializer"] = haxe_Unserializer
_hx_c.haxe_Unserializer = haxe_Unserializer
haxe_Unserializer._hx_fields = ["buf","pos","length","cache","scache","resolver"]
haxe_Unserializer._hx_props = []
haxe_Unserializer._hx_methods = ["setResolver","getResolver","get","readDigits","unserializeObject","unserializeEnum","unserialize"]
haxe_Unserializer._hx_statics = ["DEFAULT_RESOLVER","BASE64","CODES","initCodes","run"]
haxe_Unserializer._hx_interfaces = []
haxe_Unserializer._hx_meta = _hx_c._hx_AnonObject(obj=_hx_c._hx_AnonObject(),statics=_hx_c._hx_AnonObject(),fields=_hx_c._hx_AnonObject())
def haxe_Unserializer_hx_empty_init (_hx_o):
	_hx_o.buf = None
	_hx_o.pos = None
	_hx_o.length = None
	_hx_o.cache = None
	_hx_o.scache = None
	_hx_o.resolver = None
haxe_Unserializer._hx_empty_init = haxe_Unserializer_hx_empty_init
# print haxe.io.Bytes.Bytes
class haxe_io_Bytes:


	def __init__(self,length,b):
		self.length = None
		self.b = None
		self.length = length
		self.b = b
		
	
	# var length
	# var b
	def get(self,pos):
		return _hx_array_get(self.b,pos)

	def set(self,pos,v):
		_hx_array_set(self.b,pos, v & 255)

	def blit(self,pos,src,srcpos,len):
		if pos < 0 or srcpos < 0 or len < 0 or pos + len > self.length or srcpos + len > src.length:
			raise _HxException(_hx_c.haxe_io_Error.OutsideBounds)
		
		b1 = self.b
		b2 = src.b
		if b1 == b2 and pos > srcpos:
			i = len
			while i > 0:
				i = i - 1
				_hx_array_set(b1,i + pos, _hx_array_get(b2,i + srcpos))
			
			return
		
		
		_g = 0
		while _g < len:
			i1 = _g
			_g = _g + 1
			
			_hx_array_set(b1,i1 + pos, _hx_array_get(b2,i1 + srcpos))
		
		
	

	def fill(self,pos,len,value):
		_g = 0
		while _g < len:
			i = _g
			_g = _g + 1
			
			pos1 = pos
			pos = pos + 1
			
			_hx_array_set(self.b,pos1, value & 255)
		
	

	def sub(self,pos,len):
		if pos < 0 or len < 0 or pos + len > self.length:
			raise _HxException(_hx_c.haxe_io_Error.OutsideBounds)
		
		return _hx_c.haxe_io_Bytes(len, self.b[pos:pos + len])
	

	def compare(self,other):
		b1 = self.b
		b2 = other.b
		len = None
		if self.length < other.length:
			len = self.length
		else:
			len = other.length
		_g = 0
		while _g < len:
			i = _g
			_g = _g + 1
			
			if _hx_array_get(b1,i) != _hx_array_get(b2,i):
				return _hx_array_get(b1,i) - _hx_array_get(b2,i)
			
		
		
		return self.length - other.length
	

	def readString(self,pos,len):
		if pos < 0 or len < 0 or pos + len > self.length:
			raise _HxException(_hx_c.haxe_io_Error.OutsideBounds)
		
		s = ""
		b = self.b
		i = pos
		max = pos + len
		while i < max:
			def _hx_local_1():
				nonlocal i
				_hx_local_0 = i
				i = i + 1
				return _hx_local_0
				
			
			c = _hx_array_get(b,_hx_local_1())
			if c < 128:
				if c == 0:
					break
				
				c1 = c
				s = Std.string(s) + Std.string("".join(_hx_builtin.map(_hx_builtin.chr, [c1])))
				
			
			elif c < 224:
				def _hx_local_4():
					nonlocal i
					_hx_local_3 = i
					i = i + 1
					return _hx_local_3
					
				
				x = (c & 63) << 6 | _hx_array_get(b,_hx_local_4()) & 127
				c2 = x
				s = Std.string(s) + Std.string("".join(_hx_builtin.map(_hx_builtin.chr, [c2])))
			
			elif c < 240:
				def _hx_local_7():
					nonlocal i
					_hx_local_6 = i
					i = i + 1
					return _hx_local_6
					
				
				c21 = _hx_array_get(b,_hx_local_7())
				def _hx_local_9():
					nonlocal i
					_hx_local_8 = i
					i = i + 1
					return _hx_local_8
					
				
				x1 = (c & 31) << 12 | (c21 & 127) << 6 | _hx_array_get(b,_hx_local_9()) & 127
				c3 = x1
				s = Std.string(s) + Std.string("".join(_hx_builtin.map(_hx_builtin.chr, [c3])))
				
			
			else:
				def _hx_local_12():
					nonlocal i
					_hx_local_11 = i
					i = i + 1
					return _hx_local_11
					
				
				c22 = _hx_array_get(b,_hx_local_12())
				def _hx_local_14():
					nonlocal i
					_hx_local_13 = i
					i = i + 1
					return _hx_local_13
					
				
				c31 = _hx_array_get(b,_hx_local_14())
				def _hx_local_16():
					nonlocal i
					_hx_local_15 = i
					i = i + 1
					return _hx_local_15
					
				
				x2 = (c & 15) << 18 | (c22 & 127) << 12 | c31 << 6 & 127 | _hx_array_get(b,_hx_local_16()) & 127
				c4 = x2
				s = Std.string(s) + Std.string("".join(_hx_builtin.map(_hx_builtin.chr, [c4])))
				
			
		
		return s
	

	def toString(self):
		return self.readString(0, self.length)

	def toHex(self):
		s = _hx_c.StringBuf()
		chars = []
		str = "0123456789abcdef"
		_g1 = 0
		_g = _hx_builtin.len(str)
		while _g1 < _g:
			i = _g1
			_g1 = _g1 + 1
			
			x = _hx_c.python_internal_StringImpl.charCodeAt(str, i)
			chars.append(x)
			_hx_builtin.len(chars)
			
		
		
		_g11 = 0
		_g2 = self.length
		while _g11 < _g2:
			i1 = _g11
			_g11 = _g11 + 1
			
			c = _hx_array_get(self.b,i1)
			s1 = None
			c1 = _hx_array_get(chars,c >> 4)
			s1 = "".join(_hx_builtin.map(_hx_builtin.chr, [c1]))
			
			s.b.write(s1)
			
			s2 = None
			c2 = _hx_array_get(chars,c & 15)
			s2 = "".join(_hx_builtin.map(_hx_builtin.chr, [c2]))
			
			s.b.write(s2)
			
		
		
		return s.b.getvalue()
	

	def getData(self):
		return self.b





haxe_io_Bytes._hx_class = haxe_io_Bytes
haxe_io_Bytes._hx_class_name = "haxe.io.Bytes"
_hx_classes["haxe.io.Bytes"] = haxe_io_Bytes
_hx_c.haxe_io_Bytes = haxe_io_Bytes
haxe_io_Bytes._hx_fields = ["length","b"]
haxe_io_Bytes._hx_props = []
haxe_io_Bytes._hx_methods = ["get","set","blit","fill","sub","compare","readString","toString","toHex","getData"]
haxe_io_Bytes._hx_statics = ["alloc","ofString","ofData","fastGet"]
haxe_io_Bytes._hx_interfaces = []
haxe_io_Bytes._hx_meta = _hx_c._hx_AnonObject(obj=_hx_c._hx_AnonObject(),statics=_hx_c._hx_AnonObject(),fields=_hx_c._hx_AnonObject())
def haxe_io_Bytes_hx_empty_init (_hx_o):
	_hx_o.length = None
	_hx_o.b = None
haxe_io_Bytes._hx_empty_init = haxe_io_Bytes_hx_empty_init
# print haxe.crypto.Base64.Base64
class haxe_crypto_Base64:

	pass




haxe_crypto_Base64._hx_class = haxe_crypto_Base64
haxe_crypto_Base64._hx_class_name = "haxe.crypto.Base64"
_hx_classes["haxe.crypto.Base64"] = haxe_crypto_Base64
_hx_c.haxe_crypto_Base64 = haxe_crypto_Base64
haxe_crypto_Base64._hx_fields = []
haxe_crypto_Base64._hx_props = []
haxe_crypto_Base64._hx_methods = []
haxe_crypto_Base64._hx_statics = ["CHARS","BYTES","encode","decode"]
haxe_crypto_Base64._hx_interfaces = []
haxe_crypto_Base64._hx_meta = _hx_c._hx_AnonObject(obj=_hx_c._hx_AnonObject(),statics=_hx_c._hx_AnonObject(),fields=_hx_c._hx_AnonObject())
def haxe_crypto_Base64_hx_empty_init (_hx_o):
	pass
haxe_crypto_Base64._hx_empty_init = haxe_crypto_Base64_hx_empty_init
# print haxe.crypto.BaseCode.BaseCode
class haxe_crypto_BaseCode:


	def __init__(self,base):
		self.base = None
		self.nbits = None
		self.tbl = None
		len = base.length
		nbits = 1
		while len > 1 << nbits:
			nbits = nbits + 1
		if nbits > 8 or len != 1 << nbits:
			raise _HxException("BaseCode : base length must be a power of two.")
		
		self.base = base
		self.nbits = nbits
		
	
	# var base
	# var nbits
	# var tbl
	def encodeBytes(self,b):
		nbits = self.nbits
		base = self.base
		size = None
		try:
			size = int(b.length * 8 / nbits)
		except Exception as _hx_e:
			_hx_e1 = _hx_e.val if isinstance(_hx_e, _HxException) else _hx_e
			if True:
				e = _hx_e1
				size = None
			else:
				raise _hx_e
		out = _hx_c.haxe_io_Bytes.alloc(size + (0 if (b.length * 8 % nbits == 0) else 1))
		buf = 0
		curbits = 0
		mask = (1 << nbits) - 1
		pin = 0
		pout = 0
		while pout < size:
			while curbits < nbits:
				curbits = curbits + 8
				buf = buf << 8
				pos = pin
				pin = pin + 1
				
				buf = buf | _hx_array_get(b.b,pos)
				
			
			curbits = curbits - nbits
			pos1 = pout
			pout = pout + 1
			
			_hx_array_set(out.b,pos1, _hx_array_get(base.b,buf >> curbits & mask) & 255)
			
		
		if curbits > 0:
			pos2 = pout
			pout = pout + 1
			
			_hx_array_set(out.b,pos2, _hx_array_get(base.b,buf << nbits - curbits & mask) & 255)
		
		
		return out
	

	def initTable(self):
		tbl = list()
		_g = 0
		while _g < 256:
			i = _g
			_g = _g + 1
			
			_hx_array_set(tbl,i, -1)
		
		
		_g1 = 0
		_g2 = self.base.length
		while _g1 < _g2:
			i1 = _g1
			_g1 = _g1 + 1
			
			_hx_array_set(tbl,_hx_array_get(self.base.b,i1), i1)
		
		
		self.tbl = tbl
	

	def decodeBytes(self,b):
		nbits = self.nbits
		base = self.base
		if self.tbl is None:
			self.initTable()
		
		tbl = self.tbl
		size = b.length * nbits >> 3
		out = _hx_c.haxe_io_Bytes.alloc(size)
		buf = 0
		curbits = 0
		pin = 0
		pout = 0
		while pout < size:
			while curbits < 8:
				curbits = curbits + nbits
				buf = buf << nbits
				def _hx_local_2():
					nonlocal pin
					pos = pin
					pin = pin + 1
					
					return _hx_array_get(b.b,pos)
					
				
				i = _hx_array_get(tbl,_hx_local_2())
				if i == -1:
					raise _HxException("BaseCode : invalid encoded char")
				
				buf = buf | i
			
			curbits = curbits - 8
			pos1 = pout
			pout = pout + 1
			
			_hx_array_set(out.b,pos1, buf >> curbits & 255 & 255)
			
		
		return out
	

	def encodeString(self,s):
		return self.encodeBytes(_hx_c.haxe_io_Bytes.ofString(s)).toString()

	def decodeString(self,s):
		return self.decodeBytes(_hx_c.haxe_io_Bytes.ofString(s)).toString()





haxe_crypto_BaseCode._hx_class = haxe_crypto_BaseCode
haxe_crypto_BaseCode._hx_class_name = "haxe.crypto.BaseCode"
_hx_classes["haxe.crypto.BaseCode"] = haxe_crypto_BaseCode
_hx_c.haxe_crypto_BaseCode = haxe_crypto_BaseCode
haxe_crypto_BaseCode._hx_fields = ["base","nbits","tbl"]
haxe_crypto_BaseCode._hx_props = []
haxe_crypto_BaseCode._hx_methods = ["encodeBytes","initTable","decodeBytes","encodeString","decodeString"]
haxe_crypto_BaseCode._hx_statics = ["encode","decode"]
haxe_crypto_BaseCode._hx_interfaces = []
haxe_crypto_BaseCode._hx_meta = _hx_c._hx_AnonObject(obj=_hx_c._hx_AnonObject(),statics=_hx_c._hx_AnonObject(),fields=_hx_c._hx_AnonObject())
def haxe_crypto_BaseCode_hx_empty_init (_hx_o):
	_hx_o.base = None
	_hx_o.nbits = None
	_hx_o.tbl = None
haxe_crypto_BaseCode._hx_empty_init = haxe_crypto_BaseCode_hx_empty_init
# print haxe.crypto.Md5.Md5
class haxe_crypto_Md5:


	def __init__(self):
		None
	def bitOR(self,a,b):
		lsb = a & 1 | b & 1
		msb31 = _hx_rshift(a, 1) | _hx_rshift(b, 1)
		return msb31 << 1 | lsb
	

	def bitXOR(self,a,b):
		lsb = a & 1 ^ b & 1
		msb31 = _hx_rshift(a, 1) ^ _hx_rshift(b, 1)
		return msb31 << 1 | lsb
	

	def bitAND(self,a,b):
		lsb = a & 1 & (b & 1)
		msb31 = _hx_rshift(a, 1) & _hx_rshift(b, 1)
		return msb31 << 1 | lsb
	

	def addme(self,x,y):
		lsw = (x & 65535) + (y & 65535)
		msw = (x >> 16) + (y >> 16) + (lsw >> 16)
		return msw << 16 | lsw & 65535
	

	def hex(self,a):
		str = ""
		hex_chr = "0123456789abcdef"
		_g = 0
		while _g < _hx_builtin.len(a):
			num = _hx_array_get(a,_g)
			_g = _g + 1
			_g1 = 0
			while _g1 < 4:
				j = _g1
				_g1 = _g1 + 1
				
				def _hx_local_1():
					index = num >> j * 8 + 4 & 15
					return "" if (index < 0 or index >= _hx_builtin.len(hex_chr)) else hex_chr[index]
				
				def _hx_local_0():
					index1 = num >> j * 8 & 15
					return "" if (index1 < 0 or index1 >= _hx_builtin.len(hex_chr)) else hex_chr[index1]
				
				str = Std.string(str) + Std.string(Std.string(_hx_local_1()) + Std.string(_hx_local_0()))
			
		
		
		return str
	

	def rol(self,num,cnt):
		return num << cnt | _hx_rshift(num, 32 - cnt)

	def cmn(self,q,a,b,x,s,t):
		return self.addme(self.rol(self.addme(self.addme(a, q), self.addme(x, t)), s), b)

	def ff(self,a,b,c,d,x,s,t):
		return self.cmn(self.bitOR(self.bitAND(b, c), self.bitAND(~b, d)), a, b, x, s, t)

	def gg(self,a,b,c,d,x,s,t):
		return self.cmn(self.bitOR(self.bitAND(b, d), self.bitAND(c, ~d)), a, b, x, s, t)

	def hh(self,a,b,c,d,x,s,t):
		return self.cmn(self.bitXOR(self.bitXOR(b, c), d), a, b, x, s, t)

	def ii(self,a,b,c,d,x,s,t):
		return self.cmn(self.bitXOR(c, self.bitOR(b, ~d)), a, b, x, s, t)

	def doEncode(self,x):
		a = 1732584193
		b = -271733879
		c = -1732584194
		d = 271733878
		step = None
		i = 0
		while i < _hx_builtin.len(x):
			olda = a
			oldb = b
			oldc = c
			oldd = d
			step = 0
			a = self.ff(a, b, c, d, _hx_array_get(x,i + 0), 7, -680876936)
			d = self.ff(d, a, b, c, _hx_array_get(x,i + 1), 12, -389564586)
			c = self.ff(c, d, a, b, _hx_array_get(x,i + 2), 17, 606105819)
			b = self.ff(b, c, d, a, _hx_array_get(x,i + 3), 22, -1044525330)
			a = self.ff(a, b, c, d, _hx_array_get(x,i + 4), 7, -176418897)
			d = self.ff(d, a, b, c, _hx_array_get(x,i + 5), 12, 1200080426)
			c = self.ff(c, d, a, b, _hx_array_get(x,i + 6), 17, -1473231341)
			b = self.ff(b, c, d, a, _hx_array_get(x,i + 7), 22, -45705983)
			a = self.ff(a, b, c, d, _hx_array_get(x,i + 8), 7, 1770035416)
			d = self.ff(d, a, b, c, _hx_array_get(x,i + 9), 12, -1958414417)
			c = self.ff(c, d, a, b, _hx_array_get(x,i + 10), 17, -42063)
			b = self.ff(b, c, d, a, _hx_array_get(x,i + 11), 22, -1990404162)
			a = self.ff(a, b, c, d, _hx_array_get(x,i + 12), 7, 1804603682)
			d = self.ff(d, a, b, c, _hx_array_get(x,i + 13), 12, -40341101)
			c = self.ff(c, d, a, b, _hx_array_get(x,i + 14), 17, -1502002290)
			b = self.ff(b, c, d, a, _hx_array_get(x,i + 15), 22, 1236535329)
			a = self.gg(a, b, c, d, _hx_array_get(x,i + 1), 5, -165796510)
			d = self.gg(d, a, b, c, _hx_array_get(x,i + 6), 9, -1069501632)
			c = self.gg(c, d, a, b, _hx_array_get(x,i + 11), 14, 643717713)
			b = self.gg(b, c, d, a, _hx_array_get(x,i + 0), 20, -373897302)
			a = self.gg(a, b, c, d, _hx_array_get(x,i + 5), 5, -701558691)
			d = self.gg(d, a, b, c, _hx_array_get(x,i + 10), 9, 38016083)
			c = self.gg(c, d, a, b, _hx_array_get(x,i + 15), 14, -660478335)
			b = self.gg(b, c, d, a, _hx_array_get(x,i + 4), 20, -405537848)
			a = self.gg(a, b, c, d, _hx_array_get(x,i + 9), 5, 568446438)
			d = self.gg(d, a, b, c, _hx_array_get(x,i + 14), 9, -1019803690)
			c = self.gg(c, d, a, b, _hx_array_get(x,i + 3), 14, -187363961)
			b = self.gg(b, c, d, a, _hx_array_get(x,i + 8), 20, 1163531501)
			a = self.gg(a, b, c, d, _hx_array_get(x,i + 13), 5, -1444681467)
			d = self.gg(d, a, b, c, _hx_array_get(x,i + 2), 9, -51403784)
			c = self.gg(c, d, a, b, _hx_array_get(x,i + 7), 14, 1735328473)
			b = self.gg(b, c, d, a, _hx_array_get(x,i + 12), 20, -1926607734)
			a = self.hh(a, b, c, d, _hx_array_get(x,i + 5), 4, -378558)
			d = self.hh(d, a, b, c, _hx_array_get(x,i + 8), 11, -2022574463)
			c = self.hh(c, d, a, b, _hx_array_get(x,i + 11), 16, 1839030562)
			b = self.hh(b, c, d, a, _hx_array_get(x,i + 14), 23, -35309556)
			a = self.hh(a, b, c, d, _hx_array_get(x,i + 1), 4, -1530992060)
			d = self.hh(d, a, b, c, _hx_array_get(x,i + 4), 11, 1272893353)
			c = self.hh(c, d, a, b, _hx_array_get(x,i + 7), 16, -155497632)
			b = self.hh(b, c, d, a, _hx_array_get(x,i + 10), 23, -1094730640)
			a = self.hh(a, b, c, d, _hx_array_get(x,i + 13), 4, 681279174)
			d = self.hh(d, a, b, c, _hx_array_get(x,i + 0), 11, -358537222)
			c = self.hh(c, d, a, b, _hx_array_get(x,i + 3), 16, -722521979)
			b = self.hh(b, c, d, a, _hx_array_get(x,i + 6), 23, 76029189)
			a = self.hh(a, b, c, d, _hx_array_get(x,i + 9), 4, -640364487)
			d = self.hh(d, a, b, c, _hx_array_get(x,i + 12), 11, -421815835)
			c = self.hh(c, d, a, b, _hx_array_get(x,i + 15), 16, 530742520)
			b = self.hh(b, c, d, a, _hx_array_get(x,i + 2), 23, -995338651)
			a = self.ii(a, b, c, d, _hx_array_get(x,i + 0), 6, -198630844)
			d = self.ii(d, a, b, c, _hx_array_get(x,i + 7), 10, 1126891415)
			c = self.ii(c, d, a, b, _hx_array_get(x,i + 14), 15, -1416354905)
			b = self.ii(b, c, d, a, _hx_array_get(x,i + 5), 21, -57434055)
			a = self.ii(a, b, c, d, _hx_array_get(x,i + 12), 6, 1700485571)
			d = self.ii(d, a, b, c, _hx_array_get(x,i + 3), 10, -1894986606)
			c = self.ii(c, d, a, b, _hx_array_get(x,i + 10), 15, -1051523)
			b = self.ii(b, c, d, a, _hx_array_get(x,i + 1), 21, -2054922799)
			a = self.ii(a, b, c, d, _hx_array_get(x,i + 8), 6, 1873313359)
			d = self.ii(d, a, b, c, _hx_array_get(x,i + 15), 10, -30611744)
			c = self.ii(c, d, a, b, _hx_array_get(x,i + 6), 15, -1560198380)
			b = self.ii(b, c, d, a, _hx_array_get(x,i + 13), 21, 1309151649)
			a = self.ii(a, b, c, d, _hx_array_get(x,i + 4), 6, -145523070)
			d = self.ii(d, a, b, c, _hx_array_get(x,i + 11), 10, -1120210379)
			c = self.ii(c, d, a, b, _hx_array_get(x,i + 2), 15, 718787259)
			b = self.ii(b, c, d, a, _hx_array_get(x,i + 9), 21, -343485551)
			a = self.addme(a, olda)
			b = self.addme(b, oldb)
			c = self.addme(c, oldc)
			d = self.addme(d, oldd)
			i = i + 16
		
		return [a, b, c, d]
	





haxe_crypto_Md5._hx_class = haxe_crypto_Md5
haxe_crypto_Md5._hx_class_name = "haxe.crypto.Md5"
_hx_classes["haxe.crypto.Md5"] = haxe_crypto_Md5
_hx_c.haxe_crypto_Md5 = haxe_crypto_Md5
haxe_crypto_Md5._hx_fields = []
haxe_crypto_Md5._hx_props = []
haxe_crypto_Md5._hx_methods = ["bitOR","bitXOR","bitAND","addme","hex","rol","cmn","ff","gg","hh","ii","doEncode"]
haxe_crypto_Md5._hx_statics = ["encode","make","bytes2blks","str2blks"]
haxe_crypto_Md5._hx_interfaces = []
haxe_crypto_Md5._hx_meta = _hx_c._hx_AnonObject(obj=_hx_c._hx_AnonObject(),statics=_hx_c._hx_AnonObject(),fields=_hx_c._hx_AnonObject())
def haxe_crypto_Md5_hx_empty_init (_hx_o):
	pass
haxe_crypto_Md5._hx_empty_init = haxe_crypto_Md5_hx_empty_init
# print haxe.crypto.Sha1.Sha1
class haxe_crypto_Sha1:


	def __init__(self):
		None
	def doEncode(self,x):
		w = list()
		a = 1732584193
		b = -271733879
		c = -1732584194
		d = 271733878
		e = -1009589776
		i = 0
		while i < _hx_builtin.len(x):
			olda = a
			oldb = b
			oldc = c
			oldd = d
			olde = e
			j = 0
			while j < 80:
				if j < 16:
					_hx_array_set(w,j, _hx_array_get(x,i + j))
				else:
					num = _hx_array_get(w,j - 3) ^ _hx_array_get(w,j - 8) ^ _hx_array_get(w,j - 14) ^ _hx_array_get(w,j - 16)
					_hx_array_set(w,j, num << 1 | _hx_rshift(num, 32 - 1))
				
				t = (a << 5 | _hx_rshift(a, 32 - 5)) + self.ft(j, b, c, d) + e + _hx_array_get(w,j) + self.kt(j)
				e = d
				d = c
				c = b << 30 | _hx_rshift(b, 32 - 30)
				b = a
				a = t
				j = j + 1
			
			a = a + olda
			b = b + oldb
			c = c + oldc
			d = d + oldd
			e = e + olde
			i = i + 16
		
		return [a, b, c, d, e]
	

	def rol(self,num,cnt):
		return num << cnt | _hx_rshift(num, 32 - cnt)

	def ft(self,t,b,c,d):
		if t < 20:
			return b & c | ~b & d
		
		if t < 40:
			return b ^ c ^ d
		
		if t < 60:
			return b & c | b & d | c & d
		
		return b ^ c ^ d
	

	def kt(self,t):
		if t < 20:
			return 1518500249
		
		if t < 40:
			return 1859775393
		
		if t < 60:
			return -1894007588
		
		return -899497514
	

	def hex(self,a):
		str = ""
		hex_chr = "0123456789abcdef"
		_g = 0
		while _g < _hx_builtin.len(a):
			num = _hx_array_get(a,_g)
			_g = _g + 1
			j = 7
			while j >= 0:
				index = _hx_rshift(num, (j << 2)) & 15
				if index < 0 or index >= _hx_builtin.len(hex_chr):
					str = Std.string(str) + ""
				else:
					str = Std.string(str) + Std.string(hex_chr[index])
				
				j = j - 1
			
		
		
		return str
	





haxe_crypto_Sha1._hx_class = haxe_crypto_Sha1
haxe_crypto_Sha1._hx_class_name = "haxe.crypto.Sha1"
_hx_classes["haxe.crypto.Sha1"] = haxe_crypto_Sha1
_hx_c.haxe_crypto_Sha1 = haxe_crypto_Sha1
haxe_crypto_Sha1._hx_fields = []
haxe_crypto_Sha1._hx_props = []
haxe_crypto_Sha1._hx_methods = ["doEncode","rol","ft","kt","hex"]
haxe_crypto_Sha1._hx_statics = ["encode","make","str2blks","bytes2blks"]
haxe_crypto_Sha1._hx_interfaces = []
haxe_crypto_Sha1._hx_meta = _hx_c._hx_AnonObject(obj=_hx_c._hx_AnonObject(),statics=_hx_c._hx_AnonObject(),fields=_hx_c._hx_AnonObject())
def haxe_crypto_Sha1_hx_empty_init (_hx_o):
	pass
haxe_crypto_Sha1._hx_empty_init = haxe_crypto_Sha1_hx_empty_init
# print haxe.ds.ArraySort.ArraySort
class haxe_ds_ArraySort:

	pass




haxe_ds_ArraySort._hx_class = haxe_ds_ArraySort
haxe_ds_ArraySort._hx_class_name = "haxe.ds.ArraySort"
_hx_classes["haxe.ds.ArraySort"] = haxe_ds_ArraySort
_hx_c.haxe_ds_ArraySort = haxe_ds_ArraySort
haxe_ds_ArraySort._hx_fields = []
haxe_ds_ArraySort._hx_props = []
haxe_ds_ArraySort._hx_methods = []
haxe_ds_ArraySort._hx_statics = ["sort","rec","doMerge","rotate","gcd","upper","lower","swap","compare"]
haxe_ds_ArraySort._hx_interfaces = []
haxe_ds_ArraySort._hx_meta = _hx_c._hx_AnonObject(obj=_hx_c._hx_AnonObject(),statics=_hx_c._hx_AnonObject(),fields=_hx_c._hx_AnonObject())
def haxe_ds_ArraySort_hx_empty_init (_hx_o):
	pass
haxe_ds_ArraySort._hx_empty_init = haxe_ds_ArraySort_hx_empty_init
# print haxe.ds.BalancedTree.BalancedTree
class haxe_ds_BalancedTree:


	def __init__(self):
		self.root = None
		None
	
	# var root
	def set(self,key,value):
		self.root = self.setLoop(key, value, self.root)

	def get(self,key):
		node = self.root
		while node is not None:
			c = self.compare(key, node.key)
			if c == 0:
				return node.value
			
			if c < 0:
				node = node.left
			else:
				node = node.right
		
		return None
	

	def remove(self,key):
		try:
			self.root = self.removeLoop(key, self.root)
			return True
	
		except Exception as _hx_e:
			_hx_e1 = _hx_e.val if isinstance(_hx_e, _HxException) else _hx_e
			if isinstance(_hx_e1, _hx_c.String):
				e = _hx_e1
				return False
			else:
				raise _hx_e

	def exists(self,key):
		node = self.root
		while node is not None:
			c = self.compare(key, node.key)
			if c == 0:
				return True
			elif c < 0:
				node = node.left
			else:
				node = node.right
		
		return False
	

	def iterator(self):
		ret = []
		self.iteratorLoop(self.root, ret)
		it = ret.__iter__()
		return _hx_c.python_HaxeIterator(it)
		
	

	def keys(self):
		ret = []
		self.keysLoop(self.root, ret)
		it = ret.__iter__()
		return _hx_c.python_HaxeIterator(it)
		
	

	def setLoop(self,k,v,node):
		if node is None:
			return _hx_c.haxe_ds_TreeNode(None, k, v, None)
		
		c = self.compare(k, node.key)
		if c == 0:
			return _hx_c.haxe_ds_TreeNode(node.left, k, v, node.right, 0 if (node is None) else node._height)
		elif c < 0:
			nl = self.setLoop(k, v, node.left)
			return self.balance(nl, node.key, node.value, node.right)
		
		else:
			nr = self.setLoop(k, v, node.right)
			return self.balance(node.left, node.key, node.value, nr)
		
	

	def removeLoop(self,k,node):
		if node is None:
			raise _HxException("Not_found")
		
		c = self.compare(k, node.key)
		if c == 0:
			return self.merge(node.left, node.right)
		elif c < 0:
			return self.balance(self.removeLoop(k, node.left), node.key, node.value, node.right)
		else:
			return self.balance(node.left, node.key, node.value, self.removeLoop(k, node.right))
	

	def iteratorLoop(self,node,acc):
		if node is not None:
			self.iteratorLoop(node.left, acc)
			acc.append(node.value)
			_hx_builtin.len(acc)
			
			self.iteratorLoop(node.right, acc)
	
		

	def keysLoop(self,node,acc):
		if node is not None:
			self.keysLoop(node.left, acc)
			acc.append(node.key)
			_hx_builtin.len(acc)
			
			self.keysLoop(node.right, acc)
	
		

	def merge(self,t1,t2):
		if t1 is None:
			return t2
		
		if t2 is None:
			return t1
		
		t = self.minBinding(t2)
		return self.balance(t1, t.key, t.value, self.removeMinBinding(t2))
	

	def minBinding(self,t):
		if t is None:
			raise _HxException("Not_found")
		elif t.left is None:
			return t
		else:
			return self.minBinding(t.left)

	def removeMinBinding(self,t):
		if t.left is None:
			return t.right
		else:
			return self.balance(self.removeMinBinding(t.left), t.key, t.value, t.right)

	def balance(self,l,k,v,r):
		hl = None
		if l is None:
			hl = 0
		else:
			hl = l._height
		hr = None
		if r is None:
			hr = 0
		else:
			hr = r._height
		if hl > hr + 2:
			def _hx_local_1():
				_this = l.left
				return 0 if (_this is None) else _this._height
			
			def _hx_local_0():
				_this1 = l.right
				return 0 if (_this1 is None) else _this1._height
			
			if _hx_local_1() >= _hx_local_0():
				return _hx_c.haxe_ds_TreeNode(l.left, l.key, l.value, _hx_c.haxe_ds_TreeNode(l.right, k, v, r))
			else:
				return _hx_c.haxe_ds_TreeNode(_hx_c.haxe_ds_TreeNode(l.left, l.key, l.value, l.right.left), l.right.key, l.right.value, _hx_c.haxe_ds_TreeNode(l.right.right, k, v, r))
		
		elif hr > hl + 2:
			def _hx_local_3():
				_this2 = r.right
				return 0 if (_this2 is None) else _this2._height
			
			def _hx_local_2():
				_this3 = r.left
				return 0 if (_this3 is None) else _this3._height
			
			if _hx_local_3() > _hx_local_2():
				return _hx_c.haxe_ds_TreeNode(_hx_c.haxe_ds_TreeNode(l, k, v, r.left), r.key, r.value, r.right)
			else:
				return _hx_c.haxe_ds_TreeNode(_hx_c.haxe_ds_TreeNode(l, k, v, r.left.left), r.left.key, r.left.value, _hx_c.haxe_ds_TreeNode(r.left.right, r.key, r.value, r.right))
		
		else:
			return _hx_c.haxe_ds_TreeNode(l, k, v, r, (hl if (hl > hr) else hr) + 1)
	

	def compare(self,k1,k2):
		return _hx_c.Reflect.compare(k1, k2)

	def toString(self):
		return Std.string("{" + Std.string(self.root.toString())) + "}"





haxe_ds_BalancedTree._hx_class = haxe_ds_BalancedTree
haxe_ds_BalancedTree._hx_class_name = "haxe.ds.BalancedTree"
_hx_classes["haxe.ds.BalancedTree"] = haxe_ds_BalancedTree
_hx_c.haxe_ds_BalancedTree = haxe_ds_BalancedTree
haxe_ds_BalancedTree._hx_fields = ["root"]
haxe_ds_BalancedTree._hx_props = []
haxe_ds_BalancedTree._hx_methods = ["set","get","remove","exists","iterator","keys","setLoop","removeLoop","iteratorLoop","keysLoop","merge","minBinding","removeMinBinding","balance","compare","toString"]
haxe_ds_BalancedTree._hx_statics = []
haxe_ds_BalancedTree._hx_interfaces = []
haxe_ds_BalancedTree._hx_meta = _hx_c._hx_AnonObject(obj=_hx_c._hx_AnonObject(),statics=_hx_c._hx_AnonObject(),fields=_hx_c._hx_AnonObject())
def haxe_ds_BalancedTree_hx_empty_init (_hx_o):
	_hx_o.root = None
haxe_ds_BalancedTree._hx_empty_init = haxe_ds_BalancedTree_hx_empty_init
# print haxe.ds.BalancedTree.TreeNode
class haxe_ds_TreeNode:


	def __init__(self,l,k,v,r,h = -1):
		if h is None:
			h = -1
		
		self.left = None
		self.right = None
		self.key = None
		self.value = None
		self._height = None
		self.left = l
		self.key = k
		self.value = v
		self.right = r
		if h == -1:
			def _hx_local_4():
				def _hx_local_1():
					_this = self.left
					return 0 if (_this is None) else _this._height
				
				def _hx_local_0():
					_this1 = self.right
					return 0 if (_this1 is None) else _this1._height
				
				def _hx_local_2():
					_this2 = self.left
					return 0 if (_this2 is None) else _this2._height
				
				def _hx_local_3():
					_this3 = self.right
					return 0 if (_this3 is None) else _this3._height
				
				return _hx_local_2() if _hx_local_1() > _hx_local_0() else _hx_local_3()
			
			self._height = (_hx_local_4()) + 1
		
		else:
			self._height = h
		
	
	# var left
	# var right
	# var key
	# var value
	# var _height
	def toString(self):
		return Std.string(Std.string(("" if (self.left is None) else Std.string(self.left.toString()) + ", ")) + Std.string((Std.string(Std.string("" + Std.string(_hx_c.Std.string(self.key))) + "=") + Std.string(_hx_c.Std.string(self.value))))) + Std.string(("" if (self.right is None) else ", " + Std.string(self.right.toString())))





haxe_ds_TreeNode._hx_class = haxe_ds_TreeNode
haxe_ds_TreeNode._hx_class_name = "haxe.ds.TreeNode"
_hx_classes["haxe.ds.TreeNode"] = haxe_ds_TreeNode
_hx_c.haxe_ds_TreeNode = haxe_ds_TreeNode
haxe_ds_TreeNode._hx_fields = ["left","right","key","value","_height"]
haxe_ds_TreeNode._hx_props = []
haxe_ds_TreeNode._hx_methods = ["toString"]
haxe_ds_TreeNode._hx_statics = []
haxe_ds_TreeNode._hx_interfaces = []
haxe_ds_TreeNode._hx_meta = _hx_c._hx_AnonObject(obj=_hx_c._hx_AnonObject(),statics=_hx_c._hx_AnonObject(),fields=_hx_c._hx_AnonObject())
def haxe_ds_TreeNode_hx_empty_init (_hx_o):
	_hx_o.left = None
	_hx_o.right = None
	_hx_o.key = None
	_hx_o.value = None
	_hx_o._height = None
haxe_ds_TreeNode._hx_empty_init = haxe_ds_TreeNode_hx_empty_init
# print haxe.ds.EnumValueMap.EnumValueMap
class haxe_ds_EnumValueMap(haxe_ds_BalancedTree):


	def __init__(self):
		super().__init__()
	def compare(self,k1,k2):
		d = k1.index - k2.index
		if d != 0:
			return d
		
		p1 = k1.params
		p2 = k2.params
		if _hx_builtin.len(p1) == 0 and _hx_builtin.len(p2) == 0:
			return 0
		
		return self.compareArgs(p1, p2)
	

	def compareArgs(self,a1,a2):
		ld = _hx_builtin.len(a1) - _hx_builtin.len(a2)
		if ld != 0:
			return ld
		
		_g1 = 0
		_g = _hx_builtin.len(a1)
		while _g1 < _g:
			i = _g1
			_g1 = _g1 + 1
			
			d = self.compareArg(_hx_array_get(a1,i), _hx_array_get(a2,i))
			if d != 0:
				return d
			
		
		
		return 0
	

	def compareArg(self,v1,v2):
		if _hx_c.Reflect.isEnumValue(v1) and _hx_c.Reflect.isEnumValue(v2):
			return self.compare(v1, v2)
		elif _hx_c.Std._hx_is(v1, list) and _hx_c.Std._hx_is(v2, list):
			return self.compareArgs(v1, v2)
		else:
			return _hx_c.Reflect.compare(v1, v2)





haxe_ds_EnumValueMap._hx_class = haxe_ds_EnumValueMap
haxe_ds_EnumValueMap._hx_class_name = "haxe.ds.EnumValueMap"
_hx_classes["haxe.ds.EnumValueMap"] = haxe_ds_EnumValueMap
_hx_c.haxe_ds_EnumValueMap = haxe_ds_EnumValueMap
haxe_ds_EnumValueMap._hx_fields = []
haxe_ds_EnumValueMap._hx_props = []
haxe_ds_EnumValueMap._hx_methods = ["compare","compareArgs","compareArg"]
haxe_ds_EnumValueMap._hx_statics = []
haxe_ds_EnumValueMap._hx_interfaces = [IMap]
haxe_ds_EnumValueMap._hx_super = haxe_ds_BalancedTree
haxe_ds_EnumValueMap._hx_meta = _hx_c._hx_AnonObject(obj=_hx_c._hx_AnonObject(),statics=_hx_c._hx_AnonObject(),fields=_hx_c._hx_AnonObject())
def haxe_ds_EnumValueMap_hx_empty_init (_hx_o):
	pass
haxe_ds_EnumValueMap._hx_empty_init = haxe_ds_EnumValueMap_hx_empty_init
# print haxe.ds.GenericStack.GenericCell
class haxe_ds_GenericCell:


	def __init__(self,elt,next):
		self.elt = None
		self.next = None
		self.elt = elt
		self.next = next
		
	
	# var elt
	# var next




haxe_ds_GenericCell._hx_class = haxe_ds_GenericCell
haxe_ds_GenericCell._hx_class_name = "haxe.ds.GenericCell"
_hx_classes["haxe.ds.GenericCell"] = haxe_ds_GenericCell
_hx_c.haxe_ds_GenericCell = haxe_ds_GenericCell
haxe_ds_GenericCell._hx_fields = ["elt","next"]
haxe_ds_GenericCell._hx_props = []
haxe_ds_GenericCell._hx_methods = []
haxe_ds_GenericCell._hx_statics = []
haxe_ds_GenericCell._hx_interfaces = []
haxe_ds_GenericCell._hx_meta = _hx_c._hx_AnonObject(obj=_hx_c._hx_AnonObject(),statics=_hx_c._hx_AnonObject(),fields=_hx_c._hx_AnonObject())
def haxe_ds_GenericCell_hx_empty_init (_hx_o):
	_hx_o.elt = None
	_hx_o.next = None
haxe_ds_GenericCell._hx_empty_init = haxe_ds_GenericCell_hx_empty_init
# print haxe.ds.GenericStack.GenericStack
class haxe_ds_GenericStack:


	def __init__(self):
		self.head = None
		None
	
	# var head
	def add(self,item):
		self.head = _hx_c.haxe_ds_GenericCell(item, self.head)

	def first(self):
		if self.head is None:
			return None
		else:
			return self.head.elt

	def pop(self):
		k = self.head
		if k is None:
			return None
		else:
			self.head = k.next
			return k.elt
		
	

	def isEmpty(self):
		return self.head is None

	def remove(self,v):
		prev = None
		l = self.head
		while l is not None:
			if l.elt == v:
				if prev is None:
					self.head = l.next
				else:
					prev.next = l.next
				break
			
			
			prev = l
			l = l.next
		
		return l is not None
	

	def iterator(self):
		l = self.head
		def _hx_local_2():
			def _hx_local_0():
				return l is not None
			def _hx_local_1():
				nonlocal l
				k = l
				l = k.next
				return k.elt
				
			
			return _hx_c._hx_AnonObject(hasNext = _hx_local_0 ,next = _hx_local_1 )
		
		return _hx_local_2()
	

	def toString(self):
		a = list()
		l = self.head
		while l is not None:
			a.append(l.elt)
			_hx_builtin.len(a)
			
			l = l.next
		
		return Std.string("{" + Std.string(",".join(_hx_builtin.list(_hx_builtin.map(_hx_c.Std.string, a))))) + "}"
	





haxe_ds_GenericStack._hx_class = haxe_ds_GenericStack
haxe_ds_GenericStack._hx_class_name = "haxe.ds.GenericStack"
_hx_classes["haxe.ds.GenericStack"] = haxe_ds_GenericStack
_hx_c.haxe_ds_GenericStack = haxe_ds_GenericStack
haxe_ds_GenericStack._hx_fields = ["head"]
haxe_ds_GenericStack._hx_props = []
haxe_ds_GenericStack._hx_methods = ["add","first","pop","isEmpty","remove","iterator","toString"]
haxe_ds_GenericStack._hx_statics = []
haxe_ds_GenericStack._hx_interfaces = []
haxe_ds_GenericStack._hx_meta = _hx_c._hx_AnonObject(obj=_hx_c._hx_AnonObject(),statics=_hx_c._hx_AnonObject(),fields=_hx_c._hx_AnonObject())
def haxe_ds_GenericStack_hx_empty_init (_hx_o):
	_hx_o.head = None
haxe_ds_GenericStack._hx_empty_init = haxe_ds_GenericStack_hx_empty_init
# print haxe.ds.HashMap.HashMap_Impl_
class haxe_ds_HashMap_HashMap_Impl_:

	pass




haxe_ds_HashMap_HashMap_Impl_._hx_class = haxe_ds_HashMap_HashMap_Impl_
haxe_ds_HashMap_HashMap_Impl_._hx_class_name = "haxe.ds._HashMap._HashMap.HashMap_Impl_"
_hx_classes["haxe.ds._HashMap._HashMap.HashMap_Impl_"] = haxe_ds_HashMap_HashMap_Impl_
_hx_c.haxe_ds_HashMap_HashMap_Impl_ = haxe_ds_HashMap_HashMap_Impl_
haxe_ds_HashMap_HashMap_Impl_._hx_fields = []
haxe_ds_HashMap_HashMap_Impl_._hx_props = []
haxe_ds_HashMap_HashMap_Impl_._hx_methods = []
haxe_ds_HashMap_HashMap_Impl_._hx_statics = ["_new","set","get","exists","remove","keys","iterator"]
haxe_ds_HashMap_HashMap_Impl_._hx_interfaces = []
haxe_ds_HashMap_HashMap_Impl_._hx_meta = _hx_c._hx_AnonObject(obj=_hx_c._hx_AnonObject(),statics=_hx_c._hx_AnonObject(),fields=_hx_c._hx_AnonObject())
def haxe_ds_HashMap_HashMap_Impl__hx_empty_init (_hx_o):
	pass
haxe_ds_HashMap_HashMap_Impl_._hx_empty_init = haxe_ds_HashMap_HashMap_Impl__hx_empty_init
# print haxe.ds.IntMap.IntMap
class haxe_ds_IntMap:


	def __init__(self):
		self.h = None
		self.h = _hx_c.python_lib_Dict()
	
	# var h
	def set(self,key,value):
		self.h[key] = value

	def get(self,key):
		return self.h.get(key, None)

	def exists(self,key):
		return key in self.h

	def remove(self,key):
		if not key in self.h:
			return False
		
		del self.h[key]
		return True
	

	def keys(self):
		a = []
		for key in self.h:
			a.append(key)
		it = a.__iter__()
		return _hx_c.python_HaxeIterator(it)
		
	

	def iterator(self):
		iter = self.keys()
		ref = self.h
		def _hx_local_2():
			def _hx_local_0():
				return iter.hasNext()
			def _hx_local_1():
				i = iter.next()
				return ref.get(i, None)
			
			return _hx_c._hx_AnonObject(hasNext = _hx_local_0 ,next = _hx_local_1 )
		
		return _hx_local_2()
	

	def toString(self):
		s = _hx_c.StringBuf()
		s1 = _hx_c.Std.string("{")
		s.b.write(s1)
		
		it = self.keys()
		_it = it
		while _it.hasNext():
			i = _it.next()
			s2 = _hx_c.Std.string(i)
			s.b.write(s2)
			
			s3 = _hx_c.Std.string(" => ")
			s.b.write(s3)
			
			x = _hx_c.Std.string(self.h.get(i, None))
			s4 = _hx_c.Std.string(x)
			s.b.write(s4)
			
			
			if it.hasNext():
				s5 = _hx_c.Std.string(", ")
				s.b.write(s5)
			
			
		
		s6 = _hx_c.Std.string("}")
		s.b.write(s6)
		
		return s.b.getvalue()
	





haxe_ds_IntMap._hx_class = haxe_ds_IntMap
haxe_ds_IntMap._hx_class_name = "haxe.ds.IntMap"
_hx_classes["haxe.ds.IntMap"] = haxe_ds_IntMap
_hx_c.haxe_ds_IntMap = haxe_ds_IntMap
haxe_ds_IntMap._hx_fields = ["h"]
haxe_ds_IntMap._hx_props = []
haxe_ds_IntMap._hx_methods = ["set","get","exists","remove","keys","iterator","toString"]
haxe_ds_IntMap._hx_statics = []
haxe_ds_IntMap._hx_interfaces = [IMap]
haxe_ds_IntMap._hx_meta = _hx_c._hx_AnonObject(obj=_hx_c._hx_AnonObject(),statics=_hx_c._hx_AnonObject(),fields=_hx_c._hx_AnonObject())
def haxe_ds_IntMap_hx_empty_init (_hx_o):
	_hx_o.h = None
haxe_ds_IntMap._hx_empty_init = haxe_ds_IntMap_hx_empty_init
# print haxe.ds.ObjectMap.ObjectMap
class haxe_ds_ObjectMap:


	def __init__(self):
		self.h = None
		self.h = _hx_c.python_lib_Dict()
	
	# var h
	def set(self,key,value):
		self.h[key] = value

	def get(self,key):
		return self.h.get(key, None)

	def exists(self,key):
		return key in self.h

	def remove(self,key):
		r = key in self.h
		if r:
			del self.h[key]
		
		return r
	

	def keys(self):
		p = None
		_this = self.h.keys()
		p = _hx_builtin.iter(_this)
		
		return _hx_c.python_HaxeIterator(p)
	

	def iterator(self):
		p = None
		_this = self.h.values()
		p = _hx_builtin.iter(_this)
		
		return _hx_c.python_HaxeIterator(p)
	

	def toString(self):
		s = _hx_c.StringBuf()
		s1 = _hx_c.Std.string("{")
		s.b.write(s1)
		
		it = self.keys()
		_it = it
		while _it.hasNext():
			i = _it.next()
			x = _hx_c.Std.string(i)
			s2 = _hx_c.Std.string(x)
			s.b.write(s2)
			
			
			s3 = _hx_c.Std.string(" => ")
			s.b.write(s3)
			
			x1 = _hx_c.Std.string(self.h.get(i, None))
			s4 = _hx_c.Std.string(x1)
			s.b.write(s4)
			
			
			if it.hasNext():
				s5 = _hx_c.Std.string(", ")
				s.b.write(s5)
			
			
		
		s6 = _hx_c.Std.string("}")
		s.b.write(s6)
		
		return s.b.getvalue()
	





haxe_ds_ObjectMap._hx_class = haxe_ds_ObjectMap
haxe_ds_ObjectMap._hx_class_name = "haxe.ds.ObjectMap"
_hx_classes["haxe.ds.ObjectMap"] = haxe_ds_ObjectMap
_hx_c.haxe_ds_ObjectMap = haxe_ds_ObjectMap
haxe_ds_ObjectMap._hx_fields = ["h"]
haxe_ds_ObjectMap._hx_props = []
haxe_ds_ObjectMap._hx_methods = ["set","get","exists","remove","keys","iterator","toString"]
haxe_ds_ObjectMap._hx_statics = []
haxe_ds_ObjectMap._hx_interfaces = [IMap]
haxe_ds_ObjectMap._hx_meta = _hx_c._hx_AnonObject(obj=_hx_c._hx_AnonObject(),statics=_hx_c._hx_AnonObject(),fields=_hx_c._hx_AnonObject())
def haxe_ds_ObjectMap_hx_empty_init (_hx_o):
	_hx_o.h = None
haxe_ds_ObjectMap._hx_empty_init = haxe_ds_ObjectMap_hx_empty_init
class haxe_ds_Option(_hx_c.Enum):
	def __init__(self, t, i, p):
		super(haxe_ds_Option,self).__init__(t, i, p)

haxe_ds_Option._hx_None = haxe_ds_Option("None", 1, list())

def _haxe_ds_Option_statics_Some (v):
	return haxe_ds_Option("Some", 0, [v])
haxe_ds_Option.Some = _haxe_ds_Option_statics_Some

haxe_ds_Option._hx_constructs = ["Some","None"]
haxe_ds_Option._hx_class = haxe_ds_Option
haxe_ds_Option._hx_class_name = "haxe.ds.Option"
_hx_classes["haxe.ds.Option"] = haxe_ds_Option
_hx_c.haxe_ds_Option = haxe_ds_Option
haxe_ds_Option._hx_meta = _hx_c._hx_AnonObject(obj=_hx_c._hx_AnonObject(),fields=_hx_c._hx_AnonObject())
# print haxe.ds.StringMap.StringMap
class haxe_ds_StringMap:


	def __init__(self):
		self.h = None
		self.h = {}
	
	# var h
	def set(self,key,value):
		self.h["$" + Std.string(key)] = value

	def get(self,key):
		return self.h.get("$" + Std.string(key), None)

	def exists(self,key):
		return "$" + Std.string(key) in self.h

	def remove(self,key):
		key = "$" + Std.string(key)
		if not key in self.h:
			return False
		
		del self.h[key]
		return True
	

	def keys(self):
		a = []
		for key in self.h:
			a.append(key[1:])
		it = a.__iter__()
		return _hx_c.python_HaxeIterator(it)
		
	

	def iterator(self):
		iter = self.keys()
		ref = self.h
		def _hx_local_2():
			def _hx_local_0():
				return iter.hasNext()
			def _hx_local_1():
				i = iter.next()
				return ref.get("$" + Std.string(i), None)
			
			return _hx_c._hx_AnonObject(hasNext = _hx_local_0 ,next = _hx_local_1 )
		
		return _hx_local_2()
	

	def toString(self):
		s = _hx_c.StringBuf()
		s1 = _hx_c.Std.string("{")
		s.b.write(s1)
		
		it = self.keys()
		_it = it
		while _it.hasNext():
			i = _it.next()
			s2 = _hx_c.Std.string(i)
			s.b.write(s2)
			
			s3 = _hx_c.Std.string(" => ")
			s.b.write(s3)
			
			x = _hx_c.Std.string(self.get(i))
			s4 = _hx_c.Std.string(x)
			s.b.write(s4)
			
			
			if it.hasNext():
				s5 = _hx_c.Std.string(", ")
				s.b.write(s5)
			
			
		
		s6 = _hx_c.Std.string("}")
		s.b.write(s6)
		
		return s.b.getvalue()
	





haxe_ds_StringMap._hx_class = haxe_ds_StringMap
haxe_ds_StringMap._hx_class_name = "haxe.ds.StringMap"
_hx_classes["haxe.ds.StringMap"] = haxe_ds_StringMap
_hx_c.haxe_ds_StringMap = haxe_ds_StringMap
haxe_ds_StringMap._hx_fields = ["h"]
haxe_ds_StringMap._hx_props = []
haxe_ds_StringMap._hx_methods = ["set","get","exists","remove","keys","iterator","toString"]
haxe_ds_StringMap._hx_statics = []
haxe_ds_StringMap._hx_interfaces = [IMap]
haxe_ds_StringMap._hx_meta = _hx_c._hx_AnonObject(obj=_hx_c._hx_AnonObject(),statics=_hx_c._hx_AnonObject(),fields=_hx_c._hx_AnonObject())
def haxe_ds_StringMap_hx_empty_init (_hx_o):
	_hx_o.h = None
haxe_ds_StringMap._hx_empty_init = haxe_ds_StringMap_hx_empty_init
# print haxe.ds.Vector.Vector_Impl_
class haxe_ds_Vector_Vector_Impl_:

	pass




haxe_ds_Vector_Vector_Impl_._hx_class = haxe_ds_Vector_Vector_Impl_
haxe_ds_Vector_Vector_Impl_._hx_class_name = "haxe.ds._Vector._Vector.Vector_Impl_"
_hx_classes["haxe.ds._Vector._Vector.Vector_Impl_"] = haxe_ds_Vector_Vector_Impl_
_hx_c.haxe_ds_Vector_Vector_Impl_ = haxe_ds_Vector_Vector_Impl_
haxe_ds_Vector_Vector_Impl_._hx_fields = []
haxe_ds_Vector_Vector_Impl_._hx_props = []
haxe_ds_Vector_Vector_Impl_._hx_methods = []
haxe_ds_Vector_Vector_Impl_._hx_statics = ["_new","get","set","get_length","blit","toData","fromData","fromArrayCopy"]
haxe_ds_Vector_Vector_Impl_._hx_interfaces = []
haxe_ds_Vector_Vector_Impl_._hx_meta = _hx_c._hx_AnonObject(obj=_hx_c._hx_AnonObject(),statics=_hx_c._hx_AnonObject(),fields=_hx_c._hx_AnonObject())
def haxe_ds_Vector_Vector_Impl__hx_empty_init (_hx_o):
	pass
haxe_ds_Vector_Vector_Impl_._hx_empty_init = haxe_ds_Vector_Vector_Impl__hx_empty_init
# print haxe.ds.WeakMap.WeakMap
class haxe_ds_WeakMap:


	def __init__(self):
		raise _HxException("Not implemented for this platform")
	def set(self,key,value):
		None

	def get(self,key):
		return None

	def exists(self,key):
		return False

	def remove(self,key):
		return False

	def keys(self):
		return None

	def iterator(self):
		return None

	def toString(self):
		return None





haxe_ds_WeakMap._hx_class = haxe_ds_WeakMap
haxe_ds_WeakMap._hx_class_name = "haxe.ds.WeakMap"
_hx_classes["haxe.ds.WeakMap"] = haxe_ds_WeakMap
_hx_c.haxe_ds_WeakMap = haxe_ds_WeakMap
haxe_ds_WeakMap._hx_fields = []
haxe_ds_WeakMap._hx_props = []
haxe_ds_WeakMap._hx_methods = ["set","get","exists","remove","keys","iterator","toString"]
haxe_ds_WeakMap._hx_statics = []
haxe_ds_WeakMap._hx_interfaces = [IMap]
haxe_ds_WeakMap._hx_meta = _hx_c._hx_AnonObject(obj=_hx_c._hx_AnonObject(),statics=_hx_c._hx_AnonObject(),fields=_hx_c._hx_AnonObject())
def haxe_ds_WeakMap_hx_empty_init (_hx_o):
	pass
haxe_ds_WeakMap._hx_empty_init = haxe_ds_WeakMap_hx_empty_init
# print haxe.io.BytesBuffer.BytesBuffer
class haxe_io_BytesBuffer:


	def __init__(self):
		self.b = None
		self.b = list()
	
	# var b
	# var length
	def get_length(self):
		return _hx_builtin.len(self.b)

	def addByte(self,byte):
		_this = self.b
		_this.append(byte)
		_hx_builtin.len(_this)
		
	

	def add(self,src):
		b1 = self.b
		b2 = src.b
		_g1 = 0
		_g = src.length
		while _g1 < _g:
			i = _g1
			_g1 = _g1 + 1
			
			_this = self.b
			_this.append(_hx_array_get(b2,i))
			_hx_builtin.len(_this)
			
		
		
	

	def addBytes(self,src,pos,len):
		if pos < 0 or len < 0 or pos + len > src.length:
			raise _HxException(_hx_c.haxe_io_Error.OutsideBounds)
		
		b1 = self.b
		b2 = src.b
		_g1 = pos
		_g = pos + len
		while _g1 < _g:
			i = _g1
			_g1 = _g1 + 1
			
			_this = self.b
			_this.append(_hx_array_get(b2,i))
			_hx_builtin.len(_this)
			
		
		
	

	def getBytes(self):
		bytes = _hx_c.haxe_io_Bytes(_hx_builtin.len(self.b), self.b)
		self.b = None
		return bytes
	





haxe_io_BytesBuffer._hx_class = haxe_io_BytesBuffer
haxe_io_BytesBuffer._hx_class_name = "haxe.io.BytesBuffer"
_hx_classes["haxe.io.BytesBuffer"] = haxe_io_BytesBuffer
_hx_c.haxe_io_BytesBuffer = haxe_io_BytesBuffer
haxe_io_BytesBuffer._hx_fields = ["b"]
haxe_io_BytesBuffer._hx_props = ["length"]
haxe_io_BytesBuffer._hx_methods = ["get_length","addByte","add","addBytes","getBytes"]
haxe_io_BytesBuffer._hx_statics = []
haxe_io_BytesBuffer._hx_interfaces = []
haxe_io_BytesBuffer._hx_meta = _hx_c._hx_AnonObject(obj=_hx_c._hx_AnonObject(),statics=_hx_c._hx_AnonObject(),fields=_hx_c._hx_AnonObject())
def haxe_io_BytesBuffer_hx_empty_init (_hx_o):
	_hx_o.b = None
haxe_io_BytesBuffer._hx_empty_init = haxe_io_BytesBuffer_hx_empty_init
# print haxe.io.Input.Input
class haxe_io_Input:

	# var bigEndian
	def readByte(self):
		raise _HxException("Not implemented")

	def readBytes(self,s,pos,len):
		k = len
		b = s.b
		if pos < 0 or len < 0 or pos + len > s.length:
			raise _HxException(_hx_c.haxe_io_Error.OutsideBounds)
		
		while k > 0:
			_hx_array_set(b,pos, self.readByte())
			pos = pos + 1
			k = k - 1
		
		return len
	

	def close(self):
		None

	def set_bigEndian(self,b):
		self.bigEndian = b
		return b
	

	def readAll(self,bufsize = None):
		if bufsize is None:
			bufsize = None
		
		if bufsize is None:
			bufsize = 1 << 14
		
		buf = _hx_c.haxe_io_Bytes.alloc(bufsize)
		total = _hx_c.haxe_io_BytesBuffer()
		try:
			while True:
				len = self.readBytes(buf, 0, bufsize)
				if len == 0:
					raise _HxException(_hx_c.haxe_io_Error.Blocked)
				
				if 0 < 0 or len < 0 or 0 + len > buf.length:
					raise _HxException(_hx_c.haxe_io_Error.OutsideBounds)
				
				b1 = total.b
				b2 = buf.b
				_g1 = 0
				_g = 0 + len
				while _g1 < _g:
					i = _g1
					_g1 = _g1 + 1
					
					_this = total.b
					_this.append(_hx_array_get(b2,i))
					_hx_builtin.len(_this)
					
				
				
				
		
		except Exception as _hx_e:
			_hx_e1 = _hx_e.val if isinstance(_hx_e, _HxException) else _hx_e
			if isinstance(_hx_e1, _hx_c.haxe_io_Eof):
				e = _hx_e1
				None
			else:
				raise _hx_e
		return total.getBytes()
	

	def readFullBytes(self,s,pos,len):
		while len > 0:
			k = self.readBytes(s, pos, len)
			pos = pos + k
			len = len - k
	

	def read(self,nbytes):
		s = _hx_c.haxe_io_Bytes.alloc(nbytes)
		p = 0
		while nbytes > 0:
			k = self.readBytes(s, p, nbytes)
			if k == 0:
				raise _HxException(_hx_c.haxe_io_Error.Blocked)
			
			p = p + k
			nbytes = nbytes - k
		
		return s
	

	def readUntil(self,end):
		buf = _hx_c.StringBuf()
		last = None
		def _hx_local_0():
			nonlocal last
			last = self.readByte()
			return last
			
		
		while (_hx_local_0()) != end:
			s = None
			c = last
			s = "".join(_hx_builtin.map(_hx_builtin.chr, [c]))
			
			buf.b.write(s)
		
		return buf.b.getvalue()
	

	def readLine(self):
		buf = _hx_c.StringBuf()
		last = None
		s = None
		try:
			def _hx_local_0():
				nonlocal last
				last = self.readByte()
				return last
				
			
			while (_hx_local_0()) != 10:
				s1 = None
				c = last
				s1 = "".join(_hx_builtin.map(_hx_builtin.chr, [c]))
				
				buf.b.write(s1)
			
			s = buf.b.getvalue()
			def _hx_local_1():
				index = _hx_builtin.len(s) - 1
				return _hx_c.python_internal_StringImpl.charCodeAt(s, index)
			
			if _hx_local_1() == 13:
				s = _hx_c.python_Tools.substr(s, 0, -1)
			
		
		except Exception as _hx_e:
			_hx_e1 = _hx_e.val if isinstance(_hx_e, _HxException) else _hx_e
			if isinstance(_hx_e1, _hx_c.haxe_io_Eof):
				e = _hx_e1
				s = buf.b.getvalue()
				if _hx_builtin.len(s) == 0:
					raise _HxException(e)
				
		
			else:
				raise _hx_e
		return s
	

	def readFloat(self):
		bytes = []
		x = self.readByte()
		bytes.append(x)
		_hx_builtin.len(bytes)
		
		
		x1 = self.readByte()
		bytes.append(x1)
		_hx_builtin.len(bytes)
		
		
		x2 = self.readByte()
		bytes.append(x2)
		_hx_builtin.len(bytes)
		
		
		x3 = self.readByte()
		bytes.append(x3)
		_hx_builtin.len(bytes)
		
		
		if not self.bigEndian:
			bytes.reverse()
		
		sign = 1 - (_hx_array_get(bytes,0) >> 7 << 1)
		exp = (_hx_array_get(bytes,0) << 1 & 255 | _hx_array_get(bytes,1) >> 7) - 127
		sig = (_hx_array_get(bytes,1) & 127) << 16 | _hx_array_get(bytes,2) << 8 | _hx_array_get(bytes,3)
		if sig == 0 and exp == -127:
			return 0.0
		
		return sign * (1 + _hx_math.pow(2, -23) * sig) * _hx_math.pow(2, exp)
	

	def readDouble(self):
		bytes = []
		x = self.readByte()
		bytes.append(x)
		_hx_builtin.len(bytes)
		
		
		x1 = self.readByte()
		bytes.append(x1)
		_hx_builtin.len(bytes)
		
		
		x2 = self.readByte()
		bytes.append(x2)
		_hx_builtin.len(bytes)
		
		
		x3 = self.readByte()
		bytes.append(x3)
		_hx_builtin.len(bytes)
		
		
		x4 = self.readByte()
		bytes.append(x4)
		_hx_builtin.len(bytes)
		
		
		x5 = self.readByte()
		bytes.append(x5)
		_hx_builtin.len(bytes)
		
		
		x6 = self.readByte()
		bytes.append(x6)
		_hx_builtin.len(bytes)
		
		
		x7 = self.readByte()
		bytes.append(x7)
		_hx_builtin.len(bytes)
		
		
		if not self.bigEndian:
			bytes.reverse()
		
		sign = 1 - (_hx_array_get(bytes,0) >> 7 << 1)
		exp = (_hx_array_get(bytes,0) << 4 & 2047 | _hx_array_get(bytes,1) >> 4) - 1023
		sig = self.getDoubleSig(bytes)
		if sig == 0 and exp == -1023:
			return 0.0
		
		return sign * (1.0 + _hx_math.pow(2, -52) * sig) * _hx_math.pow(2, exp)
	

	def readInt8(self):
		n = self.readByte()
		if n >= 128:
			return n - 256
		
		return n
	

	def readInt16(self):
		ch1 = self.readByte()
		ch2 = self.readByte()
		n = None
		if self.bigEndian:
			n = ch2 | ch1 << 8
		else:
			n = ch1 | ch2 << 8
		if (n & 32768) != 0:
			return n - 65536
		
		return n
	

	def readUInt16(self):
		ch1 = self.readByte()
		ch2 = self.readByte()
		if self.bigEndian:
			return ch2 | ch1 << 8
		else:
			return ch1 | ch2 << 8
	

	def readInt24(self):
		ch1 = self.readByte()
		ch2 = self.readByte()
		ch3 = self.readByte()
		n = None
		if self.bigEndian:
			n = ch3 | ch2 << 8 | ch1 << 16
		else:
			n = ch1 | ch2 << 8 | ch3 << 16
		if (n & 8388608) != 0:
			return n - 16777216
		
		return n
	

	def readUInt24(self):
		ch1 = self.readByte()
		ch2 = self.readByte()
		ch3 = self.readByte()
		if self.bigEndian:
			return ch3 | ch2 << 8 | ch1 << 16
		else:
			return ch1 | ch2 << 8 | ch3 << 16
	

	def readInt32(self):
		ch1 = self.readByte()
		ch2 = self.readByte()
		ch3 = self.readByte()
		ch4 = self.readByte()
		n = None
		if self.bigEndian:
			n = ch4 | ch3 << 8 | ch2 << 16 | ch1 << 24
		else:
			n = ch1 | ch2 << 8 | ch3 << 16 | ch4 << 24
		if (n & -2147483648) != 0:
			return n | -2147483648
		else:
			return n
	

	def readString(self,len):
		b = _hx_c.haxe_io_Bytes.alloc(len)
		self.readFullBytes(b, 0, len)
		return b.toString()
	

	def getDoubleSig(self,bytes):
		return ((_hx_array_get(bytes,1) & 15) << 16 | _hx_array_get(bytes,2) << 8 | _hx_array_get(bytes,3)) * 4294967296. + (_hx_array_get(bytes,4) >> 7) * 2147483648 + ((_hx_array_get(bytes,4) & 127) << 24 | _hx_array_get(bytes,5) << 16 | _hx_array_get(bytes,6) << 8 | _hx_array_get(bytes,7))





haxe_io_Input._hx_class = haxe_io_Input
haxe_io_Input._hx_class_name = "haxe.io.Input"
_hx_classes["haxe.io.Input"] = haxe_io_Input
_hx_c.haxe_io_Input = haxe_io_Input
haxe_io_Input._hx_fields = ["bigEndian"]
haxe_io_Input._hx_props = []
haxe_io_Input._hx_methods = ["readByte","readBytes","close","set_bigEndian","readAll","readFullBytes","read","readUntil","readLine","readFloat","readDouble","readInt8","readInt16","readUInt16","readInt24","readUInt24","readInt32","readString","getDoubleSig"]
haxe_io_Input._hx_statics = []
haxe_io_Input._hx_interfaces = []
haxe_io_Input._hx_meta = _hx_c._hx_AnonObject(obj=_hx_c._hx_AnonObject(),statics=_hx_c._hx_AnonObject(),fields=_hx_c._hx_AnonObject())
def haxe_io_Input_hx_empty_init (_hx_o):
	_hx_o.bigEndian = None
haxe_io_Input._hx_empty_init = haxe_io_Input_hx_empty_init
# print haxe.io.BytesInput.BytesInput
class haxe_io_BytesInput(haxe_io_Input):


	def __init__(self,b,pos = None,len = None):
		if pos is None:
			pos = None
		
		if len is None:
			len = None
		
		self.b = None
		self.pos = None
		self.len = None
		self.totlen = None
		if pos is None:
			pos = 0
		
		if len is None:
			len = b.length - pos
		
		if pos < 0 or len < 0 or pos + len > b.length:
			raise _HxException(_hx_c.haxe_io_Error.OutsideBounds)
		
		self.b = b.b
		self.pos = pos
		self.len = len
		self.totlen = len
		
	
	# var b
	# var pos
	# var len
	# var totlen
	# var position
	# var length
	def get_position(self):
		return self.pos

	def get_length(self):
		return self.totlen

	def set_position(self,p):
		def _hx_local_1():
			def _hx_local_0():
				self.pos = p
				return self.pos
			
			return _hx_local_0()
		
		return _hx_local_1()
	

	def readByte(self):
		if self.len == 0:
			raise _HxException(_hx_c.haxe_io_Eof())
		
		self.len = self.len - 1
		def _hx_local_3():
			def _hx_local_2():
				_hx_local_1 = self.pos
				self.pos = self.pos + 1
				return _hx_local_1
			
			return _hx_array_get(self.b,_hx_local_2())
		
		return _hx_local_3()
	

	def readBytes(self,buf,pos,len):
		if pos < 0 or len < 0 or pos + len > buf.length:
			raise _HxException(_hx_c.haxe_io_Error.OutsideBounds)
		
		if self.len == 0 and len > 0:
			raise _HxException(_hx_c.haxe_io_Eof())
		
		if self.len < len:
			len = self.len
		
		b1 = self.b
		b2 = buf.b
		_g = 0
		while _g < len:
			i = _g
			_g = _g + 1
			
			_hx_array_set(b2,pos + i, _hx_array_get(b1,self.pos + i))
		
		
		self.pos = self.pos + len
		self.len = self.len - len
		return len
	





haxe_io_BytesInput._hx_class = haxe_io_BytesInput
haxe_io_BytesInput._hx_class_name = "haxe.io.BytesInput"
_hx_classes["haxe.io.BytesInput"] = haxe_io_BytesInput
_hx_c.haxe_io_BytesInput = haxe_io_BytesInput
haxe_io_BytesInput._hx_fields = ["b","pos","len","totlen"]
haxe_io_BytesInput._hx_props = ["position","length"]
haxe_io_BytesInput._hx_methods = ["get_position","get_length","set_position","readByte","readBytes"]
haxe_io_BytesInput._hx_statics = []
haxe_io_BytesInput._hx_interfaces = []
haxe_io_BytesInput._hx_super = haxe_io_Input
haxe_io_BytesInput._hx_meta = _hx_c._hx_AnonObject(obj=_hx_c._hx_AnonObject(),statics=_hx_c._hx_AnonObject(),fields=_hx_c._hx_AnonObject())
def haxe_io_BytesInput_hx_empty_init (_hx_o):
	_hx_o.b = None
	_hx_o.pos = None
	_hx_o.len = None
	_hx_o.totlen = None
haxe_io_BytesInput._hx_empty_init = haxe_io_BytesInput_hx_empty_init
# print haxe.io.Output.Output
class haxe_io_Output:

	# var bigEndian
	def writeByte(self,c):
		raise _HxException("Not implemented")

	def writeBytes(self,s,pos,len):
		k = len
		b = s.b
		if pos < 0 or len < 0 or pos + len > s.length:
			raise _HxException(_hx_c.haxe_io_Error.OutsideBounds)
		
		while k > 0:
			self.writeByte(_hx_array_get(b,pos))
			pos = pos + 1
			k = k - 1
		
		return len
	

	def flush(self):
		None

	def close(self):
		None

	def set_bigEndian(self,b):
		self.bigEndian = b
		return b
	

	def write(self,s):
		l = s.length
		p = 0
		while l > 0:
			k = self.writeBytes(s, p, l)
			if k == 0:
				raise _HxException(_hx_c.haxe_io_Error.Blocked)
			
			p = p + k
			l = l - k
		
	

	def writeFullBytes(self,s,pos,len):
		while len > 0:
			k = self.writeBytes(s, pos, len)
			pos = pos + k
			len = len - k
	

	def writeFloat(self,x):
		if x == 0.0:
			self.writeByte(0)
			self.writeByte(0)
			self.writeByte(0)
			self.writeByte(0)
			return
		
		
		def _hx_local_0():
			v = _hx_math.fabs(x)
			return float("-inf") if (v == 0.0) else float("nan") if (v < 0.0) else _hx_math.log(v)
		
		exp = _hx_math.floor(_hx_local_0() / _hx_c.haxe_io_Output.LN2)
		sig = _hx_math.floor(_hx_math.fabs(x) / _hx_math.pow(2, exp) * (2 << 22)) & 8388607
		b4 = None
		b4 = exp + 127 >> 1 | (1 << 7 if (x < 0) else 1 << 6 if (exp > 0) else 1 << 7 if (x < 0) else 0)
		b3 = exp + 127 << 7 & 255 | sig >> 16 & 127
		b2 = sig >> 8 & 255
		b1 = sig & 255
		if self.bigEndian:
			self.writeByte(b4)
			self.writeByte(b3)
			self.writeByte(b2)
			self.writeByte(b1)
		
		else:
			self.writeByte(b1)
			self.writeByte(b2)
			self.writeByte(b3)
			self.writeByte(b4)
		
	

	def writeDouble(self,x):
		if x == 0.0:
			self.writeByte(0)
			self.writeByte(0)
			self.writeByte(0)
			self.writeByte(0)
			self.writeByte(0)
			self.writeByte(0)
			self.writeByte(0)
			self.writeByte(0)
			return
		
		
		def _hx_local_0():
			v = _hx_math.fabs(x)
			return float("-inf") if (v == 0.0) else float("nan") if (v < 0.0) else _hx_math.log(v)
		
		exp = _hx_math.floor(_hx_local_0() / _hx_c.haxe_io_Output.LN2)
		sig = _hx_math.floor(_hx_math.fabs(x) / _hx_math.pow(2, exp) * _hx_math.pow(2, 52))
		sig_h = sig & 34359738367
		sig_l = _hx_math.floor(sig / _hx_math.pow(2, 32))
		b8 = None
		b8 = exp + 1023 >> 4 | (1 << 7 if (x < 0) else 1 << 6 if (exp > 0) else 1 << 7 if (x < 0) else 0)
		b7 = exp + 1023 << 4 & 255 | sig_l >> 16 & 15
		b6 = sig_l >> 8 & 255
		b5 = sig_l & 255
		b4 = sig_h >> 24 & 255
		b3 = sig_h >> 16 & 255
		b2 = sig_h >> 8 & 255
		b1 = sig_h & 255
		if self.bigEndian:
			self.writeByte(b8)
			self.writeByte(b7)
			self.writeByte(b6)
			self.writeByte(b5)
			self.writeByte(b4)
			self.writeByte(b3)
			self.writeByte(b2)
			self.writeByte(b1)
		
		else:
			self.writeByte(b1)
			self.writeByte(b2)
			self.writeByte(b3)
			self.writeByte(b4)
			self.writeByte(b5)
			self.writeByte(b6)
			self.writeByte(b7)
			self.writeByte(b8)
		
	

	def writeInt8(self,x):
		if x < -128 or x >= 128:
			raise _HxException(_hx_c.haxe_io_Error.Overflow)
		
		self.writeByte(x & 255)
	

	def writeInt16(self,x):
		if x < -32768 or x >= 32768:
			raise _HxException(_hx_c.haxe_io_Error.Overflow)
		
		self.writeUInt16(x & 65535)
	

	def writeUInt16(self,x):
		if x < 0 or x >= 65536:
			raise _HxException(_hx_c.haxe_io_Error.Overflow)
		
		if self.bigEndian:
			self.writeByte(x >> 8)
			self.writeByte(x & 255)
		
		else:
			self.writeByte(x & 255)
			self.writeByte(x >> 8)
		
	

	def writeInt24(self,x):
		if x < -8388608 or x >= 8388608:
			raise _HxException(_hx_c.haxe_io_Error.Overflow)
		
		self.writeUInt24(x & 16777215)
	

	def writeUInt24(self,x):
		if x < 0 or x >= 16777216:
			raise _HxException(_hx_c.haxe_io_Error.Overflow)
		
		if self.bigEndian:
			self.writeByte(x >> 16)
			self.writeByte(x >> 8 & 255)
			self.writeByte(x & 255)
		
		else:
			self.writeByte(x & 255)
			self.writeByte(x >> 8 & 255)
			self.writeByte(x >> 16)
		
	

	def writeInt32(self,x):
		if self.bigEndian:
			self.writeByte(_hx_rshift(x, 24))
			self.writeByte(x >> 16 & 255)
			self.writeByte(x >> 8 & 255)
			self.writeByte(x & 255)
	
		else:
			self.writeByte(x & 255)
			self.writeByte(x >> 8 & 255)
			self.writeByte(x >> 16 & 255)
			self.writeByte(_hx_rshift(x, 24))
	

	def prepare(self,nbytes):
		None

	def writeInput(self,i,bufsize = None):
		if bufsize is None:
			bufsize = None
		
		if bufsize is None:
			bufsize = 4096
		
		buf = _hx_c.haxe_io_Bytes.alloc(bufsize)
		try:
			while True:
				len = i.readBytes(buf, 0, bufsize)
				if len == 0:
					raise _HxException(_hx_c.haxe_io_Error.Blocked)
				
				p = 0
				while len > 0:
					k = self.writeBytes(buf, p, len)
					if k == 0:
						raise _HxException(_hx_c.haxe_io_Error.Blocked)
					
					p = p + k
					len = len - k
				
		
		except Exception as _hx_e:
			_hx_e1 = _hx_e.val if isinstance(_hx_e, _HxException) else _hx_e
			if isinstance(_hx_e1, _hx_c.haxe_io_Eof):
				e = _hx_e1
				None
			else:
				raise _hx_e
	

	def writeString(self,s):
		b = _hx_c.haxe_io_Bytes.ofString(s)
		self.writeFullBytes(b, 0, b.length)
	





haxe_io_Output._hx_class = haxe_io_Output
haxe_io_Output._hx_class_name = "haxe.io.Output"
_hx_classes["haxe.io.Output"] = haxe_io_Output
_hx_c.haxe_io_Output = haxe_io_Output
haxe_io_Output._hx_fields = ["bigEndian"]
haxe_io_Output._hx_props = []
haxe_io_Output._hx_methods = ["writeByte","writeBytes","flush","close","set_bigEndian","write","writeFullBytes","writeFloat","writeDouble","writeInt8","writeInt16","writeUInt16","writeInt24","writeUInt24","writeInt32","prepare","writeInput","writeString"]
haxe_io_Output._hx_statics = ["LN2"]
haxe_io_Output._hx_interfaces = []
haxe_io_Output._hx_meta = _hx_c._hx_AnonObject(obj=_hx_c._hx_AnonObject(),statics=_hx_c._hx_AnonObject(),fields=_hx_c._hx_AnonObject())
def haxe_io_Output_hx_empty_init (_hx_o):
	_hx_o.bigEndian = None
haxe_io_Output._hx_empty_init = haxe_io_Output_hx_empty_init
# print haxe.io.BytesOutput.BytesOutput
class haxe_io_BytesOutput(haxe_io_Output):


	def __init__(self):
		self.b = None
		self.b = _hx_c.haxe_io_BytesBuffer()
	
	# var b
	# var length
	def get_length(self):
		return _hx_builtin.len(self.b.b)

	def writeByte(self,c):
		_this = self.b.b
		_this.append(c)
		_hx_builtin.len(_this)
		
	

	def writeBytes(self,buf,pos,len):
		_this = self.b
		if pos < 0 or len < 0 or pos + len > buf.length:
			raise _HxException(_hx_c.haxe_io_Error.OutsideBounds)
		
		b1 = _this.b
		b2 = buf.b
		_g1 = pos
		_g = pos + len
		while _g1 < _g:
			i = _g1
			_g1 = _g1 + 1
			
			_this1 = _this.b
			_this1.append(_hx_array_get(b2,i))
			_hx_builtin.len(_this1)
			
		
		
		
		return len
	

	def getBytes(self):
		return self.b.getBytes()





haxe_io_BytesOutput._hx_class = haxe_io_BytesOutput
haxe_io_BytesOutput._hx_class_name = "haxe.io.BytesOutput"
_hx_classes["haxe.io.BytesOutput"] = haxe_io_BytesOutput
_hx_c.haxe_io_BytesOutput = haxe_io_BytesOutput
haxe_io_BytesOutput._hx_fields = ["b"]
haxe_io_BytesOutput._hx_props = ["length"]
haxe_io_BytesOutput._hx_methods = ["get_length","writeByte","writeBytes","getBytes"]
haxe_io_BytesOutput._hx_statics = []
haxe_io_BytesOutput._hx_interfaces = []
haxe_io_BytesOutput._hx_super = haxe_io_Output
haxe_io_BytesOutput._hx_meta = _hx_c._hx_AnonObject(obj=_hx_c._hx_AnonObject(),statics=_hx_c._hx_AnonObject(),fields=_hx_c._hx_AnonObject())
def haxe_io_BytesOutput_hx_empty_init (_hx_o):
	_hx_o.b = None
haxe_io_BytesOutput._hx_empty_init = haxe_io_BytesOutput_hx_empty_init
# print haxe.io.Eof.Eof
class haxe_io_Eof:


	def __init__(self):
		None
	def toString(self):
		return "Eof"





haxe_io_Eof._hx_class = haxe_io_Eof
haxe_io_Eof._hx_class_name = "haxe.io.Eof"
_hx_classes["haxe.io.Eof"] = haxe_io_Eof
_hx_c.haxe_io_Eof = haxe_io_Eof
haxe_io_Eof._hx_fields = []
haxe_io_Eof._hx_props = []
haxe_io_Eof._hx_methods = ["toString"]
haxe_io_Eof._hx_statics = []
haxe_io_Eof._hx_interfaces = []
haxe_io_Eof._hx_meta = _hx_c._hx_AnonObject(obj=_hx_c._hx_AnonObject(),statics=_hx_c._hx_AnonObject(),fields=_hx_c._hx_AnonObject())
def haxe_io_Eof_hx_empty_init (_hx_o):
	pass
haxe_io_Eof._hx_empty_init = haxe_io_Eof_hx_empty_init
class haxe_io_Error(_hx_c.Enum):
	def __init__(self, t, i, p):
		super(haxe_io_Error,self).__init__(t, i, p)

def _haxe_io_Error_statics_Custom (e):
	return haxe_io_Error("Custom", 3, [e])
haxe_io_Error.Custom = _haxe_io_Error_statics_Custom

haxe_io_Error.OutsideBounds = haxe_io_Error("OutsideBounds", 2, list())

haxe_io_Error.Overflow = haxe_io_Error("Overflow", 1, list())

haxe_io_Error.Blocked = haxe_io_Error("Blocked", 0, list())

haxe_io_Error._hx_constructs = ["Blocked","Overflow","OutsideBounds","Custom"]
haxe_io_Error._hx_class = haxe_io_Error
haxe_io_Error._hx_class_name = "haxe.io.Error"
_hx_classes["haxe.io.Error"] = haxe_io_Error
_hx_c.haxe_io_Error = haxe_io_Error
haxe_io_Error._hx_meta = _hx_c._hx_AnonObject(obj=_hx_c._hx_AnonObject(),fields=_hx_c._hx_AnonObject())
# print haxe.io.Path.Path
class haxe_io_Path:


	def __init__(self,path):
		self.dir = None
		self.file = None
		self.ext = None
		self.backslash = None
		c1 = None
		if None is None:
			c1 = path.rfind("/", 0, _hx_builtin.len(path))
		else:
			i = path.rfind("/", 0, None + 1)
			startLeft = None
			if i == -1:
				b = None + 1 - _hx_builtin.len("/")
				if _hx_math.isnan(0):
					startLeft = 0
				elif _hx_math.isnan(b):
					startLeft = b
				else:
					startLeft = _hx_builtin.max(0, b)
			
			else:
				startLeft = i + 1
			check = path.find("/", startLeft, _hx_builtin.len(path))
			if check > i and check <= None:
				c1 = check
			else:
				c1 = i
		
		c2 = None
		if None is None:
			c2 = path.rfind("\\", 0, _hx_builtin.len(path))
		else:
			i1 = path.rfind("\\", 0, None + 1)
			startLeft1 = None
			if i1 == -1:
				b1 = None + 1 - _hx_builtin.len("\\")
				if _hx_math.isnan(0):
					startLeft1 = 0
				elif _hx_math.isnan(b1):
					startLeft1 = b1
				else:
					startLeft1 = _hx_builtin.max(0, b1)
			
			else:
				startLeft1 = i1 + 1
			check1 = path.find("\\", startLeft1, _hx_builtin.len(path))
			if check1 > i1 and check1 <= None:
				c2 = check1
			else:
				c2 = i1
		
		if c1 < c2:
			self.dir = _hx_c.python_Tools.substr(path, 0, c2)
			path = _hx_c.python_Tools.substr(path, c2 + 1, None)
			self.backslash = True
		
		elif c2 < c1:
			self.dir = _hx_c.python_Tools.substr(path, 0, c1)
			path = _hx_c.python_Tools.substr(path, c1 + 1, None)
		
		else:
			self.dir = None
		cp = None
		if None is None:
			cp = path.rfind(".", 0, _hx_builtin.len(path))
		else:
			i2 = path.rfind(".", 0, None + 1)
			startLeft2 = None
			if i2 == -1:
				b2 = None + 1 - _hx_builtin.len(".")
				if _hx_math.isnan(0):
					startLeft2 = 0
				elif _hx_math.isnan(b2):
					startLeft2 = b2
				else:
					startLeft2 = _hx_builtin.max(0, b2)
			
			else:
				startLeft2 = i2 + 1
			check2 = path.find(".", startLeft2, _hx_builtin.len(path))
			if check2 > i2 and check2 <= None:
				cp = check2
			else:
				cp = i2
		
		if cp != -1:
			self.ext = _hx_c.python_Tools.substr(path, cp + 1, None)
			self.file = _hx_c.python_Tools.substr(path, 0, cp)
		
		else:
			self.ext = None
			self.file = path
		
		
	
	# var dir
	# var file
	# var ext
	# var backslash
	def toString(self):
		return Std.string(Std.string(("" if (self.dir is None) else Std.string(self.dir) + Std.string(("\\" if (self.backslash) else "/")))) + Std.string(self.file)) + Std.string(("" if (self.ext is None) else "." + Std.string(self.ext)))





haxe_io_Path._hx_class = haxe_io_Path
haxe_io_Path._hx_class_name = "haxe.io.Path"
_hx_classes["haxe.io.Path"] = haxe_io_Path
_hx_c.haxe_io_Path = haxe_io_Path
haxe_io_Path._hx_fields = ["dir","file","ext","backslash"]
haxe_io_Path._hx_props = []
haxe_io_Path._hx_methods = ["toString"]
haxe_io_Path._hx_statics = ["withoutExtension","withoutDirectory","directory","extension","withExtension","addTrailingSlash","removeTrailingSlash"]
haxe_io_Path._hx_interfaces = []
haxe_io_Path._hx_meta = _hx_c._hx_AnonObject(obj=_hx_c._hx_AnonObject(),statics=_hx_c._hx_AnonObject(),fields=_hx_c._hx_AnonObject())
def haxe_io_Path_hx_empty_init (_hx_o):
	_hx_o.dir = None
	_hx_o.file = None
	_hx_o.ext = None
	_hx_o.backslash = None
haxe_io_Path._hx_empty_init = haxe_io_Path_hx_empty_init
# print haxe.macro.Context.Context
class haxe_macro_Context:

	pass




haxe_macro_Context._hx_class = haxe_macro_Context
haxe_macro_Context._hx_class_name = "haxe.macro.Context"
_hx_classes["haxe.macro.Context"] = haxe_macro_Context
_hx_c.haxe_macro_Context = haxe_macro_Context
haxe_macro_Context._hx_fields = []
haxe_macro_Context._hx_props = []
haxe_macro_Context._hx_methods = []
haxe_macro_Context._hx_statics = []
haxe_macro_Context._hx_interfaces = []
haxe_macro_Context._hx_meta = _hx_c._hx_AnonObject(obj=_hx_c._hx_AnonObject(),statics=_hx_c._hx_AnonObject(),fields=_hx_c._hx_AnonObject())
def haxe_macro_Context_hx_empty_init (_hx_o):
	pass
haxe_macro_Context._hx_empty_init = haxe_macro_Context_hx_empty_init
class haxe_macro_Constant(_hx_c.Enum):
	def __init__(self, t, i, p):
		super(haxe_macro_Constant,self).__init__(t, i, p)

def _haxe_macro_Constant_statics_CFloat (f):
	return haxe_macro_Constant("CFloat", 1, [f])
haxe_macro_Constant.CFloat = _haxe_macro_Constant_statics_CFloat

def _haxe_macro_Constant_statics_CIdent (s):
	return haxe_macro_Constant("CIdent", 3, [s])
haxe_macro_Constant.CIdent = _haxe_macro_Constant_statics_CIdent

def _haxe_macro_Constant_statics_CInt (v):
	return haxe_macro_Constant("CInt", 0, [v])
haxe_macro_Constant.CInt = _haxe_macro_Constant_statics_CInt

def _haxe_macro_Constant_statics_CRegexp (r,opt):
	return haxe_macro_Constant("CRegexp", 4, [r,opt])
haxe_macro_Constant.CRegexp = _haxe_macro_Constant_statics_CRegexp

def _haxe_macro_Constant_statics_CString (s):
	return haxe_macro_Constant("CString", 2, [s])
haxe_macro_Constant.CString = _haxe_macro_Constant_statics_CString

haxe_macro_Constant._hx_constructs = ["CInt","CFloat","CString","CIdent","CRegexp"]
haxe_macro_Constant._hx_class = haxe_macro_Constant
haxe_macro_Constant._hx_class_name = "haxe.macro.Constant"
_hx_classes["haxe.macro.Constant"] = haxe_macro_Constant
_hx_c.haxe_macro_Constant = haxe_macro_Constant
haxe_macro_Constant._hx_meta = _hx_c._hx_AnonObject(obj=_hx_c._hx_AnonObject(),fields=_hx_c._hx_AnonObject())
class haxe_macro_Binop(_hx_c.Enum):
	def __init__(self, t, i, p):
		super(haxe_macro_Binop,self).__init__(t, i, p)

haxe_macro_Binop.OpNotEq = haxe_macro_Binop("OpNotEq", 6, list())

haxe_macro_Binop.OpShr = haxe_macro_Binop("OpShr", 17, list())

haxe_macro_Binop.OpLt = haxe_macro_Binop("OpLt", 9, list())

haxe_macro_Binop.OpInterval = haxe_macro_Binop("OpInterval", 21, list())

haxe_macro_Binop.OpAssign = haxe_macro_Binop("OpAssign", 4, list())

haxe_macro_Binop.OpBoolOr = haxe_macro_Binop("OpBoolOr", 15, list())

haxe_macro_Binop.OpEq = haxe_macro_Binop("OpEq", 5, list())

haxe_macro_Binop.OpLte = haxe_macro_Binop("OpLte", 10, list())

haxe_macro_Binop.OpAdd = haxe_macro_Binop("OpAdd", 0, list())

haxe_macro_Binop.OpMult = haxe_macro_Binop("OpMult", 1, list())

def _haxe_macro_Binop_statics_OpAssignOp (op):
	return haxe_macro_Binop("OpAssignOp", 20, [op])
haxe_macro_Binop.OpAssignOp = _haxe_macro_Binop_statics_OpAssignOp

haxe_macro_Binop.OpGt = haxe_macro_Binop("OpGt", 7, list())

haxe_macro_Binop.OpOr = haxe_macro_Binop("OpOr", 12, list())

haxe_macro_Binop.OpShl = haxe_macro_Binop("OpShl", 16, list())

haxe_macro_Binop.OpMod = haxe_macro_Binop("OpMod", 19, list())

haxe_macro_Binop.OpDiv = haxe_macro_Binop("OpDiv", 2, list())

haxe_macro_Binop.OpGte = haxe_macro_Binop("OpGte", 8, list())

haxe_macro_Binop.OpBoolAnd = haxe_macro_Binop("OpBoolAnd", 14, list())

haxe_macro_Binop.OpAnd = haxe_macro_Binop("OpAnd", 11, list())

haxe_macro_Binop.OpUShr = haxe_macro_Binop("OpUShr", 18, list())

haxe_macro_Binop.OpArrow = haxe_macro_Binop("OpArrow", 22, list())

haxe_macro_Binop.OpSub = haxe_macro_Binop("OpSub", 3, list())

haxe_macro_Binop.OpXor = haxe_macro_Binop("OpXor", 13, list())

haxe_macro_Binop._hx_constructs = ["OpAdd","OpMult","OpDiv","OpSub","OpAssign","OpEq","OpNotEq","OpGt","OpGte","OpLt","OpLte","OpAnd","OpOr","OpXor","OpBoolAnd","OpBoolOr","OpShl","OpShr","OpUShr","OpMod","OpAssignOp","OpInterval","OpArrow"]
haxe_macro_Binop._hx_class = haxe_macro_Binop
haxe_macro_Binop._hx_class_name = "haxe.macro.Binop"
_hx_classes["haxe.macro.Binop"] = haxe_macro_Binop
_hx_c.haxe_macro_Binop = haxe_macro_Binop
haxe_macro_Binop._hx_meta = _hx_c._hx_AnonObject(obj=_hx_c._hx_AnonObject(),fields=_hx_c._hx_AnonObject())
class haxe_macro_Unop(_hx_c.Enum):
	def __init__(self, t, i, p):
		super(haxe_macro_Unop,self).__init__(t, i, p)

haxe_macro_Unop.OpNeg = haxe_macro_Unop("OpNeg", 3, list())

haxe_macro_Unop.OpNegBits = haxe_macro_Unop("OpNegBits", 4, list())

haxe_macro_Unop.OpNot = haxe_macro_Unop("OpNot", 2, list())

haxe_macro_Unop.OpDecrement = haxe_macro_Unop("OpDecrement", 1, list())

haxe_macro_Unop.OpIncrement = haxe_macro_Unop("OpIncrement", 0, list())

haxe_macro_Unop._hx_constructs = ["OpIncrement","OpDecrement","OpNot","OpNeg","OpNegBits"]
haxe_macro_Unop._hx_class = haxe_macro_Unop
haxe_macro_Unop._hx_class_name = "haxe.macro.Unop"
_hx_classes["haxe.macro.Unop"] = haxe_macro_Unop
_hx_c.haxe_macro_Unop = haxe_macro_Unop
haxe_macro_Unop._hx_meta = _hx_c._hx_AnonObject(obj=_hx_c._hx_AnonObject(),fields=_hx_c._hx_AnonObject())
class haxe_macro_ExprDef(_hx_c.Enum):
	def __init__(self, t, i, p):
		super(haxe_macro_ExprDef,self).__init__(t, i, p)

def _haxe_macro_ExprDef_statics_EArrayDecl (values):
	return haxe_macro_ExprDef("EArrayDecl", 6, [values])
haxe_macro_ExprDef.EArrayDecl = _haxe_macro_ExprDef_statics_EArrayDecl

def _haxe_macro_ExprDef_statics_EArray (e1,e2):
	return haxe_macro_ExprDef("EArray", 1, [e1,e2])
haxe_macro_ExprDef.EArray = _haxe_macro_ExprDef_statics_EArray

def _haxe_macro_ExprDef_statics_EUntyped (e):
	return haxe_macro_ExprDef("EUntyped", 22, [e])
haxe_macro_ExprDef.EUntyped = _haxe_macro_ExprDef_statics_EUntyped

def _haxe_macro_ExprDef_statics_EVars (vars):
	return haxe_macro_ExprDef("EVars", 10, [vars])
haxe_macro_ExprDef.EVars = _haxe_macro_ExprDef_statics_EVars

def _haxe_macro_ExprDef_statics_ECall (e,params):
	return haxe_macro_ExprDef("ECall", 7, [e,params])
haxe_macro_ExprDef.ECall = _haxe_macro_ExprDef_statics_ECall

def _haxe_macro_ExprDef_statics_EBlock (exprs):
	return haxe_macro_ExprDef("EBlock", 12, [exprs])
haxe_macro_ExprDef.EBlock = _haxe_macro_ExprDef_statics_EBlock

def _haxe_macro_ExprDef_statics_EIf (econd,eif,eelse):
	return haxe_macro_ExprDef("EIf", 15, [econd,eif,eelse])
haxe_macro_ExprDef.EIf = _haxe_macro_ExprDef_statics_EIf

def _haxe_macro_ExprDef_statics_ENew (t,params):
	return haxe_macro_ExprDef("ENew", 8, [t,params])
haxe_macro_ExprDef.ENew = _haxe_macro_ExprDef_statics_ENew

def _haxe_macro_ExprDef_statics_ETry (e,catches):
	return haxe_macro_ExprDef("ETry", 18, [e,catches])
haxe_macro_ExprDef.ETry = _haxe_macro_ExprDef_statics_ETry

def _haxe_macro_ExprDef_statics_EWhile (econd,e,normalWhile):
	return haxe_macro_ExprDef("EWhile", 16, [econd,e,normalWhile])
haxe_macro_ExprDef.EWhile = _haxe_macro_ExprDef_statics_EWhile

def _haxe_macro_ExprDef_statics_ECheckType (e,t):
	return haxe_macro_ExprDef("ECheckType", 28, [e,t])
haxe_macro_ExprDef.ECheckType = _haxe_macro_ExprDef_statics_ECheckType

haxe_macro_ExprDef.EContinue = haxe_macro_ExprDef("EContinue", 21, list())

def _haxe_macro_ExprDef_statics_EObjectDecl (fields):
	return haxe_macro_ExprDef("EObjectDecl", 5, [fields])
haxe_macro_ExprDef.EObjectDecl = _haxe_macro_ExprDef_statics_EObjectDecl

def _haxe_macro_ExprDef_statics_EField (e,field):
	return haxe_macro_ExprDef("EField", 3, [e,field])
haxe_macro_ExprDef.EField = _haxe_macro_ExprDef_statics_EField

def _haxe_macro_ExprDef_statics_EFor (it,expr):
	return haxe_macro_ExprDef("EFor", 13, [it,expr])
haxe_macro_ExprDef.EFor = _haxe_macro_ExprDef_statics_EFor

def _haxe_macro_ExprDef_statics_EUnop (op,postFix,e):
	return haxe_macro_ExprDef("EUnop", 9, [op,postFix,e])
haxe_macro_ExprDef.EUnop = _haxe_macro_ExprDef_statics_EUnop

def _haxe_macro_ExprDef_statics_EBinop (op,e1,e2):
	return haxe_macro_ExprDef("EBinop", 2, [op,e1,e2])
haxe_macro_ExprDef.EBinop = _haxe_macro_ExprDef_statics_EBinop

def _haxe_macro_ExprDef_statics_EConst (c):
	return haxe_macro_ExprDef("EConst", 0, [c])
haxe_macro_ExprDef.EConst = _haxe_macro_ExprDef_statics_EConst

def _haxe_macro_ExprDef_statics_EFunction (name,f):
	return haxe_macro_ExprDef("EFunction", 11, [name,f])
haxe_macro_ExprDef.EFunction = _haxe_macro_ExprDef_statics_EFunction

def _haxe_macro_ExprDef_statics_EIn (e1,e2):
	return haxe_macro_ExprDef("EIn", 14, [e1,e2])
haxe_macro_ExprDef.EIn = _haxe_macro_ExprDef_statics_EIn

def _haxe_macro_ExprDef_statics_ESwitch (e,cases,edef):
	return haxe_macro_ExprDef("ESwitch", 17, [e,cases,edef])
haxe_macro_ExprDef.ESwitch = _haxe_macro_ExprDef_statics_ESwitch

def _haxe_macro_ExprDef_statics_ETernary (econd,eif,eelse):
	return haxe_macro_ExprDef("ETernary", 27, [econd,eif,eelse])
haxe_macro_ExprDef.ETernary = _haxe_macro_ExprDef_statics_ETernary

def _haxe_macro_ExprDef_statics_ECast (e,t):
	return haxe_macro_ExprDef("ECast", 24, [e,t])
haxe_macro_ExprDef.ECast = _haxe_macro_ExprDef_statics_ECast

haxe_macro_ExprDef.EBreak = haxe_macro_ExprDef("EBreak", 20, list())

def _haxe_macro_ExprDef_statics_EReturn (e = None):
	return haxe_macro_ExprDef("EReturn", 19, [e])
haxe_macro_ExprDef.EReturn = _haxe_macro_ExprDef_statics_EReturn

def _haxe_macro_ExprDef_statics_EDisplayNew (t):
	return haxe_macro_ExprDef("EDisplayNew", 26, [t])
haxe_macro_ExprDef.EDisplayNew = _haxe_macro_ExprDef_statics_EDisplayNew

def _haxe_macro_ExprDef_statics_EMeta (s,e):
	return haxe_macro_ExprDef("EMeta", 29, [s,e])
haxe_macro_ExprDef.EMeta = _haxe_macro_ExprDef_statics_EMeta

def _haxe_macro_ExprDef_statics_EParenthesis (e):
	return haxe_macro_ExprDef("EParenthesis", 4, [e])
haxe_macro_ExprDef.EParenthesis = _haxe_macro_ExprDef_statics_EParenthesis

def _haxe_macro_ExprDef_statics_EThrow (e):
	return haxe_macro_ExprDef("EThrow", 23, [e])
haxe_macro_ExprDef.EThrow = _haxe_macro_ExprDef_statics_EThrow

def _haxe_macro_ExprDef_statics_EDisplay (e,isCall):
	return haxe_macro_ExprDef("EDisplay", 25, [e,isCall])
haxe_macro_ExprDef.EDisplay = _haxe_macro_ExprDef_statics_EDisplay

haxe_macro_ExprDef._hx_constructs = ["EConst","EArray","EBinop","EField","EParenthesis","EObjectDecl","EArrayDecl","ECall","ENew","EUnop","EVars","EFunction","EBlock","EFor","EIn","EIf","EWhile","ESwitch","ETry","EReturn","EBreak","EContinue","EUntyped","EThrow","ECast","EDisplay","EDisplayNew","ETernary","ECheckType","EMeta"]
haxe_macro_ExprDef._hx_class = haxe_macro_ExprDef
haxe_macro_ExprDef._hx_class_name = "haxe.macro.ExprDef"
_hx_classes["haxe.macro.ExprDef"] = haxe_macro_ExprDef
_hx_c.haxe_macro_ExprDef = haxe_macro_ExprDef
haxe_macro_ExprDef._hx_meta = _hx_c._hx_AnonObject(obj=_hx_c._hx_AnonObject(),fields=_hx_c._hx_AnonObject())
class haxe_macro_ComplexType(_hx_c.Enum):
	def __init__(self, t, i, p):
		super(haxe_macro_ComplexType,self).__init__(t, i, p)

def _haxe_macro_ComplexType_statics_TAnonymous (fields):
	return haxe_macro_ComplexType("TAnonymous", 2, [fields])
haxe_macro_ComplexType.TAnonymous = _haxe_macro_ComplexType_statics_TAnonymous

def _haxe_macro_ComplexType_statics_TExtend (p,fields):
	return haxe_macro_ComplexType("TExtend", 4, [p,fields])
haxe_macro_ComplexType.TExtend = _haxe_macro_ComplexType_statics_TExtend

def _haxe_macro_ComplexType_statics_TOptional (t):
	return haxe_macro_ComplexType("TOptional", 5, [t])
haxe_macro_ComplexType.TOptional = _haxe_macro_ComplexType_statics_TOptional

def _haxe_macro_ComplexType_statics_TPath (p):
	return haxe_macro_ComplexType("TPath", 0, [p])
haxe_macro_ComplexType.TPath = _haxe_macro_ComplexType_statics_TPath

def _haxe_macro_ComplexType_statics_TFunction (args,ret):
	return haxe_macro_ComplexType("TFunction", 1, [args,ret])
haxe_macro_ComplexType.TFunction = _haxe_macro_ComplexType_statics_TFunction

def _haxe_macro_ComplexType_statics_TParent (t):
	return haxe_macro_ComplexType("TParent", 3, [t])
haxe_macro_ComplexType.TParent = _haxe_macro_ComplexType_statics_TParent

haxe_macro_ComplexType._hx_constructs = ["TPath","TFunction","TAnonymous","TParent","TExtend","TOptional"]
haxe_macro_ComplexType._hx_class = haxe_macro_ComplexType
haxe_macro_ComplexType._hx_class_name = "haxe.macro.ComplexType"
_hx_classes["haxe.macro.ComplexType"] = haxe_macro_ComplexType
_hx_c.haxe_macro_ComplexType = haxe_macro_ComplexType
haxe_macro_ComplexType._hx_meta = _hx_c._hx_AnonObject(obj=_hx_c._hx_AnonObject(),fields=_hx_c._hx_AnonObject())
class haxe_macro_TypeParam(_hx_c.Enum):
	def __init__(self, t, i, p):
		super(haxe_macro_TypeParam,self).__init__(t, i, p)

def _haxe_macro_TypeParam_statics_TPExpr (e):
	return haxe_macro_TypeParam("TPExpr", 1, [e])
haxe_macro_TypeParam.TPExpr = _haxe_macro_TypeParam_statics_TPExpr

def _haxe_macro_TypeParam_statics_TPType (t):
	return haxe_macro_TypeParam("TPType", 0, [t])
haxe_macro_TypeParam.TPType = _haxe_macro_TypeParam_statics_TPType

haxe_macro_TypeParam._hx_constructs = ["TPType","TPExpr"]
haxe_macro_TypeParam._hx_class = haxe_macro_TypeParam
haxe_macro_TypeParam._hx_class_name = "haxe.macro.TypeParam"
_hx_classes["haxe.macro.TypeParam"] = haxe_macro_TypeParam
_hx_c.haxe_macro_TypeParam = haxe_macro_TypeParam
haxe_macro_TypeParam._hx_meta = _hx_c._hx_AnonObject(obj=_hx_c._hx_AnonObject(),fields=_hx_c._hx_AnonObject())
class haxe_macro_Access(_hx_c.Enum):
	def __init__(self, t, i, p):
		super(haxe_macro_Access,self).__init__(t, i, p)

haxe_macro_Access.ADynamic = haxe_macro_Access("ADynamic", 4, list())

haxe_macro_Access.AOverride = haxe_macro_Access("AOverride", 3, list())

haxe_macro_Access.APrivate = haxe_macro_Access("APrivate", 1, list())

haxe_macro_Access.APublic = haxe_macro_Access("APublic", 0, list())

haxe_macro_Access.AMacro = haxe_macro_Access("AMacro", 6, list())

haxe_macro_Access.AInline = haxe_macro_Access("AInline", 5, list())

haxe_macro_Access.AStatic = haxe_macro_Access("AStatic", 2, list())

haxe_macro_Access._hx_constructs = ["APublic","APrivate","AStatic","AOverride","ADynamic","AInline","AMacro"]
haxe_macro_Access._hx_class = haxe_macro_Access
haxe_macro_Access._hx_class_name = "haxe.macro.Access"
_hx_classes["haxe.macro.Access"] = haxe_macro_Access
_hx_c.haxe_macro_Access = haxe_macro_Access
haxe_macro_Access._hx_meta = _hx_c._hx_AnonObject(obj=_hx_c._hx_AnonObject(),fields=_hx_c._hx_AnonObject())
class haxe_macro_FieldType(_hx_c.Enum):
	def __init__(self, t, i, p):
		super(haxe_macro_FieldType,self).__init__(t, i, p)

def _haxe_macro_FieldType_statics_FFun (f):
	return haxe_macro_FieldType("FFun", 1, [f])
haxe_macro_FieldType.FFun = _haxe_macro_FieldType_statics_FFun

def _haxe_macro_FieldType_statics_FProp (get,set,t = None,e = None):
	return haxe_macro_FieldType("FProp", 2, [get,set,t,e])
haxe_macro_FieldType.FProp = _haxe_macro_FieldType_statics_FProp

def _haxe_macro_FieldType_statics_FVar (t,e = None):
	return haxe_macro_FieldType("FVar", 0, [t,e])
haxe_macro_FieldType.FVar = _haxe_macro_FieldType_statics_FVar

haxe_macro_FieldType._hx_constructs = ["FVar","FFun","FProp"]
haxe_macro_FieldType._hx_class = haxe_macro_FieldType
haxe_macro_FieldType._hx_class_name = "haxe.macro.FieldType"
_hx_classes["haxe.macro.FieldType"] = haxe_macro_FieldType
_hx_c.haxe_macro_FieldType = haxe_macro_FieldType
haxe_macro_FieldType._hx_meta = _hx_c._hx_AnonObject(obj=_hx_c._hx_AnonObject(),fields=_hx_c._hx_AnonObject())
class haxe_macro_TypeDefKind(_hx_c.Enum):
	def __init__(self, t, i, p):
		super(haxe_macro_TypeDefKind,self).__init__(t, i, p)

haxe_macro_TypeDefKind.TDEnum = haxe_macro_TypeDefKind("TDEnum", 0, list())

def _haxe_macro_TypeDefKind_statics_TDAbstract (tthis,_hx_from = None,to = None):
	return haxe_macro_TypeDefKind("TDAbstract", 4, [tthis,_hx_from,to])
haxe_macro_TypeDefKind.TDAbstract = _haxe_macro_TypeDefKind_statics_TDAbstract

def _haxe_macro_TypeDefKind_statics_TDAlias (t):
	return haxe_macro_TypeDefKind("TDAlias", 3, [t])
haxe_macro_TypeDefKind.TDAlias = _haxe_macro_TypeDefKind_statics_TDAlias

def _haxe_macro_TypeDefKind_statics_TDClass (superClass = None,interfaces = None,isInterface = None):
	return haxe_macro_TypeDefKind("TDClass", 2, [superClass,interfaces,isInterface])
haxe_macro_TypeDefKind.TDClass = _haxe_macro_TypeDefKind_statics_TDClass

haxe_macro_TypeDefKind.TDStructure = haxe_macro_TypeDefKind("TDStructure", 1, list())

haxe_macro_TypeDefKind._hx_constructs = ["TDEnum","TDStructure","TDClass","TDAlias","TDAbstract"]
haxe_macro_TypeDefKind._hx_class = haxe_macro_TypeDefKind
haxe_macro_TypeDefKind._hx_class_name = "haxe.macro.TypeDefKind"
_hx_classes["haxe.macro.TypeDefKind"] = haxe_macro_TypeDefKind
_hx_c.haxe_macro_TypeDefKind = haxe_macro_TypeDefKind
haxe_macro_TypeDefKind._hx_meta = _hx_c._hx_AnonObject(obj=_hx_c._hx_AnonObject(),fields=_hx_c._hx_AnonObject())
# print haxe.macro.Expr.Error
class haxe_macro_Error:


	def __init__(self,m,p):
		self.message = None
		self.pos = None
		self.message = m
		self.pos = p
		
	
	# var message
	# var pos
	def toString(self):
		return self.message





haxe_macro_Error._hx_class = haxe_macro_Error
haxe_macro_Error._hx_class_name = "haxe.macro.Error"
_hx_classes["haxe.macro.Error"] = haxe_macro_Error
_hx_c.haxe_macro_Error = haxe_macro_Error
haxe_macro_Error._hx_fields = ["message","pos"]
haxe_macro_Error._hx_props = []
haxe_macro_Error._hx_methods = ["toString"]
haxe_macro_Error._hx_statics = []
haxe_macro_Error._hx_interfaces = []
haxe_macro_Error._hx_meta = _hx_c._hx_AnonObject(obj=_hx_c._hx_AnonObject(),statics=_hx_c._hx_AnonObject(),fields=_hx_c._hx_AnonObject())
def haxe_macro_Error_hx_empty_init (_hx_o):
	_hx_o.message = None
	_hx_o.pos = None
haxe_macro_Error._hx_empty_init = haxe_macro_Error_hx_empty_init
# print haxe.macro.ExprTools.ExprTools
class haxe_macro_ExprTools:

	pass




haxe_macro_ExprTools._hx_class = haxe_macro_ExprTools
haxe_macro_ExprTools._hx_class_name = "haxe.macro.ExprTools"
_hx_classes["haxe.macro.ExprTools"] = haxe_macro_ExprTools
_hx_c.haxe_macro_ExprTools = haxe_macro_ExprTools
haxe_macro_ExprTools._hx_fields = []
haxe_macro_ExprTools._hx_props = []
haxe_macro_ExprTools._hx_methods = []
haxe_macro_ExprTools._hx_statics = ["toString","iter","map","opt","opt2"]
haxe_macro_ExprTools._hx_interfaces = []
haxe_macro_ExprTools._hx_meta = _hx_c._hx_AnonObject(obj=_hx_c._hx_AnonObject(),statics=_hx_c._hx_AnonObject(),fields=_hx_c._hx_AnonObject())
def haxe_macro_ExprTools_hx_empty_init (_hx_o):
	pass
haxe_macro_ExprTools._hx_empty_init = haxe_macro_ExprTools_hx_empty_init
# print haxe.macro.ExprTools.ExprArrayTools
class haxe_macro_ExprArrayTools:

	pass




haxe_macro_ExprArrayTools._hx_class = haxe_macro_ExprArrayTools
haxe_macro_ExprArrayTools._hx_class_name = "haxe.macro.ExprArrayTools"
_hx_classes["haxe.macro.ExprArrayTools"] = haxe_macro_ExprArrayTools
_hx_c.haxe_macro_ExprArrayTools = haxe_macro_ExprArrayTools
haxe_macro_ExprArrayTools._hx_fields = []
haxe_macro_ExprArrayTools._hx_props = []
haxe_macro_ExprArrayTools._hx_methods = []
haxe_macro_ExprArrayTools._hx_statics = ["map","iter"]
haxe_macro_ExprArrayTools._hx_interfaces = []
haxe_macro_ExprArrayTools._hx_meta = _hx_c._hx_AnonObject(obj=_hx_c._hx_AnonObject(),statics=_hx_c._hx_AnonObject(),fields=_hx_c._hx_AnonObject())
def haxe_macro_ExprArrayTools_hx_empty_init (_hx_o):
	pass
haxe_macro_ExprArrayTools._hx_empty_init = haxe_macro_ExprArrayTools_hx_empty_init
# print haxe.macro.Printer.Printer
class haxe_macro_Printer:


	def __init__(self,tabString = "\t"):
		if tabString is None:
			tabString = "\t"
		
		self.tabs = None
		self.tabString = None
		self.tabs = ""
		self.tabString = tabString
		
	
	# var tabs
	# var tabString
	def printUnop(self,op):
		if (op.index) == 0:
			return "++"
		elif (op.index) == 1:
			return "--"
		elif (op.index) == 2:
			return "!"
		elif (op.index) == 3:
			return "-"
		elif (op.index) == 4:
			return "~"
		

	def printBinop(self,op):
		if (op.index) == 0:
			return "+"
		elif (op.index) == 1:
			return "*"
		elif (op.index) == 2:
			return "/"
		elif (op.index) == 3:
			return "-"
		elif (op.index) == 4:
			return "="
		elif (op.index) == 5:
			return "=="
		elif (op.index) == 6:
			return "!="
		elif (op.index) == 7:
			return ">"
		elif (op.index) == 8:
			return ">="
		elif (op.index) == 9:
			return "<"
		elif (op.index) == 10:
			return "<="
		elif (op.index) == 11:
			return "&"
		elif (op.index) == 12:
			return "|"
		elif (op.index) == 13:
			return "^"
		elif (op.index) == 14:
			return "&&"
		elif (op.index) == 15:
			return "||"
		elif (op.index) == 16:
			return "<<"
		elif (op.index) == 17:
			return ">>"
		elif (op.index) == 18:
			return ">>>"
		elif (op.index) == 19:
			return "%"
		elif (op.index) == 21:
			return "..."
		elif (op.index) == 22:
			return "=>"
		elif (op.index) == 20:
			op1 = op.params[0]
			return Std.string(self.printBinop(op1)) + "="
	
		

	def printString(self,s):
		def _hx_local_1():
			def _hx_local_0():
				_this = None
				_this1 = None
				_this2 = None
				_this3 = None
				_this4 = None
				_this5 = None
				_this6 = _hx_c.python_internal_StringImpl.split(s, "\n")
				_this5 = "\\n".join(_hx_builtin.list(_hx_builtin.map(_hx_c.Std.string, _this6)))
				
				_this4 = _hx_c.python_internal_StringImpl.split(_this5, "\t")
				
				_this3 = "\\t".join(_hx_builtin.list(_hx_builtin.map(_hx_c.Std.string, _this4)))
				
				_this2 = _hx_c.python_internal_StringImpl.split(_this3, "'")
				
				_this1 = "\\'".join(_hx_builtin.list(_hx_builtin.map(_hx_c.Std.string, _this2)))
				
				_this = _hx_c.python_internal_StringImpl.split(_this1, "\"")
				
				return "\\\"".join(_hx_builtin.list(_hx_builtin.map(_hx_c.Std.string, _this)))
			
			return Std.string("\"" + Std.string(_hx_local_0())) + "\""
		
		return _hx_local_1()
	

	def printConstant(self,c):
		if (c.index) == 2:
			s = c.params[0]
			return self.printString(s)
	
		elif (c.index) == 3:
			s1 = c.params[0]
			return s1
	
		elif (c.index) == 0:
			s1 = c.params[0]
			return s1
	
		elif (c.index) == 1:
			s1 = c.params[0]
			return s1
	
		elif (c.index) == 4:
			opt = c.params[1]
			s2 = c.params[0]
			return Std.string(Std.string("~/" + Std.string(s2)) + "/") + Std.string(opt)
	
		

	def printTypeParam(self,param):
		if (param.index) == 0:
			ct = param.params[0]
			return self.printComplexType(ct)
	
		elif (param.index) == 1:
			e = param.params[0]
			return self.printExpr(e)
	
		

	def printTypePath(self,tp):
		def _hx_local_2():
			def _hx_local_1():
				def _hx_local_0():
					_this = _hx_builtin.list(_hx_builtin.map(self.printTypeParam, tp.params))
					return ", ".join(_hx_builtin.list(_hx_builtin.map(_hx_c.Std.string, _this)))
				
				return Std.string("<" + Std.string(_hx_local_0())) + ">" if _hx_builtin.len(tp.params) > 0 else ""
			
			return Std.string(Std.string(Std.string((Std.string(".".join(_hx_builtin.list(_hx_builtin.map(_hx_c.Std.string, tp.pack)))) + "." if (_hx_builtin.len(tp.pack) > 0) else "")) + Std.string(tp.name)) + Std.string(("." + Std.string(tp.sub) if (tp.sub is not None) else ""))) + Std.string((_hx_local_1()))
		
		return _hx_local_2()
	

	def printComplexType(self,ct):
		if (ct.index) == 0:
			tp = ct.params[0]
			return self.printTypePath(tp)
	
		elif (ct.index) == 1:
			ret = ct.params[1]
			args = ct.params[0]
			def _hx_local_2():
				def _hx_local_1():
					def _hx_local_0():
						_this = _hx_builtin.list(_hx_builtin.map(self.printComplexType, args))
						return " -> ".join(_hx_builtin.list(_hx_builtin.map(_hx_c.Std.string, _this)))
					
					return _hx_local_0() if _hx_builtin.len(args) > 0 else "Void"
				
				return Std.string(Std.string((_hx_local_1())) + " -> ") + Std.string(self.printComplexType(ret))
			
			return _hx_local_2()
	
		elif (ct.index) == 2:
			fields = ct.params[0]
			def _hx_local_4():
				def _hx_local_3():
					_this1 = None
					_g = []
					_g1 = 0
					while _g1 < _hx_builtin.len(fields):
						f = _hx_array_get(fields,_g1)
						_g1 = _g1 + 1
						x = Std.string(self.printField(f)) + "; "
						_g.append(x)
						_hx_builtin.len(_g)
						
					
					
					_this1 = _g
					
					return "".join(_hx_builtin.list(_hx_builtin.map(_hx_c.Std.string, _this1)))
				
				return Std.string("{ " + Std.string(_hx_local_3())) + "}"
			
			return _hx_local_4()
	
		elif (ct.index) == 3:
			ct1 = ct.params[0]
			return Std.string("(" + Std.string(self.printComplexType(ct1))) + ")"
	
		elif (ct.index) == 5:
			ct2 = ct.params[0]
			return "?" + Std.string(self.printComplexType(ct2))
	
		elif (ct.index) == 4:
			fields1 = ct.params[1]
			tpl = ct.params[0]
			def _hx_local_7():
				def _hx_local_6():
					_this2 = _hx_builtin.list(_hx_builtin.map(self.printTypePath, tpl))
					return " >, ".join(_hx_builtin.list(_hx_builtin.map(_hx_c.Std.string, _this2)))
				
				def _hx_local_5():
					_this3 = _hx_builtin.list(_hx_builtin.map(self.printField, fields1))
					return ", ".join(_hx_builtin.list(_hx_builtin.map(_hx_c.Std.string, _this3)))
				
				return Std.string(Std.string(Std.string("{> " + Std.string(_hx_local_6())) + ", ") + Std.string(_hx_local_5())) + " }"
			
			return _hx_local_7()
	
		

	def printMetadata(self,meta):
		return Std.string("@" + Std.string(meta.name)) + Std.string((Std.string("(" + Std.string(self.printExprs(meta.params, ", "))) + ")" if (_hx_builtin.len(meta.params) > 0) else ""))

	def printAccess(self,access):
		if (access.index) == 2:
			return "static"
		elif (access.index) == 0:
			return "public"
		elif (access.index) == 1:
			return "private"
		elif (access.index) == 3:
			return "override"
		elif (access.index) == 5:
			return "inline"
		elif (access.index) == 4:
			return "dynamic"
		elif (access.index) == 6:
			return "macro"
		

	def printField(self,field):
		def _hx_local_19():
			def _hx_local_18():
				def _hx_local_17():
					_this = _hx_builtin.list(_hx_builtin.map(self.printMetadata, field.meta))
					return ("\n" + Std.string(self.tabs)).join(_hx_builtin.list(_hx_builtin.map(_hx_c.Std.string, _this)))
				
				return Std.string(_hx_local_17()) + Std.string(("\n" + Std.string(self.tabs))) if field.meta is not None and _hx_builtin.len(field.meta) > 0 else ""
			
			def _hx_local_16():
				def _hx_local_15():
					_this1 = _hx_builtin.list(_hx_builtin.map(self.printAccess, field.access))
					return " ".join(_hx_builtin.list(_hx_builtin.map(_hx_c.Std.string, _this1)))
				
				return Std.string(_hx_local_15()) + " " if field.access is not None and _hx_builtin.len(field.access) > 0 else ""
			
			def _hx_local_0():
				_g = field.kind
				def _hx_local_14():
					def _hx_local_4():
						def _hx_local_7():
							def _hx_local_6():
								def _hx_local_5():
									func = _g.params[0]
									return Std.string("function " + Std.string(field.name)) + Std.string(self.printFunction(func))
								
								return _hx_local_5()
							
							return _hx_local_6()
						
						_hx_local_1 = _hx_local_7
						def _hx_local_10():
							def _hx_local_9():
								def _hx_local_8():
									eo1 = _g.params[3]
									t1 = _g.params[2]
									set = _g.params[1]
									get = _g.params[0]
									return Std.string(Std.string(Std.string(Std.string(Std.string(Std.string(Std.string("var " + Std.string(field.name)) + "(") + Std.string(get)) + ", ") + Std.string(set)) + ")") + Std.string(self.opt(t1, self.printComplexType, " : "))) + Std.string(self.opt(eo1, self.printExpr, " = "))
								
								return _hx_local_8()
							
							return _hx_local_9()
						
						_hx_local_2 = _hx_local_10
						def _hx_local_13():
							def _hx_local_12():
								def _hx_local_11():
									eo = _g.params[1]
									t = _g.params[0]
									return Std.string(Std.string("var " + Std.string(field.name)) + Std.string(self.opt(t, self.printComplexType, " : "))) + Std.string(self.opt(eo, self.printExpr, " = "))
								
								return _hx_local_11()
							
							return _hx_local_12()
						
						_hx_local_3 = _hx_local_13
						return _hx_local_3() if (_g.index) == 0 else _hx_local_2() if (_g.index) == 2 else _hx_local_1() if (_g.index) == 1 else None
					
					return _hx_local_4()
				
				return _hx_local_14()
			
			return Std.string(Std.string(Std.string((Std.string(Std.string(Std.string(Std.string(Std.string(Std.string("/**\n" + Std.string(self.tabs)) + Std.string(self.tabString)) + Std.string(_hx_c.StringTools.replace(field.doc, "\n", Std.string("\n" + Std.string(self.tabs)) + Std.string(self.tabString)))) + "\n") + Std.string(self.tabs)) + "**/\n") + Std.string(self.tabs) if (field.doc is not None and field.doc != "") else "")) + Std.string((_hx_local_18()))) + Std.string((_hx_local_16()))) + Std.string(_hx_local_0())
		
		return _hx_local_19()
	

	def printTypeParamDecl(self,tpd):
		def _hx_local_4():
			def _hx_local_3():
				def _hx_local_2():
					_this = _hx_builtin.list(_hx_builtin.map(self.printTypeParamDecl, tpd.params))
					return ", ".join(_hx_builtin.list(_hx_builtin.map(_hx_c.Std.string, _this)))
				
				return Std.string("<" + Std.string(_hx_local_2())) + ">" if tpd.params is not None and _hx_builtin.len(tpd.params) > 0 else ""
			
			def _hx_local_1():
				def _hx_local_0():
					_this1 = _hx_builtin.list(_hx_builtin.map(self.printComplexType, tpd.constraints))
					return ", ".join(_hx_builtin.list(_hx_builtin.map(_hx_c.Std.string, _this1)))
				
				return Std.string(":(" + Std.string(_hx_local_0())) + ")" if tpd.constraints is not None and _hx_builtin.len(tpd.constraints) > 0 else ""
			
			return Std.string(Std.string(tpd.name) + Std.string((_hx_local_3()))) + Std.string((_hx_local_1()))
		
		return _hx_local_4()
	

	def printFunctionArg(self,arg):
		return Std.string(Std.string(Std.string(("?" if (arg.opt) else "")) + Std.string(arg.name)) + Std.string(self.opt(arg.type, self.printComplexType, " : "))) + Std.string(self.opt(arg.value, self.printExpr, " = "))

	def printFunction(self,func):
		def _hx_local_3():
			def _hx_local_2():
				def _hx_local_1():
					_this = _hx_builtin.list(_hx_builtin.map(self.printTypeParamDecl, func.params))
					return ", ".join(_hx_builtin.list(_hx_builtin.map(_hx_c.Std.string, _this)))
				
				return Std.string("<" + Std.string(_hx_local_1())) + ">" if _hx_builtin.len(func.params) > 0 else ""
			
			def _hx_local_0():
				_this1 = _hx_builtin.list(_hx_builtin.map(self.printFunctionArg, func.args))
				return ", ".join(_hx_builtin.list(_hx_builtin.map(_hx_c.Std.string, _this1)))
			
			return Std.string(Std.string(Std.string(Std.string(Std.string((_hx_local_2())) + "( ") + Std.string(_hx_local_0())) + " )") + Std.string(self.opt(func.ret, self.printComplexType, " : "))) + Std.string(self.opt(func.expr, self.printExpr, " "))
		
		return _hx_local_3()
	

	def printVar(self,v):
		return Std.string(Std.string(v.name) + Std.string(self.opt(v.type, self.printComplexType, " : "))) + Std.string(self.opt(v.expr, self.printExpr, " = "))

	def printExpr(self,e):
		_g1 = self
		if e is None:
			return "#NULL"
		else:
			_g = e.expr
			if (_g.index) == 0:
				c = _g.params[0]
				return self.printConstant(c)
			
			elif (_g.index) == 1:
				e2 = _g.params[1]
				e1 = _g.params[0]
				return Std.string(Std.string(Std.string("" + Std.string(self.printExpr(e1))) + "[") + Std.string(self.printExpr(e2))) + "]"
			
			elif (_g.index) == 2:
				e21 = _g.params[2]
				e11 = _g.params[1]
				op = _g.params[0]
				return Std.string(Std.string(Std.string(Std.string("" + Std.string(self.printExpr(e11))) + " ") + Std.string(self.printBinop(op))) + " ") + Std.string(self.printExpr(e21))
			
			elif (_g.index) == 3:
				n = _g.params[1]
				e12 = _g.params[0]
				return Std.string(Std.string("" + Std.string(self.printExpr(e12))) + ".") + Std.string(n)
			
			elif (_g.index) == 4:
				e13 = _g.params[0]
				return Std.string("(" + Std.string(self.printExpr(e13))) + ")"
			
			elif (_g.index) == 5:
				fl = _g.params[0]
				def _hx_local_2():
					def _hx_local_0():
						def _hx_local_1(fld):
							return Std.string(Std.string(Std.string("" + Std.string(fld.field)) + " : ") + Std.string(_g1.printExpr(fld.expr))) + " "
						_this = _hx_builtin.list(_hx_builtin.map(_hx_local_1, fl))
						return ",".join(_hx_builtin.list(_hx_builtin.map(_hx_c.Std.string, _this)))
					
					return Std.string("{ " + Std.string(_hx_local_0())) + "}"
				
				return _hx_local_2()
			
			elif (_g.index) == 6:
				el = _g.params[0]
				return Std.string("[" + Std.string(self.printExprs(el, ", "))) + "]"
			
			elif (_g.index) == 7:
				el1 = _g.params[1]
				e14 = _g.params[0]
				return Std.string(Std.string(Std.string("" + Std.string(self.printExpr(e14))) + "(") + Std.string(self.printExprs(el1, ", "))) + ")"
			
			elif (_g.index) == 8:
				el2 = _g.params[1]
				tp = _g.params[0]
				return Std.string(Std.string(Std.string("new " + Std.string(self.printTypePath(tp))) + "(") + Std.string(self.printExprs(el2, ", "))) + ")"
			
			elif (_g.index) == 9:
				if (_g.params[1]) == True:
					e15 = _g.params[2]
					op1 = _g.params[0]
					return Std.string(self.printExpr(e15)) + Std.string(self.printUnop(op1))
			
				elif (_g.params[1]) == False:
					e16 = _g.params[2]
					op2 = _g.params[0]
					return Std.string(self.printUnop(op2)) + Std.string(self.printExpr(e16))
			
				
			elif (_g.index) == 11:
				func = _g.params[1]
				no = _g.params[0]
				if no is not None:
					return Std.string("function " + Std.string(no)) + Std.string(self.printFunction(func))
				else:
					func1 = _g.params[1]
					return "function " + Std.string(self.printFunction(func1))
				
			
			elif (_g.index) == 10:
				vl = _g.params[0]
				def _hx_local_4():
					def _hx_local_3():
						_this1 = _hx_builtin.list(_hx_builtin.map(self.printVar, vl))
						return ", ".join(_hx_builtin.list(_hx_builtin.map(_hx_c.Std.string, _this1)))
					
					return "var " + Std.string(_hx_local_3())
				
				return _hx_local_4()
			
			elif (_g.index) == 12:
				el3 = _g.params[0]
				if (_hx_builtin.len(_g.params[0])) == 0:
					return "{ }"
				else:
					old = self.tabs
					self.tabs = Std.string(self.tabs) + Std.string(self.tabString)
					s = Std.string("{\n" + Std.string(self.tabs)) + Std.string(self.printExprs(el3, ";\n" + Std.string(self.tabs)))
					self.tabs = old
					return Std.string(s) + Std.string((Std.string(";\n" + Std.string(self.tabs)) + "}"))
				
			
			elif (_g.index) == 13:
				e22 = _g.params[1]
				e17 = _g.params[0]
				return Std.string(Std.string("for(" + Std.string(self.printExpr(e17))) + ") ") + Std.string(self.printExpr(e22))
			
			elif (_g.index) == 14:
				e23 = _g.params[1]
				e18 = _g.params[0]
				return Std.string(Std.string("" + Std.string(self.printExpr(e18))) + " in ") + Std.string(self.printExpr(e23))
			
			elif (_g.index) == 15:
				eelse = _g.params[2]
				eif = _g.params[1]
				econd = _g.params[0]
				return Std.string(Std.string(Std.string(Std.string("if(" + Std.string(self.printExpr(econd))) + ") ") + Std.string(self.printExpr(eif))) + " ") + Std.string(self.opt(eelse, self.printExpr, "else "))
			
			elif (_g.index) == 16:
				if (_g.params[2]) == True:
					econd1 = _g.params[0]
					e19 = _g.params[1]
					return Std.string(Std.string("while(" + Std.string(self.printExpr(econd1))) + ") ") + Std.string(self.printExpr(e19))
			
				elif (_g.params[2]) == False:
					econd2 = _g.params[0]
					e110 = _g.params[1]
					return Std.string(Std.string(Std.string("do " + Std.string(self.printExpr(e110))) + " while(") + Std.string(self.printExpr(econd2))) + ")"
			
				
			elif (_g.index) == 17:
				edef = _g.params[2]
				cl = _g.params[1]
				e111 = _g.params[0]
				old1 = self.tabs
				self.tabs = Std.string(self.tabs) + Std.string(self.tabString)
				s1 = None
				def _hx_local_7():
					def _hx_local_8(c1):
						return Std.string(Std.string("case " + Std.string(_g1.printExprs(c1.values, ", "))) + Std.string((Std.string(" if(" + Std.string(_g1.printExpr(c1.guard))) + "): " if (c1.guard is not None) else ":"))) + Std.string((Std.string(_g1.opt(c1.expr, _g1.printExpr)) + ";" if (c1.expr is not None) else ""))
					_this2 = _hx_builtin.list(_hx_builtin.map(_hx_local_8, cl))
					return ("\n" + Std.string(self.tabs)).join(_hx_builtin.list(_hx_builtin.map(_hx_c.Std.string, _this2)))
				
				s1 = Std.string(Std.string(Std.string("switch " + Std.string(self.printExpr(e111))) + " {\n") + Std.string(self.tabs)) + Std.string(_hx_local_7())
				if edef is not None:
					s1 = Std.string(s1) + Std.string(Std.string(Std.string("\n" + Std.string(self.tabs)) + "default: ") + Std.string(("" if (edef.expr is None) else Std.string(self.printExpr(edef)) + ";")))
				
				self.tabs = old1
				return Std.string(s1) + Std.string((Std.string("\n" + Std.string(self.tabs)) + "}"))
				
			
			elif (_g.index) == 18:
				cl1 = _g.params[1]
				e112 = _g.params[0]
				def _hx_local_12():
					def _hx_local_10():
						def _hx_local_11(c2):
							return Std.string(Std.string(Std.string(Std.string(" catch(" + Std.string(c2.name)) + " : ") + Std.string(_g1.printComplexType(c2.type))) + ") ") + Std.string(_g1.printExpr(c2.expr))
						_this3 = _hx_builtin.list(_hx_builtin.map(_hx_local_11, cl1))
						return "".join(_hx_builtin.list(_hx_builtin.map(_hx_c.Std.string, _this3)))
					
					return Std.string("try " + Std.string(self.printExpr(e112))) + Std.string(_hx_local_10())
				
				return _hx_local_12()
			
			elif (_g.index) == 19:
				eo = _g.params[0]
				return "return" + Std.string(self.opt(eo, self.printExpr, " "))
			
			elif (_g.index) == 20:
				return "break"
			elif (_g.index) == 21:
				return "continue"
			elif (_g.index) == 22:
				e113 = _g.params[0]
				return "untyped " + Std.string(self.printExpr(e113))
			
			elif (_g.index) == 23:
				e114 = _g.params[0]
				return "throw " + Std.string(self.printExpr(e114))
			
			elif (_g.index) == 24:
				cto = _g.params[1]
				e115 = _g.params[0]
				if cto is not None:
					return Std.string(Std.string(Std.string("cast(" + Std.string(self.printExpr(e115))) + ", ") + Std.string(self.printComplexType(cto))) + ")"
				else:
					e116 = _g.params[0]
					return "cast " + Std.string(self.printExpr(e116))
				
			
			elif (_g.index) == 25:
				e117 = _g.params[0]
				return Std.string("#DISPLAY(" + Std.string(self.printExpr(e117))) + ")"
			
			elif (_g.index) == 26:
				tp1 = _g.params[0]
				return Std.string("#DISPLAY(" + Std.string(self.printTypePath(tp1))) + ")"
			
			elif (_g.index) == 27:
				eelse1 = _g.params[2]
				eif1 = _g.params[1]
				econd3 = _g.params[0]
				return Std.string(Std.string(Std.string(Std.string("" + Std.string(self.printExpr(econd3))) + " ? ") + Std.string(self.printExpr(eif1))) + " : ") + Std.string(self.printExpr(eelse1))
			
			elif (_g.index) == 28:
				ct = _g.params[1]
				e118 = _g.params[0]
				return Std.string(Std.string(Std.string("(" + Std.string(self.printExpr(e118))) + " : ") + Std.string(self.printComplexType(ct))) + ")"
			
			elif (_g.index) == 29:
				e119 = _g.params[1]
				meta = _g.params[0]
				return Std.string(Std.string(self.printMetadata(meta)) + " ") + Std.string(self.printExpr(e119))
			
			
		
	

	def printExprs(self,el,sep):
		_this = _hx_builtin.list(_hx_builtin.map(self.printExpr, el))
		return sep.join(_hx_builtin.list(_hx_builtin.map(_hx_c.Std.string, _this)))
	

	def printExtension(self,tpl,fields):
		def _hx_local_3():
			def _hx_local_2():
				_this = _hx_builtin.list(_hx_builtin.map(self.printTypePath, tpl))
				return (Std.string(",\n" + Std.string(self.tabs)) + ">").join(_hx_builtin.list(_hx_builtin.map(_hx_c.Std.string, _this)))
			
			def _hx_local_1():
				def _hx_local_0():
					_this1 = _hx_builtin.list(_hx_builtin.map(self.printField, fields))
					return (";\n" + Std.string(self.tabs)).join(_hx_builtin.list(_hx_builtin.map(_hx_c.Std.string, _this1)))
				
				return Std.string(Std.string("\n" + Std.string(self.tabs)) + Std.string(_hx_local_0())) + ";\n}" if _hx_builtin.len(fields) > 0 else "\n}"
			
			return Std.string(Std.string(Std.string(Std.string("{\n" + Std.string(self.tabs)) + ">") + Std.string(_hx_local_2())) + ",") + Std.string((_hx_local_1()))
		
		return _hx_local_3()
	

	def printStructure(self,fields):
		if _hx_builtin.len(fields) == 0:
			return "{ }"
		else:
			def _hx_local_1():
				def _hx_local_0():
					_this = _hx_builtin.list(_hx_builtin.map(self.printField, fields))
					return (";\n" + Std.string(self.tabs)).join(_hx_builtin.list(_hx_builtin.map(_hx_c.Std.string, _this)))
				
				return Std.string(Std.string("{\n" + Std.string(self.tabs)) + Std.string(_hx_local_0())) + ";\n}"
			
			return _hx_local_1()
	

	def printTypeDefinition(self,t,printPackage = True):
		if printPackage is None:
			printPackage = True
		
		old = self.tabs
		self.tabs = self.tabString
		str = None
		if t is None:
			str = "#NULL"
		else:
			def _hx_local_87():
				def _hx_local_86():
					_this = _hx_builtin.list(_hx_builtin.map(self.printMetadata, t.meta))
					return " ".join(_hx_builtin.list(_hx_builtin.map(_hx_c.Std.string, _this)))
				
				return Std.string(_hx_local_86()) + " " if t.meta is not None and _hx_builtin.len(t.meta) > 0 else ""
			
			def _hx_local_0():
				_g = t.kind
				def _hx_local_85():
					def _hx_local_6():
						def _hx_local_26():
							def _hx_local_25():
								def _hx_local_7():
									to = _g.params[2]
									_hx_from = _g.params[1]
									tthis = _g.params[0]
									def _hx_local_24():
										def _hx_local_23():
											def _hx_local_22():
												_this10 = _hx_builtin.list(_hx_builtin.map(self.printTypeParamDecl, t.params))
												return ", ".join(_hx_builtin.list(_hx_builtin.map(_hx_c.Std.string, _this10)))
											
											return Std.string("<" + Std.string(_hx_local_22())) + ">" if _hx_builtin.len(t.params) > 0 else ""
										
										def _hx_local_21():
											def _hx_local_20():
												_this11 = None
												_g13 = []
												_g24 = 0
												while _g24 < _hx_builtin.len(_hx_from):
													f2 = _hx_array_get(_hx_from,_g24)
													_g24 = _g24 + 1
													x5 = " from " + Std.string(self.printComplexType(f2))
													_g13.append(x5)
													_hx_builtin.len(_g13)
													
												
												
												_this11 = _g13
												
												return "".join(_hx_builtin.list(_hx_builtin.map(_hx_c.Std.string, _this11)))
											
											return "" if _hx_from is None else _hx_local_20()
										
										def _hx_local_19():
											def _hx_local_18():
												_this12 = None
												_g25 = []
												_g34 = 0
												while _g34 < _hx_builtin.len(to):
													t1 = _hx_array_get(to,_g34)
													_g34 = _g34 + 1
													x6 = " to " + Std.string(self.printComplexType(t1))
													_g25.append(x6)
													_hx_builtin.len(_g25)
													
												
												
												_this12 = _g25
												
												return "".join(_hx_builtin.list(_hx_builtin.map(_hx_c.Std.string, _this12)))
											
											return "" if to is None else _hx_local_18()
										
										def _hx_local_8():
											_this13 = None
											_g35 = []
											_g42 = 0
											_g51 = t.fields
											while _g42 < _hx_builtin.len(_g51):
												f3 = _hx_array_get(_g51,_g42)
												_g42 = _g42 + 1
												x7 = None
												fstr1 = self.printField(f3)
												def _hx_local_9():
													_g61 = f3.kind
													def _hx_local_17():
														def _hx_local_12():
															def _hx_local_15():
																def _hx_local_14():
																	def _hx_local_13():
																		func2 = _g61.params[0]
																		return ";" if (func2.expr is None) else ""
																	
																	return _hx_local_13()
																
																return _hx_local_14()
															
															_hx_local_10 = _hx_local_15
															def _hx_local_16():
																return ";"
															_hx_local_11 = _hx_local_16
															return _hx_local_11() if (_g61.index) == 2 or (_g61.index) == 0 else _hx_local_10() if (_g61.index) == 1 else ""
														
														return _hx_local_12()
													
													return _hx_local_17()
												
												x7 = Std.string(Std.string(self.tabs) + Std.string(fstr1)) + Std.string(_hx_local_9())
												
												_g35.append(x7)
												_hx_builtin.len(_g35)
												
											
											
											_this13 = _g35
											
											return "\n".join(_hx_builtin.list(_hx_builtin.map(_hx_c.Std.string, _this13)))
										
										return Std.string(Std.string(Std.string(Std.string(Std.string(Std.string(Std.string("abstract " + Std.string(t.name)) + Std.string(("" if (tthis is None) else Std.string("(" + Std.string(self.printComplexType(tthis))) + ")"))) + Std.string((_hx_local_23()))) + Std.string((_hx_local_21()))) + Std.string((_hx_local_19()))) + " {\n") + Std.string(_hx_local_8())) + "\n}"
									
									return _hx_local_24()
								
								return _hx_local_7()
							
							return _hx_local_25()
						
						_hx_local_1 = _hx_local_26
						def _hx_local_41():
							def _hx_local_40():
								def _hx_local_27():
									ct = _g.params[0]
									def _hx_local_39():
										def _hx_local_38():
											def _hx_local_37():
												_this9 = _hx_builtin.list(_hx_builtin.map(self.printTypeParamDecl, t.params))
												return ", ".join(_hx_builtin.list(_hx_builtin.map(_hx_c.Std.string, _this9)))
											
											return Std.string("<" + Std.string(_hx_local_37())) + ">" if _hx_builtin.len(t.params) > 0 else ""
										
										def _hx_local_30():
											def _hx_local_33():
												def _hx_local_32():
													def _hx_local_31():
														fields1 = ct.params[0]
														return self.printStructure(fields1)
													
													return _hx_local_31()
												
												return _hx_local_32()
											
											_hx_local_28 = _hx_local_33
											def _hx_local_36():
												def _hx_local_35():
													def _hx_local_34():
														fields = ct.params[1]
														tpl = ct.params[0]
														return self.printExtension(tpl, fields)
													
													return _hx_local_34()
												
												return _hx_local_35()
											
											_hx_local_29 = _hx_local_36
											return _hx_local_29() if (ct.index) == 4 else _hx_local_28() if (ct.index) == 2 else self.printComplexType(ct)
										
										return Std.string(Std.string(Std.string(Std.string("typedef " + Std.string(t.name)) + Std.string((_hx_local_38()))) + " = ") + Std.string(_hx_local_30())) + ";"
									
									return _hx_local_39()
								
								return _hx_local_27()
							
							return _hx_local_40()
						
						_hx_local_2 = _hx_local_41
						def _hx_local_59():
							def _hx_local_58():
								def _hx_local_42():
									isInterface = _g.params[2]
									interfaces = _g.params[1]
									superClass = _g.params[0]
									def _hx_local_57():
										def _hx_local_56():
											def _hx_local_55():
												_this6 = _hx_builtin.list(_hx_builtin.map(self.printTypeParamDecl, t.params))
												return ", ".join(_hx_builtin.list(_hx_builtin.map(_hx_c.Std.string, _this6)))
											
											return Std.string("<" + Std.string(_hx_local_55())) + ">" if _hx_builtin.len(t.params) > 0 else ""
										
										def _hx_local_54():
											def _hx_local_53():
												_this7 = None
												if isInterface:
													_g12 = []
													_g22 = 0
													while _g22 < _hx_builtin.len(interfaces):
														tp = _hx_array_get(interfaces,_g22)
														_g22 = _g22 + 1
														x2 = " extends " + Std.string(self.printTypePath(tp))
														_g12.append(x2)
														_hx_builtin.len(_g12)
														
													
													
													_this7 = _g12
												
												else:
													_g23 = []
													_g32 = 0
													while _g32 < _hx_builtin.len(interfaces):
														tp1 = _hx_array_get(interfaces,_g32)
														_g32 = _g32 + 1
														x3 = " implements " + Std.string(self.printTypePath(tp1))
														_g23.append(x3)
														_hx_builtin.len(_g23)
														
													
													
													_this7 = _g23
												
												return "".join(_hx_builtin.list(_hx_builtin.map(_hx_c.Std.string, _this7)))
											
											return _hx_local_53() if interfaces is not None else ""
										
										def _hx_local_43():
											_this8 = None
											_g33 = []
											_g41 = 0
											_g5 = t.fields
											while _g41 < _hx_builtin.len(_g5):
												f1 = _hx_array_get(_g5,_g41)
												_g41 = _g41 + 1
												x4 = None
												fstr = self.printField(f1)
												def _hx_local_44():
													_g6 = f1.kind
													def _hx_local_52():
														def _hx_local_47():
															def _hx_local_50():
																def _hx_local_49():
																	def _hx_local_48():
																		func1 = _g6.params[0]
																		return ";" if (func1.expr is None) else ""
																	
																	return _hx_local_48()
																
																return _hx_local_49()
															
															_hx_local_45 = _hx_local_50
															def _hx_local_51():
																return ";"
															_hx_local_46 = _hx_local_51
															return _hx_local_46() if (_g6.index) == 2 or (_g6.index) == 0 else _hx_local_45() if (_g6.index) == 1 else ""
														
														return _hx_local_47()
													
													return _hx_local_52()
												
												x4 = Std.string(Std.string(self.tabs) + Std.string(fstr)) + Std.string(_hx_local_44())
												
												_g33.append(x4)
												_hx_builtin.len(_g33)
												
											
											
											_this8 = _g33
											
											return "\n".join(_hx_builtin.list(_hx_builtin.map(_hx_c.Std.string, _this8)))
										
										return Std.string(Std.string(Std.string(Std.string(Std.string(Std.string(Std.string(("interface " if (isInterface) else "class ")) + Std.string(t.name)) + Std.string((_hx_local_56()))) + Std.string((" extends " + Std.string(self.printTypePath(superClass)) if (superClass is not None) else ""))) + Std.string((_hx_local_54()))) + " {\n") + Std.string(_hx_local_43())) + "\n}"
									
									return _hx_local_57()
								
								return _hx_local_42()
							
							return _hx_local_58()
						
						_hx_local_3 = _hx_local_59
						def _hx_local_64():
							def _hx_local_63():
								def _hx_local_62():
									def _hx_local_61():
										_this4 = _hx_builtin.list(_hx_builtin.map(self.printTypeParamDecl, t.params))
										return ", ".join(_hx_builtin.list(_hx_builtin.map(_hx_c.Std.string, _this4)))
									
									return Std.string("<" + Std.string(_hx_local_61())) + ">" if _hx_builtin.len(t.params) > 0 else ""
								
								def _hx_local_60():
									_this5 = None
									_g11 = []
									_g21 = 0
									_g31 = t.fields
									while _g21 < _hx_builtin.len(_g31):
										f = _hx_array_get(_g31,_g21)
										_g21 = _g21 + 1
										x1 = Std.string(Std.string(self.tabs) + Std.string(self.printField(f))) + ";"
										_g11.append(x1)
										_hx_builtin.len(_g11)
										
										
									
									
									_this5 = _g11
									
									return "\n".join(_hx_builtin.list(_hx_builtin.map(_hx_c.Std.string, _this5)))
								
								return Std.string(Std.string(Std.string(Std.string("typedef " + Std.string(t.name)) + Std.string((_hx_local_62()))) + " = {\n") + Std.string(_hx_local_60())) + "\n}"
							
							return _hx_local_63()
						
						_hx_local_4 = _hx_local_64
						def _hx_local_84():
							def _hx_local_83():
								def _hx_local_82():
									def _hx_local_81():
										_this1 = _hx_builtin.list(_hx_builtin.map(self.printTypeParamDecl, t.params))
										return ", ".join(_hx_builtin.list(_hx_builtin.map(_hx_c.Std.string, _this1)))
									
									return Std.string("<" + Std.string(_hx_local_81())) + ">" if _hx_builtin.len(t.params) > 0 else ""
								
								def _hx_local_65():
									_this2 = None
									_g1 = []
									_g2 = 0
									_g3 = t.fields
									while _g2 < _hx_builtin.len(_g3):
										field = _hx_array_get(_g3,_g2)
										_g2 = _g2 + 1
										x = None
										def _hx_local_80():
											def _hx_local_79():
												_this3 = _hx_builtin.list(_hx_builtin.map(self.printMetadata, field.meta))
												return " ".join(_hx_builtin.list(_hx_builtin.map(_hx_c.Std.string, _this3)))
											
											return Std.string(_hx_local_79()) + " " if field.meta is not None and _hx_builtin.len(field.meta) > 0 else ""
										
										def _hx_local_66():
											_g4 = field.kind
											def _hx_local_78():
												def _hx_local_70():
													def _hx_local_73():
														def _hx_local_72():
															def _hx_local_71():
																func = _g4.params[0]
																return Std.string(field.name) + Std.string(self.printFunction(func))
															
															return _hx_local_71()
														
														return _hx_local_72()
													
													_hx_local_67 = _hx_local_73
													def _hx_local_76():
														def _hx_local_75():
															def _hx_local_74():
																raise _HxException("FProp is invalid for TDEnum.")
																return None
															
															return _hx_local_74()
														
														return _hx_local_75()
													
													_hx_local_68 = _hx_local_76
													def _hx_local_77():
														return field.name
													_hx_local_69 = _hx_local_77
													return _hx_local_69() if (_g4.index) == 0 else _hx_local_68() if (_g4.index) == 2 else _hx_local_67() if (_g4.index) == 1 else None
												
												return _hx_local_70()
											
											return _hx_local_78()
										
										x = Std.string(Std.string(Std.string(Std.string(self.tabs) + Std.string((Std.string(Std.string(Std.string(Std.string(Std.string(Std.string("/**\n" + Std.string(self.tabs)) + Std.string(self.tabString)) + Std.string(_hx_c.StringTools.replace(field.doc, "\n", Std.string("\n" + Std.string(self.tabs)) + Std.string(self.tabString)))) + "\n") + Std.string(self.tabs)) + "**/\n") + Std.string(self.tabs) if (field.doc is not None and field.doc != "") else ""))) + Std.string((_hx_local_80()))) + Std.string(_hx_local_66())) + ";"
										_g1.append(x)
										_hx_builtin.len(_g1)
										
									
									
									_this2 = _g1
									
									return "\n".join(_hx_builtin.list(_hx_builtin.map(_hx_c.Std.string, _this2)))
								
								return Std.string(Std.string(Std.string(Std.string("enum " + Std.string(t.name)) + Std.string((_hx_local_82()))) + " {\n") + Std.string(_hx_local_65())) + "\n}"
							
							return _hx_local_83()
						
						_hx_local_5 = _hx_local_84
						return _hx_local_5() if (_g.index) == 0 else _hx_local_4() if (_g.index) == 1 else _hx_local_3() if (_g.index) == 2 else _hx_local_2() if (_g.index) == 3 else _hx_local_1() if (_g.index) == 4 else None
					
					return _hx_local_6()
				
				return _hx_local_85()
			
			str = Std.string(Std.string(Std.string((Std.string("package " + Std.string(".".join(_hx_builtin.list(_hx_builtin.map(_hx_c.Std.string, t.pack))))) + ";\n" if (printPackage and _hx_builtin.len(t.pack) > 0 and _hx_array_get(t.pack,0) != "") else "")) + Std.string((_hx_local_87()))) + Std.string(("extern " if (t.isExtern) else ""))) + Std.string(_hx_local_0())
		
		self.tabs = old
		return str
	

	def opt(self,v,f,prefix = ""):
		if prefix is None:
			prefix = ""
		
		if v is None:
			return ""
		else:
			return Std.string(prefix) + Std.string(f(v))
	





haxe_macro_Printer._hx_class = haxe_macro_Printer
haxe_macro_Printer._hx_class_name = "haxe.macro.Printer"
_hx_classes["haxe.macro.Printer"] = haxe_macro_Printer
_hx_c.haxe_macro_Printer = haxe_macro_Printer
haxe_macro_Printer._hx_fields = ["tabs","tabString"]
haxe_macro_Printer._hx_props = []
haxe_macro_Printer._hx_methods = ["printUnop","printBinop","printString","printConstant","printTypeParam","printTypePath","printComplexType","printMetadata","printAccess","printField","printTypeParamDecl","printFunctionArg","printFunction","printVar","printExpr","printExprs","printExtension","printStructure","printTypeDefinition","opt"]
haxe_macro_Printer._hx_statics = []
haxe_macro_Printer._hx_interfaces = []
haxe_macro_Printer._hx_meta = _hx_c._hx_AnonObject(obj=_hx_c._hx_AnonObject(),statics=_hx_c._hx_AnonObject(),fields=_hx_c._hx_AnonObject())
def haxe_macro_Printer_hx_empty_init (_hx_o):
	_hx_o.tabs = None
	_hx_o.tabString = None
haxe_macro_Printer._hx_empty_init = haxe_macro_Printer_hx_empty_init
class haxe_macro_Type(_hx_c.Enum):
	def __init__(self, t, i, p):
		super(haxe_macro_Type,self).__init__(t, i, p)

def _haxe_macro_Type_statics_TAnonymous (a):
	return haxe_macro_Type("TAnonymous", 5, [a])
haxe_macro_Type.TAnonymous = _haxe_macro_Type_statics_TAnonymous

def _haxe_macro_Type_statics_TType (t,params):
	return haxe_macro_Type("TType", 3, [t,params])
haxe_macro_Type.TType = _haxe_macro_Type_statics_TType

def _haxe_macro_Type_statics_TEnum (t,params):
	return haxe_macro_Type("TEnum", 1, [t,params])
haxe_macro_Type.TEnum = _haxe_macro_Type_statics_TEnum

def _haxe_macro_Type_statics_TInst (t,params):
	return haxe_macro_Type("TInst", 2, [t,params])
haxe_macro_Type.TInst = _haxe_macro_Type_statics_TInst

def _haxe_macro_Type_statics_TLazy (f):
	return haxe_macro_Type("TLazy", 7, [f])
haxe_macro_Type.TLazy = _haxe_macro_Type_statics_TLazy

def _haxe_macro_Type_statics_TFun (args,ret):
	return haxe_macro_Type("TFun", 4, [args,ret])
haxe_macro_Type.TFun = _haxe_macro_Type_statics_TFun

def _haxe_macro_Type_statics_TDynamic (t):
	return haxe_macro_Type("TDynamic", 6, [t])
haxe_macro_Type.TDynamic = _haxe_macro_Type_statics_TDynamic

def _haxe_macro_Type_statics_TMono (t):
	return haxe_macro_Type("TMono", 0, [t])
haxe_macro_Type.TMono = _haxe_macro_Type_statics_TMono

def _haxe_macro_Type_statics_TAbstract (t,params):
	return haxe_macro_Type("TAbstract", 8, [t,params])
haxe_macro_Type.TAbstract = _haxe_macro_Type_statics_TAbstract

haxe_macro_Type._hx_constructs = ["TMono","TEnum","TInst","TType","TFun","TAnonymous","TDynamic","TLazy","TAbstract"]
haxe_macro_Type._hx_class = haxe_macro_Type
haxe_macro_Type._hx_class_name = "haxe.macro.Type"
_hx_classes["haxe.macro.Type"] = haxe_macro_Type
_hx_c.haxe_macro_Type = haxe_macro_Type
haxe_macro_Type._hx_meta = _hx_c._hx_AnonObject(obj=_hx_c._hx_AnonObject(),fields=_hx_c._hx_AnonObject())
class haxe_macro_ClassKind(_hx_c.Enum):
	def __init__(self, t, i, p):
		super(haxe_macro_ClassKind,self).__init__(t, i, p)

haxe_macro_ClassKind.KGeneric = haxe_macro_ClassKind("KGeneric", 4, list())

def _haxe_macro_ClassKind_statics_KExpr (expr):
	return haxe_macro_ClassKind("KExpr", 3, [expr])
haxe_macro_ClassKind.KExpr = _haxe_macro_ClassKind_statics_KExpr

def _haxe_macro_ClassKind_statics_KTypeParameter (constraints):
	return haxe_macro_ClassKind("KTypeParameter", 1, [constraints])
haxe_macro_ClassKind.KTypeParameter = _haxe_macro_ClassKind_statics_KTypeParameter

haxe_macro_ClassKind.KMacroType = haxe_macro_ClassKind("KMacroType", 6, list())

def _haxe_macro_ClassKind_statics_KExtension (cl,params):
	return haxe_macro_ClassKind("KExtension", 2, [cl,params])
haxe_macro_ClassKind.KExtension = _haxe_macro_ClassKind_statics_KExtension

def _haxe_macro_ClassKind_statics_KAbstractImpl (a):
	return haxe_macro_ClassKind("KAbstractImpl", 7, [a])
haxe_macro_ClassKind.KAbstractImpl = _haxe_macro_ClassKind_statics_KAbstractImpl

haxe_macro_ClassKind.KNormal = haxe_macro_ClassKind("KNormal", 0, list())

def _haxe_macro_ClassKind_statics_KGenericInstance (cl,params):
	return haxe_macro_ClassKind("KGenericInstance", 5, [cl,params])
haxe_macro_ClassKind.KGenericInstance = _haxe_macro_ClassKind_statics_KGenericInstance

haxe_macro_ClassKind._hx_constructs = ["KNormal","KTypeParameter","KExtension","KExpr","KGeneric","KGenericInstance","KMacroType","KAbstractImpl"]
haxe_macro_ClassKind._hx_class = haxe_macro_ClassKind
haxe_macro_ClassKind._hx_class_name = "haxe.macro.ClassKind"
_hx_classes["haxe.macro.ClassKind"] = haxe_macro_ClassKind
_hx_c.haxe_macro_ClassKind = haxe_macro_ClassKind
haxe_macro_ClassKind._hx_meta = _hx_c._hx_AnonObject(obj=_hx_c._hx_AnonObject(),fields=_hx_c._hx_AnonObject())
class haxe_macro_FieldKind(_hx_c.Enum):
	def __init__(self, t, i, p):
		super(haxe_macro_FieldKind,self).__init__(t, i, p)

def _haxe_macro_FieldKind_statics_FMethod (k):
	return haxe_macro_FieldKind("FMethod", 1, [k])
haxe_macro_FieldKind.FMethod = _haxe_macro_FieldKind_statics_FMethod

def _haxe_macro_FieldKind_statics_FVar (read,write):
	return haxe_macro_FieldKind("FVar", 0, [read,write])
haxe_macro_FieldKind.FVar = _haxe_macro_FieldKind_statics_FVar

haxe_macro_FieldKind._hx_constructs = ["FVar","FMethod"]
haxe_macro_FieldKind._hx_class = haxe_macro_FieldKind
haxe_macro_FieldKind._hx_class_name = "haxe.macro.FieldKind"
_hx_classes["haxe.macro.FieldKind"] = haxe_macro_FieldKind
_hx_c.haxe_macro_FieldKind = haxe_macro_FieldKind
haxe_macro_FieldKind._hx_meta = _hx_c._hx_AnonObject(obj=_hx_c._hx_AnonObject(),fields=_hx_c._hx_AnonObject())
class haxe_macro_VarAccess(_hx_c.Enum):
	def __init__(self, t, i, p):
		super(haxe_macro_VarAccess,self).__init__(t, i, p)

haxe_macro_VarAccess.AccInline = haxe_macro_VarAccess("AccInline", 5, list())

haxe_macro_VarAccess.AccCall = haxe_macro_VarAccess("AccCall", 4, list())

haxe_macro_VarAccess.AccNo = haxe_macro_VarAccess("AccNo", 1, list())

def _haxe_macro_VarAccess_statics_AccRequire (r,msg = None):
	return haxe_macro_VarAccess("AccRequire", 6, [r,msg])
haxe_macro_VarAccess.AccRequire = _haxe_macro_VarAccess_statics_AccRequire

haxe_macro_VarAccess.AccResolve = haxe_macro_VarAccess("AccResolve", 3, list())

haxe_macro_VarAccess.AccNormal = haxe_macro_VarAccess("AccNormal", 0, list())

haxe_macro_VarAccess.AccNever = haxe_macro_VarAccess("AccNever", 2, list())

haxe_macro_VarAccess._hx_constructs = ["AccNormal","AccNo","AccNever","AccResolve","AccCall","AccInline","AccRequire"]
haxe_macro_VarAccess._hx_class = haxe_macro_VarAccess
haxe_macro_VarAccess._hx_class_name = "haxe.macro.VarAccess"
_hx_classes["haxe.macro.VarAccess"] = haxe_macro_VarAccess
_hx_c.haxe_macro_VarAccess = haxe_macro_VarAccess
haxe_macro_VarAccess._hx_meta = _hx_c._hx_AnonObject(obj=_hx_c._hx_AnonObject(),fields=_hx_c._hx_AnonObject())
class haxe_macro_MethodKind(_hx_c.Enum):
	def __init__(self, t, i, p):
		super(haxe_macro_MethodKind,self).__init__(t, i, p)

haxe_macro_MethodKind.MethMacro = haxe_macro_MethodKind("MethMacro", 3, list())

haxe_macro_MethodKind.MethNormal = haxe_macro_MethodKind("MethNormal", 0, list())

haxe_macro_MethodKind.MethDynamic = haxe_macro_MethodKind("MethDynamic", 2, list())

haxe_macro_MethodKind.MethInline = haxe_macro_MethodKind("MethInline", 1, list())

haxe_macro_MethodKind._hx_constructs = ["MethNormal","MethInline","MethDynamic","MethMacro"]
haxe_macro_MethodKind._hx_class = haxe_macro_MethodKind
haxe_macro_MethodKind._hx_class_name = "haxe.macro.MethodKind"
_hx_classes["haxe.macro.MethodKind"] = haxe_macro_MethodKind
_hx_c.haxe_macro_MethodKind = haxe_macro_MethodKind
haxe_macro_MethodKind._hx_meta = _hx_c._hx_AnonObject(obj=_hx_c._hx_AnonObject(),fields=_hx_c._hx_AnonObject())
class haxe_macro_TConstant(_hx_c.Enum):
	def __init__(self, t, i, p):
		super(haxe_macro_TConstant,self).__init__(t, i, p)

haxe_macro_TConstant.TSuper = haxe_macro_TConstant("TSuper", 6, list())

def _haxe_macro_TConstant_statics_TInt (i):
	return haxe_macro_TConstant("TInt", 0, [i])
haxe_macro_TConstant.TInt = _haxe_macro_TConstant_statics_TInt

haxe_macro_TConstant.TNull = haxe_macro_TConstant("TNull", 4, list())

def _haxe_macro_TConstant_statics_TFloat (s):
	return haxe_macro_TConstant("TFloat", 1, [s])
haxe_macro_TConstant.TFloat = _haxe_macro_TConstant_statics_TFloat

haxe_macro_TConstant.TThis = haxe_macro_TConstant("TThis", 5, list())

def _haxe_macro_TConstant_statics_TBool (b):
	return haxe_macro_TConstant("TBool", 3, [b])
haxe_macro_TConstant.TBool = _haxe_macro_TConstant_statics_TBool

def _haxe_macro_TConstant_statics_TString (s):
	return haxe_macro_TConstant("TString", 2, [s])
haxe_macro_TConstant.TString = _haxe_macro_TConstant_statics_TString

haxe_macro_TConstant._hx_constructs = ["TInt","TFloat","TString","TBool","TNull","TThis","TSuper"]
haxe_macro_TConstant._hx_class = haxe_macro_TConstant
haxe_macro_TConstant._hx_class_name = "haxe.macro.TConstant"
_hx_classes["haxe.macro.TConstant"] = haxe_macro_TConstant
_hx_c.haxe_macro_TConstant = haxe_macro_TConstant
haxe_macro_TConstant._hx_meta = _hx_c._hx_AnonObject(obj=_hx_c._hx_AnonObject(),fields=_hx_c._hx_AnonObject())
class haxe_macro_ModuleType(_hx_c.Enum):
	def __init__(self, t, i, p):
		super(haxe_macro_ModuleType,self).__init__(t, i, p)

def _haxe_macro_ModuleType_statics_TAbstract (a):
	return haxe_macro_ModuleType("TAbstract", 3, [a])
haxe_macro_ModuleType.TAbstract = _haxe_macro_ModuleType_statics_TAbstract

def _haxe_macro_ModuleType_statics_TClassDecl (c):
	return haxe_macro_ModuleType("TClassDecl", 0, [c])
haxe_macro_ModuleType.TClassDecl = _haxe_macro_ModuleType_statics_TClassDecl

def _haxe_macro_ModuleType_statics_TEnumDecl (e):
	return haxe_macro_ModuleType("TEnumDecl", 1, [e])
haxe_macro_ModuleType.TEnumDecl = _haxe_macro_ModuleType_statics_TEnumDecl

def _haxe_macro_ModuleType_statics_TTypeDecl (t):
	return haxe_macro_ModuleType("TTypeDecl", 2, [t])
haxe_macro_ModuleType.TTypeDecl = _haxe_macro_ModuleType_statics_TTypeDecl

haxe_macro_ModuleType._hx_constructs = ["TClassDecl","TEnumDecl","TTypeDecl","TAbstract"]
haxe_macro_ModuleType._hx_class = haxe_macro_ModuleType
haxe_macro_ModuleType._hx_class_name = "haxe.macro.ModuleType"
_hx_classes["haxe.macro.ModuleType"] = haxe_macro_ModuleType
_hx_c.haxe_macro_ModuleType = haxe_macro_ModuleType
haxe_macro_ModuleType._hx_meta = _hx_c._hx_AnonObject(obj=_hx_c._hx_AnonObject(),fields=_hx_c._hx_AnonObject())
class haxe_macro_FieldAccess(_hx_c.Enum):
	def __init__(self, t, i, p):
		super(haxe_macro_FieldAccess,self).__init__(t, i, p)

def _haxe_macro_FieldAccess_statics_FClosure (c,cf):
	return haxe_macro_FieldAccess("FClosure", 4, [c,cf])
haxe_macro_FieldAccess.FClosure = _haxe_macro_FieldAccess_statics_FClosure

def _haxe_macro_FieldAccess_statics_FDynamic (s):
	return haxe_macro_FieldAccess("FDynamic", 3, [s])
haxe_macro_FieldAccess.FDynamic = _haxe_macro_FieldAccess_statics_FDynamic

def _haxe_macro_FieldAccess_statics_FInstance (c,cf):
	return haxe_macro_FieldAccess("FInstance", 0, [c,cf])
haxe_macro_FieldAccess.FInstance = _haxe_macro_FieldAccess_statics_FInstance

def _haxe_macro_FieldAccess_statics_FAnon (cf):
	return haxe_macro_FieldAccess("FAnon", 2, [cf])
haxe_macro_FieldAccess.FAnon = _haxe_macro_FieldAccess_statics_FAnon

def _haxe_macro_FieldAccess_statics_FEnum (e,ef):
	return haxe_macro_FieldAccess("FEnum", 5, [e,ef])
haxe_macro_FieldAccess.FEnum = _haxe_macro_FieldAccess_statics_FEnum

def _haxe_macro_FieldAccess_statics_FStatic (c,cf):
	return haxe_macro_FieldAccess("FStatic", 1, [c,cf])
haxe_macro_FieldAccess.FStatic = _haxe_macro_FieldAccess_statics_FStatic

haxe_macro_FieldAccess._hx_constructs = ["FInstance","FStatic","FAnon","FDynamic","FClosure","FEnum"]
haxe_macro_FieldAccess._hx_class = haxe_macro_FieldAccess
haxe_macro_FieldAccess._hx_class_name = "haxe.macro.FieldAccess"
_hx_classes["haxe.macro.FieldAccess"] = haxe_macro_FieldAccess
_hx_c.haxe_macro_FieldAccess = haxe_macro_FieldAccess
haxe_macro_FieldAccess._hx_meta = _hx_c._hx_AnonObject(obj=_hx_c._hx_AnonObject(),fields=_hx_c._hx_AnonObject())
class haxe_macro_TypedExprDef(_hx_c.Enum):
	def __init__(self, t, i, p):
		super(haxe_macro_TypedExprDef,self).__init__(t, i, p)

def _haxe_macro_TypedExprDef_statics_TLocal (v):
	return haxe_macro_TypedExprDef("TLocal", 1, [v])
haxe_macro_TypedExprDef.TLocal = _haxe_macro_TypedExprDef_statics_TLocal

def _haxe_macro_TypedExprDef_statics_TSwitch (e,cases,edef):
	return haxe_macro_TypedExprDef("TSwitch", 18, [e,cases,edef])
haxe_macro_TypedExprDef.TSwitch = _haxe_macro_TypedExprDef_statics_TSwitch

def _haxe_macro_TypedExprDef_statics_TArray (e1,e2):
	return haxe_macro_TypedExprDef("TArray", 2, [e1,e2])
haxe_macro_TypedExprDef.TArray = _haxe_macro_TypedExprDef_statics_TArray

def _haxe_macro_TypedExprDef_statics_TReturn (e):
	return haxe_macro_TypedExprDef("TReturn", 21, [e])
haxe_macro_TypedExprDef.TReturn = _haxe_macro_TypedExprDef_statics_TReturn

def _haxe_macro_TypedExprDef_statics_TArrayDecl (el):
	return haxe_macro_TypedExprDef("TArrayDecl", 8, [el])
haxe_macro_TypedExprDef.TArrayDecl = _haxe_macro_TypedExprDef_statics_TArrayDecl

def _haxe_macro_TypedExprDef_statics_TVar (v,expr):
	return haxe_macro_TypedExprDef("TVar", 13, [v,expr])
haxe_macro_TypedExprDef.TVar = _haxe_macro_TypedExprDef_statics_TVar

def _haxe_macro_TypedExprDef_statics_TBlock (el):
	return haxe_macro_TypedExprDef("TBlock", 14, [el])
haxe_macro_TypedExprDef.TBlock = _haxe_macro_TypedExprDef_statics_TBlock

def _haxe_macro_TypedExprDef_statics_TCall (e,el):
	return haxe_macro_TypedExprDef("TCall", 9, [e,el])
haxe_macro_TypedExprDef.TCall = _haxe_macro_TypedExprDef_statics_TCall

def _haxe_macro_TypedExprDef_statics_TIf (econd,eif,eelse):
	return haxe_macro_TypedExprDef("TIf", 16, [econd,eif,eelse])
haxe_macro_TypedExprDef.TIf = _haxe_macro_TypedExprDef_statics_TIf

def _haxe_macro_TypedExprDef_statics_TNew (c,params,el):
	return haxe_macro_TypedExprDef("TNew", 10, [c,params,el])
haxe_macro_TypedExprDef.TNew = _haxe_macro_TypedExprDef_statics_TNew

def _haxe_macro_TypedExprDef_statics_TTry (e,catches):
	return haxe_macro_TypedExprDef("TTry", 20, [e,catches])
haxe_macro_TypedExprDef.TTry = _haxe_macro_TypedExprDef_statics_TTry

def _haxe_macro_TypedExprDef_statics_TTypeExpr (m):
	return haxe_macro_TypedExprDef("TTypeExpr", 5, [m])
haxe_macro_TypedExprDef.TTypeExpr = _haxe_macro_TypedExprDef_statics_TTypeExpr

def _haxe_macro_TypedExprDef_statics_TWhile (econd,e,normalWhile):
	return haxe_macro_TypedExprDef("TWhile", 17, [econd,e,normalWhile])
haxe_macro_TypedExprDef.TWhile = _haxe_macro_TypedExprDef_statics_TWhile

haxe_macro_TypedExprDef.TPatMatch = haxe_macro_TypedExprDef("TPatMatch", 19, list())

def _haxe_macro_TypedExprDef_statics_TObjectDecl (fields):
	return haxe_macro_TypedExprDef("TObjectDecl", 7, [fields])
haxe_macro_TypedExprDef.TObjectDecl = _haxe_macro_TypedExprDef_statics_TObjectDecl

def _haxe_macro_TypedExprDef_statics_TFor (v,e1,e2):
	return haxe_macro_TypedExprDef("TFor", 15, [v,e1,e2])
haxe_macro_TypedExprDef.TFor = _haxe_macro_TypedExprDef_statics_TFor

def _haxe_macro_TypedExprDef_statics_TField (e,fa):
	return haxe_macro_TypedExprDef("TField", 4, [e,fa])
haxe_macro_TypedExprDef.TField = _haxe_macro_TypedExprDef_statics_TField

def _haxe_macro_TypedExprDef_statics_TUnop (op,postFix,e):
	return haxe_macro_TypedExprDef("TUnop", 11, [op,postFix,e])
haxe_macro_TypedExprDef.TUnop = _haxe_macro_TypedExprDef_statics_TUnop

def _haxe_macro_TypedExprDef_statics_TConst (c):
	return haxe_macro_TypedExprDef("TConst", 0, [c])
haxe_macro_TypedExprDef.TConst = _haxe_macro_TypedExprDef_statics_TConst

def _haxe_macro_TypedExprDef_statics_TBinop (op,e1,e2):
	return haxe_macro_TypedExprDef("TBinop", 3, [op,e1,e2])
haxe_macro_TypedExprDef.TBinop = _haxe_macro_TypedExprDef_statics_TBinop

def _haxe_macro_TypedExprDef_statics_TEnumParameter (e1,ef,index):
	return haxe_macro_TypedExprDef("TEnumParameter", 27, [e1,ef,index])
haxe_macro_TypedExprDef.TEnumParameter = _haxe_macro_TypedExprDef_statics_TEnumParameter

def _haxe_macro_TypedExprDef_statics_TFunction (tfunc):
	return haxe_macro_TypedExprDef("TFunction", 12, [tfunc])
haxe_macro_TypedExprDef.TFunction = _haxe_macro_TypedExprDef_statics_TFunction

haxe_macro_TypedExprDef.TBreak = haxe_macro_TypedExprDef("TBreak", 22, list())

def _haxe_macro_TypedExprDef_statics_TCast (e,m):
	return haxe_macro_TypedExprDef("TCast", 25, [e,m])
haxe_macro_TypedExprDef.TCast = _haxe_macro_TypedExprDef_statics_TCast

haxe_macro_TypedExprDef.TContinue = haxe_macro_TypedExprDef("TContinue", 23, list())

def _haxe_macro_TypedExprDef_statics_TMeta (m,e1):
	return haxe_macro_TypedExprDef("TMeta", 26, [m,e1])
haxe_macro_TypedExprDef.TMeta = _haxe_macro_TypedExprDef_statics_TMeta

def _haxe_macro_TypedExprDef_statics_TParenthesis (e):
	return haxe_macro_TypedExprDef("TParenthesis", 6, [e])
haxe_macro_TypedExprDef.TParenthesis = _haxe_macro_TypedExprDef_statics_TParenthesis

def _haxe_macro_TypedExprDef_statics_TThrow (e):
	return haxe_macro_TypedExprDef("TThrow", 24, [e])
haxe_macro_TypedExprDef.TThrow = _haxe_macro_TypedExprDef_statics_TThrow

haxe_macro_TypedExprDef._hx_constructs = ["TConst","TLocal","TArray","TBinop","TField","TTypeExpr","TParenthesis","TObjectDecl","TArrayDecl","TCall","TNew","TUnop","TFunction","TVar","TBlock","TFor","TIf","TWhile","TSwitch","TPatMatch","TTry","TReturn","TBreak","TContinue","TThrow","TCast","TMeta","TEnumParameter"]
haxe_macro_TypedExprDef._hx_class = haxe_macro_TypedExprDef
haxe_macro_TypedExprDef._hx_class_name = "haxe.macro.TypedExprDef"
_hx_classes["haxe.macro.TypedExprDef"] = haxe_macro_TypedExprDef
_hx_c.haxe_macro_TypedExprDef = haxe_macro_TypedExprDef
haxe_macro_TypedExprDef._hx_meta = _hx_c._hx_AnonObject(obj=_hx_c._hx_AnonObject(),fields=_hx_c._hx_AnonObject())
# print haxe.rtti.Meta.Meta
class haxe_rtti_Meta:

	pass




haxe_rtti_Meta._hx_class = haxe_rtti_Meta
haxe_rtti_Meta._hx_class_name = "haxe.rtti.Meta"
_hx_classes["haxe.rtti.Meta"] = haxe_rtti_Meta
_hx_c.haxe_rtti_Meta = haxe_rtti_Meta
haxe_rtti_Meta._hx_fields = []
haxe_rtti_Meta._hx_props = []
haxe_rtti_Meta._hx_methods = []
haxe_rtti_Meta._hx_statics = ["getType","getStatics","getFields"]
haxe_rtti_Meta._hx_interfaces = []
haxe_rtti_Meta._hx_meta = _hx_c._hx_AnonObject(obj=_hx_c._hx_AnonObject(),statics=_hx_c._hx_AnonObject(),fields=_hx_c._hx_AnonObject())
def haxe_rtti_Meta_hx_empty_init (_hx_o):
	pass
haxe_rtti_Meta._hx_empty_init = haxe_rtti_Meta_hx_empty_init
# print haxe.xml.Parser.S
# print haxe.xml.Parser.Parser
class haxe_xml_Parser:

	pass




haxe_xml_Parser._hx_class = haxe_xml_Parser
haxe_xml_Parser._hx_class_name = "haxe.xml.Parser"
_hx_classes["haxe.xml.Parser"] = haxe_xml_Parser
_hx_c.haxe_xml_Parser = haxe_xml_Parser
haxe_xml_Parser._hx_fields = []
haxe_xml_Parser._hx_props = []
haxe_xml_Parser._hx_methods = []
haxe_xml_Parser._hx_statics = ["escapes","parse","doParse","isValidChar"]
haxe_xml_Parser._hx_interfaces = []
haxe_xml_Parser._hx_meta = _hx_c._hx_AnonObject(obj=_hx_c._hx_AnonObject(),statics=_hx_c._hx_AnonObject(),fields=_hx_c._hx_AnonObject())
def haxe_xml_Parser_hx_empty_init (_hx_o):
	pass
haxe_xml_Parser._hx_empty_init = haxe_xml_Parser_hx_empty_init
# print python.Lib.HaxeIterable
class python_HaxeIterable:


	def __init__(self,x):
		self.x = None
		self.x = x
	
	# var x
	def iterator(self):
		return _hx_c.python_HaxeIterator(self.x.__iter__())





python_HaxeIterable._hx_class = python_HaxeIterable
python_HaxeIterable._hx_class_name = "python.HaxeIterable"
_hx_classes["python.HaxeIterable"] = python_HaxeIterable
_hx_c.python_HaxeIterable = python_HaxeIterable
python_HaxeIterable._hx_fields = ["x"]
python_HaxeIterable._hx_props = []
python_HaxeIterable._hx_methods = ["iterator"]
python_HaxeIterable._hx_statics = []
python_HaxeIterable._hx_interfaces = []
python_HaxeIterable._hx_meta = _hx_c._hx_AnonObject(obj=_hx_c._hx_AnonObject(),statics=_hx_c._hx_AnonObject(),fields=_hx_c._hx_AnonObject())
def python_HaxeIterable_hx_empty_init (_hx_o):
	_hx_o.x = None
python_HaxeIterable._hx_empty_init = python_HaxeIterable_hx_empty_init
# print python.Lib.HaxeIterator
class python_HaxeIterator:


	def __init__(self,it):
		self.it = None
		self.x = None
		self.has = None
		self.checked = None
		self.checked = False
		self.has = False
		self.x = None
		self.it = it
		
	
	# var it
	# var x
	# var has
	# var checked
	def next(self):
		self.checked = False
		return self.x
	

	def hasNext(self):
		if self.checked:
			return self.has
		else:
			try:
				self.x = self.it.__next__()
				self.has = True
			
			except Exception as _hx_e:
				_hx_e1 = _hx_e.val if isinstance(_hx_e, _HxException) else _hx_e
				if isinstance(_hx_e1, StopIteration):
					s = _hx_e1
					self.has = False
					self.x = None
			
				else:
					raise _hx_e
			self.checked = True
			return self.has
	





python_HaxeIterator._hx_class = python_HaxeIterator
python_HaxeIterator._hx_class_name = "python.HaxeIterator"
_hx_classes["python.HaxeIterator"] = python_HaxeIterator
_hx_c.python_HaxeIterator = python_HaxeIterator
python_HaxeIterator._hx_fields = ["it","x","has","checked"]
python_HaxeIterator._hx_props = []
python_HaxeIterator._hx_methods = ["next","hasNext"]
python_HaxeIterator._hx_statics = []
python_HaxeIterator._hx_interfaces = []
python_HaxeIterator._hx_meta = _hx_c._hx_AnonObject(obj=_hx_c._hx_AnonObject(),statics=_hx_c._hx_AnonObject(),fields=_hx_c._hx_AnonObject())
def python_HaxeIterator_hx_empty_init (_hx_o):
	_hx_o.it = None
	_hx_o.x = None
	_hx_o.has = None
	_hx_o.checked = None
python_HaxeIterator._hx_empty_init = python_HaxeIterator_hx_empty_init
# print python.Lib.Lib
class python_Lib:

	pass




python_Lib._hx_class = python_Lib
python_Lib._hx_class_name = "python.Lib"
_hx_classes["python.Lib"] = python_Lib
_hx_c.python_Lib = python_Lib
python_Lib._hx_fields = []
python_Lib._hx_props = []
python_Lib._hx_methods = []
python_Lib._hx_statics = ["print","println","toPythonIterable","toHaxeIterable","toHaxeIterator"]
python_Lib._hx_interfaces = []
python_Lib._hx_meta = _hx_c._hx_AnonObject(obj=_hx_c._hx_AnonObject(),statics=_hx_c._hx_AnonObject(),fields=_hx_c._hx_AnonObject())
def python_Lib_hx_empty_init (_hx_o):
	pass
python_Lib._hx_empty_init = python_Lib_hx_empty_init
# print python.Macros.Macros
class python_Macros:

	pass




python_Macros._hx_class = python_Macros
python_Macros._hx_class_name = "python.Macros"
_hx_classes["python.Macros"] = python_Macros
_hx_c.python_Macros = python_Macros
python_Macros._hx_fields = []
python_Macros._hx_props = []
python_Macros._hx_methods = []
python_Macros._hx_statics = []
python_Macros._hx_interfaces = []
python_Macros._hx_meta = _hx_c._hx_AnonObject(obj=_hx_c._hx_AnonObject(),statics=_hx_c._hx_AnonObject(),fields=_hx_c._hx_AnonObject())
def python_Macros_hx_empty_init (_hx_o):
	pass
python_Macros._hx_empty_init = python_Macros_hx_empty_init
# print python.Tools.Tools
class python_Tools:

	pass




python_Tools._hx_class = python_Tools
python_Tools._hx_class_name = "python.Tools"
_hx_classes["python.Tools"] = python_Tools
_hx_c.python_Tools = python_Tools
python_Tools._hx_fields = []
python_Tools._hx_props = []
python_Tools._hx_methods = []
python_Tools._hx_statics = ["substring","substr"]
python_Tools._hx_interfaces = []
python_Tools._hx_meta = _hx_c._hx_AnonObject(obj=_hx_c._hx_AnonObject(),statics=_hx_c._hx_AnonObject(),fields=_hx_c._hx_AnonObject())
def python_Tools_hx_empty_init (_hx_o):
	pass
python_Tools._hx_empty_init = python_Tools_hx_empty_init
# print python.internal.KeywordHandler.KeywordHandler
class python_internal_KeywordHandler:

	pass




python_internal_KeywordHandler._hx_class = python_internal_KeywordHandler
python_internal_KeywordHandler._hx_class_name = "python.internal.KeywordHandler"
_hx_classes["python.internal.KeywordHandler"] = python_internal_KeywordHandler
_hx_c.python_internal_KeywordHandler = python_internal_KeywordHandler
python_internal_KeywordHandler._hx_fields = []
python_internal_KeywordHandler._hx_props = []
python_internal_KeywordHandler._hx_methods = []
python_internal_KeywordHandler._hx_statics = ["keywords","handleKeywords","unhandleKeywords"]
python_internal_KeywordHandler._hx_interfaces = []
python_internal_KeywordHandler._hx_meta = _hx_c._hx_AnonObject(obj=_hx_c._hx_AnonObject(),statics=_hx_c._hx_AnonObject(),fields=_hx_c._hx_AnonObject())
def python_internal_KeywordHandler_hx_empty_init (_hx_o):
	pass
python_internal_KeywordHandler._hx_empty_init = python_internal_KeywordHandler_hx_empty_init
# print python.lib.FuncTools._hx_functools
# print python.lib.Inspect.Inspect
# print python.lib.Random.Random
# print python.lib.Re.MatchObject
# print python.lib.Re.RegexHelper
class python_lib_Re_RegexHelper:

	pass




python_lib_Re_RegexHelper._hx_class = python_lib_Re_RegexHelper
python_lib_Re_RegexHelper._hx_class_name = "python.lib._Re._Re.RegexHelper"
_hx_classes["python.lib._Re._Re.RegexHelper"] = python_lib_Re_RegexHelper
_hx_c.python_lib_Re_RegexHelper = python_lib_Re_RegexHelper
python_lib_Re_RegexHelper._hx_fields = []
python_lib_Re_RegexHelper._hx_props = []
python_lib_Re_RegexHelper._hx_methods = []
python_lib_Re_RegexHelper._hx_statics = ["findallDynamic"]
python_lib_Re_RegexHelper._hx_interfaces = []
python_lib_Re_RegexHelper._hx_meta = _hx_c._hx_AnonObject(obj=_hx_c._hx_AnonObject(),statics=_hx_c._hx_AnonObject(),fields=_hx_c._hx_AnonObject())
def python_lib_Re_RegexHelper_hx_empty_init (_hx_o):
	pass
python_lib_Re_RegexHelper._hx_empty_init = python_lib_Re_RegexHelper_hx_empty_init
# print python.lib.Re.Regex
# print python.lib.Sys.Sys
# print python.lib.Types.Choice_Impl_
class python_lib_Types_Choice_Impl_:

	pass




python_lib_Types_Choice_Impl_._hx_class = python_lib_Types_Choice_Impl_
python_lib_Types_Choice_Impl_._hx_class_name = "python.lib._Types._Types.Choice_Impl_"
_hx_classes["python.lib._Types._Types.Choice_Impl_"] = python_lib_Types_Choice_Impl_
_hx_c.python_lib_Types_Choice_Impl_ = python_lib_Types_Choice_Impl_
python_lib_Types_Choice_Impl_._hx_fields = []
python_lib_Types_Choice_Impl_._hx_props = []
python_lib_Types_Choice_Impl_._hx_methods = []
python_lib_Types_Choice_Impl_._hx_statics = ["fromA","fromB"]
python_lib_Types_Choice_Impl_._hx_interfaces = []
python_lib_Types_Choice_Impl_._hx_meta = _hx_c._hx_AnonObject(obj=_hx_c._hx_AnonObject(),statics=_hx_c._hx_AnonObject(),fields=_hx_c._hx_AnonObject())
def python_lib_Types_Choice_Impl__hx_empty_init (_hx_o):
	pass
python_lib_Types_Choice_Impl_._hx_empty_init = python_lib_Types_Choice_Impl__hx_empty_init
# print python.lib.Types.KwArgs_Impl_
class python_lib_Types_KwArgs_Impl_:

	pass




python_lib_Types_KwArgs_Impl_._hx_class = python_lib_Types_KwArgs_Impl_
python_lib_Types_KwArgs_Impl_._hx_class_name = "python.lib._Types._Types.KwArgs_Impl_"
_hx_classes["python.lib._Types._Types.KwArgs_Impl_"] = python_lib_Types_KwArgs_Impl_
_hx_c.python_lib_Types_KwArgs_Impl_ = python_lib_Types_KwArgs_Impl_
python_lib_Types_KwArgs_Impl_._hx_fields = []
python_lib_Types_KwArgs_Impl_._hx_props = []
python_lib_Types_KwArgs_Impl_._hx_methods = []
python_lib_Types_KwArgs_Impl_._hx_statics = ["get"]
python_lib_Types_KwArgs_Impl_._hx_interfaces = []
python_lib_Types_KwArgs_Impl_._hx_meta = _hx_c._hx_AnonObject(obj=_hx_c._hx_AnonObject(),statics=_hx_c._hx_AnonObject(),fields=_hx_c._hx_AnonObject())
def python_lib_Types_KwArgs_Impl__hx_empty_init (_hx_o):
	pass
python_lib_Types_KwArgs_Impl_._hx_empty_init = python_lib_Types_KwArgs_Impl__hx_empty_init
# print python.lib.Types.VarArgs_Impl_
# print python.lib.Types.ByteArray
# print python.lib.Types.Bytes
# print python.lib.Types.PyIterator_Impl_
class python_lib_Types_PyIterator_Impl_:

	pass




python_lib_Types_PyIterator_Impl_._hx_class = python_lib_Types_PyIterator_Impl_
python_lib_Types_PyIterator_Impl_._hx_class_name = "python.lib._Types._Types.PyIterator_Impl_"
_hx_classes["python.lib._Types._Types.PyIterator_Impl_"] = python_lib_Types_PyIterator_Impl_
_hx_c.python_lib_Types_PyIterator_Impl_ = python_lib_Types_PyIterator_Impl_
python_lib_Types_PyIterator_Impl_._hx_fields = []
python_lib_Types_PyIterator_Impl_._hx_props = []
python_lib_Types_PyIterator_Impl_._hx_methods = []
python_lib_Types_PyIterator_Impl_._hx_statics = ["_new","toHaxeIterator","toPyIterable","getNativeIterator"]
python_lib_Types_PyIterator_Impl_._hx_interfaces = []
python_lib_Types_PyIterator_Impl_._hx_meta = _hx_c._hx_AnonObject(obj=_hx_c._hx_AnonObject(),statics=_hx_c._hx_AnonObject(),fields=_hx_c._hx_AnonObject())
def python_lib_Types_PyIterator_Impl__hx_empty_init (_hx_o):
	pass
python_lib_Types_PyIterator_Impl_._hx_empty_init = python_lib_Types_PyIterator_Impl__hx_empty_init
# print python.lib.Types.PyIterable_Impl_
class python_lib_Types_PyIterable_Impl_:

	pass




python_lib_Types_PyIterable_Impl_._hx_class = python_lib_Types_PyIterable_Impl_
python_lib_Types_PyIterable_Impl_._hx_class_name = "python.lib._Types._Types.PyIterable_Impl_"
_hx_classes["python.lib._Types._Types.PyIterable_Impl_"] = python_lib_Types_PyIterable_Impl_
_hx_c.python_lib_Types_PyIterable_Impl_ = python_lib_Types_PyIterable_Impl_
python_lib_Types_PyIterable_Impl_._hx_fields = []
python_lib_Types_PyIterable_Impl_._hx_props = []
python_lib_Types_PyIterable_Impl_._hx_methods = []
python_lib_Types_PyIterable_Impl_._hx_statics = ["toHaxeIterable","iterator","getNativeIterable","getNativeIterator"]
python_lib_Types_PyIterable_Impl_._hx_interfaces = []
python_lib_Types_PyIterable_Impl_._hx_meta = _hx_c._hx_AnonObject(obj=_hx_c._hx_AnonObject(),statics=_hx_c._hx_AnonObject(),fields=_hx_c._hx_AnonObject())
def python_lib_Types_PyIterable_Impl__hx_empty_init (_hx_o):
	pass
python_lib_Types_PyIterable_Impl_._hx_empty_init = python_lib_Types_PyIterable_Impl__hx_empty_init
# print python.lib.Types.IterHelper
class python_lib_IterHelper:

	pass




python_lib_IterHelper._hx_class = python_lib_IterHelper
python_lib_IterHelper._hx_class_name = "python.lib.IterHelper"
_hx_classes["python.lib.IterHelper"] = python_lib_IterHelper
_hx_c.python_lib_IterHelper = python_lib_IterHelper
python_lib_IterHelper._hx_fields = []
python_lib_IterHelper._hx_props = []
python_lib_IterHelper._hx_methods = []
python_lib_IterHelper._hx_statics = ["iterableToIterator"]
python_lib_IterHelper._hx_interfaces = []
python_lib_IterHelper._hx_meta = _hx_c._hx_AnonObject(obj=_hx_c._hx_AnonObject(),statics=_hx_c._hx_AnonObject(),fields=_hx_c._hx_AnonObject())
def python_lib_IterHelper_hx_empty_init (_hx_o):
	pass
python_lib_IterHelper._hx_empty_init = python_lib_IterHelper_hx_empty_init
# print python.lib.Types.FileDescriptor
# print python.lib.Types.Set
# print python.lib.Types.DictView
# print python.lib.Types.Dict
# print python.lib.Types.DictImpl
class python_lib_DictImpl:

	pass




python_lib_DictImpl._hx_class = python_lib_DictImpl
python_lib_DictImpl._hx_class_name = "python.lib.DictImpl"
_hx_classes["python.lib.DictImpl"] = python_lib_DictImpl
_hx_c.python_lib_DictImpl = python_lib_DictImpl
python_lib_DictImpl._hx_fields = []
python_lib_DictImpl._hx_props = []
python_lib_DictImpl._hx_methods = []
python_lib_DictImpl._hx_statics = ["fromObject","hasKey","remove","set"]
python_lib_DictImpl._hx_interfaces = []
python_lib_DictImpl._hx_meta = _hx_c._hx_AnonObject(obj=_hx_c._hx_AnonObject(),statics=_hx_c._hx_AnonObject(),fields=_hx_c._hx_AnonObject())
def python_lib_DictImpl_hx_empty_init (_hx_o):
	pass
python_lib_DictImpl._hx_empty_init = python_lib_DictImpl_hx_empty_init
# print python.lib.Types.Tuple
# print python.lib.Types.Tup2
# print python.lib.Types.Tup3
# print python.lib.Types.Tup4
# print python.lib.Types.Tup5
# print python.lib.Types.BaseException
# print python.lib.Types.BufferError
# print python.lib.Types.GeneratorExit
# print python.lib.Types.KeyboardInterrupt
# print python.lib.Types.Exception
# print python.lib.Types.SyntaxError
# print python.lib.Types.StopIteration
# print python.lib.Types.RuntimeError
# print python.lib.Types.NotImplementedError
# print python.lib.Types.IndentationError
# print python.lib.Types.EnvironmentError
# print python.lib.Types.OSError
# print python.lib.Types.BlockingIOError
# print python.lib.Types.ChildProcessError
# print python.lib.Types.ConnectionError
# print python.lib.Types.BrokenPipeError
# print python.lib.Types.ConnectionAbortedError
# print python.lib.Types.ConnectionRefusedError
# print python.lib.Types.ConnectionResetError
# print python.lib.Types.FileExistsError
# print python.lib.Types.FileNotFoundError
# print python.lib.Types.InterruptedError
# print python.lib.Types.IsADirectoryError
# print python.lib.Types.NotADirectoryError
# print python.lib.Types.PermissionError
# print python.lib.Types.ProcessLookupError
# print python.lib.Types.TimeoutError
# print python.lib.Types.NameError
# print python.lib.Types.UnboundLocalError
# print python.lib.Types.MemoryError
# print python.lib.Types.AssertionError
# print python.lib.Types.AttributeError
# print python.lib.Types.EOFError
# print python.lib.Types.ArithmeticError
# print python.lib.Types.FloatingPointError
# print python.lib.Types.OverflowError
# print python.lib.Types.ZeroDivisionError
# print python.lib.Types.ImportError
# print python.lib.Types.LookupError
# print python.lib.Types.IndexError
# print python.lib.Types.KeyError
# print python.lib.Types.IOError
# print python.lib.Types.VMSError
# print python.lib.Types.WindowsError
# print python.lib.Types.ValueError
# print python.lib.Types.UnicodeError
# print python.lib.Types.UnicodeDecodeError
# print python.lib.Types.UnicodeEncodeError
# print python.lib.Types.UnicodeTranslateError
# print python.lib.Types.Warning
# print python.lib.Types.DeprecationWarning
# print python.lib.Types.PendingDeprecationWarning
# print python.lib.Types.RuntimeWarning
# print python.lib.Types.SyntaxWarning
# print python.lib.Types.UserWarning
# print python.lib.Types.FutureWarning
# print python.lib.Types.ImportWarning
# print python.lib.Types.UnicodeWarning
# print python.lib.Types.BytesWarning
# print python.lib.Types.ResourceWarning
# print python.lib.datetime.DateTime.DateTime
# print python.lib.datetime.TimeDelta.TimeDelta
# print python.lib.datetime.TzInfo.TzInfo
# print python.lib.datetime.Timezone.Timezone
# print python.lib.io.IOBase.IOBase
# print python.lib.io.RawIOBase.RawIOBase
# print python.lib.io.FileIO.FileIO
# print python.lib.io.TextIOBase.TextIOBase
# print python.lib.io.StringIO.StringIO
# print unit.MyAbstract.MyAbstract_Impl_
class unit_MyAbstract_MyAbstract_Impl_:

	pass




unit_MyAbstract_MyAbstract_Impl_._hx_class = unit_MyAbstract_MyAbstract_Impl_
unit_MyAbstract_MyAbstract_Impl_._hx_class_name = "unit._MyAbstract._MyAbstract.MyAbstract_Impl_"
_hx_classes["unit._MyAbstract._MyAbstract.MyAbstract_Impl_"] = unit_MyAbstract_MyAbstract_Impl_
_hx_c.unit_MyAbstract_MyAbstract_Impl_ = unit_MyAbstract_MyAbstract_Impl_
unit_MyAbstract_MyAbstract_Impl_._hx_fields = []
unit_MyAbstract_MyAbstract_Impl_._hx_props = []
unit_MyAbstract_MyAbstract_Impl_._hx_methods = []
unit_MyAbstract_MyAbstract_Impl_._hx_statics = ["_new","incr","toInt"]
unit_MyAbstract_MyAbstract_Impl_._hx_interfaces = []
unit_MyAbstract_MyAbstract_Impl_._hx_meta = _hx_c._hx_AnonObject(obj=_hx_c._hx_AnonObject(),statics=_hx_c._hx_AnonObject(),fields=_hx_c._hx_AnonObject())
def unit_MyAbstract_MyAbstract_Impl__hx_empty_init (_hx_o):
	pass
unit_MyAbstract_MyAbstract_Impl_._hx_empty_init = unit_MyAbstract_MyAbstract_Impl__hx_empty_init
# print unit.MyAbstract.TemplateWrap_Impl_
class unit_MyAbstract_TemplateWrap_Impl_:

	pass




unit_MyAbstract_TemplateWrap_Impl_._hx_class = unit_MyAbstract_TemplateWrap_Impl_
unit_MyAbstract_TemplateWrap_Impl_._hx_class_name = "unit._MyAbstract._MyAbstract.TemplateWrap_Impl_"
_hx_classes["unit._MyAbstract._MyAbstract.TemplateWrap_Impl_"] = unit_MyAbstract_TemplateWrap_Impl_
_hx_c.unit_MyAbstract_TemplateWrap_Impl_ = unit_MyAbstract_TemplateWrap_Impl_
unit_MyAbstract_TemplateWrap_Impl_._hx_fields = []
unit_MyAbstract_TemplateWrap_Impl_._hx_props = []
unit_MyAbstract_TemplateWrap_Impl_._hx_methods = []
unit_MyAbstract_TemplateWrap_Impl_._hx_statics = ["_new","get","fromString","toString"]
unit_MyAbstract_TemplateWrap_Impl_._hx_interfaces = []
unit_MyAbstract_TemplateWrap_Impl_._hx_meta = _hx_c._hx_AnonObject(obj=_hx_c._hx_AnonObject(),statics=_hx_c._hx_AnonObject(),fields=_hx_c._hx_AnonObject())
def unit_MyAbstract_TemplateWrap_Impl__hx_empty_init (_hx_o):
	pass
unit_MyAbstract_TemplateWrap_Impl_._hx_empty_init = unit_MyAbstract_TemplateWrap_Impl__hx_empty_init
# print unit.MyAbstract.Meter_Impl_
class unit_MyAbstract_Meter_Impl_:

	pass




unit_MyAbstract_Meter_Impl_._hx_class = unit_MyAbstract_Meter_Impl_
unit_MyAbstract_Meter_Impl_._hx_class_name = "unit._MyAbstract._MyAbstract.Meter_Impl_"
_hx_classes["unit._MyAbstract._MyAbstract.Meter_Impl_"] = unit_MyAbstract_Meter_Impl_
_hx_c.unit_MyAbstract_Meter_Impl_ = unit_MyAbstract_Meter_Impl_
unit_MyAbstract_Meter_Impl_._hx_fields = []
unit_MyAbstract_Meter_Impl_._hx_props = []
unit_MyAbstract_Meter_Impl_._hx_methods = []
unit_MyAbstract_Meter_Impl_._hx_statics = ["_new","get","toString"]
unit_MyAbstract_Meter_Impl_._hx_interfaces = []
unit_MyAbstract_Meter_Impl_._hx_meta = _hx_c._hx_AnonObject(obj=_hx_c._hx_AnonObject(),statics=_hx_c._hx_AnonObject(),fields=_hx_c._hx_AnonObject())
def unit_MyAbstract_Meter_Impl__hx_empty_init (_hx_o):
	pass
unit_MyAbstract_Meter_Impl_._hx_empty_init = unit_MyAbstract_Meter_Impl__hx_empty_init
# print unit.MyAbstract.Kilometer_Impl_
class unit_MyAbstract_Kilometer_Impl_:

	pass




unit_MyAbstract_Kilometer_Impl_._hx_class = unit_MyAbstract_Kilometer_Impl_
unit_MyAbstract_Kilometer_Impl_._hx_class_name = "unit._MyAbstract._MyAbstract.Kilometer_Impl_"
_hx_classes["unit._MyAbstract._MyAbstract.Kilometer_Impl_"] = unit_MyAbstract_Kilometer_Impl_
_hx_c.unit_MyAbstract_Kilometer_Impl_ = unit_MyAbstract_Kilometer_Impl_
unit_MyAbstract_Kilometer_Impl_._hx_fields = []
unit_MyAbstract_Kilometer_Impl_._hx_props = []
unit_MyAbstract_Kilometer_Impl_._hx_methods = []
unit_MyAbstract_Kilometer_Impl_._hx_statics = ["_new","toString","fromMeter"]
unit_MyAbstract_Kilometer_Impl_._hx_interfaces = []
unit_MyAbstract_Kilometer_Impl_._hx_meta = _hx_c._hx_AnonObject(obj=_hx_c._hx_AnonObject(),statics=_hx_c._hx_AnonObject(),fields=_hx_c._hx_AnonObject())
def unit_MyAbstract_Kilometer_Impl__hx_empty_init (_hx_o):
	pass
unit_MyAbstract_Kilometer_Impl_._hx_empty_init = unit_MyAbstract_Kilometer_Impl__hx_empty_init
# print unit.MyAbstract.MyClassWithAbstractArgCtor
class unit_MyClassWithAbstractArgCtor:


	def __init__(self,km):
		self.km = None
		self.km = km
	
	# var km




unit_MyClassWithAbstractArgCtor._hx_class = unit_MyClassWithAbstractArgCtor
unit_MyClassWithAbstractArgCtor._hx_class_name = "unit.MyClassWithAbstractArgCtor"
_hx_classes["unit.MyClassWithAbstractArgCtor"] = unit_MyClassWithAbstractArgCtor
_hx_c.unit_MyClassWithAbstractArgCtor = unit_MyClassWithAbstractArgCtor
unit_MyClassWithAbstractArgCtor._hx_fields = ["km"]
unit_MyClassWithAbstractArgCtor._hx_props = []
unit_MyClassWithAbstractArgCtor._hx_methods = []
unit_MyClassWithAbstractArgCtor._hx_statics = []
unit_MyClassWithAbstractArgCtor._hx_interfaces = []
unit_MyClassWithAbstractArgCtor._hx_meta = _hx_c._hx_AnonObject(obj=_hx_c._hx_AnonObject(),statics=_hx_c._hx_AnonObject(),fields=_hx_c._hx_AnonObject())
def unit_MyClassWithAbstractArgCtor_hx_empty_init (_hx_o):
	_hx_o.km = None
unit_MyClassWithAbstractArgCtor._hx_empty_init = unit_MyClassWithAbstractArgCtor_hx_empty_init
# print unit.MyAbstract.MyHash_Impl_
class unit_MyAbstract_MyHash_Impl_:

	pass




unit_MyAbstract_MyHash_Impl_._hx_class = unit_MyAbstract_MyHash_Impl_
unit_MyAbstract_MyHash_Impl_._hx_class_name = "unit._MyAbstract._MyAbstract.MyHash_Impl_"
_hx_classes["unit._MyAbstract._MyAbstract.MyHash_Impl_"] = unit_MyAbstract_MyHash_Impl_
_hx_c.unit_MyAbstract_MyHash_Impl_ = unit_MyAbstract_MyHash_Impl_
unit_MyAbstract_MyHash_Impl_._hx_fields = []
unit_MyAbstract_MyHash_Impl_._hx_props = []
unit_MyAbstract_MyHash_Impl_._hx_methods = []
unit_MyAbstract_MyHash_Impl_._hx_statics = ["_new","set","get","toString","fromStringArray","fromArray"]
unit_MyAbstract_MyHash_Impl_._hx_interfaces = []
unit_MyAbstract_MyHash_Impl_._hx_meta = _hx_c._hx_AnonObject(obj=_hx_c._hx_AnonObject(),statics=_hx_c._hx_AnonObject(),fields=_hx_c._hx_AnonObject())
def unit_MyAbstract_MyHash_Impl__hx_empty_init (_hx_o):
	pass
unit_MyAbstract_MyHash_Impl_._hx_empty_init = unit_MyAbstract_MyHash_Impl__hx_empty_init
# print unit.MyAbstract.AbstractBase
class unit_AbstractBase:


	def __init__(self,value):
		self.value = None
		self.value = value
	
	# var value




unit_AbstractBase._hx_class = unit_AbstractBase
unit_AbstractBase._hx_class_name = "unit.AbstractBase"
_hx_classes["unit.AbstractBase"] = unit_AbstractBase
_hx_c.unit_AbstractBase = unit_AbstractBase
unit_AbstractBase._hx_fields = ["value"]
unit_AbstractBase._hx_props = []
unit_AbstractBase._hx_methods = []
unit_AbstractBase._hx_statics = []
unit_AbstractBase._hx_interfaces = []
unit_AbstractBase._hx_meta = _hx_c._hx_AnonObject(obj=_hx_c._hx_AnonObject(),statics=_hx_c._hx_AnonObject(),fields=_hx_c._hx_AnonObject())
def unit_AbstractBase_hx_empty_init (_hx_o):
	_hx_o.value = None
unit_AbstractBase._hx_empty_init = unit_AbstractBase_hx_empty_init
# print unit.MyAbstract.AbstractZ_Impl_
class unit_MyAbstract_AbstractZ_Impl_:

	pass




unit_MyAbstract_AbstractZ_Impl_._hx_class = unit_MyAbstract_AbstractZ_Impl_
unit_MyAbstract_AbstractZ_Impl_._hx_class_name = "unit._MyAbstract._MyAbstract.AbstractZ_Impl_"
_hx_classes["unit._MyAbstract._MyAbstract.AbstractZ_Impl_"] = unit_MyAbstract_AbstractZ_Impl_
_hx_c.unit_MyAbstract_AbstractZ_Impl_ = unit_MyAbstract_AbstractZ_Impl_
unit_MyAbstract_AbstractZ_Impl_._hx_fields = []
unit_MyAbstract_AbstractZ_Impl_._hx_props = []
unit_MyAbstract_AbstractZ_Impl_._hx_methods = []
unit_MyAbstract_AbstractZ_Impl_._hx_statics = ["toFoo","toString"]
unit_MyAbstract_AbstractZ_Impl_._hx_interfaces = []
unit_MyAbstract_AbstractZ_Impl_._hx_meta = _hx_c._hx_AnonObject(obj=_hx_c._hx_AnonObject(),statics=_hx_c._hx_AnonObject(),fields=_hx_c._hx_AnonObject())
def unit_MyAbstract_AbstractZ_Impl__hx_empty_init (_hx_o):
	pass
unit_MyAbstract_AbstractZ_Impl_._hx_empty_init = unit_MyAbstract_AbstractZ_Impl__hx_empty_init
# print unit.MyAbstract.MyPoint3
class unit_MyPoint3:


	def __init__(self,x,y,z):
		self.x = None
		self.y = None
		self.z = None
		self.x = x
		self.y = y
		self.z = z
		
	
	# var x
	# var y
	# var z




unit_MyPoint3._hx_class = unit_MyPoint3
unit_MyPoint3._hx_class_name = "unit.MyPoint3"
_hx_classes["unit.MyPoint3"] = unit_MyPoint3
_hx_c.unit_MyPoint3 = unit_MyPoint3
unit_MyPoint3._hx_fields = ["x","y","z"]
unit_MyPoint3._hx_props = []
unit_MyPoint3._hx_methods = []
unit_MyPoint3._hx_statics = []
unit_MyPoint3._hx_interfaces = []
unit_MyPoint3._hx_meta = _hx_c._hx_AnonObject(obj=_hx_c._hx_AnonObject(),statics=_hx_c._hx_AnonObject(),fields=_hx_c._hx_AnonObject())
def unit_MyPoint3_hx_empty_init (_hx_o):
	_hx_o.x = None
	_hx_o.y = None
	_hx_o.z = None
unit_MyPoint3._hx_empty_init = unit_MyPoint3_hx_empty_init
# print unit.MyAbstract.MyVector_Impl_
class unit_MyAbstract_MyVector_Impl_:

	pass




unit_MyAbstract_MyVector_Impl_._hx_class = unit_MyAbstract_MyVector_Impl_
unit_MyAbstract_MyVector_Impl_._hx_class_name = "unit._MyAbstract._MyAbstract.MyVector_Impl_"
_hx_classes["unit._MyAbstract._MyAbstract.MyVector_Impl_"] = unit_MyAbstract_MyVector_Impl_
_hx_c.unit_MyAbstract_MyVector_Impl_ = unit_MyAbstract_MyVector_Impl_
unit_MyAbstract_MyVector_Impl_._hx_fields = []
unit_MyAbstract_MyVector_Impl_._hx_props = []
unit_MyAbstract_MyVector_Impl_._hx_methods = []
unit_MyAbstract_MyVector_Impl_._hx_statics = ["get_x","get_y","get_z","set_x","set_y","set_z","add","scalarAssign","scalar","invert","get","toString"]
unit_MyAbstract_MyVector_Impl_._hx_interfaces = []
unit_MyAbstract_MyVector_Impl_._hx_meta = _hx_c._hx_AnonObject(obj=_hx_c._hx_AnonObject(),statics=_hx_c._hx_AnonObject(),fields=_hx_c._hx_AnonObject())
def unit_MyAbstract_MyVector_Impl__hx_empty_init (_hx_o):
	pass
unit_MyAbstract_MyVector_Impl_._hx_empty_init = unit_MyAbstract_MyVector_Impl__hx_empty_init
# print unit.MyAbstract.MyInt_Impl_
class unit_MyAbstract_MyInt_Impl_:

	pass




unit_MyAbstract_MyInt_Impl_._hx_class = unit_MyAbstract_MyInt_Impl_
unit_MyAbstract_MyInt_Impl_._hx_class_name = "unit._MyAbstract._MyAbstract.MyInt_Impl_"
_hx_classes["unit._MyAbstract._MyAbstract.MyInt_Impl_"] = unit_MyAbstract_MyInt_Impl_
_hx_c.unit_MyAbstract_MyInt_Impl_ = unit_MyAbstract_MyInt_Impl_
unit_MyAbstract_MyInt_Impl_._hx_fields = []
unit_MyAbstract_MyInt_Impl_._hx_props = []
unit_MyAbstract_MyInt_Impl_._hx_methods = []
unit_MyAbstract_MyInt_Impl_._hx_statics = ["repeat","cut"]
unit_MyAbstract_MyInt_Impl_._hx_interfaces = []
unit_MyAbstract_MyInt_Impl_._hx_meta = _hx_c._hx_AnonObject(obj=_hx_c._hx_AnonObject(),statics=_hx_c._hx_AnonObject(),fields=_hx_c._hx_AnonObject())
def unit_MyAbstract_MyInt_Impl__hx_empty_init (_hx_o):
	pass
unit_MyAbstract_MyInt_Impl_._hx_empty_init = unit_MyAbstract_MyInt_Impl__hx_empty_init
# print unit.MyAbstract.MyInt2_Impl_
class unit_MyAbstract_MyInt2_Impl_:

	pass




unit_MyAbstract_MyInt2_Impl_._hx_class = unit_MyAbstract_MyInt2_Impl_
unit_MyAbstract_MyInt2_Impl_._hx_class_name = "unit._MyAbstract._MyAbstract.MyInt2_Impl_"
_hx_classes["unit._MyAbstract._MyAbstract.MyInt2_Impl_"] = unit_MyAbstract_MyInt2_Impl_
_hx_c.unit_MyAbstract_MyInt2_Impl_ = unit_MyAbstract_MyInt2_Impl_
unit_MyAbstract_MyInt2_Impl_._hx_fields = []
unit_MyAbstract_MyInt2_Impl_._hx_props = []
unit_MyAbstract_MyInt2_Impl_._hx_methods = []
unit_MyAbstract_MyInt2_Impl_._hx_statics = ["_new","get","invert","incr"]
unit_MyAbstract_MyInt2_Impl_._hx_interfaces = []
unit_MyAbstract_MyInt2_Impl_._hx_meta = _hx_c._hx_AnonObject(obj=_hx_c._hx_AnonObject(),statics=_hx_c._hx_AnonObject(),fields=_hx_c._hx_AnonObject())
def unit_MyAbstract_MyInt2_Impl__hx_empty_init (_hx_o):
	pass
unit_MyAbstract_MyInt2_Impl_._hx_empty_init = unit_MyAbstract_MyInt2_Impl__hx_empty_init
# print unit.MyAbstract.MyString_Impl_
# print unit.MyAbstract.ClassWithHashCode
class unit_ClassWithHashCode:


	def __init__(self,i):
		self.i = None
		self.i = i
	
	# var i
	def hashCode(self):
		return self.i





unit_ClassWithHashCode._hx_class = unit_ClassWithHashCode
unit_ClassWithHashCode._hx_class_name = "unit.ClassWithHashCode"
_hx_classes["unit.ClassWithHashCode"] = unit_ClassWithHashCode
_hx_c.unit_ClassWithHashCode = unit_ClassWithHashCode
unit_ClassWithHashCode._hx_fields = ["i"]
unit_ClassWithHashCode._hx_props = []
unit_ClassWithHashCode._hx_methods = ["hashCode"]
unit_ClassWithHashCode._hx_statics = []
unit_ClassWithHashCode._hx_interfaces = []
unit_ClassWithHashCode._hx_meta = _hx_c._hx_AnonObject(obj=_hx_c._hx_AnonObject(),statics=_hx_c._hx_AnonObject(),fields=_hx_c._hx_AnonObject())
def unit_ClassWithHashCode_hx_empty_init (_hx_o):
	_hx_o.i = None
unit_ClassWithHashCode._hx_empty_init = unit_ClassWithHashCode_hx_empty_init
# print unit.MyAbstract.ClassWithoutHashCode
class unit_ClassWithoutHashCode:


	def __init__(self,i):
		self.i = None
		self.i = i
	
	# var i




unit_ClassWithoutHashCode._hx_class = unit_ClassWithoutHashCode
unit_ClassWithoutHashCode._hx_class_name = "unit.ClassWithoutHashCode"
_hx_classes["unit.ClassWithoutHashCode"] = unit_ClassWithoutHashCode
_hx_c.unit_ClassWithoutHashCode = unit_ClassWithoutHashCode
unit_ClassWithoutHashCode._hx_fields = ["i"]
unit_ClassWithoutHashCode._hx_props = []
unit_ClassWithoutHashCode._hx_methods = []
unit_ClassWithoutHashCode._hx_statics = []
unit_ClassWithoutHashCode._hx_interfaces = []
unit_ClassWithoutHashCode._hx_meta = _hx_c._hx_AnonObject(obj=_hx_c._hx_AnonObject(),statics=_hx_c._hx_AnonObject(),fields=_hx_c._hx_AnonObject())
def unit_ClassWithoutHashCode_hx_empty_init (_hx_o):
	_hx_o.i = None
unit_ClassWithoutHashCode._hx_empty_init = unit_ClassWithoutHashCode_hx_empty_init
# print unit.MyAbstract.MyReflect_Impl_
class unit_MyAbstract_MyReflect_Impl_:

	pass




unit_MyAbstract_MyReflect_Impl_._hx_class = unit_MyAbstract_MyReflect_Impl_
unit_MyAbstract_MyReflect_Impl_._hx_class_name = "unit._MyAbstract._MyAbstract.MyReflect_Impl_"
_hx_classes["unit._MyAbstract._MyAbstract.MyReflect_Impl_"] = unit_MyAbstract_MyReflect_Impl_
_hx_c.unit_MyAbstract_MyReflect_Impl_ = unit_MyAbstract_MyReflect_Impl_
unit_MyAbstract_MyReflect_Impl_._hx_fields = []
unit_MyAbstract_MyReflect_Impl_._hx_props = []
unit_MyAbstract_MyReflect_Impl_._hx_methods = []
unit_MyAbstract_MyReflect_Impl_._hx_statics = ["arrayAccess","arrayWrite"]
unit_MyAbstract_MyReflect_Impl_._hx_interfaces = []
unit_MyAbstract_MyReflect_Impl_._hx_meta = _hx_c._hx_AnonObject(obj=_hx_c._hx_AnonObject(),statics=_hx_c._hx_AnonObject(),fields=_hx_c._hx_AnonObject())
def unit_MyAbstract_MyReflect_Impl__hx_empty_init (_hx_o):
	pass
unit_MyAbstract_MyReflect_Impl_._hx_empty_init = unit_MyAbstract_MyReflect_Impl__hx_empty_init
# print unit.MyAbstract.MyAbstractClosure_Impl_
class unit_MyAbstract_MyAbstractClosure_Impl_:

	pass




unit_MyAbstract_MyAbstractClosure_Impl_._hx_class = unit_MyAbstract_MyAbstractClosure_Impl_
unit_MyAbstract_MyAbstractClosure_Impl_._hx_class_name = "unit._MyAbstract._MyAbstract.MyAbstractClosure_Impl_"
_hx_classes["unit._MyAbstract._MyAbstract.MyAbstractClosure_Impl_"] = unit_MyAbstract_MyAbstractClosure_Impl_
_hx_c.unit_MyAbstract_MyAbstractClosure_Impl_ = unit_MyAbstract_MyAbstractClosure_Impl_
unit_MyAbstract_MyAbstractClosure_Impl_._hx_fields = []
unit_MyAbstract_MyAbstractClosure_Impl_._hx_props = []
unit_MyAbstract_MyAbstractClosure_Impl_._hx_methods = []
unit_MyAbstract_MyAbstractClosure_Impl_._hx_statics = ["_new","test","setVal"]
unit_MyAbstract_MyAbstractClosure_Impl_._hx_interfaces = []
unit_MyAbstract_MyAbstractClosure_Impl_._hx_meta = _hx_c._hx_AnonObject(obj=_hx_c._hx_AnonObject(),statics=_hx_c._hx_AnonObject(),fields=_hx_c._hx_AnonObject())
def unit_MyAbstract_MyAbstractClosure_Impl__hx_empty_init (_hx_o):
	pass
unit_MyAbstract_MyAbstractClosure_Impl_._hx_empty_init = unit_MyAbstract_MyAbstractClosure_Impl__hx_empty_init
# print unit.MyAbstract.MyAbstractSetter_Impl_
class unit_MyAbstract_MyAbstractSetter_Impl_:

	pass




unit_MyAbstract_MyAbstractSetter_Impl_._hx_class = unit_MyAbstract_MyAbstractSetter_Impl_
unit_MyAbstract_MyAbstractSetter_Impl_._hx_class_name = "unit._MyAbstract._MyAbstract.MyAbstractSetter_Impl_"
_hx_classes["unit._MyAbstract._MyAbstract.MyAbstractSetter_Impl_"] = unit_MyAbstract_MyAbstractSetter_Impl_
_hx_c.unit_MyAbstract_MyAbstractSetter_Impl_ = unit_MyAbstract_MyAbstractSetter_Impl_
unit_MyAbstract_MyAbstractSetter_Impl_._hx_fields = []
unit_MyAbstract_MyAbstractSetter_Impl_._hx_props = []
unit_MyAbstract_MyAbstractSetter_Impl_._hx_methods = []
unit_MyAbstract_MyAbstractSetter_Impl_._hx_statics = ["_new","get_value","set_value"]
unit_MyAbstract_MyAbstractSetter_Impl_._hx_interfaces = []
unit_MyAbstract_MyAbstractSetter_Impl_._hx_meta = _hx_c._hx_AnonObject(obj=_hx_c._hx_AnonObject(),statics=_hx_c._hx_AnonObject(),fields=_hx_c._hx_AnonObject())
def unit_MyAbstract_MyAbstractSetter_Impl__hx_empty_init (_hx_o):
	pass
unit_MyAbstract_MyAbstractSetter_Impl_._hx_empty_init = unit_MyAbstract_MyAbstractSetter_Impl__hx_empty_init
# print unit.MyAbstract.MyAbstractCounter_Impl_
class unit_MyAbstract_MyAbstractCounter_Impl_:

	pass




unit_MyAbstract_MyAbstractCounter_Impl_._hx_class = unit_MyAbstract_MyAbstractCounter_Impl_
unit_MyAbstract_MyAbstractCounter_Impl_._hx_class_name = "unit._MyAbstract._MyAbstract.MyAbstractCounter_Impl_"
_hx_classes["unit._MyAbstract._MyAbstract.MyAbstractCounter_Impl_"] = unit_MyAbstract_MyAbstractCounter_Impl_
_hx_c.unit_MyAbstract_MyAbstractCounter_Impl_ = unit_MyAbstract_MyAbstractCounter_Impl_
unit_MyAbstract_MyAbstractCounter_Impl_._hx_fields = []
unit_MyAbstract_MyAbstractCounter_Impl_._hx_props = []
unit_MyAbstract_MyAbstractCounter_Impl_._hx_methods = []
unit_MyAbstract_MyAbstractCounter_Impl_._hx_statics = ["counter","_new","fromInt","getValue"]
unit_MyAbstract_MyAbstractCounter_Impl_._hx_interfaces = []
unit_MyAbstract_MyAbstractCounter_Impl_._hx_meta = _hx_c._hx_AnonObject(obj=_hx_c._hx_AnonObject(),statics=_hx_c._hx_AnonObject(),fields=_hx_c._hx_AnonObject())
def unit_MyAbstract_MyAbstractCounter_Impl__hx_empty_init (_hx_o):
	pass
unit_MyAbstract_MyAbstractCounter_Impl_._hx_empty_init = unit_MyAbstract_MyAbstractCounter_Impl__hx_empty_init
# print unit.MyAbstract.MyAbstractThatCallsAMember_Impl_
class unit_MyAbstract_MyAbstractThatCallsAMember_Impl_:

	pass




unit_MyAbstract_MyAbstractThatCallsAMember_Impl_._hx_class = unit_MyAbstract_MyAbstractThatCallsAMember_Impl_
unit_MyAbstract_MyAbstractThatCallsAMember_Impl_._hx_class_name = "unit._MyAbstract._MyAbstract.MyAbstractThatCallsAMember_Impl_"
_hx_classes["unit._MyAbstract._MyAbstract.MyAbstractThatCallsAMember_Impl_"] = unit_MyAbstract_MyAbstractThatCallsAMember_Impl_
_hx_c.unit_MyAbstract_MyAbstractThatCallsAMember_Impl_ = unit_MyAbstract_MyAbstractThatCallsAMember_Impl_
unit_MyAbstract_MyAbstractThatCallsAMember_Impl_._hx_fields = []
unit_MyAbstract_MyAbstractThatCallsAMember_Impl_._hx_props = []
unit_MyAbstract_MyAbstractThatCallsAMember_Impl_._hx_methods = []
unit_MyAbstract_MyAbstractThatCallsAMember_Impl_._hx_statics = ["_new","bar"]
unit_MyAbstract_MyAbstractThatCallsAMember_Impl_._hx_interfaces = []
unit_MyAbstract_MyAbstractThatCallsAMember_Impl_._hx_meta = _hx_c._hx_AnonObject(obj=_hx_c._hx_AnonObject(),statics=_hx_c._hx_AnonObject(),fields=_hx_c._hx_AnonObject())
def unit_MyAbstract_MyAbstractThatCallsAMember_Impl__hx_empty_init (_hx_o):
	pass
unit_MyAbstract_MyAbstractThatCallsAMember_Impl_._hx_empty_init = unit_MyAbstract_MyAbstractThatCallsAMember_Impl__hx_empty_init
# print unit.MyAbstract.MyDebugString_Impl_
class unit_MyAbstract_MyDebugString_Impl_:

	pass




unit_MyAbstract_MyDebugString_Impl_._hx_class = unit_MyAbstract_MyDebugString_Impl_
unit_MyAbstract_MyDebugString_Impl_._hx_class_name = "unit._MyAbstract._MyAbstract.MyDebugString_Impl_"
_hx_classes["unit._MyAbstract._MyAbstract.MyDebugString_Impl_"] = unit_MyAbstract_MyDebugString_Impl_
_hx_c.unit_MyAbstract_MyDebugString_Impl_ = unit_MyAbstract_MyDebugString_Impl_
unit_MyAbstract_MyDebugString_Impl_._hx_fields = []
unit_MyAbstract_MyDebugString_Impl_._hx_props = []
unit_MyAbstract_MyDebugString_Impl_._hx_methods = []
unit_MyAbstract_MyDebugString_Impl_._hx_statics = ["_new","substr"]
unit_MyAbstract_MyDebugString_Impl_._hx_interfaces = []
unit_MyAbstract_MyDebugString_Impl_._hx_meta = _hx_c._hx_AnonObject(obj=_hx_c._hx_AnonObject(),statics=_hx_c._hx_AnonObject(),fields=_hx_c._hx_AnonObject())
def unit_MyAbstract_MyDebugString_Impl__hx_empty_init (_hx_o):
	pass
unit_MyAbstract_MyDebugString_Impl_._hx_empty_init = unit_MyAbstract_MyDebugString_Impl__hx_empty_init
# print unit.MyAbstract.MySpecialString_Impl_
class unit_MyAbstract_MySpecialString_Impl_:

	pass




unit_MyAbstract_MySpecialString_Impl_._hx_class = unit_MyAbstract_MySpecialString_Impl_
unit_MyAbstract_MySpecialString_Impl_._hx_class_name = "unit._MyAbstract._MyAbstract.MySpecialString_Impl_"
_hx_classes["unit._MyAbstract._MyAbstract.MySpecialString_Impl_"] = unit_MyAbstract_MySpecialString_Impl_
_hx_c.unit_MyAbstract_MySpecialString_Impl_ = unit_MyAbstract_MySpecialString_Impl_
unit_MyAbstract_MySpecialString_Impl_._hx_fields = []
unit_MyAbstract_MySpecialString_Impl_._hx_props = []
unit_MyAbstract_MySpecialString_Impl_._hx_methods = []
unit_MyAbstract_MySpecialString_Impl_._hx_statics = ["_new","substr","toNormal"]
unit_MyAbstract_MySpecialString_Impl_._hx_interfaces = []
unit_MyAbstract_MySpecialString_Impl_._hx_meta = _hx_c._hx_AnonObject(obj=_hx_c._hx_AnonObject(),statics=_hx_c._hx_AnonObject(),fields=_hx_c._hx_AnonObject())
def unit_MyAbstract_MySpecialString_Impl__hx_empty_init (_hx_o):
	pass
unit_MyAbstract_MySpecialString_Impl_._hx_empty_init = unit_MyAbstract_MySpecialString_Impl__hx_empty_init
# print unit.MyAbstract.FakeEnumAbstract_Impl_
class unit_MyAbstract_FakeEnumAbstract_Impl_:

	pass




unit_MyAbstract_FakeEnumAbstract_Impl_._hx_class = unit_MyAbstract_FakeEnumAbstract_Impl_
unit_MyAbstract_FakeEnumAbstract_Impl_._hx_class_name = "unit._MyAbstract._MyAbstract.FakeEnumAbstract_Impl_"
_hx_classes["unit._MyAbstract._MyAbstract.FakeEnumAbstract_Impl_"] = unit_MyAbstract_FakeEnumAbstract_Impl_
_hx_c.unit_MyAbstract_FakeEnumAbstract_Impl_ = unit_MyAbstract_FakeEnumAbstract_Impl_
unit_MyAbstract_FakeEnumAbstract_Impl_._hx_fields = []
unit_MyAbstract_FakeEnumAbstract_Impl_._hx_props = []
unit_MyAbstract_FakeEnumAbstract_Impl_._hx_methods = []
unit_MyAbstract_FakeEnumAbstract_Impl_._hx_statics = ["NotFound","MethodNotAllowed"]
unit_MyAbstract_FakeEnumAbstract_Impl_._hx_interfaces = []
unit_MyAbstract_FakeEnumAbstract_Impl_._hx_meta = _hx_c._hx_AnonObject(obj=_hx_c._hx_AnonObject(),statics=_hx_c._hx_AnonObject(),fields=_hx_c._hx_AnonObject())
def unit_MyAbstract_FakeEnumAbstract_Impl__hx_empty_init (_hx_o):
	pass
unit_MyAbstract_FakeEnumAbstract_Impl_._hx_empty_init = unit_MyAbstract_FakeEnumAbstract_Impl__hx_empty_init
# print unit.MyAbstract.ExposingAbstract_Impl_
class unit_MyAbstract_ExposingAbstract_Impl_:

	pass




unit_MyAbstract_ExposingAbstract_Impl_._hx_class = unit_MyAbstract_ExposingAbstract_Impl_
unit_MyAbstract_ExposingAbstract_Impl_._hx_class_name = "unit._MyAbstract._MyAbstract.ExposingAbstract_Impl_"
_hx_classes["unit._MyAbstract._MyAbstract.ExposingAbstract_Impl_"] = unit_MyAbstract_ExposingAbstract_Impl_
_hx_c.unit_MyAbstract_ExposingAbstract_Impl_ = unit_MyAbstract_ExposingAbstract_Impl_
unit_MyAbstract_ExposingAbstract_Impl_._hx_fields = []
unit_MyAbstract_ExposingAbstract_Impl_._hx_props = []
unit_MyAbstract_ExposingAbstract_Impl_._hx_methods = []
unit_MyAbstract_ExposingAbstract_Impl_._hx_statics = ["_new"]
unit_MyAbstract_ExposingAbstract_Impl_._hx_interfaces = []
unit_MyAbstract_ExposingAbstract_Impl_._hx_meta = _hx_c._hx_AnonObject(obj=_hx_c._hx_AnonObject(),statics=_hx_c._hx_AnonObject(),fields=_hx_c._hx_AnonObject())
def unit_MyAbstract_ExposingAbstract_Impl__hx_empty_init (_hx_o):
	pass
unit_MyAbstract_ExposingAbstract_Impl_._hx_empty_init = unit_MyAbstract_ExposingAbstract_Impl__hx_empty_init
# print unit.MyClass.MyClass
class unit_MyClass:


	def __init__(self,v):
		self.val = None
		self.ref = None
		self.intValue = None
		self.stringValue = None
		self.val = v
		self.intValue = 55
		
	
	# var val
	# var ref
	# var intValue
	# var stringValue
	def get(self):
		return self.val

	def set(self,v):
		self.val = v

	def add(self,x,y):
		return self.val + x + y





unit_MyClass._hx_class = unit_MyClass
unit_MyClass._hx_class_name = "unit.MyClass"
_hx_classes["unit.MyClass"] = unit_MyClass
_hx_c.unit_MyClass = unit_MyClass
unit_MyClass._hx_fields = ["val","ref","intValue","stringValue"]
unit_MyClass._hx_props = []
unit_MyClass._hx_methods = ["get","set","add"]
unit_MyClass._hx_statics = []
unit_MyClass._hx_interfaces = []
unit_MyClass._hx_meta = _hx_c._hx_AnonObject(obj=_hx_c._hx_AnonObject(),statics=_hx_c._hx_AnonObject(),fields=_hx_c._hx_AnonObject())
def unit_MyClass_hx_empty_init (_hx_o):
	_hx_o.val = None
	_hx_o.ref = None
	_hx_o.intValue = None
	_hx_o.stringValue = None
unit_MyClass._hx_empty_init = unit_MyClass_hx_empty_init
# print unit.MyClass.MyParent
class unit_MyParent:


	def __init__(self):
		None
	def a(self):
		return 11

	def b(self):
		return 20





unit_MyParent._hx_class = unit_MyParent
unit_MyParent._hx_class_name = "unit.MyParent"
_hx_classes["unit.MyParent"] = unit_MyParent
_hx_c.unit_MyParent = unit_MyParent
unit_MyParent._hx_fields = []
unit_MyParent._hx_props = []
unit_MyParent._hx_methods = ["a","b"]
unit_MyParent._hx_statics = []
unit_MyParent._hx_interfaces = []
unit_MyParent._hx_meta = _hx_c._hx_AnonObject(obj=_hx_c._hx_AnonObject(),statics=_hx_c._hx_AnonObject(),fields=_hx_c._hx_AnonObject())
def unit_MyParent_hx_empty_init (_hx_o):
	pass
unit_MyParent._hx_empty_init = unit_MyParent_hx_empty_init
# print unit.MyClass.MyDynamicChildWithToString
class unit_MyDynamicChildWithToString(unit_MyParent):


	def __init__(self):
		super().__init__()
	def toString(self):
		return "Custom toString"





unit_MyDynamicChildWithToString._hx_class = unit_MyDynamicChildWithToString
unit_MyDynamicChildWithToString._hx_class_name = "unit.MyDynamicChildWithToString"
_hx_classes["unit.MyDynamicChildWithToString"] = unit_MyDynamicChildWithToString
_hx_c.unit_MyDynamicChildWithToString = unit_MyDynamicChildWithToString
unit_MyDynamicChildWithToString._hx_fields = []
unit_MyDynamicChildWithToString._hx_props = []
unit_MyDynamicChildWithToString._hx_methods = ["toString"]
unit_MyDynamicChildWithToString._hx_statics = []
unit_MyDynamicChildWithToString._hx_interfaces = []
unit_MyDynamicChildWithToString._hx_super = unit_MyParent
unit_MyDynamicChildWithToString._hx_meta = _hx_c._hx_AnonObject(obj=_hx_c._hx_AnonObject(),statics=_hx_c._hx_AnonObject(),fields=_hx_c._hx_AnonObject())
def unit_MyDynamicChildWithToString_hx_empty_init (_hx_o):
	pass
unit_MyDynamicChildWithToString._hx_empty_init = unit_MyDynamicChildWithToString_hx_empty_init
# print unit.MyClass.MyDynamicChildWithoutToString
class unit_MyDynamicChildWithoutToString(unit_MyParent):


	def __init__(self):
		super().__init__()




unit_MyDynamicChildWithoutToString._hx_class = unit_MyDynamicChildWithoutToString
unit_MyDynamicChildWithoutToString._hx_class_name = "unit.MyDynamicChildWithoutToString"
_hx_classes["unit.MyDynamicChildWithoutToString"] = unit_MyDynamicChildWithoutToString
_hx_c.unit_MyDynamicChildWithoutToString = unit_MyDynamicChildWithoutToString
unit_MyDynamicChildWithoutToString._hx_fields = []
unit_MyDynamicChildWithoutToString._hx_props = []
unit_MyDynamicChildWithoutToString._hx_methods = []
unit_MyDynamicChildWithoutToString._hx_statics = []
unit_MyDynamicChildWithoutToString._hx_interfaces = []
unit_MyDynamicChildWithoutToString._hx_super = unit_MyParent
unit_MyDynamicChildWithoutToString._hx_meta = _hx_c._hx_AnonObject(obj=_hx_c._hx_AnonObject(),statics=_hx_c._hx_AnonObject(),fields=_hx_c._hx_AnonObject())
def unit_MyDynamicChildWithoutToString_hx_empty_init (_hx_o):
	pass
unit_MyDynamicChildWithoutToString._hx_empty_init = unit_MyDynamicChildWithoutToString_hx_empty_init
# print unit.MyClass.MyChild1
class unit_MyChild1(unit_MyParent):


	def __init__(self):
		super().__init__()
	def a(self):
		return 12

	def b(self):
		return 21

	def c(self):
		return 19





unit_MyChild1._hx_class = unit_MyChild1
unit_MyChild1._hx_class_name = "unit.MyChild1"
_hx_classes["unit.MyChild1"] = unit_MyChild1
_hx_c.unit_MyChild1 = unit_MyChild1
unit_MyChild1._hx_fields = []
unit_MyChild1._hx_props = []
unit_MyChild1._hx_methods = ["a","b","c"]
unit_MyChild1._hx_statics = []
unit_MyChild1._hx_interfaces = []
unit_MyChild1._hx_super = unit_MyParent
unit_MyChild1._hx_meta = _hx_c._hx_AnonObject(obj=_hx_c._hx_AnonObject(),statics=_hx_c._hx_AnonObject(),fields=_hx_c._hx_AnonObject())
def unit_MyChild1_hx_empty_init (_hx_o):
	pass
unit_MyChild1._hx_empty_init = unit_MyChild1_hx_empty_init
# print unit.MyClass.MyChild2
class unit_MyChild2(unit_MyParent):


	def __init__(self):
		super().__init__()
	def test1(self,mc1):
		return mc1.b()





unit_MyChild2._hx_class = unit_MyChild2
unit_MyChild2._hx_class_name = "unit.MyChild2"
_hx_classes["unit.MyChild2"] = unit_MyChild2
_hx_c.unit_MyChild2 = unit_MyChild2
unit_MyChild2._hx_fields = []
unit_MyChild2._hx_props = []
unit_MyChild2._hx_methods = ["test1"]
unit_MyChild2._hx_statics = []
unit_MyChild2._hx_interfaces = []
unit_MyChild2._hx_super = unit_MyParent
unit_MyChild2._hx_meta = _hx_c._hx_AnonObject(obj=_hx_c._hx_AnonObject(),statics=_hx_c._hx_AnonObject(),fields=_hx_c._hx_AnonObject())
def unit_MyChild2_hx_empty_init (_hx_o):
	pass
unit_MyChild2._hx_empty_init = unit_MyChild2_hx_empty_init
# print unit.MyClass.I1
class unit_I1:

	pass




unit_I1._hx_class = unit_I1
unit_I1._hx_class_name = "unit.I1"
_hx_classes["unit.I1"] = unit_I1
_hx_c.unit_I1 = unit_I1
unit_I1._hx_fields = []
unit_I1._hx_props = []
unit_I1._hx_methods = []
unit_I1._hx_statics = []
unit_I1._hx_interfaces = []
unit_I1._hx_meta = _hx_c._hx_AnonObject(obj=_hx_c._hx_AnonObject(),statics=_hx_c._hx_AnonObject(),fields=_hx_c._hx_AnonObject())
def unit_I1_hx_empty_init (_hx_o):
	pass
unit_I1._hx_empty_init = unit_I1_hx_empty_init
# print unit.MyClass.Base
class unit_Base:


	def __init__(self):
		self.s = None
		None
	
	# var s




unit_Base._hx_class = unit_Base
unit_Base._hx_class_name = "unit.Base"
_hx_classes["unit.Base"] = unit_Base
_hx_c.unit_Base = unit_Base
unit_Base._hx_fields = ["s"]
unit_Base._hx_props = []
unit_Base._hx_methods = []
unit_Base._hx_statics = []
unit_Base._hx_interfaces = []
unit_Base._hx_meta = _hx_c._hx_AnonObject(obj=_hx_c._hx_AnonObject(),statics=_hx_c._hx_AnonObject(),fields=_hx_c._hx_AnonObject())
def unit_Base_hx_empty_init (_hx_o):
	_hx_o.s = None
unit_Base._hx_empty_init = unit_Base_hx_empty_init
# print unit.MyClass.Child1
class unit_Child1(unit_Base):


	def __init__(self):
		super().__init__()




unit_Child1._hx_class = unit_Child1
unit_Child1._hx_class_name = "unit.Child1"
_hx_classes["unit.Child1"] = unit_Child1
_hx_c.unit_Child1 = unit_Child1
unit_Child1._hx_fields = []
unit_Child1._hx_props = []
unit_Child1._hx_methods = []
unit_Child1._hx_statics = []
unit_Child1._hx_interfaces = []
unit_Child1._hx_super = unit_Base
unit_Child1._hx_meta = _hx_c._hx_AnonObject(obj=_hx_c._hx_AnonObject(),statics=_hx_c._hx_AnonObject(),fields=_hx_c._hx_AnonObject())
def unit_Child1_hx_empty_init (_hx_o):
	pass
unit_Child1._hx_empty_init = unit_Child1_hx_empty_init
# print unit.MyClass.Child2
class unit_Child2(unit_Base):


	def __init__(self):
		super().__init__()




unit_Child2._hx_class = unit_Child2
unit_Child2._hx_class_name = "unit.Child2"
_hx_classes["unit.Child2"] = unit_Child2
_hx_c.unit_Child2 = unit_Child2
unit_Child2._hx_fields = []
unit_Child2._hx_props = []
unit_Child2._hx_methods = []
unit_Child2._hx_statics = []
unit_Child2._hx_interfaces = [unit_I1]
unit_Child2._hx_super = unit_Base
unit_Child2._hx_meta = _hx_c._hx_AnonObject(obj=_hx_c._hx_AnonObject(),statics=_hx_c._hx_AnonObject(),fields=_hx_c._hx_AnonObject())
def unit_Child2_hx_empty_init (_hx_o):
	pass
unit_Child2._hx_empty_init = unit_Child2_hx_empty_init
# print unit.MyClass.Child2_1
class unit_Child2_1(unit_Child2):


	def __init__(self):
		super().__init__()




unit_Child2_1._hx_class = unit_Child2_1
unit_Child2_1._hx_class_name = "unit.Child2_1"
_hx_classes["unit.Child2_1"] = unit_Child2_1
_hx_c.unit_Child2_1 = unit_Child2_1
unit_Child2_1._hx_fields = []
unit_Child2_1._hx_props = []
unit_Child2_1._hx_methods = []
unit_Child2_1._hx_statics = []
unit_Child2_1._hx_interfaces = []
unit_Child2_1._hx_super = unit_Child2
unit_Child2_1._hx_meta = _hx_c._hx_AnonObject(obj=_hx_c._hx_AnonObject(),statics=_hx_c._hx_AnonObject(),fields=_hx_c._hx_AnonObject())
def unit_Child2_1_hx_empty_init (_hx_o):
	pass
unit_Child2_1._hx_empty_init = unit_Child2_1_hx_empty_init
# print unit.MyClass.Unrelated
class unit_Unrelated:


	def __init__(self):
		self.s = None
		self.t = None
		None
	
	# var s
	# var t




unit_Unrelated._hx_class = unit_Unrelated
unit_Unrelated._hx_class_name = "unit.Unrelated"
_hx_classes["unit.Unrelated"] = unit_Unrelated
_hx_c.unit_Unrelated = unit_Unrelated
unit_Unrelated._hx_fields = ["s","t"]
unit_Unrelated._hx_props = []
unit_Unrelated._hx_methods = []
unit_Unrelated._hx_statics = []
unit_Unrelated._hx_interfaces = [unit_I1]
unit_Unrelated._hx_meta = _hx_c._hx_AnonObject(obj=_hx_c._hx_AnonObject(),statics=_hx_c._hx_AnonObject(),fields=_hx_c._hx_AnonObject())
def unit_Unrelated_hx_empty_init (_hx_o):
	_hx_o.s = None
	_hx_o.t = None
unit_Unrelated._hx_empty_init = unit_Unrelated_hx_empty_init
# print unit.MyClass.I2
class unit_I2:

	pass




unit_I2._hx_class = unit_I2
unit_I2._hx_class_name = "unit.I2"
_hx_classes["unit.I2"] = unit_I2
_hx_c.unit_I2 = unit_I2
unit_I2._hx_fields = []
unit_I2._hx_props = []
unit_I2._hx_methods = []
unit_I2._hx_statics = []
unit_I2._hx_interfaces = [unit_I1]
unit_I2._hx_meta = _hx_c._hx_AnonObject(obj=_hx_c._hx_AnonObject(),statics=_hx_c._hx_AnonObject(),fields=_hx_c._hx_AnonObject())
def unit_I2_hx_empty_init (_hx_o):
	pass
unit_I2._hx_empty_init = unit_I2_hx_empty_init
# print unit.MyClass.ClassI2
class unit_ClassI2:


	def __init__(self):
		None




unit_ClassI2._hx_class = unit_ClassI2
unit_ClassI2._hx_class_name = "unit.ClassI2"
_hx_classes["unit.ClassI2"] = unit_ClassI2
_hx_c.unit_ClassI2 = unit_ClassI2
unit_ClassI2._hx_fields = []
unit_ClassI2._hx_props = []
unit_ClassI2._hx_methods = []
unit_ClassI2._hx_statics = []
unit_ClassI2._hx_interfaces = [unit_I2]
unit_ClassI2._hx_meta = _hx_c._hx_AnonObject(obj=_hx_c._hx_AnonObject(),statics=_hx_c._hx_AnonObject(),fields=_hx_c._hx_AnonObject())
def unit_ClassI2_hx_empty_init (_hx_o):
	pass
unit_ClassI2._hx_empty_init = unit_ClassI2_hx_empty_init
# print unit.MyClass.CI1
class unit_CI1(unit_Base):


	def __init__(self):
		super().__init__()




unit_CI1._hx_class = unit_CI1
unit_CI1._hx_class_name = "unit.CI1"
_hx_classes["unit.CI1"] = unit_CI1
_hx_c.unit_CI1 = unit_CI1
unit_CI1._hx_fields = []
unit_CI1._hx_props = []
unit_CI1._hx_methods = []
unit_CI1._hx_statics = []
unit_CI1._hx_interfaces = [unit_I1]
unit_CI1._hx_super = unit_Base
unit_CI1._hx_meta = _hx_c._hx_AnonObject(obj=_hx_c._hx_AnonObject(),statics=_hx_c._hx_AnonObject(),fields=_hx_c._hx_AnonObject())
def unit_CI1_hx_empty_init (_hx_o):
	pass
unit_CI1._hx_empty_init = unit_CI1_hx_empty_init
# print unit.MyClass.CI2
class unit_CI2(unit_Base):


	def __init__(self):
		super().__init__()




unit_CI2._hx_class = unit_CI2
unit_CI2._hx_class_name = "unit.CI2"
_hx_classes["unit.CI2"] = unit_CI2
_hx_c.unit_CI2 = unit_CI2
unit_CI2._hx_fields = []
unit_CI2._hx_props = []
unit_CI2._hx_methods = []
unit_CI2._hx_statics = []
unit_CI2._hx_interfaces = [unit_I1]
unit_CI2._hx_super = unit_Base
unit_CI2._hx_meta = _hx_c._hx_AnonObject(obj=_hx_c._hx_AnonObject(),statics=_hx_c._hx_AnonObject(),fields=_hx_c._hx_AnonObject())
def unit_CI2_hx_empty_init (_hx_o):
	pass
unit_CI2._hx_empty_init = unit_CI2_hx_empty_init
# print unit.MyClass.CII1
class unit_CII1(unit_CI1):


	def __init__(self):
		super().__init__()




unit_CII1._hx_class = unit_CII1
unit_CII1._hx_class_name = "unit.CII1"
_hx_classes["unit.CII1"] = unit_CII1
_hx_c.unit_CII1 = unit_CII1
unit_CII1._hx_fields = []
unit_CII1._hx_props = []
unit_CII1._hx_methods = []
unit_CII1._hx_statics = []
unit_CII1._hx_interfaces = []
unit_CII1._hx_super = unit_CI1
unit_CII1._hx_meta = _hx_c._hx_AnonObject(obj=_hx_c._hx_AnonObject(),statics=_hx_c._hx_AnonObject(),fields=_hx_c._hx_AnonObject())
def unit_CII1_hx_empty_init (_hx_o):
	pass
unit_CII1._hx_empty_init = unit_CII1_hx_empty_init
# print unit.MyClass.CII2
class unit_CII2(unit_CI2):


	def __init__(self):
		super().__init__()




unit_CII2._hx_class = unit_CII2
unit_CII2._hx_class_name = "unit.CII2"
_hx_classes["unit.CII2"] = unit_CII2
_hx_c.unit_CII2 = unit_CII2
unit_CII2._hx_fields = []
unit_CII2._hx_props = []
unit_CII2._hx_methods = []
unit_CII2._hx_statics = []
unit_CII2._hx_interfaces = []
unit_CII2._hx_super = unit_CI2
unit_CII2._hx_meta = _hx_c._hx_AnonObject(obj=_hx_c._hx_AnonObject(),statics=_hx_c._hx_AnonObject(),fields=_hx_c._hx_AnonObject())
def unit_CII2_hx_empty_init (_hx_o):
	pass
unit_CII2._hx_empty_init = unit_CII2_hx_empty_init
# print unit.MyClass.PClassBase
class unit_PClassBase:


	def __init__(self):
		None




unit_PClassBase._hx_class = unit_PClassBase
unit_PClassBase._hx_class_name = "unit.PClassBase"
_hx_classes["unit.PClassBase"] = unit_PClassBase
_hx_c.unit_PClassBase = unit_PClassBase
unit_PClassBase._hx_fields = []
unit_PClassBase._hx_props = []
unit_PClassBase._hx_methods = []
unit_PClassBase._hx_statics = []
unit_PClassBase._hx_interfaces = []
unit_PClassBase._hx_meta = _hx_c._hx_AnonObject(obj=_hx_c._hx_AnonObject(),statics=_hx_c._hx_AnonObject(),fields=_hx_c._hx_AnonObject())
def unit_PClassBase_hx_empty_init (_hx_o):
	pass
unit_PClassBase._hx_empty_init = unit_PClassBase_hx_empty_init
# print unit.MyClass.PClass1
class unit_PClass1(unit_PClassBase):


	def __init__(self):
		super().__init__()




unit_PClass1._hx_class = unit_PClass1
unit_PClass1._hx_class_name = "unit.PClass1"
_hx_classes["unit.PClass1"] = unit_PClass1
_hx_c.unit_PClass1 = unit_PClass1
unit_PClass1._hx_fields = []
unit_PClass1._hx_props = []
unit_PClass1._hx_methods = []
unit_PClass1._hx_statics = []
unit_PClass1._hx_interfaces = []
unit_PClass1._hx_super = unit_PClassBase
unit_PClass1._hx_meta = _hx_c._hx_AnonObject(obj=_hx_c._hx_AnonObject(),statics=_hx_c._hx_AnonObject(),fields=_hx_c._hx_AnonObject())
def unit_PClass1_hx_empty_init (_hx_o):
	pass
unit_PClass1._hx_empty_init = unit_PClass1_hx_empty_init
# print unit.MyClass.PClass2
class unit_PClass2(unit_PClassBase):


	def __init__(self,t):
		super().__init__()




unit_PClass2._hx_class = unit_PClass2
unit_PClass2._hx_class_name = "unit.PClass2"
_hx_classes["unit.PClass2"] = unit_PClass2
_hx_c.unit_PClass2 = unit_PClass2
unit_PClass2._hx_fields = []
unit_PClass2._hx_props = []
unit_PClass2._hx_methods = []
unit_PClass2._hx_statics = []
unit_PClass2._hx_interfaces = []
unit_PClass2._hx_super = unit_PClassBase
unit_PClass2._hx_meta = _hx_c._hx_AnonObject(obj=_hx_c._hx_AnonObject(),statics=_hx_c._hx_AnonObject(),fields=_hx_c._hx_AnonObject())
def unit_PClass2_hx_empty_init (_hx_o):
	pass
unit_PClass2._hx_empty_init = unit_PClass2_hx_empty_init
# print unit.MyClass.CovI
class unit_CovI:

	# var covariant
	pass




unit_CovI._hx_class = unit_CovI
unit_CovI._hx_class_name = "unit.CovI"
_hx_classes["unit.CovI"] = unit_CovI
_hx_c.unit_CovI = unit_CovI
unit_CovI._hx_fields = []
unit_CovI._hx_props = []
unit_CovI._hx_methods = ["covariant"]
unit_CovI._hx_statics = []
unit_CovI._hx_interfaces = []
unit_CovI._hx_meta = _hx_c._hx_AnonObject(obj=_hx_c._hx_AnonObject(),statics=_hx_c._hx_AnonObject(),fields=_hx_c._hx_AnonObject())
def unit_CovI_hx_empty_init (_hx_o):
	pass
unit_CovI._hx_empty_init = unit_CovI_hx_empty_init
# print unit.MyClass.CovI2
class unit_CovI2:

	# var covariant
	pass




unit_CovI2._hx_class = unit_CovI2
unit_CovI2._hx_class_name = "unit.CovI2"
_hx_classes["unit.CovI2"] = unit_CovI2
_hx_c.unit_CovI2 = unit_CovI2
unit_CovI2._hx_fields = []
unit_CovI2._hx_props = []
unit_CovI2._hx_methods = ["covariant"]
unit_CovI2._hx_statics = []
unit_CovI2._hx_interfaces = [unit_CovI]
unit_CovI2._hx_meta = _hx_c._hx_AnonObject(obj=_hx_c._hx_AnonObject(),statics=_hx_c._hx_AnonObject(),fields=_hx_c._hx_AnonObject())
def unit_CovI2_hx_empty_init (_hx_o):
	pass
unit_CovI2._hx_empty_init = unit_CovI2_hx_empty_init
# print unit.MyClass.Cov1
class unit_Cov1:


	def __init__(self):
		None
	def covariant(self):
		return _hx_c.unit_Base()





unit_Cov1._hx_class = unit_Cov1
unit_Cov1._hx_class_name = "unit.Cov1"
_hx_classes["unit.Cov1"] = unit_Cov1
_hx_c.unit_Cov1 = unit_Cov1
unit_Cov1._hx_fields = []
unit_Cov1._hx_props = []
unit_Cov1._hx_methods = ["covariant"]
unit_Cov1._hx_statics = []
unit_Cov1._hx_interfaces = []
unit_Cov1._hx_meta = _hx_c._hx_AnonObject(obj=_hx_c._hx_AnonObject(),statics=_hx_c._hx_AnonObject(),fields=_hx_c._hx_AnonObject())
def unit_Cov1_hx_empty_init (_hx_o):
	pass
unit_Cov1._hx_empty_init = unit_Cov1_hx_empty_init
# print unit.MyClass.Cov2
class unit_Cov2(unit_Cov1):


	def __init__(self):
		super().__init__()
	def covariant(self):
		return _hx_c.unit_Child1()





unit_Cov2._hx_class = unit_Cov2
unit_Cov2._hx_class_name = "unit.Cov2"
_hx_classes["unit.Cov2"] = unit_Cov2
_hx_c.unit_Cov2 = unit_Cov2
unit_Cov2._hx_fields = []
unit_Cov2._hx_props = []
unit_Cov2._hx_methods = ["covariant"]
unit_Cov2._hx_statics = []
unit_Cov2._hx_interfaces = [unit_CovI]
unit_Cov2._hx_super = unit_Cov1
unit_Cov2._hx_meta = _hx_c._hx_AnonObject(obj=_hx_c._hx_AnonObject(),statics=_hx_c._hx_AnonObject(),fields=_hx_c._hx_AnonObject())
def unit_Cov2_hx_empty_init (_hx_o):
	pass
unit_Cov2._hx_empty_init = unit_Cov2_hx_empty_init
# print unit.MyClass.Cov3
class unit_Cov3:


	def __init__(self):
		None
	def covariant(self):
		return _hx_c.unit_Child2_1()





unit_Cov3._hx_class = unit_Cov3
unit_Cov3._hx_class_name = "unit.Cov3"
_hx_classes["unit.Cov3"] = unit_Cov3
_hx_c.unit_Cov3 = unit_Cov3
unit_Cov3._hx_fields = []
unit_Cov3._hx_props = []
unit_Cov3._hx_methods = ["covariant"]
unit_Cov3._hx_statics = []
unit_Cov3._hx_interfaces = [unit_CovI2]
unit_Cov3._hx_meta = _hx_c._hx_AnonObject(obj=_hx_c._hx_AnonObject(),statics=_hx_c._hx_AnonObject(),fields=_hx_c._hx_AnonObject())
def unit_Cov3_hx_empty_init (_hx_o):
	pass
unit_Cov3._hx_empty_init = unit_Cov3_hx_empty_init
# print unit.MyClass.Ctrv1
class unit_Ctrv1:


	def __init__(self):
		None
	def contravariant(self,arg):
		None





unit_Ctrv1._hx_class = unit_Ctrv1
unit_Ctrv1._hx_class_name = "unit.Ctrv1"
_hx_classes["unit.Ctrv1"] = unit_Ctrv1
_hx_c.unit_Ctrv1 = unit_Ctrv1
unit_Ctrv1._hx_fields = []
unit_Ctrv1._hx_props = []
unit_Ctrv1._hx_methods = ["contravariant"]
unit_Ctrv1._hx_statics = []
unit_Ctrv1._hx_interfaces = []
unit_Ctrv1._hx_meta = _hx_c._hx_AnonObject(obj=_hx_c._hx_AnonObject(),statics=_hx_c._hx_AnonObject(),fields=_hx_c._hx_AnonObject())
def unit_Ctrv1_hx_empty_init (_hx_o):
	pass
unit_Ctrv1._hx_empty_init = unit_Ctrv1_hx_empty_init
# print unit.MyClass.Ctrv2
class unit_Ctrv2(unit_Ctrv1):


	def __init__(self):
		super().__init__()
	def contravariant(self,arg):
		None





unit_Ctrv2._hx_class = unit_Ctrv2
unit_Ctrv2._hx_class_name = "unit.Ctrv2"
_hx_classes["unit.Ctrv2"] = unit_Ctrv2
_hx_c.unit_Ctrv2 = unit_Ctrv2
unit_Ctrv2._hx_fields = []
unit_Ctrv2._hx_props = []
unit_Ctrv2._hx_methods = ["contravariant"]
unit_Ctrv2._hx_statics = []
unit_Ctrv2._hx_interfaces = []
unit_Ctrv2._hx_super = unit_Ctrv1
unit_Ctrv2._hx_meta = _hx_c._hx_AnonObject(obj=_hx_c._hx_AnonObject(),statics=_hx_c._hx_AnonObject(),fields=_hx_c._hx_AnonObject())
def unit_Ctrv2_hx_empty_init (_hx_o):
	pass
unit_Ctrv2._hx_empty_init = unit_Ctrv2_hx_empty_init
# print unit.MyClass.InitBase
class unit_InitBase:


	def __init__(self):
		self.i = None
		self.s = None
		self.b = None
		self.t = None
		self.t = _hx_c.String
		self.b = True
		self.s = "foo"
		self.i = 2
		
	
	# var i
	# var s
	# var b
	# var t




unit_InitBase._hx_class = unit_InitBase
unit_InitBase._hx_class_name = "unit.InitBase"
_hx_classes["unit.InitBase"] = unit_InitBase
_hx_c.unit_InitBase = unit_InitBase
unit_InitBase._hx_fields = ["i","s","b","t"]
unit_InitBase._hx_props = []
unit_InitBase._hx_methods = []
unit_InitBase._hx_statics = ["si","sop","st","sp","sinline"]
unit_InitBase._hx_interfaces = []
unit_InitBase._hx_meta = _hx_c._hx_AnonObject(obj=_hx_c._hx_AnonObject(),statics=_hx_c._hx_AnonObject(),fields=_hx_c._hx_AnonObject())
def unit_InitBase_hx_empty_init (_hx_o):
	_hx_o.i = None
	_hx_o.s = None
	_hx_o.b = None
	_hx_o.t = None
unit_InitBase._hx_empty_init = unit_InitBase_hx_empty_init
# print unit.MyClass.InitChild
class unit_InitChild(unit_InitBase):


	def __init__(self):
		super().__init__()




unit_InitChild._hx_class = unit_InitChild
unit_InitChild._hx_class_name = "unit.InitChild"
_hx_classes["unit.InitChild"] = unit_InitChild
_hx_c.unit_InitChild = unit_InitChild
unit_InitChild._hx_fields = []
unit_InitChild._hx_props = []
unit_InitChild._hx_methods = []
unit_InitChild._hx_statics = []
unit_InitChild._hx_interfaces = []
unit_InitChild._hx_super = unit_InitBase
unit_InitChild._hx_meta = _hx_c._hx_AnonObject(obj=_hx_c._hx_AnonObject(),statics=_hx_c._hx_AnonObject(),fields=_hx_c._hx_AnonObject())
def unit_InitChild_hx_empty_init (_hx_o):
	pass
unit_InitChild._hx_empty_init = unit_InitChild_hx_empty_init
# print unit.MyClass.InitChildWithCtor
class unit_InitChildWithCtor(unit_InitBase):


	def __init__(self,_):
		super().__init__()




unit_InitChildWithCtor._hx_class = unit_InitChildWithCtor
unit_InitChildWithCtor._hx_class_name = "unit.InitChildWithCtor"
_hx_classes["unit.InitChildWithCtor"] = unit_InitChildWithCtor
_hx_c.unit_InitChildWithCtor = unit_InitChildWithCtor
unit_InitChildWithCtor._hx_fields = []
unit_InitChildWithCtor._hx_props = []
unit_InitChildWithCtor._hx_methods = []
unit_InitChildWithCtor._hx_statics = []
unit_InitChildWithCtor._hx_interfaces = []
unit_InitChildWithCtor._hx_super = unit_InitBase
unit_InitChildWithCtor._hx_meta = _hx_c._hx_AnonObject(obj=_hx_c._hx_AnonObject(),statics=_hx_c._hx_AnonObject(),fields=_hx_c._hx_AnonObject())
def unit_InitChildWithCtor_hx_empty_init (_hx_o):
	pass
unit_InitChildWithCtor._hx_empty_init = unit_InitChildWithCtor_hx_empty_init
# print unit.MyClass.InitWithoutCtor
class unit_InitWithoutCtor:


	def __init__(self):
		self.i = None
		self.i = 2
	
	# var i




unit_InitWithoutCtor._hx_class = unit_InitWithoutCtor
unit_InitWithoutCtor._hx_class_name = "unit.InitWithoutCtor"
_hx_classes["unit.InitWithoutCtor"] = unit_InitWithoutCtor
_hx_c.unit_InitWithoutCtor = unit_InitWithoutCtor
unit_InitWithoutCtor._hx_fields = ["i"]
unit_InitWithoutCtor._hx_props = []
unit_InitWithoutCtor._hx_methods = []
unit_InitWithoutCtor._hx_statics = []
unit_InitWithoutCtor._hx_interfaces = []
unit_InitWithoutCtor._hx_meta = _hx_c._hx_AnonObject(obj=_hx_c._hx_AnonObject(),statics=_hx_c._hx_AnonObject(),fields=_hx_c._hx_AnonObject())
def unit_InitWithoutCtor_hx_empty_init (_hx_o):
	_hx_o.i = None
unit_InitWithoutCtor._hx_empty_init = unit_InitWithoutCtor_hx_empty_init
# print unit.MyClass.InitProperties
class unit_InitProperties:


	def __init__(self):
		self.accNull = None
		self.accDefault = None
		self.accFunc = None
		self.accNever = None
		self.accDynamic = None
		self.accDynamic = 3
		self.accNever = 3
		self.accFunc = 3
		self.accDefault = 3
		self.accNull = 3
		
	
	# var accNull
	# var accDefault
	# var accFunc
	# var accNever
	# var accDynamic
	def set_accFunc(self,v):
		raise _HxException("setter was called")

	def set_accDynamic(self,v):
		raise _HxException("setter was called")





unit_InitProperties._hx_class = unit_InitProperties
unit_InitProperties._hx_class_name = "unit.InitProperties"
_hx_classes["unit.InitProperties"] = unit_InitProperties
_hx_c.unit_InitProperties = unit_InitProperties
unit_InitProperties._hx_fields = ["accNull","accDefault","accFunc","accNever","accDynamic"]
unit_InitProperties._hx_props = []
unit_InitProperties._hx_methods = ["set_accFunc","set_accDynamic"]
unit_InitProperties._hx_statics = []
unit_InitProperties._hx_interfaces = []
unit_InitProperties._hx_meta = _hx_c._hx_AnonObject(obj=_hx_c._hx_AnonObject(),statics=_hx_c._hx_AnonObject(),fields=_hx_c._hx_AnonObject())
def unit_InitProperties_hx_empty_init (_hx_o):
	_hx_o.accNull = None
	_hx_o.accDefault = None
	_hx_o.accFunc = None
	_hx_o.accNever = None
	_hx_o.accDynamic = None
unit_InitProperties._hx_empty_init = unit_InitProperties_hx_empty_init
# print unit.MyClass.ParamConstraintsClass
class unit_ParamConstraintsClass:


	def __init__(self):
		None
	def memberSingle(self,a):
		return a

	def memberMultiple(self,a):
		return a

	def memberComplex(self,a,b):
		return b

	def memberBasic(self,a,b):
		return _hx_array_get(b,0)

	def memberAnon(self,v):
		return v.x + v.y

	def memberOverload(self,a,b):
		None





unit_ParamConstraintsClass._hx_class = unit_ParamConstraintsClass
unit_ParamConstraintsClass._hx_class_name = "unit.ParamConstraintsClass"
_hx_classes["unit.ParamConstraintsClass"] = unit_ParamConstraintsClass
_hx_c.unit_ParamConstraintsClass = unit_ParamConstraintsClass
unit_ParamConstraintsClass._hx_fields = []
unit_ParamConstraintsClass._hx_props = []
unit_ParamConstraintsClass._hx_methods = ["memberSingle","memberMultiple","memberComplex","memberBasic","memberAnon","memberOverload"]
unit_ParamConstraintsClass._hx_statics = ["staticSingle"]
unit_ParamConstraintsClass._hx_interfaces = []
unit_ParamConstraintsClass._hx_meta = _hx_c._hx_AnonObject(obj=_hx_c._hx_AnonObject(),statics=_hx_c._hx_AnonObject(),fields=_hx_c._hx_AnonObject())
def unit_ParamConstraintsClass_hx_empty_init (_hx_o):
	pass
unit_ParamConstraintsClass._hx_empty_init = unit_ParamConstraintsClass_hx_empty_init
# print unit.MyClass.ParamConstraintsClass2
class unit_ParamConstraintsClass2:


	def __init__(self):
		None
	def bind(self,t):
		None

	def check(self,a):
		None





unit_ParamConstraintsClass2._hx_class = unit_ParamConstraintsClass2
unit_ParamConstraintsClass2._hx_class_name = "unit.ParamConstraintsClass2"
_hx_classes["unit.ParamConstraintsClass2"] = unit_ParamConstraintsClass2
_hx_c.unit_ParamConstraintsClass2 = unit_ParamConstraintsClass2
unit_ParamConstraintsClass2._hx_fields = []
unit_ParamConstraintsClass2._hx_props = []
unit_ParamConstraintsClass2._hx_methods = ["bind","check"]
unit_ParamConstraintsClass2._hx_statics = []
unit_ParamConstraintsClass2._hx_interfaces = []
unit_ParamConstraintsClass2._hx_meta = _hx_c._hx_AnonObject(obj=_hx_c._hx_AnonObject(),statics=_hx_c._hx_AnonObject(),fields=_hx_c._hx_AnonObject())
def unit_ParamConstraintsClass2_hx_empty_init (_hx_o):
	pass
unit_ParamConstraintsClass2._hx_empty_init = unit_ParamConstraintsClass2_hx_empty_init
# print unit.MyClass.UsingBase
class unit_UsingBase:

	pass




unit_UsingBase._hx_class = unit_UsingBase
unit_UsingBase._hx_class_name = "unit.UsingBase"
_hx_classes["unit.UsingBase"] = unit_UsingBase
_hx_c.unit_UsingBase = unit_UsingBase
unit_UsingBase._hx_fields = []
unit_UsingBase._hx_props = []
unit_UsingBase._hx_methods = []
unit_UsingBase._hx_statics = ["privFunc","pupFunc"]
unit_UsingBase._hx_interfaces = []
unit_UsingBase._hx_meta = _hx_c._hx_AnonObject(obj=_hx_c._hx_AnonObject(),statics=_hx_c._hx_AnonObject(),fields=_hx_c._hx_AnonObject())
def unit_UsingBase_hx_empty_init (_hx_o):
	pass
unit_UsingBase._hx_empty_init = unit_UsingBase_hx_empty_init
# print unit.MyClass.UsingChild1
class unit_UsingChild1(unit_UsingBase):

	pass




unit_UsingChild1._hx_class = unit_UsingChild1
unit_UsingChild1._hx_class_name = "unit.UsingChild1"
_hx_classes["unit.UsingChild1"] = unit_UsingChild1
_hx_c.unit_UsingChild1 = unit_UsingChild1
unit_UsingChild1._hx_fields = []
unit_UsingChild1._hx_props = []
unit_UsingChild1._hx_methods = []
unit_UsingChild1._hx_statics = ["test","siblingFunc"]
unit_UsingChild1._hx_interfaces = []
unit_UsingChild1._hx_super = unit_UsingBase
unit_UsingChild1._hx_meta = _hx_c._hx_AnonObject(obj=_hx_c._hx_AnonObject(),statics=_hx_c._hx_AnonObject(),fields=_hx_c._hx_AnonObject())
def unit_UsingChild1_hx_empty_init (_hx_o):
	pass
unit_UsingChild1._hx_empty_init = unit_UsingChild1_hx_empty_init
# print unit.MyClass.UsingChild2
class unit_UsingChild2(unit_UsingBase):

	pass




unit_UsingChild2._hx_class = unit_UsingChild2
unit_UsingChild2._hx_class_name = "unit.UsingChild2"
_hx_classes["unit.UsingChild2"] = unit_UsingChild2
_hx_c.unit_UsingChild2 = unit_UsingChild2
unit_UsingChild2._hx_fields = []
unit_UsingChild2._hx_props = []
unit_UsingChild2._hx_methods = []
unit_UsingChild2._hx_statics = ["test","siblingFunc"]
unit_UsingChild2._hx_interfaces = []
unit_UsingChild2._hx_super = unit_UsingBase
unit_UsingChild2._hx_meta = _hx_c._hx_AnonObject(obj=_hx_c._hx_AnonObject(),statics=_hx_c._hx_AnonObject(),fields=_hx_c._hx_AnonObject())
def unit_UsingChild2_hx_empty_init (_hx_o):
	pass
unit_UsingChild2._hx_empty_init = unit_UsingChild2_hx_empty_init
# print unit.MyClass.UsingUnrelated
class unit_UsingUnrelated:

	pass




unit_UsingUnrelated._hx_class = unit_UsingUnrelated
unit_UsingUnrelated._hx_class_name = "unit.UsingUnrelated"
_hx_classes["unit.UsingUnrelated"] = unit_UsingUnrelated
_hx_c.unit_UsingUnrelated = unit_UsingUnrelated
unit_UsingUnrelated._hx_fields = []
unit_UsingUnrelated._hx_props = []
unit_UsingUnrelated._hx_methods = []
unit_UsingUnrelated._hx_statics = ["test"]
unit_UsingUnrelated._hx_interfaces = []
unit_UsingUnrelated._hx_meta = _hx_c._hx_AnonObject(obj=_hx_c._hx_AnonObject(),statics=_hx_c._hx_AnonObject(),fields=_hx_c._hx_AnonObject())
def unit_UsingUnrelated_hx_empty_init (_hx_o):
	pass
unit_UsingUnrelated._hx_empty_init = unit_UsingUnrelated_hx_empty_init
# print unit.MyClass.VarProps
class unit_VarProps:


	def __init__(self):
		self.z = None
		self.set_x(1)
		self.set_y(2)
		self.set_z(3)
		
	
	# var x
	# var y
	# var z
	def get_x(self):
		return 1

	def set_x(self,v):
		return v

	def get_y(self):
		return self.y

	def set_y(self,v):
		self.y = v
		return v
	

	def set_z(self,v):
		self.z = v + 1
		return self.z
	





unit_VarProps._hx_class = unit_VarProps
unit_VarProps._hx_class_name = "unit.VarProps"
_hx_classes["unit.VarProps"] = unit_VarProps
_hx_c.unit_VarProps = unit_VarProps
unit_VarProps._hx_fields = ["y","z"]
unit_VarProps._hx_props = ["x"]
unit_VarProps._hx_methods = ["get_x","set_x","get_y","set_y","set_z"]
unit_VarProps._hx_statics = ["SY","get_SX","set_SX","get_SY","set_SY"]
unit_VarProps._hx_interfaces = []
unit_VarProps._hx_meta = _hx_c._hx_AnonObject(obj=_hx_c._hx_AnonObject(),statics=_hx_c._hx_AnonObject(),fields=_hx_c._hx_AnonObject())
def unit_VarProps_hx_empty_init (_hx_o):
	_hx_o.z = None
unit_VarProps._hx_empty_init = unit_VarProps_hx_empty_init
# print unit.MyClass.BaseSuperProp
class unit_BaseSuperProp:


	def __init__(self):
		None
	# var prop
	# var fProp
	def get_prop(self):
		return 1

	def set_prop(self,v):
		return v

	def get_fProp(self):
		def _hx_local_0(i):
			return "test" + Std.string(i)
		return _hx_local_0
	





unit_BaseSuperProp._hx_class = unit_BaseSuperProp
unit_BaseSuperProp._hx_class_name = "unit.BaseSuperProp"
_hx_classes["unit.BaseSuperProp"] = unit_BaseSuperProp
_hx_c.unit_BaseSuperProp = unit_BaseSuperProp
unit_BaseSuperProp._hx_fields = []
unit_BaseSuperProp._hx_props = ["prop","fProp"]
unit_BaseSuperProp._hx_methods = ["get_prop","set_prop","get_fProp"]
unit_BaseSuperProp._hx_statics = []
unit_BaseSuperProp._hx_interfaces = []
unit_BaseSuperProp._hx_meta = _hx_c._hx_AnonObject(obj=_hx_c._hx_AnonObject(),statics=_hx_c._hx_AnonObject(),fields=_hx_c._hx_AnonObject())
def unit_BaseSuperProp_hx_empty_init (_hx_o):
	pass
unit_BaseSuperProp._hx_empty_init = unit_BaseSuperProp_hx_empty_init
# print unit.MyClass.ChildSuperProp
class unit_ChildSuperProp(unit_BaseSuperProp):


	def __init__(self):
		super().__init__()
	def get_prop(self):
		return super().get_prop() + 1

	def set_prop(self,v):
		return super().set_prop(v) + 1

	def get_fProp(self):
		s = super().get_fProp()(0)
		def _hx_local_0(i):
			return Std.string(s) + Std.string(i)
		return _hx_local_0
	

	def test(self):
		return super().get_fProp()(2)





unit_ChildSuperProp._hx_class = unit_ChildSuperProp
unit_ChildSuperProp._hx_class_name = "unit.ChildSuperProp"
_hx_classes["unit.ChildSuperProp"] = unit_ChildSuperProp
_hx_c.unit_ChildSuperProp = unit_ChildSuperProp
unit_ChildSuperProp._hx_fields = []
unit_ChildSuperProp._hx_props = []
unit_ChildSuperProp._hx_methods = ["get_prop","set_prop","get_fProp","test"]
unit_ChildSuperProp._hx_statics = []
unit_ChildSuperProp._hx_interfaces = []
unit_ChildSuperProp._hx_super = unit_BaseSuperProp
unit_ChildSuperProp._hx_meta = _hx_c._hx_AnonObject(obj=_hx_c._hx_AnonObject(),statics=_hx_c._hx_AnonObject(),fields=_hx_c._hx_AnonObject())
def unit_ChildSuperProp_hx_empty_init (_hx_o):
	pass
unit_ChildSuperProp._hx_empty_init = unit_ChildSuperProp_hx_empty_init
# print unit.MyClass.InlineCastA
class unit_InlineCastA:

	def self(self):
		return self





unit_InlineCastA._hx_class = unit_InlineCastA
unit_InlineCastA._hx_class_name = "unit.InlineCastA"
_hx_classes["unit.InlineCastA"] = unit_InlineCastA
_hx_c.unit_InlineCastA = unit_InlineCastA
unit_InlineCastA._hx_fields = []
unit_InlineCastA._hx_props = []
unit_InlineCastA._hx_methods = ["self"]
unit_InlineCastA._hx_statics = []
unit_InlineCastA._hx_interfaces = []
unit_InlineCastA._hx_meta = _hx_c._hx_AnonObject(obj=_hx_c._hx_AnonObject(),statics=_hx_c._hx_AnonObject(),fields=_hx_c._hx_AnonObject())
def unit_InlineCastA_hx_empty_init (_hx_o):
	pass
unit_InlineCastA._hx_empty_init = unit_InlineCastA_hx_empty_init
# print unit.MyClass.InlineCastB
class unit_InlineCastB(unit_InlineCastA):


	def __init__(self):
		None
	def test(self):
		return self.self()

	def quote(self):
		return "I am the greatest."





unit_InlineCastB._hx_class = unit_InlineCastB
unit_InlineCastB._hx_class_name = "unit.InlineCastB"
_hx_classes["unit.InlineCastB"] = unit_InlineCastB
_hx_c.unit_InlineCastB = unit_InlineCastB
unit_InlineCastB._hx_fields = []
unit_InlineCastB._hx_props = []
unit_InlineCastB._hx_methods = ["test","quote"]
unit_InlineCastB._hx_statics = []
unit_InlineCastB._hx_interfaces = []
unit_InlineCastB._hx_super = unit_InlineCastA
unit_InlineCastB._hx_meta = _hx_c._hx_AnonObject(obj=_hx_c._hx_AnonObject(),statics=_hx_c._hx_AnonObject(),fields=_hx_c._hx_AnonObject())
def unit_InlineCastB_hx_empty_init (_hx_o):
	pass
unit_InlineCastB._hx_empty_init = unit_InlineCastB_hx_empty_init
class unit_MyEnum(_hx_c.Enum):
	def __init__(self, t, i, p):
		super(unit_MyEnum,self).__init__(t, i, p)

unit_MyEnum.A = unit_MyEnum("A", 0, list())

def _unit_MyEnum_statics_D (e):
	return unit_MyEnum("D", 3, [e])
unit_MyEnum.D = _unit_MyEnum_statics_D

def _unit_MyEnum_statics_C (a,b):
	return unit_MyEnum("C", 2, [a,b])
unit_MyEnum.C = _unit_MyEnum_statics_C

unit_MyEnum.B = unit_MyEnum("B", 1, list())

unit_MyEnum._hx_constructs = ["A","B","C","D"]
unit_MyEnum._hx_class = unit_MyEnum
unit_MyEnum._hx_class_name = "unit.MyEnum"
_hx_classes["unit.MyEnum"] = unit_MyEnum
_hx_c.unit_MyEnum = unit_MyEnum
unit_MyEnum._hx_meta = _hx_c._hx_AnonObject(obj=_hx_c._hx_AnonObject(),fields=_hx_c._hx_AnonObject())
# print unit.MyGeneric_unit_MyRandomClass.MyGeneric_unit_MyRandomClass
class unit_MyGeneric_unit_MyRandomClass:


	def __init__(self,t):
		self.t = None
		self.t = t
	
	# var t




unit_MyGeneric_unit_MyRandomClass._hx_class = unit_MyGeneric_unit_MyRandomClass
unit_MyGeneric_unit_MyRandomClass._hx_class_name = "unit.MyGeneric_unit_MyRandomClass"
_hx_classes["unit.MyGeneric_unit_MyRandomClass"] = unit_MyGeneric_unit_MyRandomClass
_hx_c.unit_MyGeneric_unit_MyRandomClass = unit_MyGeneric_unit_MyRandomClass
unit_MyGeneric_unit_MyRandomClass._hx_fields = ["t"]
unit_MyGeneric_unit_MyRandomClass._hx_props = []
unit_MyGeneric_unit_MyRandomClass._hx_methods = []
unit_MyGeneric_unit_MyRandomClass._hx_statics = []
unit_MyGeneric_unit_MyRandomClass._hx_interfaces = []
unit_MyGeneric_unit_MyRandomClass._hx_meta = _hx_c._hx_AnonObject(obj=_hx_c._hx_AnonObject(),statics=_hx_c._hx_AnonObject(),fields=_hx_c._hx_AnonObject())
def unit_MyGeneric_unit_MyRandomClass_hx_empty_init (_hx_o):
	_hx_o.t = None
unit_MyGeneric_unit_MyRandomClass._hx_empty_init = unit_MyGeneric_unit_MyRandomClass_hx_empty_init
# print unit.MyGeneric2_unit_MyGeneric_unit_MyRandomClass.MyGeneric2_unit_MyGeneric_unit_MyRandomClass
class unit_MyGeneric2_unit_MyGeneric_unit_MyRandomClass(unit_MyGeneric_unit_MyRandomClass):


	def __init__(self,t):
		super().__init__(t)




unit_MyGeneric2_unit_MyGeneric_unit_MyRandomClass._hx_class = unit_MyGeneric2_unit_MyGeneric_unit_MyRandomClass
unit_MyGeneric2_unit_MyGeneric_unit_MyRandomClass._hx_class_name = "unit.MyGeneric2_unit_MyGeneric_unit_MyRandomClass"
_hx_classes["unit.MyGeneric2_unit_MyGeneric_unit_MyRandomClass"] = unit_MyGeneric2_unit_MyGeneric_unit_MyRandomClass
_hx_c.unit_MyGeneric2_unit_MyGeneric_unit_MyRandomClass = unit_MyGeneric2_unit_MyGeneric_unit_MyRandomClass
unit_MyGeneric2_unit_MyGeneric_unit_MyRandomClass._hx_fields = []
unit_MyGeneric2_unit_MyGeneric_unit_MyRandomClass._hx_props = []
unit_MyGeneric2_unit_MyGeneric_unit_MyRandomClass._hx_methods = []
unit_MyGeneric2_unit_MyGeneric_unit_MyRandomClass._hx_statics = []
unit_MyGeneric2_unit_MyGeneric_unit_MyRandomClass._hx_interfaces = []
unit_MyGeneric2_unit_MyGeneric_unit_MyRandomClass._hx_super = unit_MyGeneric_unit_MyRandomClass
unit_MyGeneric2_unit_MyGeneric_unit_MyRandomClass._hx_meta = _hx_c._hx_AnonObject(obj=_hx_c._hx_AnonObject(),statics=_hx_c._hx_AnonObject(),fields=_hx_c._hx_AnonObject())
def unit_MyGeneric2_unit_MyGeneric_unit_MyRandomClass_hx_empty_init (_hx_o):
	pass
unit_MyGeneric2_unit_MyGeneric_unit_MyRandomClass._hx_empty_init = unit_MyGeneric2_unit_MyGeneric_unit_MyRandomClass_hx_empty_init
# print unit.TestGeneric.MyRandomClass
class unit_MyRandomClass:


	def __init__(self,s):
		self.s = None
		self.s = s
	
	# var s




unit_MyRandomClass._hx_class = unit_MyRandomClass
unit_MyRandomClass._hx_class_name = "unit.MyRandomClass"
_hx_classes["unit.MyRandomClass"] = unit_MyRandomClass
_hx_c.unit_MyRandomClass = unit_MyRandomClass
unit_MyRandomClass._hx_fields = ["s"]
unit_MyRandomClass._hx_props = []
unit_MyRandomClass._hx_methods = []
unit_MyRandomClass._hx_statics = []
unit_MyRandomClass._hx_interfaces = []
unit_MyRandomClass._hx_meta = _hx_c._hx_AnonObject(obj=_hx_c._hx_AnonObject(),statics=_hx_c._hx_AnonObject(),fields=_hx_c._hx_AnonObject())
def unit_MyRandomClass_hx_empty_init (_hx_o):
	_hx_o.s = None
unit_MyRandomClass._hx_empty_init = unit_MyRandomClass_hx_empty_init
# print unit.MyGeneric2_unit_MyRandomClass.MyGeneric2_unit_MyRandomClass
class unit_MyGeneric2_unit_MyRandomClass(unit_MyRandomClass):


	def __init__(self,s):
		super().__init__(s)




unit_MyGeneric2_unit_MyRandomClass._hx_class = unit_MyGeneric2_unit_MyRandomClass
unit_MyGeneric2_unit_MyRandomClass._hx_class_name = "unit.MyGeneric2_unit_MyRandomClass"
_hx_classes["unit.MyGeneric2_unit_MyRandomClass"] = unit_MyGeneric2_unit_MyRandomClass
_hx_c.unit_MyGeneric2_unit_MyRandomClass = unit_MyGeneric2_unit_MyRandomClass
unit_MyGeneric2_unit_MyRandomClass._hx_fields = []
unit_MyGeneric2_unit_MyRandomClass._hx_props = []
unit_MyGeneric2_unit_MyRandomClass._hx_methods = []
unit_MyGeneric2_unit_MyRandomClass._hx_statics = []
unit_MyGeneric2_unit_MyRandomClass._hx_interfaces = []
unit_MyGeneric2_unit_MyRandomClass._hx_super = unit_MyRandomClass
unit_MyGeneric2_unit_MyRandomClass._hx_meta = _hx_c._hx_AnonObject(obj=_hx_c._hx_AnonObject(),statics=_hx_c._hx_AnonObject(),fields=_hx_c._hx_AnonObject())
def unit_MyGeneric2_unit_MyRandomClass_hx_empty_init (_hx_o):
	pass
unit_MyGeneric2_unit_MyRandomClass._hx_empty_init = unit_MyGeneric2_unit_MyRandomClass_hx_empty_init
# print unit.MyGeneric_Int.MyGeneric_Int
class unit_MyGeneric_Int:


	def __init__(self,t):
		self.t = None
		self.t = t
	
	# var t




unit_MyGeneric_Int._hx_class = unit_MyGeneric_Int
unit_MyGeneric_Int._hx_class_name = "unit.MyGeneric_Int"
_hx_classes["unit.MyGeneric_Int"] = unit_MyGeneric_Int
_hx_c.unit_MyGeneric_Int = unit_MyGeneric_Int
unit_MyGeneric_Int._hx_fields = ["t"]
unit_MyGeneric_Int._hx_props = []
unit_MyGeneric_Int._hx_methods = []
unit_MyGeneric_Int._hx_statics = []
unit_MyGeneric_Int._hx_interfaces = []
unit_MyGeneric_Int._hx_meta = _hx_c._hx_AnonObject(obj=_hx_c._hx_AnonObject(),statics=_hx_c._hx_AnonObject(),fields=_hx_c._hx_AnonObject())
def unit_MyGeneric_Int_hx_empty_init (_hx_o):
	_hx_o.t = None
unit_MyGeneric_Int._hx_empty_init = unit_MyGeneric_Int_hx_empty_init
# print unit.MyGeneric_String.MyGeneric_String
class unit_MyGeneric_String:


	def __init__(self,t):
		self.t = None
		self.t = t
	
	# var t




unit_MyGeneric_String._hx_class = unit_MyGeneric_String
unit_MyGeneric_String._hx_class_name = "unit.MyGeneric_String"
_hx_classes["unit.MyGeneric_String"] = unit_MyGeneric_String
_hx_c.unit_MyGeneric_String = unit_MyGeneric_String
unit_MyGeneric_String._hx_fields = ["t"]
unit_MyGeneric_String._hx_props = []
unit_MyGeneric_String._hx_methods = []
unit_MyGeneric_String._hx_statics = []
unit_MyGeneric_String._hx_interfaces = []
unit_MyGeneric_String._hx_meta = _hx_c._hx_AnonObject(obj=_hx_c._hx_AnonObject(),statics=_hx_c._hx_AnonObject(),fields=_hx_c._hx_AnonObject())
def unit_MyGeneric_String_hx_empty_init (_hx_o):
	_hx_o.t = None
unit_MyGeneric_String._hx_empty_init = unit_MyGeneric_String_hx_empty_init
# print unit.MyInterface.MyInterface
class unit_MyInterface:

	pass




unit_MyInterface._hx_class = unit_MyInterface
unit_MyInterface._hx_class_name = "unit.MyInterface"
_hx_classes["unit.MyInterface"] = unit_MyInterface
_hx_c.unit_MyInterface = unit_MyInterface
unit_MyInterface._hx_fields = []
unit_MyInterface._hx_props = []
unit_MyInterface._hx_methods = []
unit_MyInterface._hx_statics = []
unit_MyInterface._hx_interfaces = []
unit_MyInterface._hx_meta = _hx_c._hx_AnonObject(obj=_hx_c._hx_AnonObject(),statics=_hx_c._hx_AnonObject(),fields=_hx_c._hx_AnonObject())
def unit_MyInterface_hx_empty_init (_hx_o):
	pass
unit_MyInterface._hx_empty_init = unit_MyInterface_hx_empty_init
# print unit.MyMacro.MyRestMacro
class unit_MyRestMacro:

	pass




unit_MyRestMacro._hx_class = unit_MyRestMacro
unit_MyRestMacro._hx_class_name = "unit.MyRestMacro"
_hx_classes["unit.MyRestMacro"] = unit_MyRestMacro
_hx_c.unit_MyRestMacro = unit_MyRestMacro
unit_MyRestMacro._hx_fields = []
unit_MyRestMacro._hx_props = []
unit_MyRestMacro._hx_methods = []
unit_MyRestMacro._hx_statics = []
unit_MyRestMacro._hx_interfaces = []
unit_MyRestMacro._hx_meta = _hx_c._hx_AnonObject(obj=_hx_c._hx_AnonObject(),statics=_hx_c._hx_AnonObject(),fields=_hx_c._hx_AnonObject())
def unit_MyRestMacro_hx_empty_init (_hx_o):
	pass
unit_MyRestMacro._hx_empty_init = unit_MyRestMacro_hx_empty_init
# print unit.MySubClass.MySubClass
class unit_MySubClass(unit_MyClass):


	def __init__(self,v):
		super().__init__(v)
	def get(self):
		return self.val * 2





unit_MySubClass._hx_class = unit_MySubClass
unit_MySubClass._hx_class_name = "unit.MySubClass"
_hx_classes["unit.MySubClass"] = unit_MySubClass
_hx_c.unit_MySubClass = unit_MySubClass
unit_MySubClass._hx_fields = []
unit_MySubClass._hx_props = []
unit_MySubClass._hx_methods = ["get"]
unit_MySubClass._hx_statics = ["XXX"]
unit_MySubClass._hx_interfaces = []
unit_MySubClass._hx_super = unit_MyClass
unit_MySubClass._hx_meta = _hx_c._hx_AnonObject(obj=_hx_c._hx_AnonObject(),statics=_hx_c._hx_AnonObject(),fields=_hx_c._hx_AnonObject())
def unit_MySubClass_hx_empty_init (_hx_o):
	pass
unit_MySubClass._hx_empty_init = unit_MySubClass_hx_empty_init
# print unit.MyUsing1.Using1
class unit_Using1:

	pass




unit_Using1._hx_class = unit_Using1
unit_Using1._hx_class_name = "unit.Using1"
_hx_classes["unit.Using1"] = unit_Using1
_hx_c.unit_Using1 = unit_Using1
unit_Using1._hx_fields = []
unit_Using1._hx_props = []
unit_Using1._hx_methods = []
unit_Using1._hx_statics = ["usingTest"]
unit_Using1._hx_interfaces = []
unit_Using1._hx_meta = _hx_c._hx_AnonObject(obj=_hx_c._hx_AnonObject(),statics=_hx_c._hx_AnonObject(),fields=_hx_c._hx_AnonObject())
def unit_Using1_hx_empty_init (_hx_o):
	pass
unit_Using1._hx_empty_init = unit_Using1_hx_empty_init
# print unit.MyUsing2.Using2
class unit_Using2:

	pass




unit_Using2._hx_class = unit_Using2
unit_Using2._hx_class_name = "unit.Using2"
_hx_classes["unit.Using2"] = unit_Using2
_hx_c.unit_Using2 = unit_Using2
unit_Using2._hx_fields = []
unit_Using2._hx_props = []
unit_Using2._hx_methods = []
unit_Using2._hx_statics = ["usingTest"]
unit_Using2._hx_interfaces = []
unit_Using2._hx_meta = _hx_c._hx_AnonObject(obj=_hx_c._hx_AnonObject(),statics=_hx_c._hx_AnonObject(),fields=_hx_c._hx_AnonObject())
def unit_Using2_hx_empty_init (_hx_o):
	pass
unit_Using2._hx_empty_init = unit_Using2_hx_empty_init
# print unit.MyUsing2.Using3
class unit_Using3:

	pass




unit_Using3._hx_class = unit_Using3
unit_Using3._hx_class_name = "unit.Using3"
_hx_classes["unit.Using3"] = unit_Using3
_hx_c.unit_Using3 = unit_Using3
unit_Using3._hx_fields = []
unit_Using3._hx_props = []
unit_Using3._hx_methods = []
unit_Using3._hx_statics = ["usingTest"]
unit_Using3._hx_interfaces = []
unit_Using3._hx_meta = _hx_c._hx_AnonObject(obj=_hx_c._hx_AnonObject(),statics=_hx_c._hx_AnonObject(),fields=_hx_c._hx_AnonObject())
def unit_Using3_hx_empty_init (_hx_o):
	pass
unit_Using3._hx_empty_init = unit_Using3_hx_empty_init
# print unit.RBNode_unit_MyData.RBNode_unit_MyData
class unit_RBNode_unit_MyData:

	# var rbLeft
	# var rbRight
	pass




unit_RBNode_unit_MyData._hx_class = unit_RBNode_unit_MyData
unit_RBNode_unit_MyData._hx_class_name = "unit.RBNode_unit_MyData"
_hx_classes["unit.RBNode_unit_MyData"] = unit_RBNode_unit_MyData
_hx_c.unit_RBNode_unit_MyData = unit_RBNode_unit_MyData
unit_RBNode_unit_MyData._hx_fields = ["rbLeft","rbRight"]
unit_RBNode_unit_MyData._hx_props = []
unit_RBNode_unit_MyData._hx_methods = []
unit_RBNode_unit_MyData._hx_statics = []
unit_RBNode_unit_MyData._hx_interfaces = []
unit_RBNode_unit_MyData._hx_meta = _hx_c._hx_AnonObject(obj=_hx_c._hx_AnonObject(),statics=_hx_c._hx_AnonObject(),fields=_hx_c._hx_AnonObject())
def unit_RBNode_unit_MyData_hx_empty_init (_hx_o):
	_hx_o.rbLeft = None
	_hx_o.rbRight = None
unit_RBNode_unit_MyData._hx_empty_init = unit_RBNode_unit_MyData_hx_empty_init
# print unit.RBNode_unit_RBNode_T.RBNode_unit_RBNode_T
class unit_RBNode_unit_RBNode_T:

	# var rbLeft
	# var rbRight
	pass




unit_RBNode_unit_RBNode_T._hx_class = unit_RBNode_unit_RBNode_T
unit_RBNode_unit_RBNode_T._hx_class_name = "unit.RBNode_unit_RBNode_T"
_hx_classes["unit.RBNode_unit_RBNode_T"] = unit_RBNode_unit_RBNode_T
_hx_c.unit_RBNode_unit_RBNode_T = unit_RBNode_unit_RBNode_T
unit_RBNode_unit_RBNode_T._hx_fields = ["rbLeft","rbRight"]
unit_RBNode_unit_RBNode_T._hx_props = []
unit_RBNode_unit_RBNode_T._hx_methods = []
unit_RBNode_unit_RBNode_T._hx_statics = []
unit_RBNode_unit_RBNode_T._hx_interfaces = []
unit_RBNode_unit_RBNode_T._hx_meta = _hx_c._hx_AnonObject(obj=_hx_c._hx_AnonObject(),statics=_hx_c._hx_AnonObject(),fields=_hx_c._hx_AnonObject())
def unit_RBNode_unit_RBNode_T_hx_empty_init (_hx_o):
	_hx_o.rbLeft = None
	_hx_o.rbRight = None
unit_RBNode_unit_RBNode_T._hx_empty_init = unit_RBNode_unit_RBNode_T_hx_empty_init
# print unit.RBNode_unit_RBTree_T.RBNode_unit_RBTree_T
class unit_RBNode_unit_RBTree_T:

	# var rbLeft
	# var rbRight
	pass




unit_RBNode_unit_RBTree_T._hx_class = unit_RBNode_unit_RBTree_T
unit_RBNode_unit_RBTree_T._hx_class_name = "unit.RBNode_unit_RBTree_T"
_hx_classes["unit.RBNode_unit_RBTree_T"] = unit_RBNode_unit_RBTree_T
_hx_c.unit_RBNode_unit_RBTree_T = unit_RBNode_unit_RBTree_T
unit_RBNode_unit_RBTree_T._hx_fields = ["rbLeft","rbRight"]
unit_RBNode_unit_RBTree_T._hx_props = []
unit_RBNode_unit_RBTree_T._hx_methods = []
unit_RBNode_unit_RBTree_T._hx_statics = []
unit_RBNode_unit_RBTree_T._hx_interfaces = []
unit_RBNode_unit_RBTree_T._hx_meta = _hx_c._hx_AnonObject(obj=_hx_c._hx_AnonObject(),statics=_hx_c._hx_AnonObject(),fields=_hx_c._hx_AnonObject())
def unit_RBNode_unit_RBTree_T_hx_empty_init (_hx_o):
	_hx_o.rbLeft = None
	_hx_o.rbRight = None
unit_RBNode_unit_RBTree_T._hx_empty_init = unit_RBNode_unit_RBTree_T_hx_empty_init
# print unit.RBTree_unit_MyData.RBTree_unit_MyData
class unit_RBTree_unit_MyData:


	def __init__(self):
		self.root = None
		None
	
	# var root




unit_RBTree_unit_MyData._hx_class = unit_RBTree_unit_MyData
unit_RBTree_unit_MyData._hx_class_name = "unit.RBTree_unit_MyData"
_hx_classes["unit.RBTree_unit_MyData"] = unit_RBTree_unit_MyData
_hx_c.unit_RBTree_unit_MyData = unit_RBTree_unit_MyData
unit_RBTree_unit_MyData._hx_fields = ["root"]
unit_RBTree_unit_MyData._hx_props = []
unit_RBTree_unit_MyData._hx_methods = []
unit_RBTree_unit_MyData._hx_statics = []
unit_RBTree_unit_MyData._hx_interfaces = []
unit_RBTree_unit_MyData._hx_meta = _hx_c._hx_AnonObject(obj=_hx_c._hx_AnonObject(),statics=_hx_c._hx_AnonObject(),fields=_hx_c._hx_AnonObject())
def unit_RBTree_unit_MyData_hx_empty_init (_hx_o):
	_hx_o.root = None
unit_RBTree_unit_MyData._hx_empty_init = unit_RBTree_unit_MyData_hx_empty_init
# print unit.Test.Test
class unit_Test:


	def __init__(self):
		None
	def eq(self,v,v2,pos = None):
		if pos is None:
			pos = None
		
		_hx_local_0 = _hx_c.unit_Test
		_hx_local_1 = _hx_local_0.count
		_hx_local_0.count = _hx_local_1 + 1
		_hx_local_1
		
		if v != v2:
			_hx_c.unit_Test.report(Std.string(Std.string(_hx_c.Std.string(v)) + " should be ") + Std.string(_hx_c.Std.string(v2)), pos)
			_hx_c.unit_Test.success = False
		
		
	

	def feq(self,v,v2,pos = None):
		if pos is None:
			pos = None
		
		_hx_local_0 = _hx_c.unit_Test
		_hx_local_1 = _hx_local_0.count
		_hx_local_0.count = _hx_local_1 + 1
		_hx_local_1
		
		if not (v != float("inf") and v != float("-inf") and not _hx_math.isnan(v)) or not (v2 != float("inf") and v2 != float("-inf") and not _hx_math.isnan(v2)):
			self.eq(v, v2, pos)
		elif _hx_math.fabs(v - v2) > 1e-15:
			_hx_c.unit_Test.report(Std.string(Std.string(v) + " should be ") + Std.string(v2), pos)
			_hx_c.unit_Test.success = False
		
		
	

	def t(self,v,pos = None):
		if pos is None:
			pos = None
		
		self.eq(v, True, pos)
	

	def f(self,v,pos = None):
		if pos is None:
			pos = None
		
		self.eq(v, False, pos)
	

	def _hx_assert(self,pos = None):
		if pos is None:
			pos = None
		
		_hx_c.unit_Test.report("Assert", pos)
	

	def exc(self,f,pos = None):
		if pos is None:
			pos = None
		
		_hx_local_0 = _hx_c.unit_Test
		_hx_local_1 = _hx_local_0.count
		_hx_local_0.count = _hx_local_1 + 1
		_hx_local_1
		
		try:
			f()
			_hx_c.unit_Test.report("No exception occured", pos)
			_hx_c.unit_Test.success = False
		
		except Exception as _hx_e:
			_hx_e1 = _hx_e.val if isinstance(_hx_e, _HxException) else _hx_e
			if True:
				e = _hx_e1
				None
			else:
				raise _hx_e
	

	def unspec(self,f,pos = None):
		if pos is None:
			pos = None
		
		_hx_local_0 = _hx_c.unit_Test
		_hx_local_1 = _hx_local_0.count
		_hx_local_0.count = _hx_local_1 + 1
		_hx_local_1
		
		try:
			f()
		except Exception as _hx_e:
			_hx_e1 = _hx_e.val if isinstance(_hx_e, _HxException) else _hx_e
			if True:
				e = _hx_e1
				None
			else:
				raise _hx_e
	

	def allow(self,v,values,pos = None):
		if pos is None:
			pos = None
		
		_hx_local_0 = _hx_c.unit_Test
		_hx_local_1 = _hx_local_0.count
		_hx_local_0.count = _hx_local_1 + 1
		_hx_local_1
		
		_g = 0
		while _g < _hx_builtin.len(values):
			v2 = _hx_array_get(values,_g)
			_g = _g + 1
			if v == v2:
				return
			
		
		
		_hx_c.unit_Test.report(Std.string(Std.string(_hx_c.Std.string(v)) + " not in ") + Std.string(_hx_c.Std.string(values)), pos)
		_hx_c.unit_Test.success = False
	

	def hf(self,c,n,pos = None):
		if pos is None:
			pos = None
		
		_hx_local_0 = _hx_c.unit_Test
		_hx_local_1 = _hx_local_0.count
		_hx_local_0.count = _hx_local_1 + 1
		_hx_local_1
		
		if not _hx_c.Lambda.has(_hx_c.Type.getInstanceFields(c), n):
			_hx_c.unit_Test.report(Std.string(Std.string(_hx_c.Type.getClassName(c)) + " should have member field ") + Std.string(n), pos)
			_hx_c.unit_Test.success = False
		
		
	

	def nhf(self,c,n,pos = None):
		if pos is None:
			pos = None
		
		_hx_local_0 = _hx_c.unit_Test
		_hx_local_1 = _hx_local_0.count
		_hx_local_0.count = _hx_local_1 + 1
		_hx_local_1
		
		if _hx_c.Lambda.has(_hx_c.Type.getInstanceFields(c), n):
			_hx_c.unit_Test.report(Std.string(Std.string(_hx_c.Type.getClassName(c)) + " should not have member field ") + Std.string(n), pos)
			_hx_c.unit_Test.success = False
		
		
	

	def hsf(self,c,n,pos = None):
		if pos is None:
			pos = None
		
		_hx_local_0 = _hx_c.unit_Test
		_hx_local_1 = _hx_local_0.count
		_hx_local_0.count = _hx_local_1 + 1
		_hx_local_1
		
		if not _hx_c.Lambda.has(_hx_c.Type.getClassFields(c), n):
			_hx_c.unit_Test.report(Std.string(Std.string(_hx_c.Type.getClassName(c)) + " should have static field ") + Std.string(n), pos)
			_hx_c.unit_Test.success = False
		
		
	

	def nhsf(self,c,n,pos = None):
		if pos is None:
			pos = None
		
		_hx_local_0 = _hx_c.unit_Test
		_hx_local_1 = _hx_local_0.count
		_hx_local_0.count = _hx_local_1 + 1
		_hx_local_1
		
		if _hx_c.Lambda.has(_hx_c.Type.getClassFields(c), n):
			_hx_c.unit_Test.report(Std.string(Std.string(_hx_c.Type.getClassName(c)) + " should not have static field ") + Std.string(n), pos)
			_hx_c.unit_Test.success = False
		
		
	

	def infos(self,m):
		_hx_c.unit_Test.reportInfos = m

	def async(self,f,args,v,pos = None):
		if pos is None:
			pos = None
		
		if _hx_builtin.len(_hx_c.unit_Test.asyncWaits) >= _hx_c.unit_Test.AMAX:
			def _hx_local_1(f1,f2,a1,v1,a2):
				def _hx_local_0():
					return f1(f2, a1, v1, a2)
				return _hx_local_0
			
			x = (_hx_local_1)(self.async, f, args, v, pos)
			_this = _hx_c.unit_Test.asyncCache
			_this.append(x)
			_hx_builtin.len(_this)
			
			
			return
		
		
		_this1 = _hx_c.unit_Test.asyncWaits
		_this1.append(pos)
		_hx_builtin.len(_this1)
		
		
		def _hx_local_4(v2):
			_hx_local_2 = _hx_c.unit_Test
			_hx_local_3 = _hx_local_2.count
			_hx_local_2.count = _hx_local_3 + 1
			_hx_local_3
			
			if not _hx_c.python_internal_ArrayImpl.remove(_hx_c.unit_Test.asyncWaits, pos):
				_hx_c.unit_Test.report("Double async result", pos)
				_hx_c.unit_Test.success = False
				return
			
			
			if v != v2:
				_hx_c.unit_Test.report(Std.string(Std.string(_hx_c.Std.string(v2)) + " should be ") + Std.string(_hx_c.Std.string(v)), pos)
				_hx_c.unit_Test.success = False
			
			
			_hx_c.unit_Test.checkDone()
		
		f(args, _hx_local_4)
	

	def asyncExc(self,seterror,f,args,pos = None):
		if pos is None:
			pos = None
		
		if _hx_builtin.len(_hx_c.unit_Test.asyncWaits) >= _hx_c.unit_Test.AMAX:
			def _hx_local_1(f1,a1,f2,a2,a3):
				def _hx_local_0():
					return f1(a1, f2, a2, a3)
				return _hx_local_0
			
			x = (_hx_local_1)(self.asyncExc, seterror, f, args, pos)
			_this = _hx_c.unit_Test.asyncCache
			_this.append(x)
			_hx_builtin.len(_this)
			
			
			return
		
		
		_this1 = _hx_c.unit_Test.asyncWaits
		_this1.append(pos)
		_hx_builtin.len(_this1)
		
		
		def _hx_local_4(e):
			_hx_local_2 = _hx_c.unit_Test
			_hx_local_3 = _hx_local_2.count
			_hx_local_2.count = _hx_local_3 + 1
			_hx_local_3
			
			if _hx_c.python_internal_ArrayImpl.remove(_hx_c.unit_Test.asyncWaits, pos):
				_hx_c.unit_Test.checkDone()
			else:
				_hx_c.unit_Test.report("Multiple async events", pos)
				_hx_c.unit_Test.success = False
			
		
		seterror(_hx_local_4)
		def _hx_local_7(v):
			_hx_local_5 = _hx_c.unit_Test
			_hx_local_6 = _hx_local_5.count
			_hx_local_5.count = _hx_local_6 + 1
			_hx_local_6
			
			if _hx_c.python_internal_ArrayImpl.remove(_hx_c.unit_Test.asyncWaits, pos):
				_hx_c.unit_Test.report("No exception occured", pos)
				_hx_c.unit_Test.success = False
				_hx_c.unit_Test.checkDone()
			
			else:
				_hx_c.unit_Test.report("Multiple async events", pos)
				_hx_c.unit_Test.success = False
			
		
		f(args, _hx_local_7)
	

	def log(self,msg,pos = None):
		if pos is None:
			pos = None
		
		_hx_c.haxe_Log.trace(msg, pos)
	





unit_Test._hx_class = unit_Test
unit_Test._hx_class_name = "unit.Test"
_hx_classes["unit.Test"] = unit_Test
_hx_c.unit_Test = unit_Test
unit_Test._hx_fields = []
unit_Test._hx_props = []
unit_Test._hx_methods = ["eq","feq","t","f","assert","exc","unspec","allow","hf","nhf","hsf","nhsf","infos","async","asyncExc","log"]
unit_Test._hx_statics = ["count","reportInfos","reportCount","checkCount","asyncWaits","asyncCache","AMAX","timer","success","report","checkDone","asyncTimeout","resetTimer","onError","main"]
unit_Test._hx_interfaces = []
unit_Test._hx_meta = _hx_c._hx_AnonObject(obj=_hx_c._hx_AnonObject(),statics=_hx_c._hx_AnonObject(),fields=_hx_c._hx_AnonObject())
def unit_Test_hx_empty_init (_hx_o):
	pass
unit_Test._hx_empty_init = unit_Test_hx_empty_init
# print unit.TestBasetypes.TestBasetypes
class unit_TestBasetypes(unit_Test):


	def __init__(self):
		super().__init__()
	def testArray(self):
		a = [1, 2, 3]
		self.eq(_hx_builtin.len(a), 3, _hx_c._hx_AnonObject(fileName = "TestBasetypes.hx" ,lineNumber = 7 ,className = "unit.TestBasetypes" ,methodName = "testArray" ))
		self.eq(_hx_array_get(a,0), 1, _hx_c._hx_AnonObject(fileName = "TestBasetypes.hx" ,lineNumber = 8 ,className = "unit.TestBasetypes" ,methodName = "testArray" ))
		self.eq(_hx_array_get(a,2), 3, _hx_c._hx_AnonObject(fileName = "TestBasetypes.hx" ,lineNumber = 9 ,className = "unit.TestBasetypes" ,methodName = "testArray" ))
		self.eq(_hx_array_get(a,3), None, _hx_c._hx_AnonObject(fileName = "TestBasetypes.hx" ,lineNumber = 11 ,className = "unit.TestBasetypes" ,methodName = "testArray" ))
		self.eq(_hx_array_get(a,1000), None, _hx_c._hx_AnonObject(fileName = "TestBasetypes.hx" ,lineNumber = 12 ,className = "unit.TestBasetypes" ,methodName = "testArray" ))
		self.eq(_hx_array_get(a,-1), None, _hx_c._hx_AnonObject(fileName = "TestBasetypes.hx" ,lineNumber = 13 ,className = "unit.TestBasetypes" ,methodName = "testArray" ))
		_hx_c.python_internal_ArrayImpl.remove(a, 2)
		self.eq(_hx_builtin.len(a), 2, _hx_c._hx_AnonObject(fileName = "TestBasetypes.hx" ,lineNumber = 16 ,className = "unit.TestBasetypes" ,methodName = "testArray" ))
		self.eq(_hx_array_get(a,0), 1, _hx_c._hx_AnonObject(fileName = "TestBasetypes.hx" ,lineNumber = 17 ,className = "unit.TestBasetypes" ,methodName = "testArray" ))
		self.eq(_hx_array_get(a,1), 3, _hx_c._hx_AnonObject(fileName = "TestBasetypes.hx" ,lineNumber = 18 ,className = "unit.TestBasetypes" ,methodName = "testArray" ))
		self.eq(_hx_array_get(a,2), None, _hx_c._hx_AnonObject(fileName = "TestBasetypes.hx" ,lineNumber = 19 ,className = "unit.TestBasetypes" ,methodName = "testArray" ))
		a1 = [1, 2, 3]
		pos = 1
		if pos < 0:
			pos = _hx_builtin.len(a1) + pos
		
		if pos < 0:
			pos = 0
		
		res = a1[pos:pos + 1]
		del a1[pos:pos + 1]
		res
		
		self.eq(_hx_builtin.len(a1), 2, _hx_c._hx_AnonObject(fileName = "TestBasetypes.hx" ,lineNumber = 23 ,className = "unit.TestBasetypes" ,methodName = "testArray" ))
		self.eq(_hx_array_get(a1,0), 1, _hx_c._hx_AnonObject(fileName = "TestBasetypes.hx" ,lineNumber = 24 ,className = "unit.TestBasetypes" ,methodName = "testArray" ))
		self.eq(_hx_array_get(a1,1), 3, _hx_c._hx_AnonObject(fileName = "TestBasetypes.hx" ,lineNumber = 25 ,className = "unit.TestBasetypes" ,methodName = "testArray" ))
		self.eq(_hx_array_get(a1,2), None, _hx_c._hx_AnonObject(fileName = "TestBasetypes.hx" ,lineNumber = 26 ,className = "unit.TestBasetypes" ,methodName = "testArray" ))
	

	def testString(self):
		self.eq("M", "M", _hx_c._hx_AnonObject(fileName = "TestBasetypes.hx" ,lineNumber = 30 ,className = "unit.TestBasetypes" ,methodName = "testString" ))
		def _hx_local_0():
			c = 0
			"".join(_hx_builtin.map(_hx_builtin.chr, [c]))
		
		self.unspec(_hx_local_0)
		def _hx_local_1():
			c1 = -1
			"".join(_hx_builtin.map(_hx_builtin.chr, [c1]))
		
		self.unspec(_hx_local_1)
		def _hx_local_2():
			c2 = 256
			"".join(_hx_builtin.map(_hx_builtin.chr, [c2]))
		
		self.unspec(_hx_local_2)
		self.eq(Std.string(None) + "x", "nullx", _hx_c._hx_AnonObject(fileName = "TestBasetypes.hx" ,lineNumber = 38 ,className = "unit.TestBasetypes" ,methodName = "testString" ))
		self.eq("x" + Std.string(None), "xnull", _hx_c._hx_AnonObject(fileName = "TestBasetypes.hx" ,lineNumber = 39 ,className = "unit.TestBasetypes" ,methodName = "testString" ))
		abc = _hx_c.python_internal_StringImpl.split("abc", "")
		self.eq(_hx_builtin.len(abc), 3, _hx_c._hx_AnonObject(fileName = "TestBasetypes.hx" ,lineNumber = 43 ,className = "unit.TestBasetypes" ,methodName = "testString" ))
		self.eq(_hx_array_get(abc,0), "a", _hx_c._hx_AnonObject(fileName = "TestBasetypes.hx" ,lineNumber = 44 ,className = "unit.TestBasetypes" ,methodName = "testString" ))
		self.eq(_hx_array_get(abc,1), "b", _hx_c._hx_AnonObject(fileName = "TestBasetypes.hx" ,lineNumber = 45 ,className = "unit.TestBasetypes" ,methodName = "testString" ))
		self.eq(_hx_array_get(abc,2), "c", _hx_c._hx_AnonObject(fileName = "TestBasetypes.hx" ,lineNumber = 46 ,className = "unit.TestBasetypes" ,methodName = "testString" ))
		str = "abc"
		self.eq(_hx_c.python_internal_StringImpl.charCodeAt(str, 0), 97, _hx_c._hx_AnonObject(fileName = "TestBasetypes.hx" ,lineNumber = 49 ,className = "unit.TestBasetypes" ,methodName = "testString" ))
		self.eq(_hx_c.python_internal_StringImpl.charCodeAt(str, 1), 98, _hx_c._hx_AnonObject(fileName = "TestBasetypes.hx" ,lineNumber = 50 ,className = "unit.TestBasetypes" ,methodName = "testString" ))
		self.eq(_hx_c.python_internal_StringImpl.charCodeAt(str, 2), 99, _hx_c._hx_AnonObject(fileName = "TestBasetypes.hx" ,lineNumber = 51 ,className = "unit.TestBasetypes" ,methodName = "testString" ))
		self.eq(_hx_c.python_internal_StringImpl.charCodeAt(str, -1), None, _hx_c._hx_AnonObject(fileName = "TestBasetypes.hx" ,lineNumber = 52 ,className = "unit.TestBasetypes" ,methodName = "testString" ))
		self.eq(_hx_c.python_internal_StringImpl.charCodeAt(str, 3), None, _hx_c._hx_AnonObject(fileName = "TestBasetypes.hx" ,lineNumber = 53 ,className = "unit.TestBasetypes" ,methodName = "testString" ))
		sentence = "Pack my box with five dozen liquor jugs."
		self.eq(_hx_c.python_Tools.substr(sentence, 0, 4), "Pack", _hx_c._hx_AnonObject(fileName = "TestBasetypes.hx" ,lineNumber = 57 ,className = "unit.TestBasetypes" ,methodName = "testString" ))
		self.eq(_hx_c.python_Tools.substr(sentence, 5, 2), "my", _hx_c._hx_AnonObject(fileName = "TestBasetypes.hx" ,lineNumber = 58 ,className = "unit.TestBasetypes" ,methodName = "testString" ))
		self.eq(_hx_c.python_Tools.substr(sentence, 0, None), sentence, _hx_c._hx_AnonObject(fileName = "TestBasetypes.hx" ,lineNumber = 59 ,className = "unit.TestBasetypes" ,methodName = "testString" ))
		self.eq(_hx_c.python_Tools.substr(sentence, 35, None), "jugs.", _hx_c._hx_AnonObject(fileName = "TestBasetypes.hx" ,lineNumber = 60 ,className = "unit.TestBasetypes" ,methodName = "testString" ))
		self.eq(_hx_c.python_Tools.substr(sentence, 40, None), "", _hx_c._hx_AnonObject(fileName = "TestBasetypes.hx" ,lineNumber = 61 ,className = "unit.TestBasetypes" ,methodName = "testString" ))
		self.eq(_hx_c.python_Tools.substr(sentence, 42, None), "", _hx_c._hx_AnonObject(fileName = "TestBasetypes.hx" ,lineNumber = 62 ,className = "unit.TestBasetypes" ,methodName = "testString" ))
		self.eq(_hx_c.python_Tools.substr(sentence, -5, 4), "jugs", _hx_c._hx_AnonObject(fileName = "TestBasetypes.hx" ,lineNumber = 63 ,className = "unit.TestBasetypes" ,methodName = "testString" ))
		self.eq(_hx_c.python_Tools.substr(sentence, -5, None), "jugs.", _hx_c._hx_AnonObject(fileName = "TestBasetypes.hx" ,lineNumber = 64 ,className = "unit.TestBasetypes" ,methodName = "testString" ))
		self.eq(_hx_c.python_Tools.substr(sentence, -42, None), sentence, _hx_c._hx_AnonObject(fileName = "TestBasetypes.hx" ,lineNumber = 65 ,className = "unit.TestBasetypes" ,methodName = "testString" ))
		self.eq(_hx_c.python_Tools.substr(sentence, 4, 0), "", _hx_c._hx_AnonObject(fileName = "TestBasetypes.hx" ,lineNumber = 66 ,className = "unit.TestBasetypes" ,methodName = "testString" ))
		self.eq(_hx_c.python_Tools.substr(sentence, 0, -36), "Pack", _hx_c._hx_AnonObject(fileName = "TestBasetypes.hx" ,lineNumber = 67 ,className = "unit.TestBasetypes" ,methodName = "testString" ))
		self.eq("hello" + Std.string(None), "hellonull", _hx_c._hx_AnonObject(fileName = "TestBasetypes.hx" ,lineNumber = 70 ,className = "unit.TestBasetypes" ,methodName = "testString" ))
		self.eq(Std.string(None) + "hello", "nullhello", _hx_c._hx_AnonObject(fileName = "TestBasetypes.hx" ,lineNumber = 71 ,className = "unit.TestBasetypes" ,methodName = "testString" ))
		x = None
		self.eq("hello" + Std.string(_hx_c.Std.string(x)), "hellonull", _hx_c._hx_AnonObject(fileName = "TestBasetypes.hx" ,lineNumber = 74 ,className = "unit.TestBasetypes" ,methodName = "testString" ))
		self.eq(Std.string(_hx_c.Std.string(x)) + "hello", "nullhello", _hx_c._hx_AnonObject(fileName = "TestBasetypes.hx" ,lineNumber = 75 ,className = "unit.TestBasetypes" ,methodName = "testString" ))
		y = "hello"
		self.eq(python_Boot._add_dynamic(x,y), "nullhello", _hx_c._hx_AnonObject(fileName = "TestBasetypes.hx" ,lineNumber = 78 ,className = "unit.TestBasetypes" ,methodName = "testString" ))
		self.eq(python_Boot._add_dynamic(y,x), "hellonull", _hx_c._hx_AnonObject(fileName = "TestBasetypes.hx" ,lineNumber = 79 ,className = "unit.TestBasetypes" ,methodName = "testString" ))
		x1 = None
		self.eq("hello" + Std.string(x1), "hellonull", _hx_c._hx_AnonObject(fileName = "TestBasetypes.hx" ,lineNumber = 82 ,className = "unit.TestBasetypes" ,methodName = "testString" ))
		self.eq(Std.string(x1) + "hello", "nullhello", _hx_c._hx_AnonObject(fileName = "TestBasetypes.hx" ,lineNumber = 83 ,className = "unit.TestBasetypes" ,methodName = "testString" ))
		x2 = _hx_c._hx_AnonObject(hello = "world" ,val = 5 )
		xs = "" + Std.string(_hx_c.Std.string(x2))
		h = None
		if None is None:
			h = xs.find("hello")
		else:
			h = xs.find("hello", None)
		self.t(h != -1, _hx_c._hx_AnonObject(fileName = "TestBasetypes.hx" ,lineNumber = 90 ,className = "unit.TestBasetypes" ,methodName = "testString" ))
		self.t((xs.find("world") if (h is None) else xs.find("world", h)) != -1, _hx_c._hx_AnonObject(fileName = "TestBasetypes.hx" ,lineNumber = 91 ,className = "unit.TestBasetypes" ,methodName = "testString" ))
		if None is None:
			h = xs.find("val")
		else:
			h = xs.find("val", None)
		self.t(h != -1, _hx_c._hx_AnonObject(fileName = "TestBasetypes.hx" ,lineNumber = 93 ,className = "unit.TestBasetypes" ,methodName = "testString" ))
		self.t((xs.find("5") if (h is None) else xs.find("5", h)) != -1, _hx_c._hx_AnonObject(fileName = "TestBasetypes.hx" ,lineNumber = 94 ,className = "unit.TestBasetypes" ,methodName = "testString" ))
		self.eq(Std.string(_hx_c.Std.string(x2)) + "", xs, _hx_c._hx_AnonObject(fileName = "TestBasetypes.hx" ,lineNumber = 95 ,className = "unit.TestBasetypes" ,methodName = "testString" ))
		self.eq(Std.string(5) + "5", "55", _hx_c._hx_AnonObject(fileName = "TestBasetypes.hx" ,lineNumber = 98 ,className = "unit.TestBasetypes" ,methodName = "testString" ))
		self.eq("5" + Std.string(5), "55", _hx_c._hx_AnonObject(fileName = "TestBasetypes.hx" ,lineNumber = 99 ,className = "unit.TestBasetypes" ,methodName = "testString" ))
		self.eq("5" + Std.string(5.1), "55.1", _hx_c._hx_AnonObject(fileName = "TestBasetypes.hx" ,lineNumber = 100 ,className = "unit.TestBasetypes" ,methodName = "testString" ))
		self.eq(Std.string(1 + 1 + 1 + 1) + "1", "41", _hx_c._hx_AnonObject(fileName = "TestBasetypes.hx" ,lineNumber = 103 ,className = "unit.TestBasetypes" ,methodName = "testString" ))
		self.eq(Std.string(Std.string(Std.string("1" + Std.string(1)) + Std.string(1)) + Std.string(1)) + Std.string(1), "11111", _hx_c._hx_AnonObject(fileName = "TestBasetypes.hx" ,lineNumber = 104 ,className = "unit.TestBasetypes" ,methodName = "testString" ))
		self.eq(Std.string(Std.string(1 + 1) + "1") + Std.string(1 * 2), "212", _hx_c._hx_AnonObject(fileName = "TestBasetypes.hx" ,lineNumber = 105 ,className = "unit.TestBasetypes" ,methodName = "testString" ))
		x3 = [[1], [2, 3]]
		self.eq("" + Std.string(_hx_c.Std.string(x3)), "[[1],[2,3]]", _hx_c._hx_AnonObject(fileName = "TestBasetypes.hx" ,lineNumber = 109 ,className = "unit.TestBasetypes" ,methodName = "testString" ))
		x4 = [1, "hello"]
		self.eq("" + Std.string(_hx_c.Std.string(x4)), "[1,hello]", _hx_c._hx_AnonObject(fileName = "TestBasetypes.hx" ,lineNumber = 113 ,className = "unit.TestBasetypes" ,methodName = "testString" ))
		self.eq(Std.string(_hx_c.Std.string(x4)) + "", "" + Std.string(_hx_c.Std.string(x4)), _hx_c._hx_AnonObject(fileName = "TestBasetypes.hx" ,lineNumber = 114 ,className = "unit.TestBasetypes" ,methodName = "testString" ))
		x5 = x4
		self.eq("" + Std.string(_hx_c.Std.string(x5)), "[1,hello]", _hx_c._hx_AnonObject(fileName = "TestBasetypes.hx" ,lineNumber = 118 ,className = "unit.TestBasetypes" ,methodName = "testString" ))
		self.eq(Std.string(_hx_c.Std.string(x5)) + "", "" + Std.string(_hx_c.Std.string(x5)), _hx_c._hx_AnonObject(fileName = "TestBasetypes.hx" ,lineNumber = 119 ,className = "unit.TestBasetypes" ,methodName = "testString" ))
		try:
			"" + Std.string(_hx_c.Std.string(_hx_functools.partial(HxOverrides_iterator, x5)()))
		except Exception as _hx_e:
			_hx_e1 = _hx_e.val if isinstance(_hx_e, _HxException) else _hx_e
			if True:
				e = _hx_e1
				_hx_c.unit_Test.report("Could not convert Iterator to String", _hx_c._hx_AnonObject(fileName = "TestBasetypes.hx" ,lineNumber = 125 ,className = "unit.TestBasetypes" ,methodName = "testString" ))
			else:
				raise _hx_e
		str1 = "he\nlo\"'"
		self.eq(_hx_c.Std.string(str1), str1, _hx_c._hx_AnonObject(fileName = "TestBasetypes.hx" ,lineNumber = 129 ,className = "unit.TestBasetypes" ,methodName = "testString" ))
		self.eq(_hx_c.Std.string([str1]), Std.string("[" + Std.string(str1)) + "]", _hx_c._hx_AnonObject(fileName = "TestBasetypes.hx" ,lineNumber = 130 ,className = "unit.TestBasetypes" ,methodName = "testString" ))
		e1 = _hx_c.unit_MyEnum.C(0, "h")
		self.eq(_hx_c.Std.string(e1), "C(0,h)", _hx_c._hx_AnonObject(fileName = "TestBasetypes.hx" ,lineNumber = 133 ,className = "unit.TestBasetypes" ,methodName = "testString" ))
		self.eq(_hx_c.Std.string([e1]), "[C(0,h)]", _hx_c._hx_AnonObject(fileName = "TestBasetypes.hx" ,lineNumber = 135 ,className = "unit.TestBasetypes" ,methodName = "testString" ))
		tester = "show me the (show me!) index of show me"
		def _hx_local_4():
			def _hx_local_3():
				i = tester.rfind("show me", 0, None + 1)
				startLeft = None
				if i == -1:
					b = None + 1 - _hx_builtin.len("show me")
					if _hx_math.isnan(0):
						startLeft = 0
					elif _hx_math.isnan(b):
						startLeft = b
					else:
						startLeft = _hx_builtin.max(0, b)
				
				else:
					startLeft = i + 1
				check = tester.find("show me", startLeft, _hx_builtin.len(tester))
				return check if (check > i and check <= None) else i
			
			return tester.rfind("show me", 0, _hx_builtin.len(tester)) if None is None else _hx_local_3()
		
		self.eq(_hx_local_4(), 32, _hx_c._hx_AnonObject(fileName = "TestBasetypes.hx" ,lineNumber = 138 ,className = "unit.TestBasetypes" ,methodName = "testString" ))
		def _hx_local_6():
			def _hx_local_5():
				i1 = tester.rfind("show me", 0, 1 + 1)
				startLeft1 = None
				if i1 == -1:
					b1 = 1 + 1 - _hx_builtin.len("show me")
					if _hx_math.isnan(0):
						startLeft1 = 0
					elif _hx_math.isnan(b1):
						startLeft1 = b1
					else:
						startLeft1 = _hx_builtin.max(0, b1)
				
				else:
					startLeft1 = i1 + 1
				check1 = tester.find("show me", startLeft1, _hx_builtin.len(tester))
				return check1 if (check1 > i1 and check1 <= 1) else i1
			
			return tester.rfind("show me", 0, _hx_builtin.len(tester)) if 1 is None else _hx_local_5()
		
		self.eq(_hx_local_6(), 0, _hx_c._hx_AnonObject(fileName = "TestBasetypes.hx" ,lineNumber = 139 ,className = "unit.TestBasetypes" ,methodName = "testString" ))
		def _hx_local_8():
			def _hx_local_7():
				i2 = tester.rfind("show me", 0, 28 + 1)
				startLeft2 = None
				if i2 == -1:
					b2 = 28 + 1 - _hx_builtin.len("show me")
					if _hx_math.isnan(0):
						startLeft2 = 0
					elif _hx_math.isnan(b2):
						startLeft2 = b2
					else:
						startLeft2 = _hx_builtin.max(0, b2)
				
				else:
					startLeft2 = i2 + 1
				check2 = tester.find("show me", startLeft2, _hx_builtin.len(tester))
				return check2 if (check2 > i2 and check2 <= 28) else i2
			
			return tester.rfind("show me", 0, _hx_builtin.len(tester)) if 28 is None else _hx_local_7()
		
		self.eq(_hx_local_8(), 13, _hx_c._hx_AnonObject(fileName = "TestBasetypes.hx" ,lineNumber = 140 ,className = "unit.TestBasetypes" ,methodName = "testString" ))
	

	def testMath(self):
		self.eq(_hx_math.floor(-1.7), -2, _hx_c._hx_AnonObject(fileName = "TestBasetypes.hx" ,lineNumber = 144 ,className = "unit.TestBasetypes" ,methodName = "testMath" ))
		self.eq(_hx_math.floor(-1.5), -2, _hx_c._hx_AnonObject(fileName = "TestBasetypes.hx" ,lineNumber = 145 ,className = "unit.TestBasetypes" ,methodName = "testMath" ))
		self.eq(_hx_math.floor(-1.2), -2, _hx_c._hx_AnonObject(fileName = "TestBasetypes.hx" ,lineNumber = 146 ,className = "unit.TestBasetypes" ,methodName = "testMath" ))
		self.eq(_hx_math.floor(1.7), 1, _hx_c._hx_AnonObject(fileName = "TestBasetypes.hx" ,lineNumber = 147 ,className = "unit.TestBasetypes" ,methodName = "testMath" ))
		self.eq(_hx_math.floor(1.5), 1, _hx_c._hx_AnonObject(fileName = "TestBasetypes.hx" ,lineNumber = 148 ,className = "unit.TestBasetypes" ,methodName = "testMath" ))
		self.eq(_hx_math.floor(1.2), 1, _hx_c._hx_AnonObject(fileName = "TestBasetypes.hx" ,lineNumber = 149 ,className = "unit.TestBasetypes" ,methodName = "testMath" ))
		self.eq(_hx_math.ceil(-1.7), -1, _hx_c._hx_AnonObject(fileName = "TestBasetypes.hx" ,lineNumber = 150 ,className = "unit.TestBasetypes" ,methodName = "testMath" ))
		self.eq(_hx_math.ceil(-1.5), -1, _hx_c._hx_AnonObject(fileName = "TestBasetypes.hx" ,lineNumber = 151 ,className = "unit.TestBasetypes" ,methodName = "testMath" ))
		self.eq(_hx_math.ceil(-1.2), -1, _hx_c._hx_AnonObject(fileName = "TestBasetypes.hx" ,lineNumber = 152 ,className = "unit.TestBasetypes" ,methodName = "testMath" ))
		self.eq(_hx_math.ceil(1.7), 2, _hx_c._hx_AnonObject(fileName = "TestBasetypes.hx" ,lineNumber = 153 ,className = "unit.TestBasetypes" ,methodName = "testMath" ))
		self.eq(_hx_math.ceil(1.5), 2, _hx_c._hx_AnonObject(fileName = "TestBasetypes.hx" ,lineNumber = 154 ,className = "unit.TestBasetypes" ,methodName = "testMath" ))
		self.eq(_hx_math.ceil(1.2), 2, _hx_c._hx_AnonObject(fileName = "TestBasetypes.hx" ,lineNumber = 155 ,className = "unit.TestBasetypes" ,methodName = "testMath" ))
		self.eq(_hx_math.floor(-1.7 + 0.5), -2, _hx_c._hx_AnonObject(fileName = "TestBasetypes.hx" ,lineNumber = 156 ,className = "unit.TestBasetypes" ,methodName = "testMath" ))
		self.eq(_hx_math.floor(-1.5 + 0.5), -1, _hx_c._hx_AnonObject(fileName = "TestBasetypes.hx" ,lineNumber = 157 ,className = "unit.TestBasetypes" ,methodName = "testMath" ))
		self.eq(_hx_math.floor(-1.2 + 0.5), -1, _hx_c._hx_AnonObject(fileName = "TestBasetypes.hx" ,lineNumber = 158 ,className = "unit.TestBasetypes" ,methodName = "testMath" ))
		self.eq(_hx_math.floor(1.7 + 0.5), 2, _hx_c._hx_AnonObject(fileName = "TestBasetypes.hx" ,lineNumber = 159 ,className = "unit.TestBasetypes" ,methodName = "testMath" ))
		self.eq(_hx_math.floor(1.5 + 0.5), 2, _hx_c._hx_AnonObject(fileName = "TestBasetypes.hx" ,lineNumber = 160 ,className = "unit.TestBasetypes" ,methodName = "testMath" ))
		self.eq(_hx_math.floor(1.2 + 0.5), 1, _hx_c._hx_AnonObject(fileName = "TestBasetypes.hx" ,lineNumber = 161 ,className = "unit.TestBasetypes" ,methodName = "testMath" ))
		self.eq(-10000000000.7 if (-10000000000.7 == float("inf") or -10000000000.7 == float("-inf")) else float("nan") if (_hx_math.isnan(-10000000000.7)) else _hx_math.floor(-10000000000.7), -10000000001., _hx_c._hx_AnonObject(fileName = "TestBasetypes.hx" ,lineNumber = 199 ,className = "unit.TestBasetypes" ,methodName = "testMath" ))
		self.eq(-10000000000.7 if (-10000000000.7 == float("inf") or -10000000000.7 == float("-inf")) else float("nan") if (_hx_math.isnan(-10000000000.7)) else _hx_math.ceil(-10000000000.7), -10000000000., _hx_c._hx_AnonObject(fileName = "TestBasetypes.hx" ,lineNumber = 200 ,className = "unit.TestBasetypes" ,methodName = "testMath" ))
		self.eq(-10000000000.7 if (-10000000000.7 == float("inf") or -10000000000.7 == float("-inf")) else float("nan") if (_hx_math.isnan(-10000000000.7)) else _hx_math.floor(-10000000000.7 + 0.5), -10000000001., _hx_c._hx_AnonObject(fileName = "TestBasetypes.hx" ,lineNumber = 201 ,className = "unit.TestBasetypes" ,methodName = "testMath" ))
	

	def testStringMap(self):
		h = _hx_c.haxe_ds_StringMap()
		h.set("x", -1)
		h.set("abcd", 8546)
		self.eq(h.get("x"), -1, _hx_c._hx_AnonObject(fileName = "TestBasetypes.hx" ,lineNumber = 208 ,className = "unit.TestBasetypes" ,methodName = "testStringMap" ))
		self.eq(h.get("abcd"), 8546, _hx_c._hx_AnonObject(fileName = "TestBasetypes.hx" ,lineNumber = 209 ,className = "unit.TestBasetypes" ,methodName = "testStringMap" ))
		self.eq(h.get("e"), None, _hx_c._hx_AnonObject(fileName = "TestBasetypes.hx" ,lineNumber = 210 ,className = "unit.TestBasetypes" ,methodName = "testStringMap" ))
		k = _hx_c.Lambda.array(h)
		k.sort(key=_hx_functools.cmp_to_key(_hx_c.Reflect.compare))
		self.eq("#".join(_hx_builtin.list(_hx_builtin.map(_hx_c.Std.string, k))), "-1#8546", _hx_c._hx_AnonObject(fileName = "TestBasetypes.hx" ,lineNumber = 214 ,className = "unit.TestBasetypes" ,methodName = "testStringMap" ))
		k1 = _hx_c.Lambda.array(_hx_c._hx_AnonObject(iterator = h.keys ))
		k1.sort(key=_hx_functools.cmp_to_key(_hx_c.Reflect.compare))
		self.eq("#".join(_hx_builtin.list(_hx_builtin.map(_hx_c.Std.string, k1))), "abcd#x", _hx_c._hx_AnonObject(fileName = "TestBasetypes.hx" ,lineNumber = 218 ,className = "unit.TestBasetypes" ,methodName = "testStringMap" ))
		self.t(h.exists("x"), _hx_c._hx_AnonObject(fileName = "TestBasetypes.hx" ,lineNumber = 220 ,className = "unit.TestBasetypes" ,methodName = "testStringMap" ))
		self.t(h.exists("abcd"), _hx_c._hx_AnonObject(fileName = "TestBasetypes.hx" ,lineNumber = 221 ,className = "unit.TestBasetypes" ,methodName = "testStringMap" ))
		self.f(h.exists("e"), _hx_c._hx_AnonObject(fileName = "TestBasetypes.hx" ,lineNumber = 222 ,className = "unit.TestBasetypes" ,methodName = "testStringMap" ))
		h.remove("abcd")
		self.t(h.exists("x"), _hx_c._hx_AnonObject(fileName = "TestBasetypes.hx" ,lineNumber = 224 ,className = "unit.TestBasetypes" ,methodName = "testStringMap" ))
		self.f(h.exists("abcd"), _hx_c._hx_AnonObject(fileName = "TestBasetypes.hx" ,lineNumber = 225 ,className = "unit.TestBasetypes" ,methodName = "testStringMap" ))
		self.f(h.exists("e"), _hx_c._hx_AnonObject(fileName = "TestBasetypes.hx" ,lineNumber = 226 ,className = "unit.TestBasetypes" ,methodName = "testStringMap" ))
		self.eq(h.get("abcd"), None, _hx_c._hx_AnonObject(fileName = "TestBasetypes.hx" ,lineNumber = 227 ,className = "unit.TestBasetypes" ,methodName = "testStringMap" ))
		h.set("x", None)
		self.t(h.exists("x"), _hx_c._hx_AnonObject(fileName = "TestBasetypes.hx" ,lineNumber = 230 ,className = "unit.TestBasetypes" ,methodName = "testStringMap" ))
		self.t(h.remove("x"), _hx_c._hx_AnonObject(fileName = "TestBasetypes.hx" ,lineNumber = 231 ,className = "unit.TestBasetypes" ,methodName = "testStringMap" ))
		self.f(h.remove("x"), _hx_c._hx_AnonObject(fileName = "TestBasetypes.hx" ,lineNumber = 232 ,className = "unit.TestBasetypes" ,methodName = "testStringMap" ))
	

	def testIntMap(self):
		h = _hx_c.haxe_ds_IntMap()
		h.set(0, -1)
		h.set(-4815, 8546)
		self.eq(h.h.get(0, None), -1, _hx_c._hx_AnonObject(fileName = "TestBasetypes.hx" ,lineNumber = 239 ,className = "unit.TestBasetypes" ,methodName = "testIntMap" ))
		self.eq(h.h.get(-4815, None), 8546, _hx_c._hx_AnonObject(fileName = "TestBasetypes.hx" ,lineNumber = 240 ,className = "unit.TestBasetypes" ,methodName = "testIntMap" ))
		self.eq(h.h.get(456, None), None, _hx_c._hx_AnonObject(fileName = "TestBasetypes.hx" ,lineNumber = 241 ,className = "unit.TestBasetypes" ,methodName = "testIntMap" ))
		k = _hx_c.Lambda.array(h)
		k.sort(key=_hx_functools.cmp_to_key(_hx_c.Reflect.compare))
		self.eq("#".join(_hx_builtin.list(_hx_builtin.map(_hx_c.Std.string, k))), "-1#8546", _hx_c._hx_AnonObject(fileName = "TestBasetypes.hx" ,lineNumber = 247 ,className = "unit.TestBasetypes" ,methodName = "testIntMap" ))
		k1 = _hx_c.Lambda.array(_hx_c._hx_AnonObject(iterator = h.keys ))
		k1.sort(key=_hx_functools.cmp_to_key(_hx_c.Reflect.compare))
		self.eq("#".join(_hx_builtin.list(_hx_builtin.map(_hx_c.Std.string, k1))), "-4815#0", _hx_c._hx_AnonObject(fileName = "TestBasetypes.hx" ,lineNumber = 251 ,className = "unit.TestBasetypes" ,methodName = "testIntMap" ))
		self.t(0 in h.h, _hx_c._hx_AnonObject(fileName = "TestBasetypes.hx" ,lineNumber = 253 ,className = "unit.TestBasetypes" ,methodName = "testIntMap" ))
		self.t(-4815 in h.h, _hx_c._hx_AnonObject(fileName = "TestBasetypes.hx" ,lineNumber = 254 ,className = "unit.TestBasetypes" ,methodName = "testIntMap" ))
		self.f(456 in h.h, _hx_c._hx_AnonObject(fileName = "TestBasetypes.hx" ,lineNumber = 255 ,className = "unit.TestBasetypes" ,methodName = "testIntMap" ))
		h.remove(-4815)
		self.t(0 in h.h, _hx_c._hx_AnonObject(fileName = "TestBasetypes.hx" ,lineNumber = 257 ,className = "unit.TestBasetypes" ,methodName = "testIntMap" ))
		self.f(-4815 in h.h, _hx_c._hx_AnonObject(fileName = "TestBasetypes.hx" ,lineNumber = 258 ,className = "unit.TestBasetypes" ,methodName = "testIntMap" ))
		self.f(456 in h.h, _hx_c._hx_AnonObject(fileName = "TestBasetypes.hx" ,lineNumber = 259 ,className = "unit.TestBasetypes" ,methodName = "testIntMap" ))
		self.eq(h.h.get(-4815, None), None, _hx_c._hx_AnonObject(fileName = "TestBasetypes.hx" ,lineNumber = 260 ,className = "unit.TestBasetypes" ,methodName = "testIntMap" ))
		h.set(65, None)
		self.t(65 in h.h, _hx_c._hx_AnonObject(fileName = "TestBasetypes.hx" ,lineNumber = 263 ,className = "unit.TestBasetypes" ,methodName = "testIntMap" ))
		self.t(h.remove(65), _hx_c._hx_AnonObject(fileName = "TestBasetypes.hx" ,lineNumber = 264 ,className = "unit.TestBasetypes" ,methodName = "testIntMap" ))
		self.f(h.remove(65), _hx_c._hx_AnonObject(fileName = "TestBasetypes.hx" ,lineNumber = 265 ,className = "unit.TestBasetypes" ,methodName = "testIntMap" ))
		h1 = _hx_c.haxe_ds_IntMap()
		h1.set(1, ["a", "b"])
		self.t(1 in h1.h, _hx_c._hx_AnonObject(fileName = "TestBasetypes.hx" ,lineNumber = 269 ,className = "unit.TestBasetypes" ,methodName = "testIntMap" ))
		self.t(h1.remove(1), _hx_c._hx_AnonObject(fileName = "TestBasetypes.hx" ,lineNumber = 270 ,className = "unit.TestBasetypes" ,methodName = "testIntMap" ))
		self.f(h1.remove(1), _hx_c._hx_AnonObject(fileName = "TestBasetypes.hx" ,lineNumber = 271 ,className = "unit.TestBasetypes" ,methodName = "testIntMap" ))
	

	def testMap(self):
		i = _hx_c.haxe_ds_IntMap()
		i.set(1, 0)
		0
		
		x = 1
		_g = x
		x = x + 1
		
		v = i.h.get(_g, None) + 4
		i.set(_g, v)
		v
		
		
		self.eq(x, 2, _hx_c._hx_AnonObject(fileName = "TestBasetypes.hx" ,lineNumber = 279 ,className = "unit.TestBasetypes" ,methodName = "testMap" ))
		self.eq(i.h.get(1, None), 4, _hx_c._hx_AnonObject(fileName = "TestBasetypes.hx" ,lineNumber = 280 ,className = "unit.TestBasetypes" ,methodName = "testMap" ))
	

	def testObjectKeyword(self):
		l = _hx_c._hx_AnonObject(new = "test" )
		prefix = ""
		self.eq(_hx_c.Reflect.field(l, Std.string(prefix) + "new"), "test", _hx_c._hx_AnonObject(fileName = "TestBasetypes.hx" ,lineNumber = 287 ,className = "unit.TestBasetypes" ,methodName = "testObjectKeyword" ))
		o = _hx_c._hx_AnonObject(const = 6 )
		self.eq(o.const, 6, _hx_c._hx_AnonObject(fileName = "TestBasetypes.hx" ,lineNumber = 291 ,className = "unit.TestBasetypes" ,methodName = "testObjectKeyword" ))
		self.eq(_hx_c.Reflect.field(o, Std.string(prefix) + "const"), 6, _hx_c._hx_AnonObject(fileName = "TestBasetypes.hx" ,lineNumber = 292 ,className = "unit.TestBasetypes" ,methodName = "testObjectKeyword" ))
	

	def testFormat(self):
		self.eq("", "", _hx_c._hx_AnonObject(fileName = "TestBasetypes.hx" ,lineNumber = 296 ,className = "unit.TestBasetypes" ,methodName = "testFormat" ))
		self.eq("$", "$", _hx_c._hx_AnonObject(fileName = "TestBasetypes.hx" ,lineNumber = 297 ,className = "unit.TestBasetypes" ,methodName = "testFormat" ))
		self.eq("$", "$", _hx_c._hx_AnonObject(fileName = "TestBasetypes.hx" ,lineNumber = 298 ,className = "unit.TestBasetypes" ,methodName = "testFormat" ))
		self.eq("x$*", "x$*", _hx_c._hx_AnonObject(fileName = "TestBasetypes.hx" ,lineNumber = 299 ,className = "unit.TestBasetypes" ,methodName = "testFormat" ))
		x = 5
		y = []
		self.eq("" + Std.string(x), "5", _hx_c._hx_AnonObject(fileName = "TestBasetypes.hx" ,lineNumber = 302 ,className = "unit.TestBasetypes" ,methodName = "testFormat" ))
		self.eq(Std.string("a" + Std.string(x)) + "$", "a5$", _hx_c._hx_AnonObject(fileName = "TestBasetypes.hx" ,lineNumber = 303 ,className = "unit.TestBasetypes" ,methodName = "testFormat" ))
		self.eq("" + Std.string(5), "5", _hx_c._hx_AnonObject(fileName = "TestBasetypes.hx" ,lineNumber = 305 ,className = "unit.TestBasetypes" ,methodName = "testFormat" ))
		self.eq(Std.string("" + Std.string(5)) + Std.string(2), "52", _hx_c._hx_AnonObject(fileName = "TestBasetypes.hx" ,lineNumber = 306 ,className = "unit.TestBasetypes" ,methodName = "testFormat" ))
		self.eq(Std.string("a" + Std.string(x)) + "b", "a5b", _hx_c._hx_AnonObject(fileName = "TestBasetypes.hx" ,lineNumber = 307 ,className = "unit.TestBasetypes" ,methodName = "testFormat" ))
		self.eq(Std.string("" + Std.string(x)) + Std.string(_hx_c.Std.string(y)), "5[]", _hx_c._hx_AnonObject(fileName = "TestBasetypes.hx" ,lineNumber = 308 ,className = "unit.TestBasetypes" ,methodName = "testFormat" ))
	

	def testAbstract(self):
		a = 33
		self.t(_hx_c.Std._hx_is(a, _hx_c.Int), _hx_c._hx_AnonObject(fileName = "TestBasetypes.hx" ,lineNumber = 313 ,className = "unit.TestBasetypes" ,methodName = "testAbstract" ))
		self.eq(a, 33, _hx_c._hx_AnonObject(fileName = "TestBasetypes.hx" ,lineNumber = 314 ,className = "unit.TestBasetypes" ,methodName = "testAbstract" ))
		b = a
		a = a + 1
		self.eq(a, 34, _hx_c._hx_AnonObject(fileName = "TestBasetypes.hx" ,lineNumber = 317 ,className = "unit.TestBasetypes" ,methodName = "testAbstract" ))
		self.eq(b, 33, _hx_c._hx_AnonObject(fileName = "TestBasetypes.hx" ,lineNumber = 318 ,className = "unit.TestBasetypes" ,methodName = "testAbstract" ))
	

	def testAbstractCast(self):
		_g = self
		s = "Abstract casting ::t::"
		tpl = _hx_c.haxe_Template(s)
		self.t(_hx_c.Std._hx_is(tpl, _hx_c.haxe_Template), _hx_c._hx_AnonObject(fileName = "TestBasetypes.hx" ,lineNumber = 327 ,className = "unit.TestBasetypes" ,methodName = "testAbstractCast" ))
		self.t(_hx_c.Std._hx_is(tpl, _hx_c.haxe_Template), _hx_c._hx_AnonObject(fileName = "TestBasetypes.hx" ,lineNumber = 328 ,className = "unit.TestBasetypes" ,methodName = "testAbstractCast" ))
		self.eq(tpl.execute(_hx_c._hx_AnonObject(t = "works!" )), "Abstract casting works!", _hx_c._hx_AnonObject(fileName = "TestBasetypes.hx" ,lineNumber = 329 ,className = "unit.TestBasetypes" ,methodName = "testAbstractCast" ))
		str = tpl.execute(_hx_c._hx_AnonObject(t = "really works!" ))
		self.t(_hx_c.Std._hx_is(str, _hx_c.String), _hx_c._hx_AnonObject(fileName = "TestBasetypes.hx" ,lineNumber = 333 ,className = "unit.TestBasetypes" ,methodName = "testAbstractCast" ))
		self.eq(str, "Abstract casting really works!", _hx_c._hx_AnonObject(fileName = "TestBasetypes.hx" ,lineNumber = 334 ,className = "unit.TestBasetypes" ,methodName = "testAbstractCast" ))
		tpl1 = None
		tpl1 = _hx_c.haxe_Template(s)
		self.t(_hx_c.Std._hx_is(tpl1, _hx_c.haxe_Template), _hx_c._hx_AnonObject(fileName = "TestBasetypes.hx" ,lineNumber = 339 ,className = "unit.TestBasetypes" ,methodName = "testAbstractCast" ))
		self.t(_hx_c.Std._hx_is(tpl1, _hx_c.haxe_Template), _hx_c._hx_AnonObject(fileName = "TestBasetypes.hx" ,lineNumber = 340 ,className = "unit.TestBasetypes" ,methodName = "testAbstractCast" ))
		self.eq(tpl1.execute(_hx_c._hx_AnonObject(t = "works!" )), "Abstract casting works!", _hx_c._hx_AnonObject(fileName = "TestBasetypes.hx" ,lineNumber = 341 ,className = "unit.TestBasetypes" ,methodName = "testAbstractCast" ))
		str1 = None
		str1 = tpl1.execute(_hx_c._hx_AnonObject(t = "really works!" ))
		self.t(_hx_c.Std._hx_is(str1, _hx_c.String), _hx_c._hx_AnonObject(fileName = "TestBasetypes.hx" ,lineNumber = 346 ,className = "unit.TestBasetypes" ,methodName = "testAbstractCast" ))
		self.eq(str1, "Abstract casting really works!", _hx_c._hx_AnonObject(fileName = "TestBasetypes.hx" ,lineNumber = 347 ,className = "unit.TestBasetypes" ,methodName = "testAbstractCast" ))
		def _hx_local_0(tpl2):
			_g.eq(tpl2.execute(_hx_c._hx_AnonObject(t = "works!" )), "Abstract casting works!", _hx_c._hx_AnonObject(fileName = "TestBasetypes.hx" ,lineNumber = 351 ,className = "unit.TestBasetypes" ,methodName = "testAbstractCast" ))
		_hx_from = _hx_local_0
		_hx_from(_hx_c.haxe_Template(s))
		def _hx_local_1(s1):
			_g.eq(s1, "Abstract casting really works!", _hx_c._hx_AnonObject(fileName = "TestBasetypes.hx" ,lineNumber = 357 ,className = "unit.TestBasetypes" ,methodName = "testAbstractCast" ))
		from1 = _hx_local_1
		from1(tpl1.execute(_hx_c._hx_AnonObject(t = "really works!" )))
		obj = _hx_c._hx_AnonObject(tpl = _hx_c.haxe_Template(s) )
		self.eq(obj.tpl.execute(_hx_c._hx_AnonObject(t = "works!" )), "Abstract casting works!", _hx_c._hx_AnonObject(fileName = "TestBasetypes.hx" ,lineNumber = 363 ,className = "unit.TestBasetypes" ,methodName = "testAbstractCast" ))
		obj1 = None
		obj1 = _hx_c._hx_AnonObject(tpl = _hx_c.haxe_Template(s) )
		self.eq(obj1.tpl.execute(_hx_c._hx_AnonObject(t = "works!" )), "Abstract casting works!", _hx_c._hx_AnonObject(fileName = "TestBasetypes.hx" ,lineNumber = 368 ,className = "unit.TestBasetypes" ,methodName = "testAbstractCast" ))
		obj2 = _hx_c._hx_AnonObject(s = tpl1.execute(_hx_c._hx_AnonObject(t = "really works!" )) )
		self.eq(obj2.s, "Abstract casting really works!", _hx_c._hx_AnonObject(fileName = "TestBasetypes.hx" ,lineNumber = 372 ,className = "unit.TestBasetypes" ,methodName = "testAbstractCast" ))
		obj3 = None
		obj3 = _hx_c._hx_AnonObject(s = tpl1.execute(_hx_c._hx_AnonObject(t = "really works!" )) )
		self.eq(obj3.s, "Abstract casting really works!", _hx_c._hx_AnonObject(fileName = "TestBasetypes.hx" ,lineNumber = 377 ,className = "unit.TestBasetypes" ,methodName = "testAbstractCast" ))
		arr = [_hx_c.haxe_Template(s), _hx_c.haxe_Template("foo")]
		self.eq(_hx_array_get(arr,0).execute(_hx_c._hx_AnonObject(t = "works!" )), "Abstract casting works!", _hx_c._hx_AnonObject(fileName = "TestBasetypes.hx" ,lineNumber = 381 ,className = "unit.TestBasetypes" ,methodName = "testAbstractCast" ))
		self.eq(_hx_array_get(arr,1).execute(_hx_c._hx_AnonObject()), "foo", _hx_c._hx_AnonObject(fileName = "TestBasetypes.hx" ,lineNumber = 382 ,className = "unit.TestBasetypes" ,methodName = "testAbstractCast" ))
		arr1 = [tpl1.execute(_hx_c._hx_AnonObject(t = "really works!" ))]
		self.eq(_hx_array_get(arr1,0), "Abstract casting really works!", _hx_c._hx_AnonObject(fileName = "TestBasetypes.hx" ,lineNumber = 386 ,className = "unit.TestBasetypes" ,methodName = "testAbstractCast" ))
		def _hx_local_2():
			return Std.string(12.2) + "m"
		returnAbstractCast = _hx_local_2
		self.eq(returnAbstractCast(), "12.2m", _hx_c._hx_AnonObject(fileName = "TestBasetypes.hx" ,lineNumber = 394 ,className = "unit.TestBasetypes" ,methodName = "testAbstractCast" ))
		def _hx_local_3(b):
			if (b) == True:
				return Std.string(12.2) + "m"
			else:
				return Std.string(2.4) + "m"
		switchMe = _hx_local_3
		self.eq(switchMe(True), "12.2m", _hx_c._hx_AnonObject(fileName = "TestBasetypes.hx" ,lineNumber = 404 ,className = "unit.TestBasetypes" ,methodName = "testAbstractCast" ))
		self.eq(switchMe(False), "2.4m", _hx_c._hx_AnonObject(fileName = "TestBasetypes.hx" ,lineNumber = 405 ,className = "unit.TestBasetypes" ,methodName = "testAbstractCast" ))
		m = 3000
		c = _hx_c.unit_MyClassWithAbstractArgCtor(m / 1000.)
		self.feq(c.km, 3, _hx_c._hx_AnonObject(fileName = "TestBasetypes.hx" ,lineNumber = 410 ,className = "unit.TestBasetypes" ,methodName = "testAbstractCast" ))
	

	def testAbstractToAbstractCast(self):
		m = 122.2
		km = m / 1000.
		self.feq(km, 0.1222, _hx_c._hx_AnonObject(fileName = "TestBasetypes.hx" ,lineNumber = 416 ,className = "unit.TestBasetypes" ,methodName = "testAbstractToAbstractCast" ))
	

	def testAbstractTypeParameters(self):
		hash1 = _hx_c.unit_MyAbstract_MyHash_Impl_.fromStringArray(["k1", "v1", "k2", "v2"])
		self.eq("v1", hash1.get("k1"), _hx_c._hx_AnonObject(fileName = "TestBasetypes.hx" ,lineNumber = 421 ,className = "unit.TestBasetypes" ,methodName = "testAbstractTypeParameters" ))
		self.eq("v2", hash1.get("k2"), _hx_c._hx_AnonObject(fileName = "TestBasetypes.hx" ,lineNumber = 422 ,className = "unit.TestBasetypes" ,methodName = "testAbstractTypeParameters" ))
		hash11 = _hx_c.unit_MyAbstract_MyHash_Impl_.fromArray([1, 2, 3, 4])
		self.eq(2, hash11.get("_s1"), _hx_c._hx_AnonObject(fileName = "TestBasetypes.hx" ,lineNumber = 424 ,className = "unit.TestBasetypes" ,methodName = "testAbstractTypeParameters" ))
		self.eq(4, hash11.get("_s3"), _hx_c._hx_AnonObject(fileName = "TestBasetypes.hx" ,lineNumber = 425 ,className = "unit.TestBasetypes" ,methodName = "testAbstractTypeParameters" ))
	

	def testAbstractToString(self):
		km = 12.5
		m = 12.5
		self.eq("12.5km", Std.string(km) + "km", _hx_c._hx_AnonObject(fileName = "TestBasetypes.hx" ,lineNumber = 431 ,className = "unit.TestBasetypes" ,methodName = "testAbstractToString" ))
		self.eq("12.5m", Std.string(m) + "m", _hx_c._hx_AnonObject(fileName = "TestBasetypes.hx" ,lineNumber = 432 ,className = "unit.TestBasetypes" ,methodName = "testAbstractToString" ))
		self.eq("Distance: 12.5km", "Distance: " + Std.string((Std.string(km) + "km")), _hx_c._hx_AnonObject(fileName = "TestBasetypes.hx" ,lineNumber = 433 ,className = "unit.TestBasetypes" ,methodName = "testAbstractToString" ))
		self.eq("Distance: 12.5m", "Distance: " + Std.string((Std.string(m) + "m")), _hx_c._hx_AnonObject(fileName = "TestBasetypes.hx" ,lineNumber = 434 ,className = "unit.TestBasetypes" ,methodName = "testAbstractToString" ))
	

	def testAbstractInline(self):
		def _hx_local_0():
			a = None
			this1 = None
			this1 = 1
			_hx_local_1 = _hx_c.unit_MyAbstract_MyAbstractCounter_Impl_
			_hx_local_2 = _hx_local_1.counter
			_hx_local_1.counter = _hx_local_2 + 1
			_hx_local_2
			
			a = this1
			
			return a + 1
		
		self.eq(_hx_local_0(), 2, _hx_c._hx_AnonObject(fileName = "TestBasetypes.hx" ,lineNumber = 438 ,className = "unit.TestBasetypes" ,methodName = "testAbstractInline" ))
		self.eq(_hx_c.unit_MyAbstract_MyAbstractCounter_Impl_.counter, 1, _hx_c._hx_AnonObject(fileName = "TestBasetypes.hx" ,lineNumber = 439 ,className = "unit.TestBasetypes" ,methodName = "testAbstractInline" ))
		def _hx_local_3():
			a1 = None
			this2 = None
			this2 = 2
			_hx_local_4 = _hx_c.unit_MyAbstract_MyAbstractCounter_Impl_
			_hx_local_5 = _hx_local_4.counter
			_hx_local_4.counter = _hx_local_5 + 1
			_hx_local_5
			
			a1 = this2
			
			return a1 + 1
		
		self.eq(_hx_local_3(), 3, _hx_c._hx_AnonObject(fileName = "TestBasetypes.hx" ,lineNumber = 440 ,className = "unit.TestBasetypes" ,methodName = "testAbstractInline" ))
		self.eq(_hx_c.unit_MyAbstract_MyAbstractCounter_Impl_.counter, 2, _hx_c._hx_AnonObject(fileName = "TestBasetypes.hx" ,lineNumber = 441 ,className = "unit.TestBasetypes" ,methodName = "testAbstractInline" ))
		def _hx_local_6():
			a2 = None
			this3 = None
			this3 = 3
			_hx_local_7 = _hx_c.unit_MyAbstract_MyAbstractCounter_Impl_
			_hx_local_8 = _hx_local_7.counter
			_hx_local_7.counter = _hx_local_8 + 1
			_hx_local_8
			
			a2 = this3
			
			return a2 + 1
		
		self.eq(_hx_local_6(), 4, _hx_c._hx_AnonObject(fileName = "TestBasetypes.hx" ,lineNumber = 442 ,className = "unit.TestBasetypes" ,methodName = "testAbstractInline" ))
		self.eq(_hx_c.unit_MyAbstract_MyAbstractCounter_Impl_.counter, 3, _hx_c._hx_AnonObject(fileName = "TestBasetypes.hx" ,lineNumber = 443 ,className = "unit.TestBasetypes" ,methodName = "testAbstractInline" ))
	

	def getAbstractValue(self,a):
		return a + 1

	def testAbstractOperatorOverload(self):
		v1 = _hx_c.unit_MyPoint3(1, 1, 1)
		v2 = _hx_c.unit_MyPoint3(1, 2, 3)
		def _hx_local_0():
			this1 = _hx_c.unit_MyPoint3(_hx_c.unit_MyAbstract_MyVector_Impl_.get_x(v1) + _hx_c.unit_MyAbstract_MyVector_Impl_.get_x(v2), _hx_c.unit_MyAbstract_MyVector_Impl_.get_y(v1) + _hx_c.unit_MyAbstract_MyVector_Impl_.get_y(v2), _hx_c.unit_MyAbstract_MyVector_Impl_.get_z(v1) + _hx_c.unit_MyAbstract_MyVector_Impl_.get_z(v2))
			return Std.string(Std.string(Std.string(Std.string(Std.string("(" + Std.string(this1.x)) + ",") + Std.string(this1.y)) + ",") + Std.string(this1.z)) + ")"
		
		self.eq("(2,3,4)", _hx_local_0(), _hx_c._hx_AnonObject(fileName = "TestBasetypes.hx" ,lineNumber = 453 ,className = "unit.TestBasetypes" ,methodName = "testAbstractOperatorOverload" ))
		def _hx_local_1():
			this2 = _hx_c.unit_MyPoint3(_hx_c.unit_MyAbstract_MyVector_Impl_.get_x(v2) * 2., _hx_c.unit_MyAbstract_MyVector_Impl_.get_y(v2) * 2., _hx_c.unit_MyAbstract_MyVector_Impl_.get_z(v2) * 2.)
			return Std.string(Std.string(Std.string(Std.string(Std.string("(" + Std.string(this2.x)) + ",") + Std.string(this2.y)) + ",") + Std.string(this2.z)) + ")"
		
		self.eq("(2,4,6)", _hx_local_1(), _hx_c._hx_AnonObject(fileName = "TestBasetypes.hx" ,lineNumber = 454 ,className = "unit.TestBasetypes" ,methodName = "testAbstractOperatorOverload" ))
		v1Old = v1
		_g = v1
		_hx_c.unit_MyAbstract_MyVector_Impl_.set_x(_g, _hx_c.unit_MyAbstract_MyVector_Impl_.get_x(_g) * 2.)
		
		_g1 = v1
		_hx_c.unit_MyAbstract_MyVector_Impl_.set_y(_g1, _hx_c.unit_MyAbstract_MyVector_Impl_.get_y(_g1) * 2.)
		
		_g2 = v1
		_hx_c.unit_MyAbstract_MyVector_Impl_.set_z(_g2, _hx_c.unit_MyAbstract_MyVector_Impl_.get_z(_g2) * 2.)
		
		v1
		
		self.eq("(2,2,2)", Std.string(Std.string(Std.string(Std.string(Std.string("(" + Std.string(v1.x)) + ",") + Std.string(v1.y)) + ",") + Std.string(v1.z)) + ")", _hx_c._hx_AnonObject(fileName = "TestBasetypes.hx" ,lineNumber = 457 ,className = "unit.TestBasetypes" ,methodName = "testAbstractOperatorOverload" ))
		self.eq(v1Old, v1, _hx_c._hx_AnonObject(fileName = "TestBasetypes.hx" ,lineNumber = 458 ,className = "unit.TestBasetypes" ,methodName = "testAbstractOperatorOverload" ))
		v3 = _hx_c.unit_MyPoint3(_hx_c.unit_MyAbstract_MyVector_Impl_.get_x(v1) * 2., _hx_c.unit_MyAbstract_MyVector_Impl_.get_y(v1) * 2., _hx_c.unit_MyAbstract_MyVector_Impl_.get_z(v1) * 2.)
		self.eq("(4,4,4)", Std.string(Std.string(Std.string(Std.string(Std.string("(" + Std.string(v3.x)) + ",") + Std.string(v3.y)) + ",") + Std.string(v3.z)) + ")", _hx_c._hx_AnonObject(fileName = "TestBasetypes.hx" ,lineNumber = 460 ,className = "unit.TestBasetypes" ,methodName = "testAbstractOperatorOverload" ))
		self.f(v1 == v3, _hx_c._hx_AnonObject(fileName = "TestBasetypes.hx" ,lineNumber = 461 ,className = "unit.TestBasetypes" ,methodName = "testAbstractOperatorOverload" ))
		i = 1
		self.eq(2, i + i, _hx_c._hx_AnonObject(fileName = "TestBasetypes.hx" ,lineNumber = 464 ,className = "unit.TestBasetypes" ,methodName = "testAbstractOperatorOverload" ))
		i = i + i
		self.eq(2, i, _hx_c._hx_AnonObject(fileName = "TestBasetypes.hx" ,lineNumber = 466 ,className = "unit.TestBasetypes" ,methodName = "testAbstractOperatorOverload" ))
		r = 5
		self.eq("aaaaa", _hx_c.unit_MyAbstract_MyInt_Impl_.repeat(r, "a"), _hx_c._hx_AnonObject(fileName = "TestBasetypes.hx" ,lineNumber = 468 ,className = "unit.TestBasetypes" ,methodName = "testAbstractOperatorOverload" ))
		self.eq("aaaaa", _hx_c.unit_MyAbstract_MyInt_Impl_.repeat(r, "a"), _hx_c._hx_AnonObject(fileName = "TestBasetypes.hx" ,lineNumber = 469 ,className = "unit.TestBasetypes" ,methodName = "testAbstractOperatorOverload" ))
		v = 5
		self.eq("abcde", _hx_c.unit_MyAbstract_MyInt_Impl_.cut("abcdefghijk", v), _hx_c._hx_AnonObject(fileName = "TestBasetypes.hx" ,lineNumber = 472 ,className = "unit.TestBasetypes" ,methodName = "testAbstractOperatorOverload" ))
	

	def testAbstractSetter(self):
		_hx_as = _hx_c._hx_AnonObject()
		_hx_as.value = "foo"
		"foo"
		
		self.eq(_hx_as.value, "foo", _hx_c._hx_AnonObject(fileName = "TestBasetypes.hx" ,lineNumber = 478 ,className = "unit.TestBasetypes" ,methodName = "testAbstractSetter" ))
	

	def testAbstractMemberCall(self):
		_hx_as = _hx_c.unit_MyAbstract_MyAbstractThatCallsAMember_Impl_._new(2)
		self.eq(3, _hx_as, _hx_c._hx_AnonObject(fileName = "TestBasetypes.hx" ,lineNumber = 483 ,className = "unit.TestBasetypes" ,methodName = "testAbstractMemberCall" ))
	

	def testAbstractMultitypeInline(self):
		a = "My debugging abstract"
		self.eq("debugging abstract", _hx_c.python_Tools.substr(a, 3, None) if (None is None) else _hx_c.python_Tools.substr(a, 3, None), _hx_c._hx_AnonObject(fileName = "TestBasetypes.hx" ,lineNumber = 488 ,className = "unit.TestBasetypes" ,methodName = "testAbstractMultitypeInline" ))
	





unit_TestBasetypes._hx_class = unit_TestBasetypes
unit_TestBasetypes._hx_class_name = "unit.TestBasetypes"
_hx_classes["unit.TestBasetypes"] = unit_TestBasetypes
_hx_c.unit_TestBasetypes = unit_TestBasetypes
unit_TestBasetypes._hx_fields = []
unit_TestBasetypes._hx_props = []
unit_TestBasetypes._hx_methods = ["testArray","testString","testMath","testStringMap","testIntMap","testMap","testObjectKeyword","testFormat","testAbstract","testAbstractCast","testAbstractToAbstractCast","testAbstractTypeParameters","testAbstractToString","testAbstractInline","getAbstractValue","testAbstractOperatorOverload","testAbstractSetter","testAbstractMemberCall","testAbstractMultitypeInline"]
unit_TestBasetypes._hx_statics = []
unit_TestBasetypes._hx_interfaces = []
unit_TestBasetypes._hx_super = unit_Test
unit_TestBasetypes._hx_meta = _hx_c._hx_AnonObject(obj=_hx_c._hx_AnonObject(),statics=_hx_c._hx_AnonObject(),fields=_hx_c._hx_AnonObject())
def unit_TestBasetypes_hx_empty_init (_hx_o):
	pass
unit_TestBasetypes._hx_empty_init = unit_TestBasetypes_hx_empty_init
# print unit.TestBytes.TestBytes
class unit_TestBytes(unit_Test):


	def __init__(self):
		super().__init__()
	def test(self):
		b = _hx_c.haxe_io_Bytes.alloc(10)
		self.eq(b.length, 10, _hx_c._hx_AnonObject(fileName = "TestBytes.hx" ,lineNumber = 7 ,className = "unit.TestBytes" ,methodName = "test" ))
		_g = 0
		while _g < 10:
			i = _g
			_g = _g + 1
			
			self.eq(_hx_array_get(b.b,i), 0, _hx_c._hx_AnonObject(fileName = "TestBytes.hx" ,lineNumber = 10 ,className = "unit.TestBytes" ,methodName = "test" ))
		
		
		def _hx_local_0():
			_hx_array_get(b.b,-1)
		self.unspec(_hx_local_0)
		def _hx_local_1():
			_hx_array_get(b.b,11)
		self.unspec(_hx_local_1)
		_hx_array_set(b.b,1, 20 & 255)
		self.eq(_hx_array_get(b.b,1), 20, _hx_c._hx_AnonObject(fileName = "TestBytes.hx" ,lineNumber = 14 ,className = "unit.TestBytes" ,methodName = "test" ))
		def _hx_local_2():
			_hx_array_set(b.b,-1, 20 & 255)
		self.unspec(_hx_local_2)
		def _hx_local_3():
			_hx_array_set(b.b,11, 20 & 255)
		self.unspec(_hx_local_3)
		def _hx_local_4():
			_hx_array_set(b.b,0, 1000 & 255)
		self.unspec(_hx_local_4)
		_hx_array_set(b.b,1, 63318 & 255)
		self.eq(_hx_array_get(b.b,1), 86, _hx_c._hx_AnonObject(fileName = "TestBytes.hx" ,lineNumber = 19 ,className = "unit.TestBytes" ,methodName = "test" ))
		b2 = _hx_c.haxe_io_Bytes.ofString("ABCD")
		self.eq(b2.length, 4, _hx_c._hx_AnonObject(fileName = "TestBytes.hx" ,lineNumber = 22 ,className = "unit.TestBytes" ,methodName = "test" ))
		self.eq(_hx_array_get(b2.b,0), _hx_c.python_internal_StringImpl.charCodeAt("A", 0), _hx_c._hx_AnonObject(fileName = "TestBytes.hx" ,lineNumber = 23 ,className = "unit.TestBytes" ,methodName = "test" ))
		self.eq(_hx_array_get(b2.b,1), _hx_c.python_internal_StringImpl.charCodeAt("B", 0), _hx_c._hx_AnonObject(fileName = "TestBytes.hx" ,lineNumber = 24 ,className = "unit.TestBytes" ,methodName = "test" ))
		self.eq(_hx_array_get(b2.b,2), _hx_c.python_internal_StringImpl.charCodeAt("C", 0), _hx_c._hx_AnonObject(fileName = "TestBytes.hx" ,lineNumber = 25 ,className = "unit.TestBytes" ,methodName = "test" ))
		self.eq(_hx_array_get(b2.b,3), _hx_c.python_internal_StringImpl.charCodeAt("D", 0), _hx_c._hx_AnonObject(fileName = "TestBytes.hx" ,lineNumber = 26 ,className = "unit.TestBytes" ,methodName = "test" ))
		b3 = _hx_c.haxe_io_Bytes.ofString("é")
		self.eq(b3.length, 2, _hx_c._hx_AnonObject(fileName = "TestBytes.hx" ,lineNumber = 28 ,className = "unit.TestBytes" ,methodName = "test" ))
		self.eq(_hx_array_get(b3.b,0), 195, _hx_c._hx_AnonObject(fileName = "TestBytes.hx" ,lineNumber = 29 ,className = "unit.TestBytes" ,methodName = "test" ))
		self.eq(_hx_array_get(b3.b,1), 169, _hx_c._hx_AnonObject(fileName = "TestBytes.hx" ,lineNumber = 30 ,className = "unit.TestBytes" ,methodName = "test" ))
		b.blit(3, b2, 1, 3)
		self.eq(_hx_array_get(b.b,2), 0, _hx_c._hx_AnonObject(fileName = "TestBytes.hx" ,lineNumber = 33 ,className = "unit.TestBytes" ,methodName = "test" ))
		self.eq(_hx_array_get(b.b,3), _hx_c.python_internal_StringImpl.charCodeAt("B", 0), _hx_c._hx_AnonObject(fileName = "TestBytes.hx" ,lineNumber = 34 ,className = "unit.TestBytes" ,methodName = "test" ))
		self.eq(_hx_array_get(b.b,4), _hx_c.python_internal_StringImpl.charCodeAt("C", 0), _hx_c._hx_AnonObject(fileName = "TestBytes.hx" ,lineNumber = 35 ,className = "unit.TestBytes" ,methodName = "test" ))
		self.eq(_hx_array_get(b.b,5), _hx_c.python_internal_StringImpl.charCodeAt("D", 0), _hx_c._hx_AnonObject(fileName = "TestBytes.hx" ,lineNumber = 36 ,className = "unit.TestBytes" ,methodName = "test" ))
		self.eq(_hx_array_get(b.b,6), 0, _hx_c._hx_AnonObject(fileName = "TestBytes.hx" ,lineNumber = 37 ,className = "unit.TestBytes" ,methodName = "test" ))
		def _hx_local_5():
			b.blit(-1, b2, 1, 3)
		self.exc(_hx_local_5, _hx_c._hx_AnonObject(fileName = "TestBytes.hx" ,lineNumber = 38 ,className = "unit.TestBytes" ,methodName = "test" ))
		def _hx_local_6():
			b.blit(0, b2, 2, 3)
		self.exc(_hx_local_6, _hx_c._hx_AnonObject(fileName = "TestBytes.hx" ,lineNumber = 39 ,className = "unit.TestBytes" ,methodName = "test" ))
		def _hx_local_7():
			b.blit(9, b2, 1, 3)
		self.exc(_hx_local_7, _hx_c._hx_AnonObject(fileName = "TestBytes.hx" ,lineNumber = 40 ,className = "unit.TestBytes" ,methodName = "test" ))
		def _hx_local_8():
			b.blit(0, b2, -1, 3)
		self.exc(_hx_local_8, _hx_c._hx_AnonObject(fileName = "TestBytes.hx" ,lineNumber = 41 ,className = "unit.TestBytes" ,methodName = "test" ))
		def _hx_local_9():
			b.blit(0, b2, 1, -1)
		self.exc(_hx_local_9, _hx_c._hx_AnonObject(fileName = "TestBytes.hx" ,lineNumber = 42 ,className = "unit.TestBytes" ,methodName = "test" ))
		def _hx_local_10():
			b.blit(0, b2, 1, 20)
		self.exc(_hx_local_10, _hx_c._hx_AnonObject(fileName = "TestBytes.hx" ,lineNumber = 43 ,className = "unit.TestBytes" ,methodName = "test" ))
		b.blit(4, b, 3, 3)
		self.eq(_hx_array_get(b.b,2), 0, _hx_c._hx_AnonObject(fileName = "TestBytes.hx" ,lineNumber = 46 ,className = "unit.TestBytes" ,methodName = "test" ))
		self.eq(_hx_array_get(b.b,3), _hx_c.python_internal_StringImpl.charCodeAt("B", 0), _hx_c._hx_AnonObject(fileName = "TestBytes.hx" ,lineNumber = 47 ,className = "unit.TestBytes" ,methodName = "test" ))
		self.eq(_hx_array_get(b.b,4), _hx_c.python_internal_StringImpl.charCodeAt("B", 0), _hx_c._hx_AnonObject(fileName = "TestBytes.hx" ,lineNumber = 48 ,className = "unit.TestBytes" ,methodName = "test" ))
		self.eq(_hx_array_get(b.b,5), _hx_c.python_internal_StringImpl.charCodeAt("C", 0), _hx_c._hx_AnonObject(fileName = "TestBytes.hx" ,lineNumber = 49 ,className = "unit.TestBytes" ,methodName = "test" ))
		self.eq(_hx_array_get(b.b,6), _hx_c.python_internal_StringImpl.charCodeAt("D", 0), _hx_c._hx_AnonObject(fileName = "TestBytes.hx" ,lineNumber = 50 ,className = "unit.TestBytes" ,methodName = "test" ))
		self.eq(_hx_array_get(b.b,7), 0, _hx_c._hx_AnonObject(fileName = "TestBytes.hx" ,lineNumber = 51 ,className = "unit.TestBytes" ,methodName = "test" ))
		b.blit(3, b, 5, 3)
		self.eq(_hx_array_get(b.b,2), 0, _hx_c._hx_AnonObject(fileName = "TestBytes.hx" ,lineNumber = 54 ,className = "unit.TestBytes" ,methodName = "test" ))
		self.eq(_hx_array_get(b.b,3), _hx_c.python_internal_StringImpl.charCodeAt("C", 0), _hx_c._hx_AnonObject(fileName = "TestBytes.hx" ,lineNumber = 55 ,className = "unit.TestBytes" ,methodName = "test" ))
		self.eq(_hx_array_get(b.b,4), _hx_c.python_internal_StringImpl.charCodeAt("D", 0), _hx_c._hx_AnonObject(fileName = "TestBytes.hx" ,lineNumber = 56 ,className = "unit.TestBytes" ,methodName = "test" ))
		self.eq(_hx_array_get(b.b,5), 0, _hx_c._hx_AnonObject(fileName = "TestBytes.hx" ,lineNumber = 57 ,className = "unit.TestBytes" ,methodName = "test" ))
		self.eq(_hx_array_get(b.b,6), _hx_c.python_internal_StringImpl.charCodeAt("D", 0), _hx_c._hx_AnonObject(fileName = "TestBytes.hx" ,lineNumber = 58 ,className = "unit.TestBytes" ,methodName = "test" ))
		self.eq(_hx_array_get(b.b,7), 0, _hx_c._hx_AnonObject(fileName = "TestBytes.hx" ,lineNumber = 59 ,className = "unit.TestBytes" ,methodName = "test" ))
		bs = _hx_c.haxe_io_Bytes.ofString("One é accent")
		_hx_array_set(bs.b,3, 0 & 255)
		self.eq(bs.readString(0, 3), "One", _hx_c._hx_AnonObject(fileName = "TestBytes.hx" ,lineNumber = 63 ,className = "unit.TestBytes" ,methodName = "test" ))
		self.eq(bs.readString(4, bs.length - 4), "é accent", _hx_c._hx_AnonObject(fileName = "TestBytes.hx" ,lineNumber = 64 ,className = "unit.TestBytes" ,methodName = "test" ))
		self.eq(bs.readString(4, 2), "é", _hx_c._hx_AnonObject(fileName = "TestBytes.hx" ,lineNumber = 65 ,className = "unit.TestBytes" ,methodName = "test" ))
		def _hx_local_11():
			bs.readString(-1, 1)
		self.exc(_hx_local_11, _hx_c._hx_AnonObject(fileName = "TestBytes.hx" ,lineNumber = 66 ,className = "unit.TestBytes" ,methodName = "test" ))
		def _hx_local_12():
			bs.readString(1, 20)
		self.exc(_hx_local_12, _hx_c._hx_AnonObject(fileName = "TestBytes.hx" ,lineNumber = 67 ,className = "unit.TestBytes" ,methodName = "test" ))
		def _hx_local_13():
			bs.readString(4, 1)
		self.unspec(_hx_local_13)
		def _hx_local_14():
			bs.readString(1, 5)
		self.unspec(_hx_local_14)
		self.eq(b2.toString(), "ABCD", _hx_c._hx_AnonObject(fileName = "TestBytes.hx" ,lineNumber = 80 ,className = "unit.TestBytes" ,methodName = "test" ))
		strings = ["ABCD", "ABDC", "ABCDE", "ABC", "BC", "AAAAAAAAA"]
		_g1 = 0
		while _g1 < _hx_builtin.len(strings):
			s1 = _hx_array_get(strings,_g1)
			_g1 = _g1 + 1
			_g11 = 0
			while _g11 < _hx_builtin.len(strings):
				s2 = _hx_array_get(strings,_g11)
				_g11 = _g11 + 1
				c = _hx_c.haxe_io_Bytes.ofString(s1).compare(_hx_c.haxe_io_Bytes.ofString(s2))
				self.infos(Std.string(Std.string("compare " + Std.string(s1)) + " and ") + Std.string(s2))
				self.eq(c < 0, s1 < s2, _hx_c._hx_AnonObject(fileName = "TestBytes.hx" ,lineNumber = 88 ,className = "unit.TestBytes" ,methodName = "test" ))
				self.eq(c > 0, s1 > s2, _hx_c._hx_AnonObject(fileName = "TestBytes.hx" ,lineNumber = 89 ,className = "unit.TestBytes" ,methodName = "test" ))
				self.eq(c == 0, s1 == s2, _hx_c._hx_AnonObject(fileName = "TestBytes.hx" ,lineNumber = 90 ,className = "unit.TestBytes" ,methodName = "test" ))
			
		
		
		self.infos(None)
		bs1 = _hx_c.haxe_io_Bytes.ofString("ABCDEFGH")
		self.eq(bs1.sub(1, 3).compare(_hx_c.haxe_io_Bytes.ofString("BCD")), 0, _hx_c._hx_AnonObject(fileName = "TestBytes.hx" ,lineNumber = 95 ,className = "unit.TestBytes" ,methodName = "test" ))
		def _hx_local_15():
			bs1.sub(-1, 3)
		self.exc(_hx_local_15, _hx_c._hx_AnonObject(fileName = "TestBytes.hx" ,lineNumber = 96 ,className = "unit.TestBytes" ,methodName = "test" ))
		def _hx_local_16():
			bs1.sub(1, -1)
		self.exc(_hx_local_16, _hx_c._hx_AnonObject(fileName = "TestBytes.hx" ,lineNumber = 97 ,className = "unit.TestBytes" ,methodName = "test" ))
		def _hx_local_17():
			bs1.sub(1, 10)
		self.exc(_hx_local_17, _hx_c._hx_AnonObject(fileName = "TestBytes.hx" ,lineNumber = 98 ,className = "unit.TestBytes" ,methodName = "test" ))
	

	def testBuffer(self):
		out = _hx_c.haxe_io_BytesBuffer()
		self.eq(_hx_builtin.len(out.b), 0, _hx_c._hx_AnonObject(fileName = "TestBytes.hx" ,lineNumber = 103 ,className = "unit.TestBytes" ,methodName = "testBuffer" ))
		src = _hx_c.haxe_io_Bytes.ofString("ABCDEF")
		b1 = out.b
		b2 = src.b
		_g1 = 0
		_g = src.length
		while _g1 < _g:
			i = _g1
			_g1 = _g1 + 1
			
			_this = out.b
			_this.append(_hx_array_get(b2,i))
			_hx_builtin.len(_this)
			
		
		
		
		_g2 = 1
		while _g2 < 6:
			i1 = _g2
			_g2 = _g2 + 1
			
			_this1 = out.b
			_this1.append(i1)
			_hx_builtin.len(_this1)
			
			
		
		
		src1 = _hx_c.haxe_io_Bytes.ofString("ABCDEF")
		if 1 < 0 or 3 < 0 or 1 + 3 > src1.length:
			raise _HxException(_hx_c.haxe_io_Error.OutsideBounds)
		
		b11 = out.b
		b21 = src1.b
		_g11 = 1
		_g3 = 1 + 3
		while _g11 < _g3:
			i2 = _g11
			_g11 = _g11 + 1
			
			_this2 = out.b
			_this2.append(_hx_array_get(b21,i2))
			_hx_builtin.len(_this2)
			
		
		
		
		self.eq(_hx_builtin.len(out.b), 14, _hx_c._hx_AnonObject(fileName = "TestBytes.hx" ,lineNumber = 108 ,className = "unit.TestBytes" ,methodName = "testBuffer" ))
		b = out.getBytes()
		str = "ABCDEFBCD"
		self.eq(b.length, _hx_builtin.len(str), _hx_c._hx_AnonObject(fileName = "TestBytes.hx" ,lineNumber = 111 ,className = "unit.TestBytes" ,methodName = "testBuffer" ))
		_g12 = 0
		_g4 = _hx_builtin.len(str)
		while _g12 < _g4:
			i3 = _g12
			_g12 = _g12 + 1
			
			self.eq(_hx_array_get(b.b,i3), _hx_c.python_internal_StringImpl.charCodeAt(str, i3), _hx_c._hx_AnonObject(fileName = "TestBytes.hx" ,lineNumber = 113 ,className = "unit.TestBytes" ,methodName = "testBuffer" ))
		
		
	

	def testInput(self):
		bs = _hx_c.haxe_io_Bytes.ofString("One é accent")
		input = _hx_c.haxe_io_BytesInput(bs)
		self.eq(input.readAll().toString(), "One é accent", _hx_c._hx_AnonObject(fileName = "TestBytes.hx" ,lineNumber = 120 ,className = "unit.TestBytes" ,methodName = "testInput" ))
	





unit_TestBytes._hx_class = unit_TestBytes
unit_TestBytes._hx_class_name = "unit.TestBytes"
_hx_classes["unit.TestBytes"] = unit_TestBytes
_hx_c.unit_TestBytes = unit_TestBytes
unit_TestBytes._hx_fields = []
unit_TestBytes._hx_props = []
unit_TestBytes._hx_methods = ["test","testBuffer","testInput"]
unit_TestBytes._hx_statics = []
unit_TestBytes._hx_interfaces = []
unit_TestBytes._hx_super = unit_Test
unit_TestBytes._hx_meta = _hx_c._hx_AnonObject(obj=_hx_c._hx_AnonObject(),statics=_hx_c._hx_AnonObject(),fields=_hx_c._hx_AnonObject())
def unit_TestBytes_hx_empty_init (_hx_o):
	pass
unit_TestBytes._hx_empty_init = unit_TestBytes_hx_empty_init
# print unit.TestEReg.TestEReg
class unit_TestEReg(unit_Test):


	def __init__(self):
		super().__init__()
	def test(self):
		r = _hx_c.EReg("a+(b)?(c*)a+", "")
		self.f(r.match(""), _hx_c._hx_AnonObject(fileName = "TestEReg.hx" ,lineNumber = 9 ,className = "unit.TestEReg" ,methodName = "test" ))
		self.f(r.match("xxyy"), _hx_c._hx_AnonObject(fileName = "TestEReg.hx" ,lineNumber = 10 ,className = "unit.TestEReg" ,methodName = "test" ))
		self.t(r.match("xxaabcayyy"), _hx_c._hx_AnonObject(fileName = "TestEReg.hx" ,lineNumber = 11 ,className = "unit.TestEReg" ,methodName = "test" ))
		self.eq(r.matched(0), "aabca", _hx_c._hx_AnonObject(fileName = "TestEReg.hx" ,lineNumber = 12 ,className = "unit.TestEReg" ,methodName = "test" ))
		self.eq(r.matched(1), "b", _hx_c._hx_AnonObject(fileName = "TestEReg.hx" ,lineNumber = 13 ,className = "unit.TestEReg" ,methodName = "test" ))
		self.eq(r.matched(2), "c", _hx_c._hx_AnonObject(fileName = "TestEReg.hx" ,lineNumber = 14 ,className = "unit.TestEReg" ,methodName = "test" ))
		self.eq(r.matchedLeft(), "xx", _hx_c._hx_AnonObject(fileName = "TestEReg.hx" ,lineNumber = 15 ,className = "unit.TestEReg" ,methodName = "test" ))
		self.eq(r.matchedRight(), "yyy", _hx_c._hx_AnonObject(fileName = "TestEReg.hx" ,lineNumber = 16 ,className = "unit.TestEReg" ,methodName = "test" ))
		self.eq(r.matchedPos().pos, 2, _hx_c._hx_AnonObject(fileName = "TestEReg.hx" ,lineNumber = 17 ,className = "unit.TestEReg" ,methodName = "test" ))
		self.eq(r.matchedPos().len, 5, _hx_c._hx_AnonObject(fileName = "TestEReg.hx" ,lineNumber = 18 ,className = "unit.TestEReg" ,methodName = "test" ))
		self.t(r.match("aaa"), _hx_c._hx_AnonObject(fileName = "TestEReg.hx" ,lineNumber = 20 ,className = "unit.TestEReg" ,methodName = "test" ))
		self.eq(r.matched(0), "aaa", _hx_c._hx_AnonObject(fileName = "TestEReg.hx" ,lineNumber = 21 ,className = "unit.TestEReg" ,methodName = "test" ))
		self.eq(r.matchedLeft(), "", _hx_c._hx_AnonObject(fileName = "TestEReg.hx" ,lineNumber = 22 ,className = "unit.TestEReg" ,methodName = "test" ))
		self.eq(r.matchedRight(), "", _hx_c._hx_AnonObject(fileName = "TestEReg.hx" ,lineNumber = 23 ,className = "unit.TestEReg" ,methodName = "test" ))
		self.eq(r.matched(1), None, _hx_c._hx_AnonObject(fileName = "TestEReg.hx" ,lineNumber = 24 ,className = "unit.TestEReg" ,methodName = "test" ))
		self.eq(r.matched(2), "", _hx_c._hx_AnonObject(fileName = "TestEReg.hx" ,lineNumber = 25 ,className = "unit.TestEReg" ,methodName = "test" ))
		def _hx_local_0():
			r.matched(3)
		self.unspec(_hx_local_0)
		def _hx_local_1():
			r.matched(-1)
		self.unspec(_hx_local_1)
		r1 = _hx_c.EReg("^(b)?$", "")
		self.t(r1.match(""), _hx_c._hx_AnonObject(fileName = "TestEReg.hx" ,lineNumber = 31 ,className = "unit.TestEReg" ,methodName = "test" ))
		self.eq(r1.matched(0), "", _hx_c._hx_AnonObject(fileName = "TestEReg.hx" ,lineNumber = 32 ,className = "unit.TestEReg" ,methodName = "test" ))
		self.eq(r1.matched(1), None, _hx_c._hx_AnonObject(fileName = "TestEReg.hx" ,lineNumber = 33 ,className = "unit.TestEReg" ,methodName = "test" ))
		self.t(_hx_c.EReg("/", "").match("/"), _hx_c._hx_AnonObject(fileName = "TestEReg.hx" ,lineNumber = 35 ,className = "unit.TestEReg" ,methodName = "test" ))
		self.t(_hx_c.EReg("\n", "").match("\n"), _hx_c._hx_AnonObject(fileName = "TestEReg.hx" ,lineNumber = 37 ,className = "unit.TestEReg" ,methodName = "test" ))
		self.f(_hx_c.EReg("\\\\n", "").match("\n"), _hx_c._hx_AnonObject(fileName = "TestEReg.hx" ,lineNumber = 38 ,className = "unit.TestEReg" ,methodName = "test" ))
		self.t(_hx_c.EReg("\\\\n", "").match("\\n"), _hx_c._hx_AnonObject(fileName = "TestEReg.hx" ,lineNumber = 39 ,className = "unit.TestEReg" ,methodName = "test" ))
		self.t(_hx_c.EReg("\"", "").match("\""), _hx_c._hx_AnonObject(fileName = "TestEReg.hx" ,lineNumber = 41 ,className = "unit.TestEReg" ,methodName = "test" ))
		self.f(_hx_c.EReg("\\\\\"", "").match("\""), _hx_c._hx_AnonObject(fileName = "TestEReg.hx" ,lineNumber = 42 ,className = "unit.TestEReg" ,methodName = "test" ))
		self.t(_hx_c.EReg("\\\\\"", "").match("\\\""), _hx_c._hx_AnonObject(fileName = "TestEReg.hx" ,lineNumber = 43 ,className = "unit.TestEReg" ,methodName = "test" ))
		self.t(_hx_c.EReg("\\$", "").match("$"), _hx_c._hx_AnonObject(fileName = "TestEReg.hx" ,lineNumber = 45 ,className = "unit.TestEReg" ,methodName = "test" ))
		self.f(_hx_c.EReg("\\\\$", "").match("$"), _hx_c._hx_AnonObject(fileName = "TestEReg.hx" ,lineNumber = 46 ,className = "unit.TestEReg" ,methodName = "test" ))
		self.f(_hx_c.EReg("\\\\$", "").match("\\$"), _hx_c._hx_AnonObject(fileName = "TestEReg.hx" ,lineNumber = 47 ,className = "unit.TestEReg" ,methodName = "test" ))
		self.t(_hx_c.EReg("\\\\\\$", "").match("\\$"), _hx_c._hx_AnonObject(fileName = "TestEReg.hx" ,lineNumber = 48 ,className = "unit.TestEReg" ,methodName = "test" ))
		r2 = _hx_c.EReg("cat", "g")
		self.t(r2.match("catneko"), _hx_c._hx_AnonObject(fileName = "TestEReg.hx" ,lineNumber = 52 ,className = "unit.TestEReg" ,methodName = "test" ))
		self.t(r2.match("catneko"), _hx_c._hx_AnonObject(fileName = "TestEReg.hx" ,lineNumber = 53 ,className = "unit.TestEReg" ,methodName = "test" ))
		self.eq(_hx_c.EReg("a+", "").replace("aabbccaa", "x"), "xbbccaa", _hx_c._hx_AnonObject(fileName = "TestEReg.hx" ,lineNumber = 55 ,className = "unit.TestEReg" ,methodName = "test" ))
		self.eq(_hx_c.EReg("a+", "g").replace("aabbccaa", "x"), "xbbccx", _hx_c._hx_AnonObject(fileName = "TestEReg.hx" ,lineNumber = 56 ,className = "unit.TestEReg" ,methodName = "test" ))
		test = "{ test } .blah  { something:someval } "
		block = _hx_c.EReg("\\s*\\{\\s*|\\s*\\}\\s*", "gm")
		def _hx_local_2():
			_this = block.split(test)
			return _hx_builtin.len(_this)
		
		self.eq(_hx_local_2(), 5, _hx_c._hx_AnonObject(fileName = "TestEReg.hx" ,lineNumber = 63 ,className = "unit.TestEReg" ,methodName = "test" ))
		def _hx_local_3():
			_this1 = block.split(test)
			return "\",\"".join(_hx_builtin.list(_hx_builtin.map(_hx_c.Std.string, _this1)))
		
		self.eq(Std.string("\"" + Std.string(_hx_local_3())) + "\"", "\"\",\"test\",\".blah\",\"something:someval\",\"\"", _hx_c._hx_AnonObject(fileName = "TestEReg.hx" ,lineNumber = 65 ,className = "unit.TestEReg" ,methodName = "test" ))
		def _hx_local_6(r3):
			def _hx_local_5():
				def _hx_local_4():
					_this2 = r3.matched(0)
					return _hx_c.python_Tools.substr(_this2, 1, None)
				
				return Std.string("[" + Std.string(_hx_local_4())) + "]"
			
			return _hx_local_5()
		
		self.eq(_hx_c.EReg("a+", "g").map("aaabacx", _hx_local_6), "[aa]b[]cx", _hx_c._hx_AnonObject(fileName = "TestEReg.hx" ,lineNumber = 68 ,className = "unit.TestEReg" ,methodName = "test" ))
		def _hx_local_9(r4):
			def _hx_local_8():
				def _hx_local_7():
					_this3 = r4.matched(0)
					return _hx_c.python_Tools.substr(_this3, 1, None)
				
				return Std.string("[" + Std.string(_hx_local_7())) + "]"
			
			return _hx_local_8()
		
		self.eq(_hx_c.EReg("a+", "").map("aaabacx", _hx_local_9), "[aa]bacx", _hx_c._hx_AnonObject(fileName = "TestEReg.hx" ,lineNumber = 69 ,className = "unit.TestEReg" ,methodName = "test" ))
		def _hx_local_10(r5):
			return Std.string("[" + Std.string(r5.matched(1))) + "]"
		self.eq(_hx_c.EReg("a+(b*)", "g").map("aaabacx", _hx_local_10), "[b][]cx", _hx_c._hx_AnonObject(fileName = "TestEReg.hx" ,lineNumber = 71 ,className = "unit.TestEReg" ,methodName = "test" ))
		def _hx_local_11(r6):
			return Std.string("[" + Std.string(r6.matchedRight())) + "]"
		self.eq(_hx_c.EReg("a+", "g").map("aaabacx", _hx_local_11), "[bacx]b[cx]cx", _hx_c._hx_AnonObject(fileName = "TestEReg.hx" ,lineNumber = 72 ,className = "unit.TestEReg" ,methodName = "test" ))
		def _hx_local_12(r7):
			return Std.string("[" + Std.string(r7.matchedLeft())) + "]"
		self.eq(_hx_c.EReg("a+", "g").map("aaabacxa", _hx_local_12), "[]b[aaab]cx[aaabacx]", _hx_c._hx_AnonObject(fileName = "TestEReg.hx" ,lineNumber = 76 ,className = "unit.TestEReg" ,methodName = "test" ))
		r8 = _hx_c.EReg("a+", "g")
		def _hx_local_13(r9):
			return Std.string("[" + Std.string(r9.matchedLeft())) + "]"
		self.eq(r8.map("aaabacx", _hx_local_13), "[]b[aaab]cx", _hx_c._hx_AnonObject(fileName = "TestEReg.hx" ,lineNumber = 80 ,className = "unit.TestEReg" ,methodName = "test" ))
		def _hx_local_14(r10):
			return Std.string("[" + Std.string(r10.matchedLeft())) + "]"
		self.eq(r8.map("aaabacx", _hx_local_14), "[]b[aaab]cx", _hx_c._hx_AnonObject(fileName = "TestEReg.hx" ,lineNumber = 81 ,className = "unit.TestEReg" ,methodName = "test" ))
		r11 = _hx_c.EReg("a+", "")
		self.t(r11.matchSub("abab", 0), _hx_c._hx_AnonObject(fileName = "TestEReg.hx" ,lineNumber = 85 ,className = "unit.TestEReg" ,methodName = "test" ))
		self.eq(r11.matchedRight(), "bab", _hx_c._hx_AnonObject(fileName = "TestEReg.hx" ,lineNumber = 88 ,className = "unit.TestEReg" ,methodName = "test" ))
		self.t(r11.matchSub("abab", 1), _hx_c._hx_AnonObject(fileName = "TestEReg.hx" ,lineNumber = 90 ,className = "unit.TestEReg" ,methodName = "test" ))
		self.eq(r11.matchedRight(), "b", _hx_c._hx_AnonObject(fileName = "TestEReg.hx" ,lineNumber = 92 ,className = "unit.TestEReg" ,methodName = "test" ))
		self.eq(r11.matchedLeft(), "ab", _hx_c._hx_AnonObject(fileName = "TestEReg.hx" ,lineNumber = 93 ,className = "unit.TestEReg" ,methodName = "test" ))
		self.t(r11.matchSub("abab", 0), _hx_c._hx_AnonObject(fileName = "TestEReg.hx" ,lineNumber = 96 ,className = "unit.TestEReg" ,methodName = "test" ))
		self.eq(r11.matchedRight(), "bab", _hx_c._hx_AnonObject(fileName = "TestEReg.hx" ,lineNumber = 97 ,className = "unit.TestEReg" ,methodName = "test" ))
		self.t(r11.matchSub("abab", 1), _hx_c._hx_AnonObject(fileName = "TestEReg.hx" ,lineNumber = 98 ,className = "unit.TestEReg" ,methodName = "test" ))
		self.eq(r11.matchedRight(), "b", _hx_c._hx_AnonObject(fileName = "TestEReg.hx" ,lineNumber = 99 ,className = "unit.TestEReg" ,methodName = "test" ))
		self.eq(r11.matchedLeft(), "ab", _hx_c._hx_AnonObject(fileName = "TestEReg.hx" ,lineNumber = 100 ,className = "unit.TestEReg" ,methodName = "test" ))
		self.f(r11.matchSub("bbaa", 0, 1), _hx_c._hx_AnonObject(fileName = "TestEReg.hx" ,lineNumber = 103 ,className = "unit.TestEReg" ,methodName = "test" ))
		self.f(r11.matchSub("bbaa", 0, 2), _hx_c._hx_AnonObject(fileName = "TestEReg.hx" ,lineNumber = 104 ,className = "unit.TestEReg" ,methodName = "test" ))
		self.f(r11.matchSub("bbaa", 1, 1), _hx_c._hx_AnonObject(fileName = "TestEReg.hx" ,lineNumber = 105 ,className = "unit.TestEReg" ,methodName = "test" ))
		self.t(r11.matchSub("bbaa", 2, 1), _hx_c._hx_AnonObject(fileName = "TestEReg.hx" ,lineNumber = 106 ,className = "unit.TestEReg" ,methodName = "test" ))
		self.eq(r11.matchedLeft(), "bb", _hx_c._hx_AnonObject(fileName = "TestEReg.hx" ,lineNumber = 107 ,className = "unit.TestEReg" ,methodName = "test" ))
		self.eq(r11.matchedRight(), "a", _hx_c._hx_AnonObject(fileName = "TestEReg.hx" ,lineNumber = 108 ,className = "unit.TestEReg" ,methodName = "test" ))
		def _hx_local_15(r12):
			return Std.string("[" + Std.string(r12.matched(0))) + "]"
		self.eq(_hx_c.EReg("x?", "g").map("aaabacx", _hx_local_15), "[]a[]a[]a[]b[]a[]c[x]", _hx_c._hx_AnonObject(fileName = "TestEReg.hx" ,lineNumber = 110 ,className = "unit.TestEReg" ,methodName = "test" ))
		def _hx_local_16(x):
			return Std.string(Std.string(Std.string(Std.string(Std.string(Std.string(Std.string("([" + Std.string(x.matchedLeft())) + "]") + "[") + Std.string(x.matched(0))) + "]") + "[") + Std.string(x.matchedRight())) + "])b"
		f = _hx_local_16
		r13 = _hx_c.EReg("$", "mg")
		self.eq(r13.map("\n", f), "([][][\n])b\n", _hx_c._hx_AnonObject(fileName = "TestEReg.hx" ,lineNumber = 114 ,className = "unit.TestEReg" ,methodName = "test" ))
		self.eq(r13.map("a", f), "a([a][][])b", _hx_c._hx_AnonObject(fileName = "TestEReg.hx" ,lineNumber = 115 ,className = "unit.TestEReg" ,methodName = "test" ))
		self.eq(r13.map("aa\na", f), "aa([aa][][\na])b\na([aa\na][][])b", _hx_c._hx_AnonObject(fileName = "TestEReg.hx" ,lineNumber = 116 ,className = "unit.TestEReg" ,methodName = "test" ))
		r14 = _hx_c.EReg("^", "mg")
		self.eq(r14.map("\n", f), "([][][\n])b\n", _hx_c._hx_AnonObject(fileName = "TestEReg.hx" ,lineNumber = 120 ,className = "unit.TestEReg" ,methodName = "test" ))
		self.eq(r14.map("a", f), "([][][a])ba", _hx_c._hx_AnonObject(fileName = "TestEReg.hx" ,lineNumber = 121 ,className = "unit.TestEReg" ,methodName = "test" ))
		self.eq(r14.map("aa\na", f), "([][][aa\na])baa\n([aa\n][][a])ba", _hx_c._hx_AnonObject(fileName = "TestEReg.hx" ,lineNumber = 122 ,className = "unit.TestEReg" ,methodName = "test" ))
		r15 = _hx_c.EReg("$", "m")
		self.eq(r15.map("\n", f), "([][][\n])b\n", _hx_c._hx_AnonObject(fileName = "TestEReg.hx" ,lineNumber = 125 ,className = "unit.TestEReg" ,methodName = "test" ))
		self.eq(r15.map("a", f), "a([a][][])b", _hx_c._hx_AnonObject(fileName = "TestEReg.hx" ,lineNumber = 126 ,className = "unit.TestEReg" ,methodName = "test" ))
		self.eq(r15.map("aa\na", f), "aa([aa][][\na])b\na", _hx_c._hx_AnonObject(fileName = "TestEReg.hx" ,lineNumber = 127 ,className = "unit.TestEReg" ,methodName = "test" ))
		r16 = _hx_c.EReg("^", "m")
		self.eq(r16.map("\n", f), "([][][\n])b\n", _hx_c._hx_AnonObject(fileName = "TestEReg.hx" ,lineNumber = 131 ,className = "unit.TestEReg" ,methodName = "test" ))
		self.eq(r16.map("a", f), "([][][a])ba", _hx_c._hx_AnonObject(fileName = "TestEReg.hx" ,lineNumber = 132 ,className = "unit.TestEReg" ,methodName = "test" ))
		self.eq(r16.map("aa\na", f), "([][][aa\na])baa\na", _hx_c._hx_AnonObject(fileName = "TestEReg.hx" ,lineNumber = 133 ,className = "unit.TestEReg" ,methodName = "test" ))
		r17 = _hx_c.EReg("a", "")
		def _hx_local_17():
			r17.matched(0)
		self.exc(_hx_local_17, _hx_c._hx_AnonObject(fileName = "TestEReg.hx" ,lineNumber = 136 ,className = "unit.TestEReg" ,methodName = "test" ))
	





unit_TestEReg._hx_class = unit_TestEReg
unit_TestEReg._hx_class_name = "unit.TestEReg"
_hx_classes["unit.TestEReg"] = unit_TestEReg
_hx_c.unit_TestEReg = unit_TestEReg
unit_TestEReg._hx_fields = []
unit_TestEReg._hx_props = []
unit_TestEReg._hx_methods = ["test"]
unit_TestEReg._hx_statics = []
unit_TestEReg._hx_interfaces = []
unit_TestEReg._hx_super = unit_Test
unit_TestEReg._hx_meta = _hx_c._hx_AnonObject(obj=_hx_c._hx_AnonObject(),statics=_hx_c._hx_AnonObject(),fields=_hx_c._hx_AnonObject())
def unit_TestEReg_hx_empty_init (_hx_o):
	pass
unit_TestEReg._hx_empty_init = unit_TestEReg_hx_empty_init
class unit_Constant(_hx_c.Enum):
	def __init__(self, t, i, p):
		super(unit_Constant,self).__init__(t, i, p)

def _unit_Constant_statics_CFloat (s):
	return unit_Constant("CFloat", 2, [s])
unit_Constant.CFloat = _unit_Constant_statics_CFloat

def _unit_Constant_statics_CInt (s):
	return unit_Constant("CInt", 1, [s])
unit_Constant.CInt = _unit_Constant_statics_CInt

def _unit_Constant_statics_CString (s):
	return unit_Constant("CString", 0, [s])
unit_Constant.CString = _unit_Constant_statics_CString

unit_Constant._hx_constructs = ["CString","CInt","CFloat"]
unit_Constant._hx_class = unit_Constant
unit_Constant._hx_class_name = "unit.Constant"
_hx_classes["unit.Constant"] = unit_Constant
_hx_c.unit_Constant = unit_Constant
unit_Constant._hx_meta = _hx_c._hx_AnonObject(obj=_hx_c._hx_AnonObject(),fields=_hx_c._hx_AnonObject())
class unit_Binop(_hx_c.Enum):
	def __init__(self, t, i, p):
		super(unit_Binop,self).__init__(t, i, p)

unit_Binop.OpAdd = unit_Binop("OpAdd", 0, list())

unit_Binop.OpEq = unit_Binop("OpEq", 1, list())

unit_Binop._hx_constructs = ["OpAdd","OpEq"]
unit_Binop._hx_class = unit_Binop
unit_Binop._hx_class_name = "unit.Binop"
_hx_classes["unit.Binop"] = unit_Binop
_hx_c.unit_Binop = unit_Binop
unit_Binop._hx_meta = _hx_c._hx_AnonObject(obj=_hx_c._hx_AnonObject(),fields=_hx_c._hx_AnonObject())
class unit_Expr(_hx_c.Enum):
	def __init__(self, t, i, p):
		super(unit_Expr,self).__init__(t, i, p)

def _unit_Expr_statics_EBinop (op,e1,e2):
	return unit_Expr("EBinop", 1, [op,e1,e2])
unit_Expr.EBinop = _unit_Expr_statics_EBinop

def _unit_Expr_statics_EConst (c):
	return unit_Expr("EConst", 0, [c])
unit_Expr.EConst = _unit_Expr_statics_EConst

unit_Expr._hx_constructs = ["EConst","EBinop"]
unit_Expr._hx_class = unit_Expr
unit_Expr._hx_class_name = "unit.Expr"
_hx_classes["unit.Expr"] = unit_Expr
_hx_c.unit_Expr = unit_Expr
unit_Expr._hx_meta = _hx_c._hx_AnonObject(obj=_hx_c._hx_AnonObject(),fields=_hx_c._hx_AnonObject())
# print unit.TestGADT.TestGADT
class unit_TestGADT(unit_Test):


	def __init__(self):
		super().__init__()
	def testBasic(self):
		ti = 1.22
		tb = False
		e1 = _hx_c.unit_Expr.EConst(_hx_c.unit_Constant.CFloat("12"))
		e2 = _hx_c.unit_Expr.EConst(_hx_c.unit_Constant.CFloat("8"))
		e3 = _hx_c.unit_Expr.EConst(_hx_c.unit_Constant.CFloat("12"))
		eadd = _hx_c.unit_Expr.EBinop(_hx_c.unit_Binop.OpAdd, e1, e2)
		s = _hx_c.unit_TestGADT.eval(eadd)
		_hx_local_0 = _hx_c.unit_Test
		_hx_local_1 = _hx_local_0.count
		_hx_local_0.count = _hx_local_1 + 1
		_hx_local_1
		
		self.eq("TAbstract(Float,[])", "TAbstract(Float,[])", _hx_c._hx_AnonObject(fileName = "TestGADT.hx" ,lineNumber = 31 ,className = "unit.TestGADT" ,methodName = "testBasic" ))
		
		self.eq(s, 20, _hx_c._hx_AnonObject(fileName = "TestGADT.hx" ,lineNumber = 32 ,className = "unit.TestGADT" ,methodName = "testBasic" ))
		eeq = _hx_c.unit_Expr.EBinop(_hx_c.unit_Binop.OpEq, e1, e2)
		s1 = _hx_c.unit_TestGADT.eval(eeq)
		_hx_local_2 = _hx_c.unit_Test
		_hx_local_3 = _hx_local_2.count
		_hx_local_2.count = _hx_local_3 + 1
		_hx_local_3
		
		self.eq("TAbstract(Bool,[])", "TAbstract(Bool,[])", _hx_c._hx_AnonObject(fileName = "TestGADT.hx" ,lineNumber = 36 ,className = "unit.TestGADT" ,methodName = "testBasic" ))
		
		self.eq(s1, False, _hx_c._hx_AnonObject(fileName = "TestGADT.hx" ,lineNumber = 37 ,className = "unit.TestGADT" ,methodName = "testBasic" ))
		eeq1 = _hx_c.unit_Expr.EBinop(_hx_c.unit_Binop.OpEq, e1, e3)
		s2 = _hx_c.unit_TestGADT.eval(eeq1)
		_hx_local_4 = _hx_c.unit_Test
		_hx_local_5 = _hx_local_4.count
		_hx_local_4.count = _hx_local_5 + 1
		_hx_local_5
		
		self.eq("TAbstract(Bool,[])", "TAbstract(Bool,[])", _hx_c._hx_AnonObject(fileName = "TestGADT.hx" ,lineNumber = 41 ,className = "unit.TestGADT" ,methodName = "testBasic" ))
		
		self.eq(s2, True, _hx_c._hx_AnonObject(fileName = "TestGADT.hx" ,lineNumber = 42 ,className = "unit.TestGADT" ,methodName = "testBasic" ))
	





unit_TestGADT._hx_class = unit_TestGADT
unit_TestGADT._hx_class_name = "unit.TestGADT"
_hx_classes["unit.TestGADT"] = unit_TestGADT
_hx_c.unit_TestGADT = unit_TestGADT
unit_TestGADT._hx_fields = []
unit_TestGADT._hx_props = []
unit_TestGADT._hx_methods = ["testBasic"]
unit_TestGADT._hx_statics = ["evalConst","evalBinop","eval"]
unit_TestGADT._hx_interfaces = []
unit_TestGADT._hx_super = unit_Test
unit_TestGADT._hx_meta = _hx_c._hx_AnonObject(obj=_hx_c._hx_AnonObject(),statics=_hx_c._hx_AnonObject(),fields=_hx_c._hx_AnonObject())
def unit_TestGADT_hx_empty_init (_hx_o):
	pass
unit_TestGADT._hx_empty_init = unit_TestGADT_hx_empty_init
# print unit.TestGeneric.MyGeneric
class unit_MyGeneric:


	def __init__(self,t):
		self.t = None
		self.t = t
	
	# var t




unit_MyGeneric._hx_class = unit_MyGeneric
unit_MyGeneric._hx_class_name = "unit.MyGeneric"
_hx_classes["unit.MyGeneric"] = unit_MyGeneric
_hx_c.unit_MyGeneric = unit_MyGeneric
unit_MyGeneric._hx_fields = ["t"]
unit_MyGeneric._hx_props = []
unit_MyGeneric._hx_methods = []
unit_MyGeneric._hx_statics = []
unit_MyGeneric._hx_interfaces = []
unit_MyGeneric._hx_meta = _hx_c._hx_AnonObject(obj=_hx_c._hx_AnonObject(),statics=_hx_c._hx_AnonObject(),fields=_hx_c._hx_AnonObject())
def unit_MyGeneric_hx_empty_init (_hx_o):
	_hx_o.t = None
unit_MyGeneric._hx_empty_init = unit_MyGeneric_hx_empty_init
# print unit.TestGeneric.T
class unit_MyGeneric2_T:

	pass




unit_MyGeneric2_T._hx_class = unit_MyGeneric2_T
unit_MyGeneric2_T._hx_class_name = "unit.MyGeneric2.T"
_hx_classes["unit.MyGeneric2.T"] = unit_MyGeneric2_T
_hx_c.unit_MyGeneric2_T = unit_MyGeneric2_T
unit_MyGeneric2_T._hx_fields = []
unit_MyGeneric2_T._hx_props = []
unit_MyGeneric2_T._hx_methods = []
unit_MyGeneric2_T._hx_statics = []
unit_MyGeneric2_T._hx_interfaces = []
unit_MyGeneric2_T._hx_meta = _hx_c._hx_AnonObject(obj=_hx_c._hx_AnonObject(),statics=_hx_c._hx_AnonObject(),fields=_hx_c._hx_AnonObject())
def unit_MyGeneric2_T_hx_empty_init (_hx_o):
	pass
unit_MyGeneric2_T._hx_empty_init = unit_MyGeneric2_T_hx_empty_init
# print unit.TestGeneric.MyGeneric2
class unit_MyGeneric2(unit_MyGeneric2_T):

	pass




unit_MyGeneric2._hx_class = unit_MyGeneric2
unit_MyGeneric2._hx_class_name = "unit.MyGeneric2"
_hx_classes["unit.MyGeneric2"] = unit_MyGeneric2
_hx_c.unit_MyGeneric2 = unit_MyGeneric2
unit_MyGeneric2._hx_fields = []
unit_MyGeneric2._hx_props = []
unit_MyGeneric2._hx_methods = []
unit_MyGeneric2._hx_statics = []
unit_MyGeneric2._hx_interfaces = []
unit_MyGeneric2._hx_super = unit_MyGeneric2_T
unit_MyGeneric2._hx_meta = _hx_c._hx_AnonObject(obj=_hx_c._hx_AnonObject(),statics=_hx_c._hx_AnonObject(),fields=_hx_c._hx_AnonObject())
def unit_MyGeneric2_hx_empty_init (_hx_o):
	pass
unit_MyGeneric2._hx_empty_init = unit_MyGeneric2_hx_empty_init
# print unit.TestGeneric.MyRandomEmptyClass
class unit_MyRandomEmptyClass:

	pass




unit_MyRandomEmptyClass._hx_class = unit_MyRandomEmptyClass
unit_MyRandomEmptyClass._hx_class_name = "unit.MyRandomEmptyClass"
_hx_classes["unit.MyRandomEmptyClass"] = unit_MyRandomEmptyClass
_hx_c.unit_MyRandomEmptyClass = unit_MyRandomEmptyClass
unit_MyRandomEmptyClass._hx_fields = []
unit_MyRandomEmptyClass._hx_props = []
unit_MyRandomEmptyClass._hx_methods = []
unit_MyRandomEmptyClass._hx_statics = []
unit_MyRandomEmptyClass._hx_interfaces = []
unit_MyRandomEmptyClass._hx_meta = _hx_c._hx_AnonObject(obj=_hx_c._hx_AnonObject(),statics=_hx_c._hx_AnonObject(),fields=_hx_c._hx_AnonObject())
def unit_MyRandomEmptyClass_hx_empty_init (_hx_o):
	pass
unit_MyRandomEmptyClass._hx_empty_init = unit_MyRandomEmptyClass_hx_empty_init
# print unit.TestGeneric.RBNode
class unit_RBNode:

	# var rbLeft
	# var rbRight
	pass




unit_RBNode._hx_class = unit_RBNode
unit_RBNode._hx_class_name = "unit.RBNode"
_hx_classes["unit.RBNode"] = unit_RBNode
_hx_c.unit_RBNode = unit_RBNode
unit_RBNode._hx_fields = ["rbLeft","rbRight"]
unit_RBNode._hx_props = []
unit_RBNode._hx_methods = []
unit_RBNode._hx_statics = []
unit_RBNode._hx_interfaces = []
unit_RBNode._hx_meta = _hx_c._hx_AnonObject(obj=_hx_c._hx_AnonObject(),statics=_hx_c._hx_AnonObject(),fields=_hx_c._hx_AnonObject())
def unit_RBNode_hx_empty_init (_hx_o):
	_hx_o.rbLeft = None
	_hx_o.rbRight = None
unit_RBNode._hx_empty_init = unit_RBNode_hx_empty_init
# print unit.TestGeneric.RBTree
class unit_RBTree:


	def __init__(self):
		self.root = None
		None
	
	# var root




unit_RBTree._hx_class = unit_RBTree
unit_RBTree._hx_class_name = "unit.RBTree"
_hx_classes["unit.RBTree"] = unit_RBTree
_hx_c.unit_RBTree = unit_RBTree
unit_RBTree._hx_fields = ["root"]
unit_RBTree._hx_props = []
unit_RBTree._hx_methods = []
unit_RBTree._hx_statics = []
unit_RBTree._hx_interfaces = []
unit_RBTree._hx_meta = _hx_c._hx_AnonObject(obj=_hx_c._hx_AnonObject(),statics=_hx_c._hx_AnonObject(),fields=_hx_c._hx_AnonObject())
def unit_RBTree_hx_empty_init (_hx_o):
	_hx_o.root = None
unit_RBTree._hx_empty_init = unit_RBTree_hx_empty_init
# print unit.TestGeneric.MyData
class unit_MyData(unit_RBNode_unit_MyData):


	def __init__(self,id):
		self.id = None
		self.id = id
	
	# var id




unit_MyData._hx_class = unit_MyData
unit_MyData._hx_class_name = "unit.MyData"
_hx_classes["unit.MyData"] = unit_MyData
_hx_c.unit_MyData = unit_MyData
unit_MyData._hx_fields = ["id"]
unit_MyData._hx_props = []
unit_MyData._hx_methods = []
unit_MyData._hx_statics = []
unit_MyData._hx_interfaces = []
unit_MyData._hx_super = unit_RBNode_unit_MyData
unit_MyData._hx_meta = _hx_c._hx_AnonObject(obj=_hx_c._hx_AnonObject(),statics=_hx_c._hx_AnonObject(),fields=_hx_c._hx_AnonObject())
def unit_MyData_hx_empty_init (_hx_o):
	_hx_o.id = None
unit_MyData._hx_empty_init = unit_MyData_hx_empty_init
# print unit.TestGeneric.TestGeneric
class unit_TestGeneric(unit_Test):


	def __init__(self):
		super().__init__()
	def testBasic(self):
		mg = _hx_c.unit_MyGeneric_Int(12)
		self.eq(mg.t, 12, _hx_c._hx_AnonObject(fileName = "TestGeneric.hx" ,lineNumber = 45 ,className = "unit.TestGeneric" ,methodName = "testBasic" ))
		self.t(_hx_c.Std._hx_is(mg.t, _hx_c.Int), _hx_c._hx_AnonObject(fileName = "TestGeneric.hx" ,lineNumber = 46 ,className = "unit.TestGeneric" ,methodName = "testBasic" ))
		mg1 = _hx_c.unit_MyGeneric_String("12")
		self.eq(mg1.t, "12", _hx_c._hx_AnonObject(fileName = "TestGeneric.hx" ,lineNumber = 49 ,className = "unit.TestGeneric" ,methodName = "testBasic" ))
		self.t(_hx_c.Std._hx_is(mg1.t, _hx_c.String), _hx_c._hx_AnonObject(fileName = "TestGeneric.hx" ,lineNumber = 50 ,className = "unit.TestGeneric" ,methodName = "testBasic" ))
	

	def testExtends(self):
		mg = _hx_c.unit_MyGeneric2_unit_MyRandomClass("foo")
		self.eq("foo", mg.s, _hx_c._hx_AnonObject(fileName = "TestGeneric.hx" ,lineNumber = 64 ,className = "unit.TestGeneric" ,methodName = "testExtends" ))
		mg1 = _hx_c.unit_MyGeneric2_unit_MyGeneric_unit_MyRandomClass(_hx_c.unit_MyRandomClass("foo"))
		self.eq("foo", mg1.t.s, _hx_c._hx_AnonObject(fileName = "TestGeneric.hx" ,lineNumber = 67 ,className = "unit.TestGeneric" ,methodName = "testExtends" ))
	

	def testConstraints(self):
		n = _hx_c.unit_RBTree_unit_MyData()
		n.root = _hx_c.unit_MyData(1)
		n.root.rbLeft = _hx_c.unit_MyData(2)
		n.root.rbRight = _hx_c.unit_MyData(3)
	





unit_TestGeneric._hx_class = unit_TestGeneric
unit_TestGeneric._hx_class_name = "unit.TestGeneric"
_hx_classes["unit.TestGeneric"] = unit_TestGeneric
_hx_c.unit_TestGeneric = unit_TestGeneric
unit_TestGeneric._hx_fields = []
unit_TestGeneric._hx_props = []
unit_TestGeneric._hx_methods = ["testBasic","testExtends","testConstraints"]
unit_TestGeneric._hx_statics = []
unit_TestGeneric._hx_interfaces = []
unit_TestGeneric._hx_super = unit_Test
unit_TestGeneric._hx_meta = _hx_c._hx_AnonObject(obj=_hx_c._hx_AnonObject(),statics=_hx_c._hx_AnonObject(),fields=_hx_c._hx_AnonObject())
def unit_TestGeneric_hx_empty_init (_hx_o):
	pass
unit_TestGeneric._hx_empty_init = unit_TestGeneric_hx_empty_init
# print unit.TestIO.TestIO
class unit_TestIO(unit_Test):


	def __init__(self):
		super().__init__()
	def test(self):
		self.check(False)
		self.check(True)
	

	def excv(self,f,e,pos = None):
		if pos is None:
			pos = None
		
		try:
			f()
			self.eq(None, e, pos)
		
		except Exception as _hx_e:
			_hx_e1 = _hx_e.val if isinstance(_hx_e, _HxException) else _hx_e
			if True:
				e2 = _hx_e1
				self.eq(e2, e, pos)
			else:
				raise _hx_e
	

	def check(self,endian):
		self.infos("endian = " + Std.string(_hx_c.Std.string(endian)))
		b = _hx_c.haxe_io_Bytes.ofString("ABCééé\r\n\t")
		self.eq(b.length, 12, _hx_c._hx_AnonObject(fileName = "TestIO.hx" ,lineNumber = 24 ,className = "unit.TestIO" ,methodName = "check" ))
		_hx_array_set(b.b,1, 0 & 255)
		o = _hx_c.haxe_io_BytesOutput()
		self.eq(_hx_builtin.len(o.b.b), 0, _hx_c._hx_AnonObject(fileName = "TestIO.hx" ,lineNumber = 28 ,className = "unit.TestIO" ,methodName = "check" ))
		o.set_bigEndian(endian)
		self.eq(o.bigEndian, endian, _hx_c._hx_AnonObject(fileName = "TestIO.hx" ,lineNumber = 31 ,className = "unit.TestIO" ,methodName = "check" ))
		o.prepare(4)
		o.writeByte(0)
		o.writeByte(1)
		o.writeByte(2)
		o.writeByte(3)
		self.eq(_hx_builtin.len(o.b.b), 4, _hx_c._hx_AnonObject(fileName = "TestIO.hx" ,lineNumber = 38 ,className = "unit.TestIO" ,methodName = "check" ))
		o.write(b)
		o.writeByte(55)
		o.writeBytes(b, 3, 5)
		def _hx_local_0():
			o.writeBytes(b, -1, 5)
		self.excv(_hx_local_0, _hx_c.haxe_io_Error.OutsideBounds, _hx_c._hx_AnonObject(fileName = "TestIO.hx" ,lineNumber = 43 ,className = "unit.TestIO" ,methodName = "check" ))
		def _hx_local_1():
			o.writeBytes(b, 3, -1)
		self.excv(_hx_local_1, _hx_c.haxe_io_Error.OutsideBounds, _hx_c._hx_AnonObject(fileName = "TestIO.hx" ,lineNumber = 44 ,className = "unit.TestIO" ,methodName = "check" ))
		def _hx_local_2():
			o.writeBytes(b, 3, 20)
		self.excv(_hx_local_2, _hx_c.haxe_io_Error.OutsideBounds, _hx_c._hx_AnonObject(fileName = "TestIO.hx" ,lineNumber = 45 ,className = "unit.TestIO" ,methodName = "check" ))
		o.writeByte(98)
		o.writeDouble(1.23)
		o.writeDouble(-1.23)
		o.writeDouble(0.0)
		o.writeDouble(-0.0)
		o.writeFloat(1.2e10)
		o.writeFloat(-1.2e10)
		o.writeFloat(0.0)
		o.writeFloat(-0.0)
		o.writeByte(99)
		str = "Héllo World !"
		o.writeString(str)
		self.eq(_hx_builtin.len(o.b.b), 86, _hx_c._hx_AnonObject(fileName = "TestIO.hx" ,lineNumber = 61 ,className = "unit.TestIO" ,methodName = "check" ))
		o.writeInt16(-12345)
		def _hx_local_3():
			o.writeInt16(1 << 15)
		self.excv(_hx_local_3, _hx_c.haxe_io_Error.Overflow, _hx_c._hx_AnonObject(fileName = "TestIO.hx" ,lineNumber = 64 ,className = "unit.TestIO" ,methodName = "check" ))
		def _hx_local_4():
			o.writeInt16(-((1 << 15) + 1))
		self.excv(_hx_local_4, _hx_c.haxe_io_Error.Overflow, _hx_c._hx_AnonObject(fileName = "TestIO.hx" ,lineNumber = 65 ,className = "unit.TestIO" ,methodName = "check" ))
		o.writeInt24(-1234567)
		def _hx_local_5():
			o.writeInt16(1 << 24)
		self.excv(_hx_local_5, _hx_c.haxe_io_Error.Overflow, _hx_c._hx_AnonObject(fileName = "TestIO.hx" ,lineNumber = 67 ,className = "unit.TestIO" ,methodName = "check" ))
		def _hx_local_6():
			o.writeInt16(-((1 << 24) + 1))
		self.excv(_hx_local_6, _hx_c.haxe_io_Error.Overflow, _hx_c._hx_AnonObject(fileName = "TestIO.hx" ,lineNumber = 68 ,className = "unit.TestIO" ,methodName = "check" ))
		o.writeInt32(-123456789)
		o.writeInt8(-5)
		def _hx_local_7():
			o.writeInt8(128)
		self.excv(_hx_local_7, _hx_c.haxe_io_Error.Overflow, _hx_c._hx_AnonObject(fileName = "TestIO.hx" ,lineNumber = 72 ,className = "unit.TestIO" ,methodName = "check" ))
		def _hx_local_8():
			o.writeInt8(-129)
		self.excv(_hx_local_8, _hx_c.haxe_io_Error.Overflow, _hx_c._hx_AnonObject(fileName = "TestIO.hx" ,lineNumber = 73 ,className = "unit.TestIO" ,methodName = "check" ))
		o.writeUInt16(65365)
		def _hx_local_9():
			o.writeUInt16(1 << 16)
		self.excv(_hx_local_9, _hx_c.haxe_io_Error.Overflow, _hx_c._hx_AnonObject(fileName = "TestIO.hx" ,lineNumber = 75 ,className = "unit.TestIO" ,methodName = "check" ))
		def _hx_local_10():
			o.writeUInt16(-1)
		self.excv(_hx_local_10, _hx_c.haxe_io_Error.Overflow, _hx_c._hx_AnonObject(fileName = "TestIO.hx" ,lineNumber = 76 ,className = "unit.TestIO" ,methodName = "check" ))
		o.writeUInt24(16711918)
		def _hx_local_11():
			o.writeUInt24(1 << 24)
		self.excv(_hx_local_11, _hx_c.haxe_io_Error.Overflow, _hx_c._hx_AnonObject(fileName = "TestIO.hx" ,lineNumber = 78 ,className = "unit.TestIO" ,methodName = "check" ))
		def _hx_local_12():
			o.writeUInt24(-1)
		self.excv(_hx_local_12, _hx_c.haxe_io_Error.Overflow, _hx_c._hx_AnonObject(fileName = "TestIO.hx" ,lineNumber = 79 ,className = "unit.TestIO" ,methodName = "check" ))
		o.writeInt32(1068153804)
		o.writeInt32(-1593839907)
		o.writeInt32(-1056968995)
		i = _hx_c.haxe_io_BytesInput(o.getBytes())
		i.set_bigEndian(endian)
		self.eq(i.pos, 0, _hx_c._hx_AnonObject(fileName = "TestIO.hx" ,lineNumber = 87 ,className = "unit.TestIO" ,methodName = "check" ))
		self.eq(i.totlen, 113, _hx_c._hx_AnonObject(fileName = "TestIO.hx" ,lineNumber = 88 ,className = "unit.TestIO" ,methodName = "check" ))
		self.eq(i.readInt32(), 66051 if (endian) else 50462976, _hx_c._hx_AnonObject(fileName = "TestIO.hx" ,lineNumber = 90 ,className = "unit.TestIO" ,methodName = "check" ))
		self.eq(i.read(b.length).compare(b), 0, _hx_c._hx_AnonObject(fileName = "TestIO.hx" ,lineNumber = 91 ,className = "unit.TestIO" ,methodName = "check" ))
		self.eq(i.readByte(), 55, _hx_c._hx_AnonObject(fileName = "TestIO.hx" ,lineNumber = 92 ,className = "unit.TestIO" ,methodName = "check" ))
		self.eq(i.read(5).compare(b.sub(3, 5)), 0, _hx_c._hx_AnonObject(fileName = "TestIO.hx" ,lineNumber = 93 ,className = "unit.TestIO" ,methodName = "check" ))
		self.eq(i.readByte(), 98, _hx_c._hx_AnonObject(fileName = "TestIO.hx" ,lineNumber = 95 ,className = "unit.TestIO" ,methodName = "check" ))
		self.eq(i.readDouble(), 1.23, _hx_c._hx_AnonObject(fileName = "TestIO.hx" ,lineNumber = 96 ,className = "unit.TestIO" ,methodName = "check" ))
		self.eq(i.readDouble(), -1.23, _hx_c._hx_AnonObject(fileName = "TestIO.hx" ,lineNumber = 97 ,className = "unit.TestIO" ,methodName = "check" ))
		self.eq(i.readDouble(), 0.0, _hx_c._hx_AnonObject(fileName = "TestIO.hx" ,lineNumber = 98 ,className = "unit.TestIO" ,methodName = "check" ))
		self.eq(i.readDouble(), -0.0, _hx_c._hx_AnonObject(fileName = "TestIO.hx" ,lineNumber = 99 ,className = "unit.TestIO" ,methodName = "check" ))
		self.eq(i.readFloat(), 1.2e10, _hx_c._hx_AnonObject(fileName = "TestIO.hx" ,lineNumber = 100 ,className = "unit.TestIO" ,methodName = "check" ))
		self.eq(i.readFloat(), -1.2e10, _hx_c._hx_AnonObject(fileName = "TestIO.hx" ,lineNumber = 101 ,className = "unit.TestIO" ,methodName = "check" ))
		self.eq(i.readFloat(), 0.0, _hx_c._hx_AnonObject(fileName = "TestIO.hx" ,lineNumber = 102 ,className = "unit.TestIO" ,methodName = "check" ))
		self.eq(i.readFloat(), -0.0, _hx_c._hx_AnonObject(fileName = "TestIO.hx" ,lineNumber = 103 ,className = "unit.TestIO" ,methodName = "check" ))
		self.eq(i.readByte(), 99, _hx_c._hx_AnonObject(fileName = "TestIO.hx" ,lineNumber = 104 ,className = "unit.TestIO" ,methodName = "check" ))
		self.eq(i.readString(_hx_c.haxe_io_Bytes.ofString(str).length), str, _hx_c._hx_AnonObject(fileName = "TestIO.hx" ,lineNumber = 106 ,className = "unit.TestIO" ,methodName = "check" ))
		self.eq(i.readInt16(), -12345, _hx_c._hx_AnonObject(fileName = "TestIO.hx" ,lineNumber = 108 ,className = "unit.TestIO" ,methodName = "check" ))
		self.eq(i.readInt24(), -1234567, _hx_c._hx_AnonObject(fileName = "TestIO.hx" ,lineNumber = 109 ,className = "unit.TestIO" ,methodName = "check" ))
		self.eq(i.readInt32(), -123456789, _hx_c._hx_AnonObject(fileName = "TestIO.hx" ,lineNumber = 110 ,className = "unit.TestIO" ,methodName = "check" ))
		self.eq(i.readInt8(), -5, _hx_c._hx_AnonObject(fileName = "TestIO.hx" ,lineNumber = 111 ,className = "unit.TestIO" ,methodName = "check" ))
		self.eq(i.readUInt16(), 65365, _hx_c._hx_AnonObject(fileName = "TestIO.hx" ,lineNumber = 112 ,className = "unit.TestIO" ,methodName = "check" ))
		self.eq(i.readUInt24(), 16711918, _hx_c._hx_AnonObject(fileName = "TestIO.hx" ,lineNumber = 113 ,className = "unit.TestIO" ,methodName = "check" ))
		self.eq(i.readInt32(), 1068153804, _hx_c._hx_AnonObject(fileName = "TestIO.hx" ,lineNumber = 114 ,className = "unit.TestIO" ,methodName = "check" ))
		self.eq(i.readInt32(), -1593839907, _hx_c._hx_AnonObject(fileName = "TestIO.hx" ,lineNumber = 116 ,className = "unit.TestIO" ,methodName = "check" ))
		self.eq(i.readInt32(), -1056968995, _hx_c._hx_AnonObject(fileName = "TestIO.hx" ,lineNumber = 117 ,className = "unit.TestIO" ,methodName = "check" ))
		self.eq(i.pos, i.totlen, _hx_c._hx_AnonObject(fileName = "TestIO.hx" ,lineNumber = 119 ,className = "unit.TestIO" ,methodName = "check" ))
	

	def testBytesBounds(self):
		b = _hx_c.haxe_io_Bytes.ofString("ABCDEFGHIJ")
		tmp = _hx_c.haxe_io_Bytes.alloc(7)
		i = _hx_c.haxe_io_BytesInput(b)
		def _hx_local_0():
			i.readBytes(tmp, 1, 7)
		self.excv(_hx_local_0, _hx_c.haxe_io_Error.OutsideBounds, _hx_c._hx_AnonObject(fileName = "TestIO.hx" ,lineNumber = 126 ,className = "unit.TestIO" ,methodName = "testBytesBounds" ))
		def _hx_local_1():
			i.readBytes(tmp, -1, 7)
		self.excv(_hx_local_1, _hx_c.haxe_io_Error.OutsideBounds, _hx_c._hx_AnonObject(fileName = "TestIO.hx" ,lineNumber = 127 ,className = "unit.TestIO" ,methodName = "testBytesBounds" ))
		def _hx_local_2():
			i.readBytes(tmp, 8, 1)
		self.excv(_hx_local_2, _hx_c.haxe_io_Error.OutsideBounds, _hx_c._hx_AnonObject(fileName = "TestIO.hx" ,lineNumber = 128 ,className = "unit.TestIO" ,methodName = "testBytesBounds" ))
		self.eq(i.readBytes(tmp, 0, 7), 7, _hx_c._hx_AnonObject(fileName = "TestIO.hx" ,lineNumber = 129 ,className = "unit.TestIO" ,methodName = "testBytesBounds" ))
		self.eq(_hx_array_get(tmp.b,0), 65, _hx_c._hx_AnonObject(fileName = "TestIO.hx" ,lineNumber = 130 ,className = "unit.TestIO" ,methodName = "testBytesBounds" ))
		self.eq(_hx_array_get(tmp.b,6), 71, _hx_c._hx_AnonObject(fileName = "TestIO.hx" ,lineNumber = 131 ,className = "unit.TestIO" ,methodName = "testBytesBounds" ))
		self.eq(i.readBytes(tmp, 0, 7), 3, _hx_c._hx_AnonObject(fileName = "TestIO.hx" ,lineNumber = 132 ,className = "unit.TestIO" ,methodName = "testBytesBounds" ))
		self.eq(_hx_array_get(tmp.b,0), 72, _hx_c._hx_AnonObject(fileName = "TestIO.hx" ,lineNumber = 133 ,className = "unit.TestIO" ,methodName = "testBytesBounds" ))
		self.eq(_hx_array_get(tmp.b,2), 74, _hx_c._hx_AnonObject(fileName = "TestIO.hx" ,lineNumber = 134 ,className = "unit.TestIO" ,methodName = "testBytesBounds" ))
		self.eq(_hx_array_get(tmp.b,3), 68, _hx_c._hx_AnonObject(fileName = "TestIO.hx" ,lineNumber = 135 ,className = "unit.TestIO" ,methodName = "testBytesBounds" ))
		def _hx_local_3():
			i.readBytes(tmp, 0, 7)
		self.exc(_hx_local_3, _hx_c._hx_AnonObject(fileName = "TestIO.hx" ,lineNumber = 136 ,className = "unit.TestIO" ,methodName = "testBytesBounds" ))
	





unit_TestIO._hx_class = unit_TestIO
unit_TestIO._hx_class_name = "unit.TestIO"
_hx_classes["unit.TestIO"] = unit_TestIO
_hx_c.unit_TestIO = unit_TestIO
unit_TestIO._hx_fields = []
unit_TestIO._hx_props = []
unit_TestIO._hx_methods = ["test","excv","check","testBytesBounds"]
unit_TestIO._hx_statics = []
unit_TestIO._hx_interfaces = []
unit_TestIO._hx_super = unit_Test
unit_TestIO._hx_meta = _hx_c._hx_AnonObject(obj=_hx_c._hx_AnonObject(),statics=_hx_c._hx_AnonObject(),fields=_hx_c._hx_AnonObject())
def unit_TestIO_hx_empty_init (_hx_o):
	pass
unit_TestIO._hx_empty_init = unit_TestIO_hx_empty_init
# print unit.TestInt64.TestInt64
class unit_TestInt64(unit_Test):


	def __init__(self):
		super().__init__()
	def test(self):
		self.eq(_hx_c.haxe_Int64.toInt(_hx_c.haxe_Int64(1 >> 31, 1)), 1, _hx_c._hx_AnonObject(fileName = "TestInt64.hx" ,lineNumber = 7 ,className = "unit.TestInt64" ,methodName = "test" ))
		def _hx_local_0():
			x = -1
			return _hx_c.haxe_Int64(x >> 31, x)
		
		self.eq(_hx_c.haxe_Int64.toInt(_hx_local_0()), -1, _hx_c._hx_AnonObject(fileName = "TestInt64.hx" ,lineNumber = 8 ,className = "unit.TestInt64" ,methodName = "test" ))
		self.eq(_hx_c.Std.string(_hx_c.haxe_Int64(156 >> 31, 156)), "156", _hx_c._hx_AnonObject(fileName = "TestInt64.hx" ,lineNumber = 9 ,className = "unit.TestInt64" ,methodName = "test" ))
		v = None
		x1 = 1 << 20
		v = _hx_c.haxe_Int64(x1 >> 31, x1)
		
		self.eq(_hx_c.Std.string(v), "1048576", _hx_c._hx_AnonObject(fileName = "TestInt64.hx" ,lineNumber = 12 ,className = "unit.TestInt64" ,methodName = "test" ))
		p40 = None
		if (20 & 63) == 0:
			p40 = v
		elif (20 & 63) < 32:
			def _hx_local_1():
				n = _hx_c.haxe_Int64.i32(32 - (20 & 63))
				return _hx_rshift(v.low, n)
			
			p40 = _hx_c.haxe_Int64(v.high << 20 | _hx_local_1(), v.low << 20)
		
		else:
			p40 = _hx_c.haxe_Int64(v.low << _hx_c.haxe_Int64.i32(20 - 32), 0)
		self.eq(_hx_c.haxe_Int64.getLow(p40), 0, _hx_c._hx_AnonObject(fileName = "TestInt64.hx" ,lineNumber = 15 ,className = "unit.TestInt64" ,methodName = "test" ))
		self.eq(_hx_c.haxe_Int64.getHigh(p40), 256, _hx_c._hx_AnonObject(fileName = "TestInt64.hx" ,lineNumber = 16 ,className = "unit.TestInt64" ,methodName = "test" ))
		self.eq(_hx_c.Std.string(p40), "1099511627776", _hx_c._hx_AnonObject(fileName = "TestInt64.hx" ,lineNumber = 17 ,className = "unit.TestInt64" ,methodName = "test" ))
		def _hx_local_2():
			a = None
			a1 = _hx_c.haxe_Int64(1 >> 31, 1)
			if (0 & 63) == 0:
				a = a1
			elif (0 & 63) < 32:
				def _hx_local_3():
					n1 = _hx_c.haxe_Int64.i32(32 - (0 & 63))
					return _hx_rshift(a1.low, n1)
				
				a = _hx_c.haxe_Int64(a1.high << 0 | _hx_local_3(), a1.low << 0)
			
			else:
				a = _hx_c.haxe_Int64(a1.low << _hx_c.haxe_Int64.i32(0 - 32), 0)
			
			return a.toString()
		
		self.eq(_hx_local_2(), "1", _hx_c._hx_AnonObject(fileName = "TestInt64.hx" ,lineNumber = 19 ,className = "unit.TestInt64" ,methodName = "test" ))
		def _hx_local_4():
			a2 = _hx_c.haxe_Int64(0 >> 31, 0)
			return a2.toString()
		
		self.eq(_hx_local_4(), "0", _hx_c._hx_AnonObject(fileName = "TestInt64.hx" ,lineNumber = 21 ,className = "unit.TestInt64" ,methodName = "test" ))
	

	def testMath(self):
		a = _hx_c.haxe_Int64(0, 597364243)
		b = _hx_c.haxe_Int64(0, 957955355)
		c = _hx_c.haxe_Int64.mul(a, b)
		self.eq(c.toString(), "572248275467371265", _hx_c._hx_AnonObject(fileName = "TestInt64.hx" ,lineNumber = 28 ,className = "unit.TestInt64" ,methodName = "testMath" ))
		a1 = _hx_c.haxe_Int64(0, -738604556)
		b1 = _hx_c.haxe_Int64(0, -932853915)
		c1 = _hx_c.haxe_Int64.mul(a1, b1)
		self.eq(c1.toString(), "-6489849317865727676", _hx_c._hx_AnonObject(fileName = "TestInt64.hx" ,lineNumber = 34 ,className = "unit.TestInt64" ,methodName = "testMath" ))
		a2 = _hx_c.haxe_Int64(0, -1640561919)
		b2 = _hx_c.haxe_Int64(0, -1336344576)
		c2 = _hx_c.haxe_Int64.add(a2, b2)
		self.eq(c2.toString(), "5613028097", _hx_c._hx_AnonObject(fileName = "TestInt64.hx" ,lineNumber = 39 ,className = "unit.TestInt64" ,methodName = "testMath" ))
		a3 = _hx_c.haxe_Int64(-910118, -1758557277)
		b3 = _hx_c.haxe_Int64(10011291, -2130706431)
		c3 = _hx_c.haxe_Int64.mul(a3, b3)
		expected = _hx_c.haxe_Int64(-571956504, -1171354717)
		def _hx_local_0():
			v = _hx_c.haxe_Int64.i32(expected.high - c3.high)
			return v if (v != 0) else _hx_c.haxe_Int64.uicompare(expected.low, c3.low)
		
		self.eq(_hx_local_0(), 0, _hx_c._hx_AnonObject(fileName = "TestInt64.hx" ,lineNumber = 45 ,className = "unit.TestInt64" ,methodName = "testMath" ))
	





unit_TestInt64._hx_class = unit_TestInt64
unit_TestInt64._hx_class_name = "unit.TestInt64"
_hx_classes["unit.TestInt64"] = unit_TestInt64
_hx_c.unit_TestInt64 = unit_TestInt64
unit_TestInt64._hx_fields = []
unit_TestInt64._hx_props = []
unit_TestInt64._hx_methods = ["test","testMath"]
unit_TestInt64._hx_statics = []
unit_TestInt64._hx_interfaces = []
unit_TestInt64._hx_super = unit_Test
unit_TestInt64._hx_meta = _hx_c._hx_AnonObject(obj=_hx_c._hx_AnonObject(),statics=_hx_c._hx_AnonObject(),fields=_hx_c._hx_AnonObject())
def unit_TestInt64_hx_empty_init (_hx_o):
	pass
unit_TestInt64._hx_empty_init = unit_TestInt64_hx_empty_init
# print unit.TestLocals.TestLocals
class unit_TestLocals(unit_Test):


	def __init__(self):
		super().__init__()
	def testIncrDecr(self):
		i = 5
		def _hx_local_1():
			nonlocal i
			_hx_local_0 = i
			i = i + 1
			return _hx_local_0
			
		
		self.eq(_hx_local_1(), 5, _hx_c._hx_AnonObject(fileName = "TestLocals.hx" ,lineNumber = 7 ,className = "unit.TestLocals" ,methodName = "testIncrDecr" ))
		self.eq(i, 6, _hx_c._hx_AnonObject(fileName = "TestLocals.hx" ,lineNumber = 8 ,className = "unit.TestLocals" ,methodName = "testIncrDecr" ))
		def _hx_local_3():
			nonlocal i
			_hx_local_2 = i
			i = i - 1
			return _hx_local_2
			
		
		self.eq(_hx_local_3(), 6, _hx_c._hx_AnonObject(fileName = "TestLocals.hx" ,lineNumber = 9 ,className = "unit.TestLocals" ,methodName = "testIncrDecr" ))
		self.eq(i, 5, _hx_c._hx_AnonObject(fileName = "TestLocals.hx" ,lineNumber = 10 ,className = "unit.TestLocals" ,methodName = "testIncrDecr" ))
		def _hx_local_4():
			nonlocal i
			i = i + 1
			return i
			
		
		self.eq(_hx_local_4(), 6, _hx_c._hx_AnonObject(fileName = "TestLocals.hx" ,lineNumber = 11 ,className = "unit.TestLocals" ,methodName = "testIncrDecr" ))
		self.eq(i, 6, _hx_c._hx_AnonObject(fileName = "TestLocals.hx" ,lineNumber = 12 ,className = "unit.TestLocals" ,methodName = "testIncrDecr" ))
		def _hx_local_5():
			nonlocal i
			i = i - 1
			return i
			
		
		self.eq(_hx_local_5(), 5, _hx_c._hx_AnonObject(fileName = "TestLocals.hx" ,lineNumber = 13 ,className = "unit.TestLocals" ,methodName = "testIncrDecr" ))
		self.eq(i, 5, _hx_c._hx_AnonObject(fileName = "TestLocals.hx" ,lineNumber = 14 ,className = "unit.TestLocals" ,methodName = "testIncrDecr" ))
	

	def testScope(self):
		x = 0
		self.eq(x, 0, _hx_c._hx_AnonObject(fileName = "TestLocals.hx" ,lineNumber = 19 ,className = "unit.TestLocals" ,methodName = "testScope" ))
		x1 = "hello"
		self.eq(x1, "hello", _hx_c._hx_AnonObject(fileName = "TestLocals.hx" ,lineNumber = 23 ,className = "unit.TestLocals" ,methodName = "testScope" ))
		x2 = ""
		self.eq(x2, "", _hx_c._hx_AnonObject(fileName = "TestLocals.hx" ,lineNumber = 26 ,className = "unit.TestLocals" ,methodName = "testScope" ))
		
		self.eq(x1, "hello", _hx_c._hx_AnonObject(fileName = "TestLocals.hx" ,lineNumber = 28 ,className = "unit.TestLocals" ,methodName = "testScope" ))
		
		self.eq(x, 0, _hx_c._hx_AnonObject(fileName = "TestLocals.hx" ,lineNumber = 30 ,className = "unit.TestLocals" ,methodName = "testScope" ))
		flag = True
		if flag:
			x3 = "hello"
			self.eq(x3, "hello", _hx_c._hx_AnonObject(fileName = "TestLocals.hx" ,lineNumber = 35 ,className = "unit.TestLocals" ,methodName = "testScope" ))
		
		
		self.eq(x, 0, _hx_c._hx_AnonObject(fileName = "TestLocals.hx" ,lineNumber = 37 ,className = "unit.TestLocals" ,methodName = "testScope" ))
		_g = 0
		_g1 = ["hello"]
		while _g < _hx_builtin.len(_g1):
			x4 = _hx_array_get(_g1,_g)
			_g = _g + 1
			self.eq(x4, "hello", _hx_c._hx_AnonObject(fileName = "TestLocals.hx" ,lineNumber = 40 ,className = "unit.TestLocals" ,methodName = "testScope" ))
		
		
		self.eq(x, 0, _hx_c._hx_AnonObject(fileName = "TestLocals.hx" ,lineNumber = 41 ,className = "unit.TestLocals" ,methodName = "testScope" ))
		_g2 = _hx_c.unit_MyEnum.D(_hx_c.unit_MyEnum.A)
		if (_g2.index) == 3:
			x5 = _g2.params[0]
			self.eq(x5, _hx_c.unit_MyEnum.A, _hx_c._hx_AnonObject(fileName = "TestLocals.hx" ,lineNumber = 45 ,className = "unit.TestLocals" ,methodName = "testScope" ))
		
		else:
			self._hx_assert(_hx_c._hx_AnonObject(fileName = "TestLocals.hx" ,lineNumber = 47 ,className = "unit.TestLocals" ,methodName = "testScope" ))
		
		self.eq(x, 0, _hx_c._hx_AnonObject(fileName = "TestLocals.hx" ,lineNumber = 49 ,className = "unit.TestLocals" ,methodName = "testScope" ))
		try:
			raise _HxException("hello")
		except Exception as _hx_e:
			_hx_e1 = _hx_e.val if isinstance(_hx_e, _HxException) else _hx_e
			if True:
				x6 = _hx_e1
				self.eq(x6, "hello", _hx_c._hx_AnonObject(fileName = "TestLocals.hx" ,lineNumber = 54 ,className = "unit.TestLocals" ,methodName = "testScope" ))
			else:
				raise _hx_e
		self.eq(x, 0, _hx_c._hx_AnonObject(fileName = "TestLocals.hx" ,lineNumber = 56 ,className = "unit.TestLocals" ,methodName = "testScope" ))
	

	def testCapture(self):
		funs = list()
		_g = 0
		while _g < 5:
			def _hx_local_1():
				nonlocal _g
				_hx_local_0 = _g
				_g = _g + 1
				return _hx_local_0
				
			
			i = [_hx_local_1()]
			def _hx_local_3(i):
				def _hx_local_2():
					return _hx_array_get(i,0)
				return _hx_local_2
			
			funs.append((_hx_local_3)(i))
			_hx_builtin.len(funs)
		
		
		_g1 = 0
		while _g1 < 5:
			k = _g1
			_g1 = _g1 + 1
			
			self.eq(_hx_array_get(funs,k)(), k, _hx_c._hx_AnonObject(fileName = "TestLocals.hx" ,lineNumber = 65 ,className = "unit.TestLocals" ,methodName = "testCapture" ))
		
		
		funs = list()
		sum = 0
		_g2 = 0
		while _g2 < 5:
			i1 = _g2
			_g2 = _g2 + 1
			
			k1 = [0]
			def _hx_local_10(k1):
				def _hx_local_4():
					nonlocal sum
					_hx_local_5 = k1
					_hx_local_6 = 0
					_hx_local_7 = _hx_array_get(_hx_local_5,_hx_local_6)
					_hx_array_set(_hx_local_5,_hx_local_6, _hx_local_7 + 1)
					_hx_local_7
					
					sum = sum + 1
					return _hx_array_get(k1,0)
					
				
				return _hx_local_4
			
			funs.append((_hx_local_10)(k1))
			_hx_builtin.len(funs)
			
		
		
		_g3 = 0
		while _g3 < 5:
			i2 = _g3
			_g3 = _g3 + 1
			
			self.eq(_hx_array_get(funs,i2)(), 1, _hx_c._hx_AnonObject(fileName = "TestLocals.hx" ,lineNumber = 75 ,className = "unit.TestLocals" ,methodName = "testCapture" ))
		
		
		self.eq(sum, 5, _hx_c._hx_AnonObject(fileName = "TestLocals.hx" ,lineNumber = 76 ,className = "unit.TestLocals" ,methodName = "testCapture" ))
		accesses = list()
		sum1 = 0
		_g4 = 0
		while _g4 < 5:
			i3 = _g4
			_g4 = _g4 + 1
			
			j = [i3]
			def _hx_local_17(j):
				def _hx_local_11():
					nonlocal sum1
					sum1 = sum1 + _hx_array_get(j,0)
					_hx_local_13 = j
					_hx_local_14 = 0
					_hx_local_15 = _hx_array_get(_hx_local_13,_hx_local_14)
					_hx_array_set(_hx_local_13,_hx_local_14, _hx_local_15 + 1)
					_hx_local_15
					
					return _hx_array_get(j,0)
					
				
				return _hx_local_11
			
			def _hx_local_24(j):
				def _hx_local_18():
					nonlocal sum1
					_hx_local_19 = j
					_hx_local_20 = 0
					_hx_local_21 = _hx_array_get(_hx_local_19,_hx_local_20)
					_hx_array_set(_hx_local_19,_hx_local_20, _hx_local_21 - 1)
					_hx_local_21
					
					sum1 = sum1 - _hx_array_get(j,0)
					return _hx_array_get(j,0)
					
				
				return _hx_local_18
			
			accesses.append(_hx_c._hx_AnonObject(inc = (_hx_local_17)(j) ,dec = (_hx_local_24)(j) ))
			_hx_builtin.len(accesses)
			
		
		
		_g5 = 0
		while _g5 < 5:
			i4 = _g5
			_g5 = _g5 + 1
			
			a = _hx_array_get(accesses,i4)
			self.eq(a.inc(), i4 + 1, _hx_c._hx_AnonObject(fileName = "TestLocals.hx" ,lineNumber = 90 ,className = "unit.TestLocals" ,methodName = "testCapture" ))
			self.eq(sum1, i4, _hx_c._hx_AnonObject(fileName = "TestLocals.hx" ,lineNumber = 91 ,className = "unit.TestLocals" ,methodName = "testCapture" ))
			self.eq(a.dec(), i4, _hx_c._hx_AnonObject(fileName = "TestLocals.hx" ,lineNumber = 92 ,className = "unit.TestLocals" ,methodName = "testCapture" ))
			self.eq(sum1, 0, _hx_c._hx_AnonObject(fileName = "TestLocals.hx" ,lineNumber = 93 ,className = "unit.TestLocals" ,methodName = "testCapture" ))
		
		
	

	def testSubCapture(self):
		funs = list()
		_g = 0
		while _g < 5:
			def _hx_local_1():
				nonlocal _g
				_hx_local_0 = _g
				_g = _g + 1
				return _hx_local_0
				
			
			i = [_hx_local_1()]
			def _hx_local_8(i):
				def _hx_local_2():
					tmp = list()
					_g1 = 0
					while _g1 < 5:
						def _hx_local_4():
							nonlocal _g1
							_hx_local_3 = _g1
							_g1 = _g1 + 1
							return _hx_local_3
							
						
						j = [_hx_local_4()]
						def _hx_local_6(j,i):
							def _hx_local_5():
								return _hx_array_get(i,0) + _hx_array_get(j,0)
							return _hx_local_5
						
						tmp.append((_hx_local_6)(j, i))
						_hx_builtin.len(tmp)
					
					
					sum = 0
					_g11 = 0
					while _g11 < 5:
						j1 = _g11
						_g11 = _g11 + 1
						
						sum = sum + _hx_array_get(tmp,j1)()
					
					
					return sum
				
				return _hx_local_2
			
			funs.append((_hx_local_8)(i))
			_hx_builtin.len(funs)
		
		
		_g2 = 0
		while _g2 < 5:
			i1 = _g2
			_g2 = _g2 + 1
			
			self.eq(_hx_array_get(funs,i1)(), i1 * 5 + 10, _hx_c._hx_AnonObject(fileName = "TestLocals.hx" ,lineNumber = 110 ,className = "unit.TestLocals" ,methodName = "testSubCapture" ))
		
		
	

	def testParallelCapture(self):
		funs = list()
		_g = 0
		while _g < 5:
			i = _g
			_g = _g + 1
			
			if True:
				j = [i]
				def _hx_local_1(j):
					def _hx_local_0(k):
						return _hx_array_get(j,0)
					return _hx_local_0
				
				funs.append((_hx_local_1)(j))
				_hx_builtin.len(funs)
				
			
			
			if True:
				def _hx_local_3():
					def _hx_local_2(j1):
						return j1
					return _hx_local_2
				
				funs.append((_hx_local_3)())
				_hx_builtin.len(funs)
			
			
		
		
		_g1 = 0
		while _g1 < 5:
			k1 = _g1
			_g1 = _g1 + 1
			
			self.eq(_hx_array_get(funs,k1 * 2)(0), k1, _hx_c._hx_AnonObject(fileName = "TestLocals.hx" ,lineNumber = 124 ,className = "unit.TestLocals" ,methodName = "testParallelCapture" ))
			self.eq(_hx_array_get(funs,k1 * 2 + 1)(k1), k1, _hx_c._hx_AnonObject(fileName = "TestLocals.hx" ,lineNumber = 125 ,className = "unit.TestLocals" ,methodName = "testParallelCapture" ))
		
		
	

	def testPossibleBug(self):
		funs = list()
		_g = 0
		while _g < 5:
			i = _g
			_g = _g + 1
			
			def _hx_local_0(i1):
				return i1
			funs.append(_hx_local_0)
			_hx_builtin.len(funs)
		
		
		_g1 = 0
		while _g1 < 5:
			k = _g1
			_g1 = _g1 + 1
			
			self.eq(_hx_array_get(funs,k)(55), 55, _hx_c._hx_AnonObject(fileName = "TestLocals.hx" ,lineNumber = 134 ,className = "unit.TestLocals" ,methodName = "testPossibleBug" ))
		
		
	





unit_TestLocals._hx_class = unit_TestLocals
unit_TestLocals._hx_class_name = "unit.TestLocals"
_hx_classes["unit.TestLocals"] = unit_TestLocals
_hx_c.unit_TestLocals = unit_TestLocals
unit_TestLocals._hx_fields = []
unit_TestLocals._hx_props = []
unit_TestLocals._hx_methods = ["testIncrDecr","testScope","testCapture","testSubCapture","testParallelCapture","testPossibleBug"]
unit_TestLocals._hx_statics = []
unit_TestLocals._hx_interfaces = []
unit_TestLocals._hx_super = unit_Test
unit_TestLocals._hx_meta = _hx_c._hx_AnonObject(obj=_hx_c._hx_AnonObject(),statics=_hx_c._hx_AnonObject(),fields=_hx_c._hx_AnonObject())
def unit_TestLocals_hx_empty_init (_hx_o):
	pass
unit_TestLocals._hx_empty_init = unit_TestLocals_hx_empty_init
class unit_Tree(_hx_c.Enum):
	def __init__(self, t, i, p):
		super(unit_Tree,self).__init__(t, i, p)

def _unit_Tree_statics_Leaf (t):
	return unit_Tree("Leaf", 0, [t])
unit_Tree.Leaf = _unit_Tree_statics_Leaf

def _unit_Tree_statics_Node (l,r):
	return unit_Tree("Node", 1, [l,r])
unit_Tree.Node = _unit_Tree_statics_Node

unit_Tree._hx_constructs = ["Leaf","Node"]
unit_Tree._hx_class = unit_Tree
unit_Tree._hx_class_name = "unit.Tree"
_hx_classes["unit.Tree"] = unit_Tree
_hx_c.unit_Tree = unit_Tree
unit_Tree._hx_meta = _hx_c._hx_AnonObject(obj=_hx_c._hx_AnonObject(),fields=_hx_c._hx_AnonObject())
class unit_A(_hx_c.Enum):
	def __init__(self, t, i, p):
		super(unit_A,self).__init__(t, i, p)

def _unit_A_statics_TA (q):
	return unit_A("TA", 0, [q])
unit_A.TA = _unit_A_statics_TA

def _unit_A_statics_TC (v):
	return unit_A("TC", 2, [v])
unit_A.TC = _unit_A_statics_TC

def _unit_A_statics_TB (v):
	return unit_A("TB", 1, [v])
unit_A.TB = _unit_A_statics_TB

unit_A._hx_constructs = ["TA","TB","TC"]
unit_A._hx_class = unit_A
unit_A._hx_class_name = "unit.A"
_hx_classes["unit.A"] = unit_A
_hx_c.unit_A = unit_A
unit_A._hx_meta = _hx_c._hx_AnonObject(obj=_hx_c._hx_AnonObject(),fields=_hx_c._hx_AnonObject())
class unit_X(_hx_c.Enum):
	def __init__(self, t, i, p):
		super(unit_X,self).__init__(t, i, p)

def _unit_X_statics_U1 (x):
	return unit_X("U1", 0, [x])
unit_X.U1 = _unit_X_statics_U1

unit_X.U2 = unit_X("U2", 1, list())

unit_X._hx_constructs = ["U1","U2"]
unit_X._hx_class = unit_X
unit_X._hx_class_name = "unit.X"
_hx_classes["unit.X"] = unit_X
_hx_c.unit_X = unit_X
unit_X._hx_meta = _hx_c._hx_AnonObject(obj=_hx_c._hx_AnonObject(),fields=_hx_c._hx_AnonObject())
class unit_NE(_hx_c.Enum):
	def __init__(self, t, i, p):
		super(unit_NE,self).__init__(t, i, p)

def _unit_NE_statics_A (x = None):
	return unit_NE("A", 0, [x])
unit_NE.A = _unit_NE_statics_A

unit_NE._hx_constructs = ["A"]
unit_NE._hx_class = unit_NE
unit_NE._hx_class_name = "unit.NE"
_hx_classes["unit.NE"] = unit_NE
_hx_c.unit_NE = unit_NE
unit_NE._hx_meta = _hx_c._hx_AnonObject(obj=_hx_c._hx_AnonObject(),fields=_hx_c._hx_AnonObject())
class unit_MiniType(_hx_c.Enum):
	def __init__(self, t, i, p):
		super(unit_MiniType,self).__init__(t, i, p)

def _unit_MiniType_statics_MTInt (t,tl):
	return unit_MiniType("MTInt", 1, [t,tl])
unit_MiniType.MTInt = _unit_MiniType_statics_MTInt

def _unit_MiniType_statics_MTString (t,tl):
	return unit_MiniType("MTString", 0, [t,tl])
unit_MiniType.MTString = _unit_MiniType_statics_MTString

unit_MiniType._hx_constructs = ["MTString","MTInt"]
unit_MiniType._hx_class = unit_MiniType
unit_MiniType._hx_class_name = "unit.MiniType"
_hx_classes["unit.MiniType"] = unit_MiniType
_hx_c.unit_MiniType = unit_MiniType
unit_MiniType._hx_meta = _hx_c._hx_AnonObject(obj=_hx_c._hx_AnonObject(),fields=_hx_c._hx_AnonObject())
# print unit.TestMatch.TestMatchMacro
class unit_TestMatchMacro:

	pass




unit_TestMatchMacro._hx_class = unit_TestMatchMacro
unit_TestMatchMacro._hx_class_name = "unit.TestMatchMacro"
_hx_classes["unit.TestMatchMacro"] = unit_TestMatchMacro
_hx_c.unit_TestMatchMacro = unit_TestMatchMacro
unit_TestMatchMacro._hx_fields = []
unit_TestMatchMacro._hx_props = []
unit_TestMatchMacro._hx_methods = []
unit_TestMatchMacro._hx_statics = []
unit_TestMatchMacro._hx_interfaces = []
unit_TestMatchMacro._hx_meta = _hx_c._hx_AnonObject(obj=_hx_c._hx_AnonObject(),statics=_hx_c._hx_AnonObject(),fields=_hx_c._hx_AnonObject())
def unit_TestMatchMacro_hx_empty_init (_hx_o):
	pass
unit_TestMatchMacro._hx_empty_init = unit_TestMatchMacro_hx_empty_init
# print unit.TestMatch.TestMatch
class unit_TestMatch(unit_Test):


	def __init__(self):
		super().__init__()
	def testBasic(self):
		self.eq("bar", _hx_c.unit_TestMatch.switchNormal(_hx_c._hx_AnonObject(expr = _hx_c.haxe_macro_ExprDef.EConst(_hx_c.haxe_macro_Constant.CString("bar")) ,pos = _hx_c._hx_AnonObject(file = "../unit/TestMatch.hx" ,min = 2979 ,max = 2984 ) )), _hx_c._hx_AnonObject(fileName = "TestMatch.hx" ,lineNumber = 142 ,className = "unit.TestMatch" ,methodName = "testBasic" ))
		self.eq("bar", _hx_c.unit_TestMatch.switchNormal(_hx_c._hx_AnonObject(expr = _hx_c.haxe_macro_ExprDef.EParenthesis(_hx_c._hx_AnonObject(expr = _hx_c.haxe_macro_ExprDef.EConst(_hx_c.haxe_macro_Constant.CString("bar")) ,pos = _hx_c._hx_AnonObject(file = "../unit/TestMatch.hx" ,min = 3020 ,max = 3025 ) )) ,pos = _hx_c._hx_AnonObject(file = "../unit/TestMatch.hx" ,min = 3019 ,max = 3026 ) )), _hx_c._hx_AnonObject(fileName = "TestMatch.hx" ,lineNumber = 143 ,className = "unit.TestMatch" ,methodName = "testBasic" ))
		self.eq("bar", _hx_c.unit_TestMatch.switchNormal(_hx_c._hx_AnonObject(expr = _hx_c.haxe_macro_ExprDef.EUntyped(_hx_c._hx_AnonObject(expr = _hx_c.haxe_macro_ExprDef.EConst(_hx_c.haxe_macro_Constant.CString("bar")) ,pos = _hx_c._hx_AnonObject(file = "../unit/TestMatch.hx" ,min = 3069 ,max = 3074 ) )) ,pos = _hx_c._hx_AnonObject(file = "../unit/TestMatch.hx" ,min = 3061 ,max = 3074 ) )), _hx_c._hx_AnonObject(fileName = "TestMatch.hx" ,lineNumber = 144 ,className = "unit.TestMatch" ,methodName = "testBasic" ))
		self.eq("foo", _hx_c.unit_TestMatch.switchNormal(_hx_c._hx_AnonObject(expr = _hx_c.haxe_macro_ExprDef.EField(_hx_c._hx_AnonObject(expr = _hx_c.haxe_macro_ExprDef.EConst(_hx_c.haxe_macro_Constant.CIdent("null")) ,pos = _hx_c._hx_AnonObject(file = "../unit/TestMatch.hx" ,min = 3109 ,max = 3113 ) ), "foo") ,pos = _hx_c._hx_AnonObject(file = "../unit/TestMatch.hx" ,min = 3109 ,max = 3117 ) )), _hx_c._hx_AnonObject(fileName = "TestMatch.hx" ,lineNumber = 145 ,className = "unit.TestMatch" ,methodName = "testBasic" ))
		self.eq("22", _hx_c.unit_TestMatch.switchNormal(_hx_c._hx_AnonObject(expr = _hx_c.haxe_macro_ExprDef.EArray(_hx_c._hx_AnonObject(expr = _hx_c.haxe_macro_ExprDef.EConst(_hx_c.haxe_macro_Constant.CIdent("null")) ,pos = _hx_c._hx_AnonObject(file = "../unit/TestMatch.hx" ,min = 3151 ,max = 3155 ) ), _hx_c._hx_AnonObject(expr = _hx_c.haxe_macro_ExprDef.EConst(_hx_c.haxe_macro_Constant.CInt("22")) ,pos = _hx_c._hx_AnonObject(file = "../unit/TestMatch.hx" ,min = 3156 ,max = 3158 ) )) ,pos = _hx_c._hx_AnonObject(file = "../unit/TestMatch.hx" ,min = 3151 ,max = 3159 ) )), _hx_c._hx_AnonObject(fileName = "TestMatch.hx" ,lineNumber = 146 ,className = "unit.TestMatch" ,methodName = "testBasic" ))
		self.eq("22.5", _hx_c.unit_TestMatch.switchNormal(_hx_c._hx_AnonObject(expr = _hx_c.haxe_macro_ExprDef.EArray(_hx_c._hx_AnonObject(expr = _hx_c.haxe_macro_ExprDef.EConst(_hx_c.haxe_macro_Constant.CIdent("null")) ,pos = _hx_c._hx_AnonObject(file = "../unit/TestMatch.hx" ,min = 3195 ,max = 3199 ) ), _hx_c._hx_AnonObject(expr = _hx_c.haxe_macro_ExprDef.EConst(_hx_c.haxe_macro_Constant.CFloat("22.5")) ,pos = _hx_c._hx_AnonObject(file = "../unit/TestMatch.hx" ,min = 3200 ,max = 3204 ) )) ,pos = _hx_c._hx_AnonObject(file = "../unit/TestMatch.hx" ,min = 3195 ,max = 3205 ) )), _hx_c._hx_AnonObject(fileName = "TestMatch.hx" ,lineNumber = 147 ,className = "unit.TestMatch" ,methodName = "testBasic" ))
		self.eq("EConst(CInt(0))", _hx_c.unit_TestMatch.switchNormal(_hx_c._hx_AnonObject(expr = _hx_c.haxe_macro_ExprDef.EIn(_hx_c._hx_AnonObject(expr = _hx_c.haxe_macro_ExprDef.EConst(_hx_c.haxe_macro_Constant.CInt("1")) ,pos = _hx_c._hx_AnonObject(file = "../unit/TestMatch.hx" ,min = 3252 ,max = 3253 ) ), _hx_c._hx_AnonObject(expr = _hx_c.haxe_macro_ExprDef.EConst(_hx_c.haxe_macro_Constant.CInt("0")) ,pos = _hx_c._hx_AnonObject(file = "../unit/TestMatch.hx" ,min = 3257 ,max = 3258 ) )) ,pos = _hx_c._hx_AnonObject(file = "../unit/TestMatch.hx" ,min = 3252 ,max = 3258 ) )), _hx_c._hx_AnonObject(fileName = "TestMatch.hx" ,lineNumber = 148 ,className = "unit.TestMatch" ,methodName = "testBasic" ))
		self.eq("not_found", _hx_c.unit_TestMatch.switchNormal(_hx_c._hx_AnonObject(expr = _hx_c.haxe_macro_ExprDef.EArray(_hx_c._hx_AnonObject(expr = _hx_c.haxe_macro_ExprDef.EConst(_hx_c.haxe_macro_Constant.CIdent("null")) ,pos = _hx_c._hx_AnonObject(file = "../unit/TestMatch.hx" ,min = 3299 ,max = 3303 ) ), _hx_c._hx_AnonObject(expr = _hx_c.haxe_macro_ExprDef.EConst(_hx_c.haxe_macro_Constant.CString("22")) ,pos = _hx_c._hx_AnonObject(file = "../unit/TestMatch.hx" ,min = 3304 ,max = 3308 ) )) ,pos = _hx_c._hx_AnonObject(file = "../unit/TestMatch.hx" ,min = 3299 ,max = 3309 ) )), _hx_c._hx_AnonObject(fileName = "TestMatch.hx" ,lineNumber = 149 ,className = "unit.TestMatch" ,methodName = "testBasic" ))
		self.t(None != _hx_c.unit_TestMatch.switchCapture(_hx_c._hx_AnonObject(expr = _hx_c.haxe_macro_ExprDef.EConst(_hx_c.haxe_macro_Constant.CString("foobar")) ,pos = _hx_c._hx_AnonObject(file = "../unit/TestMatch.hx" ,min = 3346 ,max = 3354 ) )), _hx_c._hx_AnonObject(fileName = "TestMatch.hx" ,lineNumber = 151 ,className = "unit.TestMatch" ,methodName = "testBasic" ))
		self.t(None == _hx_c.unit_TestMatch.switchCapture(_hx_c._hx_AnonObject(expr = _hx_c.haxe_macro_ExprDef.EConst(_hx_c.haxe_macro_Constant.CString("fooba")) ,pos = _hx_c._hx_AnonObject(file = "../unit/TestMatch.hx" ,min = 3390 ,max = 3397 ) )), _hx_c._hx_AnonObject(fileName = "TestMatch.hx" ,lineNumber = 152 ,className = "unit.TestMatch" ,methodName = "testBasic" ))
		self.t(None != _hx_c.unit_TestMatch.switchCapture(_hx_c._hx_AnonObject(expr = _hx_c.haxe_macro_ExprDef.EConst(_hx_c.haxe_macro_Constant.CInt("9")) ,pos = _hx_c._hx_AnonObject(file = "../unit/TestMatch.hx" ,min = 3433 ,max = 3434 ) )), _hx_c._hx_AnonObject(fileName = "TestMatch.hx" ,lineNumber = 153 ,className = "unit.TestMatch" ,methodName = "testBasic" ))
		self.t(None == _hx_c.unit_TestMatch.switchCapture(_hx_c._hx_AnonObject(expr = _hx_c.haxe_macro_ExprDef.EConst(_hx_c.haxe_macro_Constant.CInt("10")) ,pos = _hx_c._hx_AnonObject(file = "../unit/TestMatch.hx" ,min = 3470 ,max = 3472 ) )), _hx_c._hx_AnonObject(fileName = "TestMatch.hx" ,lineNumber = 154 ,className = "unit.TestMatch" ,methodName = "testBasic" ))
		self.eq("[]", _hx_c.unit_TestMatch.switchArray(_hx_c._hx_AnonObject(expr = _hx_c.haxe_macro_ExprDef.EArrayDecl([]) ,pos = _hx_c._hx_AnonObject(file = "../unit/TestMatch.hx" ,min = 3506 ,max = 3508 ) )), _hx_c._hx_AnonObject(fileName = "TestMatch.hx" ,lineNumber = 156 ,className = "unit.TestMatch" ,methodName = "testBasic" ))
		self.eq("_", _hx_c.unit_TestMatch.switchArray(_hx_c._hx_AnonObject(expr = _hx_c.haxe_macro_ExprDef.EConst(_hx_c.haxe_macro_Constant.CInt("2")) ,pos = _hx_c._hx_AnonObject(file = "../unit/TestMatch.hx" ,min = 3540 ,max = 3541 ) )), _hx_c._hx_AnonObject(fileName = "TestMatch.hx" ,lineNumber = 157 ,className = "unit.TestMatch" ,methodName = "testBasic" ))
		self.eq("[EConst(CInt(22))]", _hx_c.unit_TestMatch.switchArray(_hx_c._hx_AnonObject(expr = _hx_c.haxe_macro_ExprDef.EArrayDecl([_hx_c._hx_AnonObject(expr = _hx_c.haxe_macro_ExprDef.EConst(_hx_c.haxe_macro_Constant.CInt("22")) ,pos = _hx_c._hx_AnonObject(file = "../unit/TestMatch.hx" ,min = 3591 ,max = 3593 ) )]) ,pos = _hx_c._hx_AnonObject(file = "../unit/TestMatch.hx" ,min = 3590 ,max = 3594 ) )), _hx_c._hx_AnonObject(fileName = "TestMatch.hx" ,lineNumber = 158 ,className = "unit.TestMatch" ,methodName = "testBasic" ))
		self.eq("[EConst(CInt(22)),EConst(CString(foo))]", _hx_c.unit_TestMatch.switchArray(_hx_c._hx_AnonObject(expr = _hx_c.haxe_macro_ExprDef.EArrayDecl([_hx_c._hx_AnonObject(expr = _hx_c.haxe_macro_ExprDef.EConst(_hx_c.haxe_macro_Constant.CInt("22")) ,pos = _hx_c._hx_AnonObject(file = "../unit/TestMatch.hx" ,min = 3665 ,max = 3667 ) ), _hx_c._hx_AnonObject(expr = _hx_c.haxe_macro_ExprDef.EConst(_hx_c.haxe_macro_Constant.CString("foo")) ,pos = _hx_c._hx_AnonObject(file = "../unit/TestMatch.hx" ,min = 3668 ,max = 3673 ) )]) ,pos = _hx_c._hx_AnonObject(file = "../unit/TestMatch.hx" ,min = 3664 ,max = 3674 ) )), _hx_c._hx_AnonObject(fileName = "TestMatch.hx" ,lineNumber = 159 ,className = "unit.TestMatch" ,methodName = "testBasic" ))
		self.eq("_", _hx_c.unit_TestMatch.switchArray(_hx_c._hx_AnonObject(expr = _hx_c.haxe_macro_ExprDef.EArrayDecl([_hx_c._hx_AnonObject(expr = _hx_c.haxe_macro_ExprDef.EConst(_hx_c.haxe_macro_Constant.CInt("22")) ,pos = _hx_c._hx_AnonObject(file = "../unit/TestMatch.hx" ,min = 3707 ,max = 3709 ) ), _hx_c._hx_AnonObject(expr = _hx_c.haxe_macro_ExprDef.EConst(_hx_c.haxe_macro_Constant.CString("foo")) ,pos = _hx_c._hx_AnonObject(file = "../unit/TestMatch.hx" ,min = 3711 ,max = 3716 ) ), _hx_c._hx_AnonObject(expr = _hx_c.haxe_macro_ExprDef.EConst(_hx_c.haxe_macro_Constant.CString("bar")) ,pos = _hx_c._hx_AnonObject(file = "../unit/TestMatch.hx" ,min = 3718 ,max = 3723 ) )]) ,pos = _hx_c._hx_AnonObject(file = "../unit/TestMatch.hx" ,min = 3706 ,max = 3724 ) )), _hx_c._hx_AnonObject(fileName = "TestMatch.hx" ,lineNumber = 160 ,className = "unit.TestMatch" ,methodName = "testBasic" ))
		self.eq("0", _hx_c.unit_TestMatch.switchArray2(["a", "b"]), _hx_c._hx_AnonObject(fileName = "TestMatch.hx" ,lineNumber = 162 ,className = "unit.TestMatch" ,methodName = "testBasic" ))
		self.eq("1", _hx_c.unit_TestMatch.switchArray2(["a"]), _hx_c._hx_AnonObject(fileName = "TestMatch.hx" ,lineNumber = 163 ,className = "unit.TestMatch" ,methodName = "testBasic" ))
		self.eq("2", _hx_c.unit_TestMatch.switchArray2(["b"]), _hx_c._hx_AnonObject(fileName = "TestMatch.hx" ,lineNumber = 164 ,className = "unit.TestMatch" ,methodName = "testBasic" ))
		self.eq("3:c", _hx_c.unit_TestMatch.switchArray2(["c"]), _hx_c._hx_AnonObject(fileName = "TestMatch.hx" ,lineNumber = 165 ,className = "unit.TestMatch" ,methodName = "testBasic" ))
		self.eq("4:a,a", _hx_c.unit_TestMatch.switchArray2(["a", "a"]), _hx_c._hx_AnonObject(fileName = "TestMatch.hx" ,lineNumber = 166 ,className = "unit.TestMatch" ,methodName = "testBasic" ))
		self.eq("4:b,a", _hx_c.unit_TestMatch.switchArray2(["b", "a"]), _hx_c._hx_AnonObject(fileName = "TestMatch.hx" ,lineNumber = 167 ,className = "unit.TestMatch" ,methodName = "testBasic" ))
		self.eq("5:3", _hx_c.unit_TestMatch.switchArray2(["a", "a", "a"]), _hx_c._hx_AnonObject(fileName = "TestMatch.hx" ,lineNumber = 168 ,className = "unit.TestMatch" ,methodName = "testBasic" ))
		self.eq("6", _hx_c.unit_TestMatch.switchArray2([]), _hx_c._hx_AnonObject(fileName = "TestMatch.hx" ,lineNumber = 169 ,className = "unit.TestMatch" ,methodName = "testBasic" ))
		self.eq("7", _hx_c.unit_TestMatch.switchArray2(["a", "a", "a", "b"]), _hx_c._hx_AnonObject(fileName = "TestMatch.hx" ,lineNumber = 170 ,className = "unit.TestMatch" ,methodName = "testBasic" ))
		self.eq("EConst(CString(foobar)):12", _hx_c.unit_TestMatch.switchCrazy(_hx_c._hx_AnonObject(expr = _hx_c.haxe_macro_ExprDef.EUntyped(_hx_c._hx_AnonObject(expr = _hx_c.haxe_macro_ExprDef.EParenthesis(_hx_c._hx_AnonObject(expr = _hx_c.haxe_macro_ExprDef.EArray(_hx_c._hx_AnonObject(expr = _hx_c.haxe_macro_ExprDef.EConst(_hx_c.haxe_macro_Constant.CString("foobar")) ,pos = _hx_c._hx_AnonObject(file = "../unit/TestMatch.hx" ,min = 4125 ,max = 4133 ) ), _hx_c._hx_AnonObject(expr = _hx_c.haxe_macro_ExprDef.EConst(_hx_c.haxe_macro_Constant.CInt("12")) ,pos = _hx_c._hx_AnonObject(file = "../unit/TestMatch.hx" ,min = 4134 ,max = 4136 ) )) ,pos = _hx_c._hx_AnonObject(file = "../unit/TestMatch.hx" ,min = 4125 ,max = 4137 ) )) ,pos = _hx_c._hx_AnonObject(file = "../unit/TestMatch.hx" ,min = 4124 ,max = 4138 ) )) ,pos = _hx_c._hx_AnonObject(file = "../unit/TestMatch.hx" ,min = 4116 ,max = 4138 ) )), _hx_c._hx_AnonObject(fileName = "TestMatch.hx" ,lineNumber = 172 ,className = "unit.TestMatch" ,methodName = "testBasic" ))
		self.eq("1", _hx_c.unit_TestMatch.switchGuard(_hx_c._hx_AnonObject(expr = _hx_c.haxe_macro_ExprDef.EConst(_hx_c.haxe_macro_Constant.CString("foobar")) ,pos = _hx_c._hx_AnonObject(file = "../unit/TestMatch.hx" ,min = 4171 ,max = 4179 ) )), _hx_c._hx_AnonObject(fileName = "TestMatch.hx" ,lineNumber = 174 ,className = "unit.TestMatch" ,methodName = "testBasic" ))
		self.eq("2", _hx_c.unit_TestMatch.switchGuard(_hx_c._hx_AnonObject(expr = _hx_c.haxe_macro_ExprDef.EConst(_hx_c.haxe_macro_Constant.CString("barfoo")) ,pos = _hx_c._hx_AnonObject(file = "../unit/TestMatch.hx" ,min = 4211 ,max = 4219 ) )), _hx_c._hx_AnonObject(fileName = "TestMatch.hx" ,lineNumber = 175 ,className = "unit.TestMatch" ,methodName = "testBasic" ))
		self.eq("3", _hx_c.unit_TestMatch.switchGuard(_hx_c._hx_AnonObject(expr = _hx_c.haxe_macro_ExprDef.EConst(_hx_c.haxe_macro_Constant.CInt("2")) ,pos = _hx_c._hx_AnonObject(file = "../unit/TestMatch.hx" ,min = 4251 ,max = 4252 ) )), _hx_c._hx_AnonObject(fileName = "TestMatch.hx" ,lineNumber = 176 ,className = "unit.TestMatch" ,methodName = "testBasic" ))
		self.eq("4", _hx_c.unit_TestMatch.switchGuard(_hx_c._hx_AnonObject(expr = _hx_c.haxe_macro_ExprDef.EConst(_hx_c.haxe_macro_Constant.CInt("5")) ,pos = _hx_c._hx_AnonObject(file = "../unit/TestMatch.hx" ,min = 4284 ,max = 4285 ) )), _hx_c._hx_AnonObject(fileName = "TestMatch.hx" ,lineNumber = 177 ,className = "unit.TestMatch" ,methodName = "testBasic" ))
		self.eq("4", _hx_c.unit_TestMatch.switchGuard(_hx_c._hx_AnonObject(expr = _hx_c.haxe_macro_ExprDef.EConst(_hx_c.haxe_macro_Constant.CString("bazfoo")) ,pos = _hx_c._hx_AnonObject(file = "../unit/TestMatch.hx" ,min = 4317 ,max = 4325 ) )), _hx_c._hx_AnonObject(fileName = "TestMatch.hx" ,lineNumber = 178 ,className = "unit.TestMatch" ,methodName = "testBasic" ))
		self.eq("5", _hx_c.unit_TestMatch.switchGuard(_hx_c._hx_AnonObject(expr = _hx_c.haxe_macro_ExprDef.EArrayDecl([]) ,pos = _hx_c._hx_AnonObject(file = "../unit/TestMatch.hx" ,min = 4357 ,max = 4359 ) )), _hx_c._hx_AnonObject(fileName = "TestMatch.hx" ,lineNumber = 179 ,className = "unit.TestMatch" ,methodName = "testBasic" ))
		def _hx_local_0():
			_g = True
			_g1 = 1
			_g2 = "foo"
			def _hx_local_12():
				def _hx_local_2():
					def _hx_local_11():
						def _hx_local_10():
							def _hx_local_4():
								def _hx_local_9():
									def _hx_local_8():
										def _hx_local_6():
											def _hx_local_7():
												return "0"
											_hx_local_5 = _hx_local_7
											return _hx_local_5() if (_g2) == "foo" else "1"
										
										return _hx_local_6()
									
									return _hx_local_8()
								
								_hx_local_3 = _hx_local_9
								return _hx_local_3() if (_g1) == 1 else "_"
							
							return _hx_local_4()
						
						return _hx_local_10()
					
					_hx_local_1 = _hx_local_11
					return _hx_local_1() if (_g) == True else "_"
				
				return _hx_local_2()
			
			return _hx_local_12()
		
		self.eq("0", _hx_local_0(), _hx_c._hx_AnonObject(fileName = "TestMatch.hx" ,lineNumber = 181 ,className = "unit.TestMatch" ,methodName = "testBasic" ))
		def _hx_local_13():
			_g3 = True
			_g11 = 1
			_g21 = "foo"
			def _hx_local_25():
				def _hx_local_15():
					def _hx_local_24():
						def _hx_local_23():
							def _hx_local_17():
								def _hx_local_22():
									def _hx_local_21():
										def _hx_local_19():
											def _hx_local_20():
												return "0"
											_hx_local_18 = _hx_local_20
											return _hx_local_18() if (_g21) == "foo" else "1"
										
										return _hx_local_19()
									
									return _hx_local_21()
								
								_hx_local_16 = _hx_local_22
								return _hx_local_16() if (_g11) == 1 else "_"
							
							return _hx_local_17()
						
						return _hx_local_23()
					
					_hx_local_14 = _hx_local_24
					return _hx_local_14() if (_g3) == True else "_"
				
				return _hx_local_15()
			
			return _hx_local_25()
		
		self.eq("0", _hx_local_13(), _hx_c._hx_AnonObject(fileName = "TestMatch.hx" ,lineNumber = 187 ,className = "unit.TestMatch" ,methodName = "testBasic" ))
		def _hx_local_26():
			_g4 = True
			_g12 = 1
			_g22 = "bar"
			def _hx_local_38():
				def _hx_local_28():
					def _hx_local_37():
						def _hx_local_36():
							def _hx_local_30():
								def _hx_local_35():
									def _hx_local_34():
										def _hx_local_32():
											def _hx_local_33():
												return "0"
											_hx_local_31 = _hx_local_33
											return _hx_local_31() if (_g22) == "foo" else "1"
										
										return _hx_local_32()
									
									return _hx_local_34()
								
								_hx_local_29 = _hx_local_35
								return _hx_local_29() if (_g12) == 1 else "_"
							
							return _hx_local_30()
						
						return _hx_local_36()
					
					_hx_local_27 = _hx_local_37
					return _hx_local_27() if (_g4) == True else "_"
				
				return _hx_local_28()
			
			return _hx_local_38()
		
		self.eq("1", _hx_local_26(), _hx_c._hx_AnonObject(fileName = "TestMatch.hx" ,lineNumber = 193 ,className = "unit.TestMatch" ,methodName = "testBasic" ))
		def _hx_local_39():
			_g5 = False
			_g13 = 1
			_g23 = "foo"
			def _hx_local_51():
				def _hx_local_41():
					def _hx_local_50():
						def _hx_local_49():
							def _hx_local_43():
								def _hx_local_48():
									def _hx_local_47():
										def _hx_local_45():
											def _hx_local_46():
												return "0"
											_hx_local_44 = _hx_local_46
											return _hx_local_44() if (_g23) == "foo" else "1"
										
										return _hx_local_45()
									
									return _hx_local_47()
								
								_hx_local_42 = _hx_local_48
								return _hx_local_42() if (_g13) == 1 else "_"
							
							return _hx_local_43()
						
						return _hx_local_49()
					
					_hx_local_40 = _hx_local_50
					return _hx_local_40() if (_g5) == True else "_"
				
				return _hx_local_41()
			
			return _hx_local_51()
		
		self.eq("_", _hx_local_39(), _hx_c._hx_AnonObject(fileName = "TestMatch.hx" ,lineNumber = 199 ,className = "unit.TestMatch" ,methodName = "testBasic" ))
		def _hx_local_52():
			_g6 = 1
			_g14 = 2
			def _hx_local_68():
				def _hx_local_55():
					def _hx_local_62():
						def _hx_local_61():
							def _hx_local_58():
								def _hx_local_59():
									return "2"
								_hx_local_56 = _hx_local_59
								def _hx_local_60():
									return "1"
								_hx_local_57 = _hx_local_60
								return _hx_local_57() if (_g14) == 2 else _hx_local_56() if (_g14) == 1 else "_"
							
							return _hx_local_58()
						
						return _hx_local_61()
					
					_hx_local_53 = _hx_local_62
					def _hx_local_67():
						def _hx_local_66():
							def _hx_local_64():
								def _hx_local_65():
									return "1"
								_hx_local_63 = _hx_local_65
								return _hx_local_63() if (_g14) == 0 else "_"
							
							return _hx_local_64()
						
						return _hx_local_66()
					
					_hx_local_54 = _hx_local_67
					return _hx_local_54() if (_g6) == 0 else _hx_local_53() if (_g6) == 1 else "_"
				
				return _hx_local_55()
			
			return _hx_local_68()
		
		self.eq("1", _hx_local_52(), _hx_c._hx_AnonObject(fileName = "TestMatch.hx" ,lineNumber = 205 ,className = "unit.TestMatch" ,methodName = "testBasic" ))
		t = _hx_c.unit_A.TA("foo")
		def _hx_local_71():
			def _hx_local_72():
				return "2"
			_hx_local_69 = _hx_local_72
			def _hx_local_77():
				def _hx_local_76():
					def _hx_local_74():
						def _hx_local_75():
							return "0"
						_hx_local_73 = _hx_local_75
						return _hx_local_73() if (t.params[0]) == "foo" else "1"
					
					return _hx_local_74()
				
				return _hx_local_76()
			
			_hx_local_70 = _hx_local_77
			return _hx_local_70() if (t.index) == 0 else _hx_local_69() if (t.index) == 2 else None
		
		self.eq("0", _hx_local_71(), _hx_c._hx_AnonObject(fileName = "TestMatch.hx" ,lineNumber = 212 ,className = "unit.TestMatch" ,methodName = "testBasic" ))
	

	def testTuple(self):
		def _hx_local_0(a,b,c):
			x = a
			z = a
			x1 = a
			if (a) == 1:
				y = b
				y1 = b
				x = b
				if (b) == 1:
					z1 = c
					z2 = c
					if (c) == 2:
						return "0|x:" + Std.string(x)
					else:
						return Std.string(Std.string("2|y:" + Std.string(y)) + ",z:") + Std.string(z1)
				
				elif (b) == 2:
					x = c
					return "0|x:" + Std.string(x)
				
				elif (b) == 3:
					z1 = c
					z2 = c
					if (c) == 2:
						return "0|x:" + Std.string(x)
					elif (c) == 4:
						return "1|z:" + Std.string(z)
					else:
						return Std.string(Std.string("2|y:" + Std.string(y)) + ",z:") + Std.string(z1)
				
				else:
					z1 = c
					z2 = c
					if (c) == 2:
						return "0|x:" + Std.string(x)
					else:
						return Std.string(Std.string("2|y:" + Std.string(y)) + ",z:") + Std.string(z1)
				
			
			elif (a) == 3:
				y1 = b
				z = b
				if (b) == 1:
					z2 = c
					if (c) == 2:
						return "0|x:" + Std.string(x)
					elif (c) == 4:
						return "1|z:" + Std.string(z)
					else:
						return Std.string(Std.string(Std.string(Std.string("_:x:" + Std.string(x1)) + ",y:") + Std.string(y1)) + ",z:") + Std.string(z2)
				
				elif (b) == 4:
					z = c
					return "1|z:" + Std.string(z)
				
				elif (b) == 3:
					z2 = c
					if (c) == 4:
						return "1|z:" + Std.string(z)
					else:
						return Std.string(Std.string(Std.string(Std.string("_:x:" + Std.string(x1)) + ",y:") + Std.string(y1)) + ",z:") + Std.string(z2)
				
				else:
					z2 = c
					if (c) == 4:
						return "1|z:" + Std.string(z)
					else:
						return Std.string(Std.string(Std.string(Std.string("_:x:" + Std.string(x1)) + ",y:") + Std.string(y1)) + ",z:") + Std.string(z2)
				
			
			elif (a) == 2:
				z1 = b
				y1 = b
				if (b) == 1:
					y = c
					z2 = c
					if (c) == 2:
						return "0|x:" + Std.string(x)
					else:
						return Std.string(Std.string("2|y:" + Std.string(y)) + ",z:") + Std.string(z1)
				
				elif (b) == 3:
					y = c
					z2 = c
					if (c) == 4:
						return "1|z:" + Std.string(z)
					else:
						return Std.string(Std.string("2|y:" + Std.string(y)) + ",z:") + Std.string(z1)
				
				else:
					y = c
					return Std.string(Std.string("2|y:" + Std.string(y)) + ",z:") + Std.string(z1)
				
			
			else:
				y1 = b
				if (b) == 1:
					z2 = c
					if (c) == 2:
						return "0|x:" + Std.string(x)
					else:
						return Std.string(Std.string(Std.string(Std.string("_:x:" + Std.string(x1)) + ",y:") + Std.string(y1)) + ",z:") + Std.string(z2)
				
				elif (b) == 3:
					z2 = c
					if (c) == 4:
						return "1|z:" + Std.string(z)
					else:
						return Std.string(Std.string(Std.string(Std.string("_:x:" + Std.string(x1)) + ",y:") + Std.string(y1)) + ",z:") + Std.string(z2)
				
				else:
					z2 = c
					return Std.string(Std.string(Std.string(Std.string("_:x:" + Std.string(x1)) + ",y:") + Std.string(y1)) + ",z:") + Std.string(z2)
				
			
		
		test = _hx_local_0
		self.eq("0|x:9", test(9, 1, 2), _hx_c._hx_AnonObject(fileName = "TestMatch.hx" ,lineNumber = 226 ,className = "unit.TestMatch" ,methodName = "testTuple" ))
		self.eq("0|x:9", test(1, 2, 9), _hx_c._hx_AnonObject(fileName = "TestMatch.hx" ,lineNumber = 227 ,className = "unit.TestMatch" ,methodName = "testTuple" ))
		self.eq("0|x:9", test(1, 9, 2), _hx_c._hx_AnonObject(fileName = "TestMatch.hx" ,lineNumber = 228 ,className = "unit.TestMatch" ,methodName = "testTuple" ))
		self.eq("1|z:12", test(3, 4, 12), _hx_c._hx_AnonObject(fileName = "TestMatch.hx" ,lineNumber = 229 ,className = "unit.TestMatch" ,methodName = "testTuple" ))
		self.eq("1|z:12", test(12, 3, 4), _hx_c._hx_AnonObject(fileName = "TestMatch.hx" ,lineNumber = 230 ,className = "unit.TestMatch" ,methodName = "testTuple" ))
		self.eq("1|z:12", test(3, 12, 4), _hx_c._hx_AnonObject(fileName = "TestMatch.hx" ,lineNumber = 231 ,className = "unit.TestMatch" ,methodName = "testTuple" ))
		self.eq("2|y:9,z:8", test(1, 9, 8), _hx_c._hx_AnonObject(fileName = "TestMatch.hx" ,lineNumber = 232 ,className = "unit.TestMatch" ,methodName = "testTuple" ))
		self.eq("2|y:9,z:8", test(2, 8, 9), _hx_c._hx_AnonObject(fileName = "TestMatch.hx" ,lineNumber = 233 ,className = "unit.TestMatch" ,methodName = "testTuple" ))
		self.eq("_:x:9,y:8,z:7", test(9, 8, 7), _hx_c._hx_AnonObject(fileName = "TestMatch.hx" ,lineNumber = 234 ,className = "unit.TestMatch" ,methodName = "testTuple" ))
	

	def testGrouping(self):
		def _hx_local_0(v):
			val = v
			x = v
			if (v) == 3 or (v) == 2 or (v) == 1:
				return "0"
			elif (v) == 4:
				if val == 5:
					return "1"
				else:
					return "2"
			elif (v) == 6 or (v) == 5:
				if val == 5:
					return "1"
				else:
					return "2"
			elif (v) == 9 or (v) == 8:
				return "3"
			else:
				return "_:" + Std.string(x)
		
		test = _hx_local_0
		results = ["_:0", "0", "0", "0", "2", "1", "2", "_:7", "3", "3", "_:10"]
		_g1 = 0
		_g = _hx_builtin.len(results)
		while _g1 < _g:
			i = _g1
			_g1 = _g1 + 1
			
			self.eq(_hx_array_get(results,i), test(i), _hx_c._hx_AnonObject(fileName = "TestMatch.hx" ,lineNumber = 247 ,className = "unit.TestMatch" ,methodName = "testGrouping" ))
		
		
	

	def testSubtyping(self):
		c = _hx_c.unit_InitBase()
		r = None
		if (c.s) == "foo":
			r = "s = foo"
		else:
			r = "_"
		self.eq("s = foo", r, _hx_c._hx_AnonObject(fileName = "TestMatch.hx" ,lineNumber = 259 ,className = "unit.TestMatch" ,methodName = "testSubtyping" ))
		self.eq("0", _hx_c.unit_TestMatch.switchStructure(_hx_c._hx_AnonObject(foo = "val1" ,bar = "val2" )), _hx_c._hx_AnonObject(fileName = "TestMatch.hx" ,lineNumber = 261 ,className = "unit.TestMatch" ,methodName = "testSubtyping" ))
		self.eq("1", _hx_c.unit_TestMatch.switchStructure(_hx_c._hx_AnonObject(foo = "val1" ,bar = "val1" )), _hx_c._hx_AnonObject(fileName = "TestMatch.hx" ,lineNumber = 262 ,className = "unit.TestMatch" ,methodName = "testSubtyping" ))
		self.eq("2", _hx_c.unit_TestMatch.switchStructure(_hx_c._hx_AnonObject(foo = "val2" ,bar = "val2" )), _hx_c._hx_AnonObject(fileName = "TestMatch.hx" ,lineNumber = 263 ,className = "unit.TestMatch" ,methodName = "testSubtyping" ))
		self.eq("val1", _hx_c.unit_TestMatch.switchStructure(_hx_c._hx_AnonObject(foo = "val2" ,bar = "val1" )), _hx_c._hx_AnonObject(fileName = "TestMatch.hx" ,lineNumber = 264 ,className = "unit.TestMatch" ,methodName = "testSubtyping" ))
	

	def testGadt(self):
		self.eq("<=1", _hx_c.unit_TestMatch.toStringX(_hx_c.unit_X.U1(1)), _hx_c._hx_AnonObject(fileName = "TestMatch.hx" ,lineNumber = 277 ,className = "unit.TestMatch" ,methodName = "testGadt" ))
		self.eq(">1", _hx_c.unit_TestMatch.toStringX(_hx_c.unit_X.U1(2)), _hx_c._hx_AnonObject(fileName = "TestMatch.hx" ,lineNumber = 278 ,className = "unit.TestMatch" ,methodName = "testGadt" ))
		self.eq("U2", _hx_c.unit_TestMatch.toStringX(_hx_c.unit_X.U2), _hx_c._hx_AnonObject(fileName = "TestMatch.hx" ,lineNumber = 279 ,className = "unit.TestMatch" ,methodName = "testGadt" ))
	

	def testClassSwitch(self):
		self.eq("String", _hx_c.unit_TestMatch.switchClass(_hx_c.String), _hx_c._hx_AnonObject(fileName = "TestMatch.hx" ,lineNumber = 283 ,className = "unit.TestMatch" ,methodName = "testClassSwitch" ))
		self.eq("unit.MyClass", _hx_c.unit_TestMatch.switchClass(_hx_c.unit_MyClass), _hx_c._hx_AnonObject(fileName = "TestMatch.hx" ,lineNumber = 284 ,className = "unit.TestMatch" ,methodName = "testClassSwitch" ))
		self.eq("other: unit.TestMatch", _hx_c.unit_TestMatch.switchClass(_hx_c.unit_TestMatch), _hx_c._hx_AnonObject(fileName = "TestMatch.hx" ,lineNumber = 285 ,className = "unit.TestMatch" ,methodName = "testClassSwitch" ))
	

	def testOr(self):
		i1 = _hx_c._hx_AnonObject(expr = _hx_c.haxe_macro_ExprDef.EConst(_hx_c.haxe_macro_Constant.CInt("1")) ,pos = _hx_c._hx_AnonObject(file = "../unit/TestMatch.hx" ,min = 6931 ,max = 6932 ) )
		i2 = _hx_c._hx_AnonObject(expr = _hx_c.haxe_macro_ExprDef.EConst(_hx_c.haxe_macro_Constant.CInt("2")) ,pos = _hx_c._hx_AnonObject(file = "../unit/TestMatch.hx" ,min = 6951 ,max = 6952 ) )
		f1 = _hx_c._hx_AnonObject(expr = _hx_c.haxe_macro_ExprDef.EConst(_hx_c.haxe_macro_Constant.CFloat("3.9")) ,pos = _hx_c._hx_AnonObject(file = "../unit/TestMatch.hx" ,min = 6971 ,max = 6974 ) )
		f2 = _hx_c._hx_AnonObject(expr = _hx_c.haxe_macro_ExprDef.EConst(_hx_c.haxe_macro_Constant.CFloat("4.8")) ,pos = _hx_c._hx_AnonObject(file = "../unit/TestMatch.hx" ,min = 6993 ,max = 6996 ) )
		self.eq("11", _hx_c.unit_TestMatch.orMatch(i1, i1), _hx_c._hx_AnonObject(fileName = "TestMatch.hx" ,lineNumber = 293 ,className = "unit.TestMatch" ,methodName = "testOr" ))
		self.eq("12", _hx_c.unit_TestMatch.orMatch(i1, i2), _hx_c._hx_AnonObject(fileName = "TestMatch.hx" ,lineNumber = 294 ,className = "unit.TestMatch" ,methodName = "testOr" ))
		self.eq("13.9", _hx_c.unit_TestMatch.orMatch(i1, f1), _hx_c._hx_AnonObject(fileName = "TestMatch.hx" ,lineNumber = 295 ,className = "unit.TestMatch" ,methodName = "testOr" ))
		self.eq("14.8", _hx_c.unit_TestMatch.orMatch(i1, f2), _hx_c._hx_AnonObject(fileName = "TestMatch.hx" ,lineNumber = 296 ,className = "unit.TestMatch" ,methodName = "testOr" ))
		self.eq("21", _hx_c.unit_TestMatch.orMatch(i2, i1), _hx_c._hx_AnonObject(fileName = "TestMatch.hx" ,lineNumber = 298 ,className = "unit.TestMatch" ,methodName = "testOr" ))
		self.eq("22", _hx_c.unit_TestMatch.orMatch(i2, i2), _hx_c._hx_AnonObject(fileName = "TestMatch.hx" ,lineNumber = 299 ,className = "unit.TestMatch" ,methodName = "testOr" ))
		self.eq("23.9", _hx_c.unit_TestMatch.orMatch(i2, f1), _hx_c._hx_AnonObject(fileName = "TestMatch.hx" ,lineNumber = 300 ,className = "unit.TestMatch" ,methodName = "testOr" ))
		self.eq("24.8", _hx_c.unit_TestMatch.orMatch(i2, f2), _hx_c._hx_AnonObject(fileName = "TestMatch.hx" ,lineNumber = 301 ,className = "unit.TestMatch" ,methodName = "testOr" ))
		self.eq("3.91", _hx_c.unit_TestMatch.orMatch(f1, i1), _hx_c._hx_AnonObject(fileName = "TestMatch.hx" ,lineNumber = 303 ,className = "unit.TestMatch" ,methodName = "testOr" ))
		self.eq("3.92", _hx_c.unit_TestMatch.orMatch(f1, i2), _hx_c._hx_AnonObject(fileName = "TestMatch.hx" ,lineNumber = 304 ,className = "unit.TestMatch" ,methodName = "testOr" ))
		self.eq("3.93.9", _hx_c.unit_TestMatch.orMatch(f1, f1), _hx_c._hx_AnonObject(fileName = "TestMatch.hx" ,lineNumber = 305 ,className = "unit.TestMatch" ,methodName = "testOr" ))
		self.eq("3.94.8", _hx_c.unit_TestMatch.orMatch(f1, f2), _hx_c._hx_AnonObject(fileName = "TestMatch.hx" ,lineNumber = 306 ,className = "unit.TestMatch" ,methodName = "testOr" ))
		self.eq("4.81", _hx_c.unit_TestMatch.orMatch(f2, i1), _hx_c._hx_AnonObject(fileName = "TestMatch.hx" ,lineNumber = 308 ,className = "unit.TestMatch" ,methodName = "testOr" ))
		self.eq("4.82", _hx_c.unit_TestMatch.orMatch(f2, i2), _hx_c._hx_AnonObject(fileName = "TestMatch.hx" ,lineNumber = 309 ,className = "unit.TestMatch" ,methodName = "testOr" ))
		self.eq("4.83.9", _hx_c.unit_TestMatch.orMatch(f2, f1), _hx_c._hx_AnonObject(fileName = "TestMatch.hx" ,lineNumber = 310 ,className = "unit.TestMatch" ,methodName = "testOr" ))
		self.eq("4.84.8", _hx_c.unit_TestMatch.orMatch(f2, f2), _hx_c._hx_AnonObject(fileName = "TestMatch.hx" ,lineNumber = 311 ,className = "unit.TestMatch" ,methodName = "testOr" ))
	

	def testStaticNull(self):
		v = _hx_c.unit_NE.A()
		r = None
		x = v.params[0]
		if x is None:
			r = "null"
		else:
			r = "not null"
		
		self.eq("null", r, _hx_c._hx_AnonObject(fileName = "TestMatch.hx" ,lineNumber = 321 ,className = "unit.TestMatch" ,methodName = "testStaticNull" ))
	

	def testNonExhaustiveness(self):
		self.eq("Unmatched patterns: false", "Unmatched patterns: false", _hx_c._hx_AnonObject(fileName = "TestMatch.hx" ,lineNumber = 332 ,className = "unit.TestMatch" ,methodName = "testNonExhaustiveness" ))
		self.eq("Unmatched patterns: OpNegBits | OpNeg", "Unmatched patterns: OpNegBits | OpNeg", _hx_c._hx_AnonObject(fileName = "TestMatch.hx" ,lineNumber = 335 ,className = "unit.TestMatch" ,methodName = "testNonExhaustiveness" ))
		self.eq("Unmatched patterns: Node(Leaf(_),_)", "Unmatched patterns: Node(Leaf(_),_)", _hx_c._hx_AnonObject(fileName = "TestMatch.hx" ,lineNumber = 340 ,className = "unit.TestMatch" ,methodName = "testNonExhaustiveness" ))
		self.eq("Unmatched patterns: Leaf", "Unmatched patterns: Leaf", _hx_c._hx_AnonObject(fileName = "TestMatch.hx" ,lineNumber = 344 ,className = "unit.TestMatch" ,methodName = "testNonExhaustiveness" ))
		self.eq("Unmatched patterns: Leaf(_)", "Unmatched patterns: Leaf(_)", _hx_c._hx_AnonObject(fileName = "TestMatch.hx" ,lineNumber = 348 ,className = "unit.TestMatch" ,methodName = "testNonExhaustiveness" ))
		self.eq("Unmatched patterns: [_,false,_]", "Unmatched patterns: [_,false,_]", _hx_c._hx_AnonObject(fileName = "TestMatch.hx" ,lineNumber = 352 ,className = "unit.TestMatch" ,methodName = "testNonExhaustiveness" ))
	

	def testInvalidBinding(self):
		self.eq("Variable y must appear exactly once in each sub-pattern", "Variable y must appear exactly once in each sub-pattern", _hx_c._hx_AnonObject(fileName = "TestMatch.hx" ,lineNumber = 368 ,className = "unit.TestMatch" ,methodName = "testInvalidBinding" ))
		self.eq("Variable y must appear exactly once in each sub-pattern", "Variable y must appear exactly once in each sub-pattern", _hx_c._hx_AnonObject(fileName = "TestMatch.hx" ,lineNumber = 371 ,className = "unit.TestMatch" ,methodName = "testInvalidBinding" ))
		self.eq("Variable x must appear exactly once in each sub-pattern", "Variable x must appear exactly once in each sub-pattern", _hx_c._hx_AnonObject(fileName = "TestMatch.hx" ,lineNumber = 374 ,className = "unit.TestMatch" ,methodName = "testInvalidBinding" ))
		self.eq("Variable l must appear exactly once in each sub-pattern", "Variable l must appear exactly once in each sub-pattern", _hx_c._hx_AnonObject(fileName = "TestMatch.hx" ,lineNumber = 377 ,className = "unit.TestMatch" ,methodName = "testInvalidBinding" ))
		self.eq("Variable l must appear exactly once in each sub-pattern", "Variable l must appear exactly once in each sub-pattern", _hx_c._hx_AnonObject(fileName = "TestMatch.hx" ,lineNumber = 380 ,className = "unit.TestMatch" ,methodName = "testInvalidBinding" ))
		self.eq("String should be unit.Tree<String>", "String should be unit.Tree<String>", _hx_c._hx_AnonObject(fileName = "TestMatch.hx" ,lineNumber = 383 ,className = "unit.TestMatch" ,methodName = "testInvalidBinding" ))
	

	def testNullPattern(self):
		i = None
		r = None
		if i is None:
			r = 2
		elif (i) == 1:
			r = 1
		else:
			r = 3
		self.eq(2, r, _hx_c._hx_AnonObject(fileName = "TestMatch.hx" ,lineNumber = 395 ,className = "unit.TestMatch" ,methodName = "testNullPattern" ))
		t = None
		r1 = None
		if t is None:
			if i is not None:
				r1 = 2
			else:
				r1 = 3
		elif (t.index) == 0:
			r1 = 1
		elif (t.index) == 1:
			r1 = 4
		
		self.eq(r1, 3, _hx_c._hx_AnonObject(fileName = "TestMatch.hx" ,lineNumber = 411 ,className = "unit.TestMatch" ,methodName = "testNullPattern" ))
		e1 = _hx_c._hx_AnonObject(expr = _hx_c.haxe_macro_ExprDef.EIf(_hx_c._hx_AnonObject(expr = _hx_c.haxe_macro_ExprDef.EConst(_hx_c.haxe_macro_Constant.CInt("1")) ,pos = _hx_c._hx_AnonObject(file = "../unit/TestMatch.hx" ,min = 10486 ,max = 10487 ) ), _hx_c._hx_AnonObject(expr = _hx_c.haxe_macro_ExprDef.EConst(_hx_c.haxe_macro_Constant.CInt("2")) ,pos = _hx_c._hx_AnonObject(file = "../unit/TestMatch.hx" ,min = 10489 ,max = 10490 ) ), None) ,pos = _hx_c._hx_AnonObject(file = "../unit/TestMatch.hx" ,min = 10482 ,max = 10490 ) )
		e2 = _hx_c._hx_AnonObject(expr = _hx_c.haxe_macro_ExprDef.EIf(_hx_c._hx_AnonObject(expr = _hx_c.haxe_macro_ExprDef.EConst(_hx_c.haxe_macro_Constant.CInt("1")) ,pos = _hx_c._hx_AnonObject(file = "../unit/TestMatch.hx" ,min = 10513 ,max = 10514 ) ), _hx_c._hx_AnonObject(expr = _hx_c.haxe_macro_ExprDef.EConst(_hx_c.haxe_macro_Constant.CInt("2")) ,pos = _hx_c._hx_AnonObject(file = "../unit/TestMatch.hx" ,min = 10516 ,max = 10517 ) ), _hx_c._hx_AnonObject(expr = _hx_c.haxe_macro_ExprDef.EConst(_hx_c.haxe_macro_Constant.CInt("3")) ,pos = _hx_c._hx_AnonObject(file = "../unit/TestMatch.hx" ,min = 10523 ,max = 10524 ) )) ,pos = _hx_c._hx_AnonObject(file = "../unit/TestMatch.hx" ,min = 10509 ,max = 10524 ) )
		def _hx_local_0(e):
			_g = e.expr
			if (_g.index) == 15:
				if _g.params[2] is None:
					return 1
				else:
					return 2
			else:
				return 3
		
		matchIf = _hx_local_0
		self.eq(1, matchIf(e1), _hx_c._hx_AnonObject(fileName = "TestMatch.hx" ,lineNumber = 422 ,className = "unit.TestMatch" ,methodName = "testNullPattern" ))
		self.eq(2, matchIf(e2), _hx_c._hx_AnonObject(fileName = "TestMatch.hx" ,lineNumber = 423 ,className = "unit.TestMatch" ,methodName = "testNullPattern" ))
		t1 = _hx_c.unit_Tree.Leaf("foo")
		def _hx_local_1(t2):
			if (t2.index) == 0:
				e3 = t2.params[0]
				if t2.params[0] is None:
					return "null"
				else:
					return e3
		
			elif (t2.index) == 1:
				return "default"
			
		f = _hx_local_1
		self.eq(f(t1), "foo", _hx_c._hx_AnonObject(fileName = "TestMatch.hx" ,lineNumber = 431 ,className = "unit.TestMatch" ,methodName = "testNullPattern" ))
		def _hx_local_2(a):
			_g1 = a
			if _g1 is None:
				return 2
			elif (_g1.a) == 1:
				return 1
			else:
				return 3
		
		f1 = _hx_local_2
		self.eq(f1(None), 2, _hx_c._hx_AnonObject(fileName = "TestMatch.hx" ,lineNumber = 441 ,className = "unit.TestMatch" ,methodName = "testNullPattern" ))
		self.eq(f1(_hx_c._hx_AnonObject(a = 1 )), 1, _hx_c._hx_AnonObject(fileName = "TestMatch.hx" ,lineNumber = 442 ,className = "unit.TestMatch" ,methodName = "testNullPattern" ))
		self.eq(f1(_hx_c._hx_AnonObject(a = 2 )), 3, _hx_c._hx_AnonObject(fileName = "TestMatch.hx" ,lineNumber = 443 ,className = "unit.TestMatch" ,methodName = "testNullPattern" ))
	

	def testFakeEnumAbstract(self):
		a = 404
		r = None
		if (a) == 404:
			r = 1
		else:
			r = 2
		self.eq(r, 1, _hx_c._hx_AnonObject(fileName = "TestMatch.hx" ,lineNumber = 453 ,className = "unit.TestMatch" ,methodName = "testFakeEnumAbstract" ))
		self.eq("Unmatched patterns: MethodNotAllowed", "Unmatched patterns: MethodNotAllowed", _hx_c._hx_AnonObject(fileName = "TestMatch.hx" ,lineNumber = 455 ,className = "unit.TestMatch" ,methodName = "testFakeEnumAbstract" ))
	

	def testExtractors(self):
		def _hx_local_0(i):
			__ex0 = i
			if (i) == 3 or (i) == 2 or (i) == 1:
				return 1
			elif (i) == 4:
				_g = _hx_c.unit_TestMatch.even(__ex0)
				if (_g) == True:
					return 2
				elif (i) == 4:
					raise _HxException("unreachable")
				else:
					return 3
			
			else:
				_g = _hx_c.unit_TestMatch.even(__ex0)
				if (_g) == True:
					return 2
				elif (i) == 4:
					raise _HxException("unreachable")
				else:
					return 3
			
		
		f = _hx_local_0
		self.eq(1, f(1), _hx_c._hx_AnonObject(fileName = "TestMatch.hx" ,lineNumber = 471 ,className = "unit.TestMatch" ,methodName = "testExtractors" ))
		self.eq(1, f(2), _hx_c._hx_AnonObject(fileName = "TestMatch.hx" ,lineNumber = 472 ,className = "unit.TestMatch" ,methodName = "testExtractors" ))
		self.eq(1, f(3), _hx_c._hx_AnonObject(fileName = "TestMatch.hx" ,lineNumber = 473 ,className = "unit.TestMatch" ,methodName = "testExtractors" ))
		self.eq(2, f(4), _hx_c._hx_AnonObject(fileName = "TestMatch.hx" ,lineNumber = 474 ,className = "unit.TestMatch" ,methodName = "testExtractors" ))
		self.eq(3, f(5), _hx_c._hx_AnonObject(fileName = "TestMatch.hx" ,lineNumber = 475 ,className = "unit.TestMatch" ,methodName = "testExtractors" ))
		self.eq(3, f(7), _hx_c._hx_AnonObject(fileName = "TestMatch.hx" ,lineNumber = 476 ,className = "unit.TestMatch" ,methodName = "testExtractors" ))
		self.eq(3, f(9), _hx_c._hx_AnonObject(fileName = "TestMatch.hx" ,lineNumber = 477 ,className = "unit.TestMatch" ,methodName = "testExtractors" ))
		self.eq(2, f(6), _hx_c._hx_AnonObject(fileName = "TestMatch.hx" ,lineNumber = 478 ,className = "unit.TestMatch" ,methodName = "testExtractors" ))
		self.eq(2, f(8), _hx_c._hx_AnonObject(fileName = "TestMatch.hx" ,lineNumber = 479 ,className = "unit.TestMatch" ,methodName = "testExtractors" ))
		def _hx_local_3(t):
			def _hx_local_2():
				def _hx_local_1():
					return t
				return _hx_c._hx_AnonObject(get = _hx_local_1 )
			
			return _hx_local_2()
		
		ref = _hx_local_3
		def _hx_local_4(t1):
			if (t1.index) == 0:
				if (_hx_builtin.len(t1.params[1])) == 0:
					__ex01 = t1.params[0]
					_g1 = _hx_c.unit_TestMatch.deref(__ex01)
					if (_g1) == "Foo":
						return "Foo"
					else:
						if (t1.index) == 0:
							__ex02 = t1.params[0]
							_g11 = _hx_c.unit_TestMatch.deref(__ex02)
							if (_g11) == "Baz" or (_g11) == "Bar":
								return "BarBaz"
							else:
								if (t1.index) == 1:
									if (_hx_builtin.len(t1.params[1])) == 0:
										__ex03 = t1.params[0]
										_g2 = _hx_c.unit_TestMatch.deref(__ex03)
										i1 = _g2
										return "Int:" + Std.string(i1)
										
										
							
									else:
										return "Other"
								elif (t1.index) == 0:
									return "OtherString"
								
							
					
						elif (t1.index) == 1:
							if (_hx_builtin.len(t1.params[1])) == 0:
								__ex04 = t1.params[0]
								_g12 = _hx_c.unit_TestMatch.deref(__ex04)
								i2 = _g12
								return "Int:" + Std.string(i2)
								
								
					
							else:
								return "Other"
						
					
		
				else:
					__ex05 = t1.params[0]
					_g3 = _hx_c.unit_TestMatch.deref(__ex05)
					if (_g3) == "Baz" or (_g3) == "Bar":
						return "BarBaz"
					else:
						if (t1.index) == 1:
							if (_hx_builtin.len(t1.params[1])) == 0:
								__ex06 = t1.params[0]
								_g13 = _hx_c.unit_TestMatch.deref(__ex06)
								i3 = _g13
								return "Int:" + Std.string(i3)
								
								
					
							else:
								return "Other"
						elif (t1.index) == 0:
							return "OtherString"
						
					
		
			elif (t1.index) == 1:
				if (_hx_builtin.len(t1.params[1])) == 0:
					__ex07 = t1.params[0]
					_g4 = _hx_c.unit_TestMatch.deref(__ex07)
					i4 = _g4
					return "Int:" + Std.string(i4)
					
					
		
				else:
					return "Other"
			
		f1 = _hx_local_4
		self.eq("Foo", f1(_hx_c.unit_MiniType.MTString(ref("Foo"), [])), _hx_c._hx_AnonObject(fileName = "TestMatch.hx" ,lineNumber = 495 ,className = "unit.TestMatch" ,methodName = "testExtractors" ))
		self.eq("BarBaz", f1(_hx_c.unit_MiniType.MTString(ref("Bar"), [])), _hx_c._hx_AnonObject(fileName = "TestMatch.hx" ,lineNumber = 496 ,className = "unit.TestMatch" ,methodName = "testExtractors" ))
		self.eq("BarBaz", f1(_hx_c.unit_MiniType.MTString(ref("Baz"), [])), _hx_c._hx_AnonObject(fileName = "TestMatch.hx" ,lineNumber = 497 ,className = "unit.TestMatch" ,methodName = "testExtractors" ))
		self.eq("OtherString", f1(_hx_c.unit_MiniType.MTString(ref("a"), [])), _hx_c._hx_AnonObject(fileName = "TestMatch.hx" ,lineNumber = 498 ,className = "unit.TestMatch" ,methodName = "testExtractors" ))
		self.eq("OtherString", f1(_hx_c.unit_MiniType.MTString(ref(""), [])), _hx_c._hx_AnonObject(fileName = "TestMatch.hx" ,lineNumber = 499 ,className = "unit.TestMatch" ,methodName = "testExtractors" ))
		self.eq("Int:12", f1(_hx_c.unit_MiniType.MTInt(ref(12), [])), _hx_c._hx_AnonObject(fileName = "TestMatch.hx" ,lineNumber = 500 ,className = "unit.TestMatch" ,methodName = "testExtractors" ))
		self.eq("Other", f1(_hx_c.unit_MiniType.MTInt(ref(12), [_hx_c.unit_MiniType.MTInt(ref(10), [])])), _hx_c._hx_AnonObject(fileName = "TestMatch.hx" ,lineNumber = 501 ,className = "unit.TestMatch" ,methodName = "testExtractors" ))
		def _hx_local_5(i5):
			__ex08 = i5
			arr = i5
			if (_hx_builtin.len(i5)) == 1:
				x = _hx_array_get(i5,0)
				return 1
			
			else:
				_g5 = _hx_c.unit_TestMatch.isPair(__ex08)
				if (_g5.index) == 0:
					p = _g5.params[0]
					return p.a + p.b
				
				else:
					arr1 = i5
					return 3
				
			
		
		g = _hx_local_5
		self.eq(3, g([]), _hx_c._hx_AnonObject(fileName = "TestMatch.hx" ,lineNumber = 511 ,className = "unit.TestMatch" ,methodName = "testExtractors" ))
		self.eq(1, g([1]), _hx_c._hx_AnonObject(fileName = "TestMatch.hx" ,lineNumber = 512 ,className = "unit.TestMatch" ,methodName = "testExtractors" ))
		self.eq(5, g([2, 3]), _hx_c._hx_AnonObject(fileName = "TestMatch.hx" ,lineNumber = 513 ,className = "unit.TestMatch" ,methodName = "testExtractors" ))
		self.eq(3, g([2, 3, 4]), _hx_c._hx_AnonObject(fileName = "TestMatch.hx" ,lineNumber = 514 ,className = "unit.TestMatch" ,methodName = "testExtractors" ))
		def _hx_local_6(i6):
			return (i6 & 1) != 0
		anon = _hx_c._hx_AnonObject(odd = _hx_local_6 )
		i7 = 9
		r = None
		__ex09 = i7
		if (i7) == 1:
			r = 1
		elif (i7) == 9:
			_g6 = anon.odd(__ex09)
			if (_g6) == True:
				r = 2
			elif (i7) == 9:
				r = 3
			else:
				r = 4
		
		else:
			_g6 = anon.odd(__ex09)
			if (_g6) == True:
				r = 2
			elif (i7) == 9:
				r = 3
			else:
				r = 4
		
		
		self.eq(2, r, _hx_c._hx_AnonObject(fileName = "TestMatch.hx" ,lineNumber = 527 ,className = "unit.TestMatch" ,methodName = "testExtractors" ))
		def _hx_local_7(i11,i21):
			return i11 * i21
		mul = _hx_local_7
		def _hx_local_12(i8):
			__ex010 = i8
			__ex011 = i8
			if (i8) == 1:
				return 1
			else:
				def _hx_local_9(f2,i12):
					def _hx_local_8(i22):
						return f2(i12, i22)
					return _hx_local_8
				
				_g7 = (_hx_local_9)(mul, 4)(__ex010)
				if (_g7) == 8:
					return 2
				else:
					__ex012 = i8
					def _hx_local_11(f3,i13):
						def _hx_local_10(i23):
							return f3(i13, i23)
						return _hx_local_10
					
					_g14 = (_hx_local_11)(mul, 5)(__ex012)
					if (_g14) == 15:
						return 3
					else:
						return 4
					
				
			
		
		check = _hx_local_12
		self.eq(1, check(1), _hx_c._hx_AnonObject(fileName = "TestMatch.hx" ,lineNumber = 540 ,className = "unit.TestMatch" ,methodName = "testExtractors" ))
		self.eq(2, check(2), _hx_c._hx_AnonObject(fileName = "TestMatch.hx" ,lineNumber = 541 ,className = "unit.TestMatch" ,methodName = "testExtractors" ))
		self.eq(3, check(3), _hx_c._hx_AnonObject(fileName = "TestMatch.hx" ,lineNumber = 542 ,className = "unit.TestMatch" ,methodName = "testExtractors" ))
		self.eq(4, check(4), _hx_c._hx_AnonObject(fileName = "TestMatch.hx" ,lineNumber = 543 ,className = "unit.TestMatch" ,methodName = "testExtractors" ))
		def _hx_local_14(pred):
			def _hx_local_13(x1):
				if pred(x1):
					return _hx_c.haxe_ds_Option.Some(x1)
				else:
					return _hx_c.haxe_ds_Option._hx_None
			return _hx_local_13
		
		_hx_is = _hx_local_14
		def _hx_local_16(pred1):
			def _hx_local_15(x2):
				if not pred1(x2):
					return _hx_c.haxe_ds_Option.Some(x2)
				else:
					return _hx_c.haxe_ds_Option._hx_None
			return _hx_local_15
		
		isNot = _hx_local_16
		def _hx_local_17(i9,s,t2):
			return _hx_c.Std.string(t2)
		testArgs = _hx_local_17
		def _hx_local_34(i10):
			__ex013 = i10
			__ex014 = i10
			__ex015 = i10
			__ex016 = i10
			arr2 = i10
			if (_hx_builtin.len(i10)) == 1:
				x3 = _hx_array_get(i10,0)
				return 1
			
			else:
				_g8 = _hx_c.unit_TestMatch.isPair(__ex013)
				if (_g8.index) == 0:
					a = _g8.params[0].a
					b = _g8.params[0].b
					if a < 0:
						return 42
					else:
						__ex017 = i10
						_g15 = _hx_c.unit_TestMatch.isPair(__ex017)
						if (_g15.index) == 0:
							__ex018 = _g15.params[0].a
							b1 = _g15.params[0].b
							_g21 = _hx_is(_hx_c.unit_TestMatch.even)(__ex018)
							if (_g21.index) == 0:
								a1 = _g21.params[0]
								return a1 + b1
							
							else:
								__ex019 = i10
								_g31 = _hx_c.unit_TestMatch.isPair(__ex019)
								if (_g31.index) == 0:
									__ex020 = _g31.params[0].a
									b2 = _g31.params[0].b
									_g41 = isNot(_hx_c.unit_TestMatch.even)(__ex020)
									if (_g41.index) == 0:
										a2 = _g41.params[0]
										return a2 * b2
									
									else:
										__ex021 = i10
										def _hx_local_19(f4,i14,s1):
											def _hx_local_18(t3):
												return f4(i14, s1, t3)
											return _hx_local_18
										
										_g51 = (_hx_local_19)(testArgs, 1, "foo")(__ex021)
										if (_g51) == "[99,98,97]":
											return 99
										else:
											arr3 = i10
											return 3
										
										
									
									
								
								else:
									__ex022 = i10
									def _hx_local_21(f5,i15,s2):
										def _hx_local_20(t4):
											return f5(i15, s2, t4)
										return _hx_local_20
									
									_g42 = (_hx_local_21)(testArgs, 1, "foo")(__ex022)
									if (_g42) == "[99,98,97]":
										return 99
									else:
										arr4 = i10
										return 3
									
									
								
								
							
							
						
						else:
							__ex023 = i10
							_g22 = _hx_c.unit_TestMatch.isPair(__ex023)
							if (_g22.index) == 0:
								__ex024 = _g22.params[0].a
								b3 = _g22.params[0].b
								_g32 = isNot(_hx_c.unit_TestMatch.even)(__ex024)
								if (_g32.index) == 0:
									a3 = _g32.params[0]
									return a3 * b3
								
								else:
									__ex025 = i10
									def _hx_local_23(f6,i16,s3):
										def _hx_local_22(t5):
											return f6(i16, s3, t5)
										return _hx_local_22
									
									_g43 = (_hx_local_23)(testArgs, 1, "foo")(__ex025)
									if (_g43) == "[99,98,97]":
										return 99
									else:
										arr5 = i10
										return 3
									
									
								
								
							
							else:
								__ex026 = i10
								def _hx_local_25(f7,i17,s4):
									def _hx_local_24(t6):
										return f7(i17, s4, t6)
									return _hx_local_24
								
								_g33 = (_hx_local_25)(testArgs, 1, "foo")(__ex026)
								if (_g33) == "[99,98,97]":
									return 99
								else:
									arr6 = i10
									return 3
								
								
							
							
						
						
					
				
				else:
					__ex017 = i10
					_g15 = _hx_c.unit_TestMatch.isPair(__ex017)
					if (_g15.index) == 0:
						__ex018 = _g15.params[0].a
						b1 = _g15.params[0].b
						_g21 = _hx_is(_hx_c.unit_TestMatch.even)(__ex018)
						if (_g21.index) == 0:
							a1 = _g21.params[0]
							return a1 + b1
						
						else:
							__ex019 = i10
							_g31 = _hx_c.unit_TestMatch.isPair(__ex019)
							if (_g31.index) == 0:
								__ex020 = _g31.params[0].a
								b2 = _g31.params[0].b
								_g41 = isNot(_hx_c.unit_TestMatch.even)(__ex020)
								if (_g41.index) == 0:
									a2 = _g41.params[0]
									return a2 * b2
								
								else:
									__ex021 = i10
									def _hx_local_27(f4,i14,s1):
										def _hx_local_26(t3):
											return f4(i14, s1, t3)
										return _hx_local_26
									
									_g51 = (_hx_local_27)(testArgs, 1, "foo")(__ex021)
									if (_g51) == "[99,98,97]":
										return 99
									else:
										arr3 = i10
										return 3
									
									
								
								
							
							else:
								__ex022 = i10
								def _hx_local_29(f5,i15,s2):
									def _hx_local_28(t4):
										return f5(i15, s2, t4)
									return _hx_local_28
								
								_g42 = (_hx_local_29)(testArgs, 1, "foo")(__ex022)
								if (_g42) == "[99,98,97]":
									return 99
								else:
									arr4 = i10
									return 3
								
								
							
							
						
						
					
					else:
						__ex023 = i10
						_g22 = _hx_c.unit_TestMatch.isPair(__ex023)
						if (_g22.index) == 0:
							__ex024 = _g22.params[0].a
							b3 = _g22.params[0].b
							_g32 = isNot(_hx_c.unit_TestMatch.even)(__ex024)
							if (_g32.index) == 0:
								a3 = _g32.params[0]
								return a3 * b3
							
							else:
								__ex025 = i10
								def _hx_local_31(f6,i16,s3):
									def _hx_local_30(t5):
										return f6(i16, s3, t5)
									return _hx_local_30
								
								_g43 = (_hx_local_31)(testArgs, 1, "foo")(__ex025)
								if (_g43) == "[99,98,97]":
									return 99
								else:
									arr5 = i10
									return 3
								
								
							
							
						
						else:
							__ex026 = i10
							def _hx_local_33(f7,i17,s4):
								def _hx_local_32(t6):
									return f7(i17, s4, t6)
								return _hx_local_32
							
							_g33 = (_hx_local_33)(testArgs, 1, "foo")(__ex026)
							if (_g33) == "[99,98,97]":
								return 99
							else:
								arr6 = i10
								return 3
							
							
						
						
					
					
				
			
		
		h = _hx_local_34
		self.eq(3, h([]), _hx_c._hx_AnonObject(fileName = "TestMatch.hx" ,lineNumber = 567 ,className = "unit.TestMatch" ,methodName = "testExtractors" ))
		self.eq(1, h([1]), _hx_c._hx_AnonObject(fileName = "TestMatch.hx" ,lineNumber = 568 ,className = "unit.TestMatch" ,methodName = "testExtractors" ))
		self.eq(1, h([2]), _hx_c._hx_AnonObject(fileName = "TestMatch.hx" ,lineNumber = 569 ,className = "unit.TestMatch" ,methodName = "testExtractors" ))
		self.eq(5, h([2, 3]), _hx_c._hx_AnonObject(fileName = "TestMatch.hx" ,lineNumber = 570 ,className = "unit.TestMatch" ,methodName = "testExtractors" ))
		self.eq(3, h([1, 3]), _hx_c._hx_AnonObject(fileName = "TestMatch.hx" ,lineNumber = 571 ,className = "unit.TestMatch" ,methodName = "testExtractors" ))
		self.eq(3, h([2, 3, 4]), _hx_c._hx_AnonObject(fileName = "TestMatch.hx" ,lineNumber = 572 ,className = "unit.TestMatch" ,methodName = "testExtractors" ))
		self.eq(42, h([-1, 3]), _hx_c._hx_AnonObject(fileName = "TestMatch.hx" ,lineNumber = 573 ,className = "unit.TestMatch" ,methodName = "testExtractors" ))
		self.eq(99, h([99, 98, 97]), _hx_c._hx_AnonObject(fileName = "TestMatch.hx" ,lineNumber = 574 ,className = "unit.TestMatch" ,methodName = "testExtractors" ))
	





unit_TestMatch._hx_class = unit_TestMatch
unit_TestMatch._hx_class_name = "unit.TestMatch"
_hx_classes["unit.TestMatch"] = unit_TestMatch
_hx_c.unit_TestMatch = unit_TestMatch
unit_TestMatch._hx_fields = []
unit_TestMatch._hx_props = []
unit_TestMatch._hx_methods = ["testBasic","testTuple","testGrouping","testSubtyping","testGadt","testClassSwitch","testOr","testStaticNull","testNonExhaustiveness","testInvalidBinding","testNullPattern","testFakeEnumAbstract","testExtractors"]
unit_TestMatch._hx_statics = ["switchNormal","switchCapture","switchArray","switchArray2","switchStructure","switchCrazy","switchGuard","switchClass","toStringX","orMatch","isPair","even","deref"]
unit_TestMatch._hx_interfaces = []
unit_TestMatch._hx_super = unit_Test
unit_TestMatch._hx_meta = _hx_c._hx_AnonObject(obj=_hx_c._hx_AnonObject(),statics=_hx_c._hx_AnonObject(),fields=_hx_c._hx_AnonObject())
def unit_TestMatch_hx_empty_init (_hx_o):
	pass
unit_TestMatch._hx_empty_init = unit_TestMatch_hx_empty_init
class unit_TestMeta_E(_hx_c.Enum):
	def __init__(self, t, i, p):
		super(unit_TestMeta_E,self).__init__(t, i, p)

unit_TestMeta_E.A = unit_TestMeta_E("A", 0, list())

unit_TestMeta_E.B = unit_TestMeta_E("B", 1, list())

unit_TestMeta_E._hx_constructs = ["A","B"]
unit_TestMeta_E._hx_class = unit_TestMeta_E
unit_TestMeta_E._hx_class_name = "unit._TestMeta._TestMeta.E"
_hx_classes["unit._TestMeta._TestMeta.E"] = unit_TestMeta_E
_hx_c.unit_TestMeta_E = unit_TestMeta_E
unit_TestMeta_E._hx_meta = _hx_c._hx_AnonObject(obj=_hx_c._hx_AnonObject(enumMeta = None),fields=_hx_c._hx_AnonObject(A = _hx_c._hx_AnonObject(a = None),B = _hx_c._hx_AnonObject(b = [0])))
# print unit.TestMeta.TestMeta
class unit_TestMeta(unit_Test):


	def __init__(self):
		super().__init__()
	def fields(self,o):
		if o is None:
			return None
		
		fl = _hx_c.Reflect.fields(o)
		fl.sort(key=_hx_functools.cmp_to_key(_hx_c.Reflect.compare))
		return "#".join(_hx_builtin.list(_hx_builtin.map(_hx_c.Std.string, fl)))
	

	def testMeta(self):
		m = _hx_c.haxe_rtti_Meta.getType(_hx_c.unit_TestMeta_E)
		self.eq(self.fields(m), "enumMeta", _hx_c._hx_AnonObject(fileName = "TestMeta.hx" ,lineNumber = 25 ,className = "unit.TestMeta" ,methodName = "testMeta" ))
		self.eq(m.enumMeta, None, _hx_c._hx_AnonObject(fileName = "TestMeta.hx" ,lineNumber = 26 ,className = "unit.TestMeta" ,methodName = "testMeta" ))
		m1 = _hx_c.haxe_rtti_Meta.getType(_hx_c.unit_TestMeta)
		self.eq(self.fields(m1), "classMeta", _hx_c._hx_AnonObject(fileName = "TestMeta.hx" ,lineNumber = 29 ,className = "unit.TestMeta" ,methodName = "testMeta" ))
		self.eq(_hx_c.Std.string(m1.classMeta), "[x]", _hx_c._hx_AnonObject(fileName = "TestMeta.hx" ,lineNumber = 30 ,className = "unit.TestMeta" ,methodName = "testMeta" ))
		m2 = _hx_c.haxe_rtti_Meta.getFields(_hx_c.unit_TestMeta_E)
		self.eq(self.fields(m2), "A#B", _hx_c._hx_AnonObject(fileName = "TestMeta.hx" ,lineNumber = 33 ,className = "unit.TestMeta" ,methodName = "testMeta" ))
		self.eq(self.fields(m2.A), "a", _hx_c._hx_AnonObject(fileName = "TestMeta.hx" ,lineNumber = 34 ,className = "unit.TestMeta" ,methodName = "testMeta" ))
		self.eq(m2.A.a, None, _hx_c._hx_AnonObject(fileName = "TestMeta.hx" ,lineNumber = 35 ,className = "unit.TestMeta" ,methodName = "testMeta" ))
		self.eq(self.fields(m2.B), "b", _hx_c._hx_AnonObject(fileName = "TestMeta.hx" ,lineNumber = 36 ,className = "unit.TestMeta" ,methodName = "testMeta" ))
		self.eq(_hx_c.Std.string(m2.B.b), "[0]", _hx_c._hx_AnonObject(fileName = "TestMeta.hx" ,lineNumber = 37 ,className = "unit.TestMeta" ,methodName = "testMeta" ))
		m3 = _hx_c.haxe_rtti_Meta.getFields(_hx_c.unit_TestMeta)
		self.eq(self.fields(m3), "_", _hx_c._hx_AnonObject(fileName = "TestMeta.hx" ,lineNumber = 40 ,className = "unit.TestMeta" ,methodName = "testMeta" ))
		self.eq(self.fields(m3._), "new", _hx_c._hx_AnonObject(fileName = "TestMeta.hx" ,lineNumber = 41 ,className = "unit.TestMeta" ,methodName = "testMeta" ))
		m4 = _hx_c.haxe_rtti_Meta.getStatics(_hx_c.unit_TestMeta)
		self.eq(self.fields(m4), "foo", _hx_c._hx_AnonObject(fileName = "TestMeta.hx" ,lineNumber = 44 ,className = "unit.TestMeta" ,methodName = "testMeta" ))
		self.eq(self.fields(m4.foo), "_int#complex#empty", _hx_c._hx_AnonObject(fileName = "TestMeta.hx" ,lineNumber = 45 ,className = "unit.TestMeta" ,methodName = "testMeta" ))
		self.eq(m4.foo.empty, None, _hx_c._hx_AnonObject(fileName = "TestMeta.hx" ,lineNumber = 46 ,className = "unit.TestMeta" ,methodName = "testMeta" ))
		self.eq(_hx_c.Std.string(m4.foo._int), "[-45]", _hx_c._hx_AnonObject(fileName = "TestMeta.hx" ,lineNumber = 47 ,className = "unit.TestMeta" ,methodName = "testMeta" ))
		c = _hx_array_get(_hx_array_get(m4.foo.complex,0),0)
		self.eq(self.fields(c), "b#k#x#y#z", _hx_c._hx_AnonObject(fileName = "TestMeta.hx" ,lineNumber = 49 ,className = "unit.TestMeta" ,methodName = "testMeta" ))
		self.eq(c.x, 0, _hx_c._hx_AnonObject(fileName = "TestMeta.hx" ,lineNumber = 50 ,className = "unit.TestMeta" ,methodName = "testMeta" ))
		self.eq(c.y, "hello", _hx_c._hx_AnonObject(fileName = "TestMeta.hx" ,lineNumber = 51 ,className = "unit.TestMeta" ,methodName = "testMeta" ))
		self.eq(c.z, -1.48, _hx_c._hx_AnonObject(fileName = "TestMeta.hx" ,lineNumber = 52 ,className = "unit.TestMeta" ,methodName = "testMeta" ))
		self.eq(c.b, True, _hx_c._hx_AnonObject(fileName = "TestMeta.hx" ,lineNumber = 53 ,className = "unit.TestMeta" ,methodName = "testMeta" ))
		self.eq(c.k, None, _hx_c._hx_AnonObject(fileName = "TestMeta.hx" ,lineNumber = 54 ,className = "unit.TestMeta" ,methodName = "testMeta" ))
	

	def testExprMeta(self):
		self.eq(_hx_c._hx_AnonObject(name = "foo" ,args = [] ).name, "foo", _hx_c._hx_AnonObject(fileName = "TestMeta.hx" ,lineNumber = 58 ,className = "unit.TestMeta" ,methodName = "testExprMeta" ))
		self.eq(_hx_c._hx_AnonObject(name = "foo" ,args = ["a"] ).name, "foo", _hx_c._hx_AnonObject(fileName = "TestMeta.hx" ,lineNumber = 59 ,className = "unit.TestMeta" ,methodName = "testExprMeta" ))
		self.eq(_hx_c._hx_AnonObject(name = "foo" ,args = [] ).name, "foo", _hx_c._hx_AnonObject(fileName = "TestMeta.hx" ,lineNumber = 60 ,className = "unit.TestMeta" ,methodName = "testExprMeta" ))
		m = _hx_c._hx_AnonObject(name = "bar" ,args = ["1", "foo"] )
		self.eq(m.name, "bar", _hx_c._hx_AnonObject(fileName = "TestMeta.hx" ,lineNumber = 63 ,className = "unit.TestMeta" ,methodName = "testExprMeta" ))
		self.eq(_hx_array_get(m.args,0), "1", _hx_c._hx_AnonObject(fileName = "TestMeta.hx" ,lineNumber = 64 ,className = "unit.TestMeta" ,methodName = "testExprMeta" ))
		self.eq(_hx_array_get(m.args,1), "foo", _hx_c._hx_AnonObject(fileName = "TestMeta.hx" ,lineNumber = 65 ,className = "unit.TestMeta" ,methodName = "testExprMeta" ))
		self.eq(_hx_builtin.len(_hx_c._hx_AnonObject(name = "foo" ,args = [] ).args), 0, _hx_c._hx_AnonObject(fileName = "TestMeta.hx" ,lineNumber = 67 ,className = "unit.TestMeta" ,methodName = "testExprMeta" ))
		self.eq(_hx_builtin.len(_hx_c._hx_AnonObject(name = "foo" ,args = ["1"] ).args), 1, _hx_c._hx_AnonObject(fileName = "TestMeta.hx" ,lineNumber = 68 ,className = "unit.TestMeta" ,methodName = "testExprMeta" ))
	





unit_TestMeta._hx_class = unit_TestMeta
unit_TestMeta._hx_class_name = "unit.TestMeta"
_hx_classes["unit.TestMeta"] = unit_TestMeta
_hx_c.unit_TestMeta = unit_TestMeta
unit_TestMeta._hx_fields = []
unit_TestMeta._hx_props = []
unit_TestMeta._hx_methods = ["fields","testMeta","testExprMeta"]
unit_TestMeta._hx_statics = ["__meta__","foo"]
unit_TestMeta._hx_interfaces = []
unit_TestMeta._hx_super = unit_Test
unit_TestMeta._hx_meta = _hx_c._hx_AnonObject(obj=_hx_c._hx_AnonObject(classMeta = ["x"]),statics=_hx_c._hx_AnonObject(foo = _hx_c._hx_AnonObject(empty = None,_int = [-45],complex = [[_hx_c._hx_AnonObject(x = 0 ,y = "hello" ,z = -1.48 ,b = True ,k = None )]])),fields=_hx_c._hx_AnonObject(_ = _hx_c._hx_AnonObject(new = None)))
def unit_TestMeta_hx_empty_init (_hx_o):
	pass
unit_TestMeta._hx_empty_init = unit_TestMeta_hx_empty_init
# print unit.TestMisc.MyDynamicClass
class unit_MyDynamicClass:


	def __init__(self,v):
		self.v = None
		self.v = v
	
	# var v
	def get(self):
		return self.v

	def add(self,x,y):
		return self.v + x + y

	def iadd(self,x,y):
		return self.v + x + y





unit_MyDynamicClass._hx_class = unit_MyDynamicClass
unit_MyDynamicClass._hx_class_name = "unit.MyDynamicClass"
_hx_classes["unit.MyDynamicClass"] = unit_MyDynamicClass
_hx_c.unit_MyDynamicClass = unit_MyDynamicClass
unit_MyDynamicClass._hx_fields = ["v"]
unit_MyDynamicClass._hx_props = []
unit_MyDynamicClass._hx_methods = ["get","add","iadd"]
unit_MyDynamicClass._hx_statics = ["Z","staticDynamic","W","get_W","set_W"]
unit_MyDynamicClass._hx_interfaces = []
unit_MyDynamicClass._hx_meta = _hx_c._hx_AnonObject(obj=_hx_c._hx_AnonObject(),statics=_hx_c._hx_AnonObject(),fields=_hx_c._hx_AnonObject())
def unit_MyDynamicClass_hx_empty_init (_hx_o):
	_hx_o.v = None
unit_MyDynamicClass._hx_empty_init = unit_MyDynamicClass_hx_empty_init
# print unit.TestMisc.MyDynamicSubClass
class unit_MyDynamicSubClass(unit_MyDynamicClass):


	def __init__(self,v):
		super().__init__(v)
	def add(self,x,y):
		return (self.v + x + y) * 2





unit_MyDynamicSubClass._hx_class = unit_MyDynamicSubClass
unit_MyDynamicSubClass._hx_class_name = "unit.MyDynamicSubClass"
_hx_classes["unit.MyDynamicSubClass"] = unit_MyDynamicSubClass
_hx_c.unit_MyDynamicSubClass = unit_MyDynamicSubClass
unit_MyDynamicSubClass._hx_fields = []
unit_MyDynamicSubClass._hx_props = []
unit_MyDynamicSubClass._hx_methods = ["add"]
unit_MyDynamicSubClass._hx_statics = []
unit_MyDynamicSubClass._hx_interfaces = []
unit_MyDynamicSubClass._hx_super = unit_MyDynamicClass
unit_MyDynamicSubClass._hx_meta = _hx_c._hx_AnonObject(obj=_hx_c._hx_AnonObject(),statics=_hx_c._hx_AnonObject(),fields=_hx_c._hx_AnonObject())
def unit_MyDynamicSubClass_hx_empty_init (_hx_o):
	pass
unit_MyDynamicSubClass._hx_empty_init = unit_MyDynamicSubClass_hx_empty_init
# print unit.TestMisc.MyDynamicSubClass2
class unit_MyDynamicSubClass2(unit_MyDynamicClass):


	def __init__(self,v):
		super().__init__(v)
	def add(self,x,y):
		return (self.v + x + y) * 2





unit_MyDynamicSubClass2._hx_class = unit_MyDynamicSubClass2
unit_MyDynamicSubClass2._hx_class_name = "unit.MyDynamicSubClass2"
_hx_classes["unit.MyDynamicSubClass2"] = unit_MyDynamicSubClass2
_hx_c.unit_MyDynamicSubClass2 = unit_MyDynamicSubClass2
unit_MyDynamicSubClass2._hx_fields = []
unit_MyDynamicSubClass2._hx_props = []
unit_MyDynamicSubClass2._hx_methods = ["add"]
unit_MyDynamicSubClass2._hx_statics = []
unit_MyDynamicSubClass2._hx_interfaces = []
unit_MyDynamicSubClass2._hx_super = unit_MyDynamicClass
unit_MyDynamicSubClass2._hx_meta = _hx_c._hx_AnonObject(obj=_hx_c._hx_AnonObject(),statics=_hx_c._hx_AnonObject(),fields=_hx_c._hx_AnonObject())
def unit_MyDynamicSubClass2_hx_empty_init (_hx_o):
	pass
unit_MyDynamicSubClass2._hx_empty_init = unit_MyDynamicSubClass2_hx_empty_init
# print unit.TestMisc.MyOtherDynamicClass
class unit_MyOtherDynamicClass(unit_MyDynamicClass):


	def __init__(self,v):
		def _hx_local_0(x,y):
			return x + y + 10
		self.add = _hx_local_0
		super().__init__(v)
	




unit_MyOtherDynamicClass._hx_class = unit_MyOtherDynamicClass
unit_MyOtherDynamicClass._hx_class_name = "unit.MyOtherDynamicClass"
_hx_classes["unit.MyOtherDynamicClass"] = unit_MyOtherDynamicClass
_hx_c.unit_MyOtherDynamicClass = unit_MyOtherDynamicClass
unit_MyOtherDynamicClass._hx_fields = []
unit_MyOtherDynamicClass._hx_props = []
unit_MyOtherDynamicClass._hx_methods = []
unit_MyOtherDynamicClass._hx_statics = []
unit_MyOtherDynamicClass._hx_interfaces = []
unit_MyOtherDynamicClass._hx_super = unit_MyDynamicClass
unit_MyOtherDynamicClass._hx_meta = _hx_c._hx_AnonObject(obj=_hx_c._hx_AnonObject(),statics=_hx_c._hx_AnonObject(),fields=_hx_c._hx_AnonObject())
def unit_MyOtherDynamicClass_hx_empty_init (_hx_o):
	pass
unit_MyOtherDynamicClass._hx_empty_init = unit_MyOtherDynamicClass_hx_empty_init
# print unit.TestMisc.IDefArgs
class unit_IDefArgs:

	# var get
	pass




unit_IDefArgs._hx_class = unit_IDefArgs
unit_IDefArgs._hx_class_name = "unit.IDefArgs"
_hx_classes["unit.IDefArgs"] = unit_IDefArgs
_hx_c.unit_IDefArgs = unit_IDefArgs
unit_IDefArgs._hx_fields = []
unit_IDefArgs._hx_props = []
unit_IDefArgs._hx_methods = ["get"]
unit_IDefArgs._hx_statics = []
unit_IDefArgs._hx_interfaces = []
unit_IDefArgs._hx_meta = _hx_c._hx_AnonObject(obj=_hx_c._hx_AnonObject(),statics=_hx_c._hx_AnonObject(),fields=_hx_c._hx_AnonObject())
def unit_IDefArgs_hx_empty_init (_hx_o):
	pass
unit_IDefArgs._hx_empty_init = unit_IDefArgs_hx_empty_init
# print unit.TestMisc.BaseDefArgs
class unit_BaseDefArgs:

	def get(self,x = 3):
		if x is None:
			x = 3
		
		return x
	





unit_BaseDefArgs._hx_class = unit_BaseDefArgs
unit_BaseDefArgs._hx_class_name = "unit.BaseDefArgs"
_hx_classes["unit.BaseDefArgs"] = unit_BaseDefArgs
_hx_c.unit_BaseDefArgs = unit_BaseDefArgs
unit_BaseDefArgs._hx_fields = []
unit_BaseDefArgs._hx_props = []
unit_BaseDefArgs._hx_methods = ["get"]
unit_BaseDefArgs._hx_statics = []
unit_BaseDefArgs._hx_interfaces = []
unit_BaseDefArgs._hx_meta = _hx_c._hx_AnonObject(obj=_hx_c._hx_AnonObject(),statics=_hx_c._hx_AnonObject(),fields=_hx_c._hx_AnonObject())
def unit_BaseDefArgs_hx_empty_init (_hx_o):
	pass
unit_BaseDefArgs._hx_empty_init = unit_BaseDefArgs_hx_empty_init
# print unit.TestMisc.ExtDefArgs
class unit_ExtDefArgs(unit_BaseDefArgs):


	def __init__(self):
		None
	def get(self,x = 7):
		if x is None:
			x = 7
		
		return x
	





unit_ExtDefArgs._hx_class = unit_ExtDefArgs
unit_ExtDefArgs._hx_class_name = "unit.ExtDefArgs"
_hx_classes["unit.ExtDefArgs"] = unit_ExtDefArgs
_hx_c.unit_ExtDefArgs = unit_ExtDefArgs
unit_ExtDefArgs._hx_fields = []
unit_ExtDefArgs._hx_props = []
unit_ExtDefArgs._hx_methods = ["get"]
unit_ExtDefArgs._hx_statics = []
unit_ExtDefArgs._hx_interfaces = [unit_IDefArgs]
unit_ExtDefArgs._hx_super = unit_BaseDefArgs
unit_ExtDefArgs._hx_meta = _hx_c._hx_AnonObject(obj=_hx_c._hx_AnonObject(),statics=_hx_c._hx_AnonObject(),fields=_hx_c._hx_AnonObject())
def unit_ExtDefArgs_hx_empty_init (_hx_o):
	pass
unit_ExtDefArgs._hx_empty_init = unit_ExtDefArgs_hx_empty_init
# print unit.TestMisc.BaseConstrOpt
class unit_BaseConstrOpt:


	def __init__(self,s = "test",i = -5,b = True):
		if s is None:
			s = "test"
		
		if i is None:
			i = -5
		
		if b is None:
			b = True
		
		self.s = None
		self.i = None
		self.b = None
		self.s = s
		self.i = i
		self.b = b
		
	
	# var s
	# var i
	# var b




unit_BaseConstrOpt._hx_class = unit_BaseConstrOpt
unit_BaseConstrOpt._hx_class_name = "unit.BaseConstrOpt"
_hx_classes["unit.BaseConstrOpt"] = unit_BaseConstrOpt
_hx_c.unit_BaseConstrOpt = unit_BaseConstrOpt
unit_BaseConstrOpt._hx_fields = ["s","i","b"]
unit_BaseConstrOpt._hx_props = []
unit_BaseConstrOpt._hx_methods = []
unit_BaseConstrOpt._hx_statics = []
unit_BaseConstrOpt._hx_interfaces = []
unit_BaseConstrOpt._hx_meta = _hx_c._hx_AnonObject(obj=_hx_c._hx_AnonObject(),statics=_hx_c._hx_AnonObject(),fields=_hx_c._hx_AnonObject())
def unit_BaseConstrOpt_hx_empty_init (_hx_o):
	_hx_o.s = None
	_hx_o.i = None
	_hx_o.b = None
unit_BaseConstrOpt._hx_empty_init = unit_BaseConstrOpt_hx_empty_init
# print unit.TestMisc.SubConstrOpt
class unit_SubConstrOpt(unit_BaseConstrOpt):


	def __init__(self):
		super().__init__()




unit_SubConstrOpt._hx_class = unit_SubConstrOpt
unit_SubConstrOpt._hx_class_name = "unit.SubConstrOpt"
_hx_classes["unit.SubConstrOpt"] = unit_SubConstrOpt
_hx_c.unit_SubConstrOpt = unit_SubConstrOpt
unit_SubConstrOpt._hx_fields = []
unit_SubConstrOpt._hx_props = []
unit_SubConstrOpt._hx_methods = []
unit_SubConstrOpt._hx_statics = []
unit_SubConstrOpt._hx_interfaces = []
unit_SubConstrOpt._hx_super = unit_BaseConstrOpt
unit_SubConstrOpt._hx_meta = _hx_c._hx_AnonObject(obj=_hx_c._hx_AnonObject(),statics=_hx_c._hx_AnonObject(),fields=_hx_c._hx_AnonObject())
def unit_SubConstrOpt_hx_empty_init (_hx_o):
	pass
unit_SubConstrOpt._hx_empty_init = unit_SubConstrOpt_hx_empty_init
# print unit.TestMisc.SubConstrOpt2
class unit_SubConstrOpt2(unit_BaseConstrOpt):


	def __init__(self,s = None,i = None,b = None):
		if s is None:
			s = None
		
		if i is None:
			i = None
		
		if b is None:
			b = None
		
		super().__init__(s, i, b)
	




unit_SubConstrOpt2._hx_class = unit_SubConstrOpt2
unit_SubConstrOpt2._hx_class_name = "unit.SubConstrOpt2"
_hx_classes["unit.SubConstrOpt2"] = unit_SubConstrOpt2
_hx_c.unit_SubConstrOpt2 = unit_SubConstrOpt2
unit_SubConstrOpt2._hx_fields = []
unit_SubConstrOpt2._hx_props = []
unit_SubConstrOpt2._hx_methods = []
unit_SubConstrOpt2._hx_statics = []
unit_SubConstrOpt2._hx_interfaces = []
unit_SubConstrOpt2._hx_super = unit_BaseConstrOpt
unit_SubConstrOpt2._hx_meta = _hx_c._hx_AnonObject(obj=_hx_c._hx_AnonObject(),statics=_hx_c._hx_AnonObject(),fields=_hx_c._hx_AnonObject())
def unit_SubConstrOpt2_hx_empty_init (_hx_o):
	pass
unit_SubConstrOpt2._hx_empty_init = unit_SubConstrOpt2_hx_empty_init
# print unit.TestMisc.SubConstrOpt3
class unit_SubConstrOpt3(unit_BaseConstrOpt):


	def __init__(self,s = "test2",i = -6):
		if s is None:
			s = "test2"
		
		if i is None:
			i = -6
		
		super().__init__(s, i)
	




unit_SubConstrOpt3._hx_class = unit_SubConstrOpt3
unit_SubConstrOpt3._hx_class_name = "unit.SubConstrOpt3"
_hx_classes["unit.SubConstrOpt3"] = unit_SubConstrOpt3
_hx_c.unit_SubConstrOpt3 = unit_SubConstrOpt3
unit_SubConstrOpt3._hx_fields = []
unit_SubConstrOpt3._hx_props = []
unit_SubConstrOpt3._hx_methods = []
unit_SubConstrOpt3._hx_statics = []
unit_SubConstrOpt3._hx_interfaces = []
unit_SubConstrOpt3._hx_super = unit_BaseConstrOpt
unit_SubConstrOpt3._hx_meta = _hx_c._hx_AnonObject(obj=_hx_c._hx_AnonObject(),statics=_hx_c._hx_AnonObject(),fields=_hx_c._hx_AnonObject())
def unit_SubConstrOpt3_hx_empty_init (_hx_o):
	pass
unit_SubConstrOpt3._hx_empty_init = unit_SubConstrOpt3_hx_empty_init
# print unit.TestMisc.TestMisc
class unit_TestMisc(unit_Test):


	def __init__(self):
		super().__init__()
	def testPackageConflict(self):
		self.eq(_hx_c.unit_TestMisc.unit, "testing package conflict", _hx_c._hx_AnonObject(fileName = "TestMisc.hx" ,lineNumber = 112 ,className = "unit.TestMisc" ,methodName = "testPackageConflict" ))
		unit1 = _hx_c.unit_TestMisc.unit
		self.eq(unit1, _hx_c.unit_TestMisc.unit, _hx_c._hx_AnonObject(fileName = "TestMisc.hx" ,lineNumber = 114 ,className = "unit.TestMisc" ,methodName = "testPackageConflict" ))
	

	def testDate(self):
		d = _hx_c.Date(2012, 7, 17, 1, 2, 3)
		self.eq(d.date.isoweekday(), 5, _hx_c._hx_AnonObject(fileName = "TestMisc.hx" ,lineNumber = 119 ,className = "unit.TestMisc" ,methodName = "testDate" ))
		self.eq(d.date.day, 17, _hx_c._hx_AnonObject(fileName = "TestMisc.hx" ,lineNumber = 121 ,className = "unit.TestMisc" ,methodName = "testDate" ))
		self.eq(d.date.month - 1, 7, _hx_c._hx_AnonObject(fileName = "TestMisc.hx" ,lineNumber = 122 ,className = "unit.TestMisc" ,methodName = "testDate" ))
		self.eq(d.date.year, 2012, _hx_c._hx_AnonObject(fileName = "TestMisc.hx" ,lineNumber = 123 ,className = "unit.TestMisc" ,methodName = "testDate" ))
		self.eq(d.date.hour, 1, _hx_c._hx_AnonObject(fileName = "TestMisc.hx" ,lineNumber = 125 ,className = "unit.TestMisc" ,methodName = "testDate" ))
		self.eq(d.date.minute, 2, _hx_c._hx_AnonObject(fileName = "TestMisc.hx" ,lineNumber = 126 ,className = "unit.TestMisc" ,methodName = "testDate" ))
		self.eq(d.date.second, 3, _hx_c._hx_AnonObject(fileName = "TestMisc.hx" ,lineNumber = 127 ,className = "unit.TestMisc" ,methodName = "testDate" ))
		self.eq(d.toString(), "2012-08-17 01:02:03", _hx_c._hx_AnonObject(fileName = "TestMisc.hx" ,lineNumber = 131 ,className = "unit.TestMisc" ,methodName = "testDate" ))
	

	def testClosure(self):
		c = _hx_c.unit_MyClass(100)
		add = c.add
		self.eq(c.add(1, 2), 103, _hx_c._hx_AnonObject(fileName = "TestMisc.hx" ,lineNumber = 137 ,className = "unit.TestMisc" ,methodName = "testClosure" ))
		def _hx_local_1(f,x):
			def _hx_local_0(y):
				return f(x, y)
			return _hx_local_0
		
		self.eq((_hx_local_1)(c.add, 1)(2), 103, _hx_c._hx_AnonObject(fileName = "TestMisc.hx" ,lineNumber = 138 ,className = "unit.TestMisc" ,methodName = "testClosure" ))
		self.eq(add(1, 2), 103, _hx_c._hx_AnonObject(fileName = "TestMisc.hx" ,lineNumber = 139 ,className = "unit.TestMisc" ,methodName = "testClosure" ))
		x1 = 4
		def _hx_local_2():
			return x1
		f1 = _hx_local_2
		self.eq(f1(), 4, _hx_c._hx_AnonObject(fileName = "TestMisc.hx" ,lineNumber = 143 ,className = "unit.TestMisc" ,methodName = "testClosure" ))
		x1 = x1 + 1
		self.eq(f1(), 5, _hx_c._hx_AnonObject(fileName = "TestMisc.hx" ,lineNumber = 145 ,className = "unit.TestMisc" ,methodName = "testClosure" ))
		o = _hx_c._hx_AnonObject(f = f1 )
		self.eq(o.f(), 5, _hx_c._hx_AnonObject(fileName = "TestMisc.hx" ,lineNumber = 148 ,className = "unit.TestMisc" ,methodName = "testClosure" ))
		self.eq(o.f, o.f, _hx_c._hx_AnonObject(fileName = "TestMisc.hx" ,lineNumber = 149 ,className = "unit.TestMisc" ,methodName = "testClosure" ))
		o1 = _hx_c._hx_AnonObject(add = c.add )
		self.eq(o1.add(1, 2), 103, _hx_c._hx_AnonObject(fileName = "TestMisc.hx" ,lineNumber = 152 ,className = "unit.TestMisc" ,methodName = "testClosure" ))
		self.eq(o1.add, o1.add, _hx_c._hx_AnonObject(fileName = "TestMisc.hx" ,lineNumber = 153 ,className = "unit.TestMisc" ,methodName = "testClosure" ))
		def _hx_local_4(x2):
			if x2 == float("inf") or x2 == float("-inf"):
				return float("nan")
			else:
				return _hx_math.cos(x2)
		o2 = _hx_c._hx_AnonObject(cos = _hx_local_4 )
		self.eq(o2.cos(0), 1., _hx_c._hx_AnonObject(fileName = "TestMisc.hx" ,lineNumber = 156 ,className = "unit.TestMisc" ,methodName = "testClosure" ))
		c1 = _hx_c.unit_MyEnum.C
		self.t(_hx_c.Type.enumEq(_hx_c.unit_MyEnum.C(1, "hello"), c1(1, "hello")), _hx_c._hx_AnonObject(fileName = "TestMisc.hx" ,lineNumber = 160 ,className = "unit.TestMisc" ,methodName = "testClosure" ))
	

	def testCaptureUnique(self):
		foo = None
		bar = None
		flag = True
		if flag:
			x = 1
			def _hx_local_0():
				return x
			foo = _hx_local_0
		
		
		if flag:
			x1 = 2
			def _hx_local_1():
				return x1
			bar = _hx_local_1
		
		
		self.eq(foo(), 1, _hx_c._hx_AnonObject(fileName = "TestMisc.hx" ,lineNumber = 175 ,className = "unit.TestMisc" ,methodName = "testCaptureUnique" ))
		self.eq(bar(), 2, _hx_c._hx_AnonObject(fileName = "TestMisc.hx" ,lineNumber = 176 ,className = "unit.TestMisc" ,methodName = "testCaptureUnique" ))
	

	def testCaptureUnique2(self):
		def _hx_local_1(f,x):
			def _hx_local_0():
				return f(x)
			return _hx_local_0
		
		foo = (_hx_local_1)(self.id, 3)
		def _hx_local_3(f1,x1):
			def _hx_local_2():
				return f1(x1)
			return _hx_local_2
		
		bar = (_hx_local_3)(self.sq, 5)
		self.eq(foo(), 3, _hx_c._hx_AnonObject(fileName = "TestMisc.hx" ,lineNumber = 183 ,className = "unit.TestMisc" ,methodName = "testCaptureUnique2" ))
		self.eq(bar(), 25, _hx_c._hx_AnonObject(fileName = "TestMisc.hx" ,lineNumber = 184 ,className = "unit.TestMisc" ,methodName = "testCaptureUnique2" ))
	

	def testSelfRef(self):
		bla = 55
		def _hx_local_0():
			return bla
		bla1 = _hx_local_0
		self.eq(bla1(), 55, _hx_c._hx_AnonObject(fileName = "TestMisc.hx" ,lineNumber = 191 ,className = "unit.TestMisc" ,methodName = "testSelfRef" ))
	

	def testHiddenType(self):
		haxe1 = 20
		self.eq(_hx_c.haxe_crypto_Md5.encode(""), "d41d8cd98f00b204e9800998ecf8427e", _hx_c._hx_AnonObject(fileName = "TestMisc.hx" ,lineNumber = 196 ,className = "unit.TestMisc" ,methodName = "testHiddenType" ))
		self.eq(haxe1, 20, _hx_c._hx_AnonObject(fileName = "TestMisc.hx" ,lineNumber = 197 ,className = "unit.TestMisc" ,methodName = "testHiddenType" ))
		Std = 50
		self.eq(45, 45, _hx_c._hx_AnonObject(fileName = "TestMisc.hx" ,lineNumber = 199 ,className = "unit.TestMisc" ,methodName = "testHiddenType" ))
		self.eq(Std, 50, _hx_c._hx_AnonObject(fileName = "TestMisc.hx" ,lineNumber = 200 ,className = "unit.TestMisc" ,methodName = "testHiddenType" ))
	

	def testHiddenTypeScope(self):
		flag = True
		if flag:
			haxe1 = 20
			Std = 50
			self.eq(haxe1, 20, _hx_c._hx_AnonObject(fileName = "TestMisc.hx" ,lineNumber = 208 ,className = "unit.TestMisc" ,methodName = "testHiddenTypeScope" ))
			self.eq(Std, 50, _hx_c._hx_AnonObject(fileName = "TestMisc.hx" ,lineNumber = 209 ,className = "unit.TestMisc" ,methodName = "testHiddenTypeScope" ))
		
		
		self.eq(_hx_c.haxe_crypto_Md5.encode(""), "d41d8cd98f00b204e9800998ecf8427e", _hx_c._hx_AnonObject(fileName = "TestMisc.hx" ,lineNumber = 211 ,className = "unit.TestMisc" ,methodName = "testHiddenTypeScope" ))
		self.eq(45, 45, _hx_c._hx_AnonObject(fileName = "TestMisc.hx" ,lineNumber = 212 ,className = "unit.TestMisc" ,methodName = "testHiddenTypeScope" ))
	

	def testHiddenTypeCapture(self):
		flag = True
		foo = None
		bar = None
		if flag:
			haxe1 = 20
			Std = 50
			def _hx_local_0():
				return haxe1
			foo = _hx_local_0
			def _hx_local_1():
				return Std
			bar = _hx_local_1
		
		
		self.eq(_hx_c.haxe_crypto_Md5.encode(""), "d41d8cd98f00b204e9800998ecf8427e", _hx_c._hx_AnonObject(fileName = "TestMisc.hx" ,lineNumber = 224 ,className = "unit.TestMisc" ,methodName = "testHiddenTypeCapture" ))
		self.eq(45, 45, _hx_c._hx_AnonObject(fileName = "TestMisc.hx" ,lineNumber = 225 ,className = "unit.TestMisc" ,methodName = "testHiddenTypeCapture" ))
		self.eq(foo(), 20, _hx_c._hx_AnonObject(fileName = "TestMisc.hx" ,lineNumber = 226 ,className = "unit.TestMisc" ,methodName = "testHiddenTypeCapture" ))
		self.eq(bar(), 50, _hx_c._hx_AnonObject(fileName = "TestMisc.hx" ,lineNumber = 227 ,className = "unit.TestMisc" ,methodName = "testHiddenTypeCapture" ))
	

	def id(self,x):
		return x

	def sq(self,x):
		return x * x

	def testPropertyInit(self):
		self.eq(_hx_c.unit_MyDynamicClass.get_W(), 57, _hx_c._hx_AnonObject(fileName = "TestMisc.hx" ,lineNumber = 239 ,className = "unit.TestMisc" ,methodName = "testPropertyInit" ))

	def testInlineClosure(self):
		inst = _hx_c.unit_MyDynamicClass(100)
		add = inst.iadd
		self.eq(inst.v + 1 + 2, 103, _hx_c._hx_AnonObject(fileName = "TestMisc.hx" ,lineNumber = 245 ,className = "unit.TestMisc" ,methodName = "testInlineClosure" ))
		self.eq(add(1, 2), 103, _hx_c._hx_AnonObject(fileName = "TestMisc.hx" ,lineNumber = 246 ,className = "unit.TestMisc" ,methodName = "testInlineClosure" ))
	

	def testDynamicClosure(self):
		inst = _hx_c.unit_MyDynamicClass(100)
		add = inst.add
		self.eq(inst.add(1, 2), 103, _hx_c._hx_AnonObject(fileName = "TestMisc.hx" ,lineNumber = 252 ,className = "unit.TestMisc" ,methodName = "testDynamicClosure" ))
		def _hx_local_1(f,x):
			def _hx_local_0(y):
				return f(x, y)
			return _hx_local_0
		
		self.eq((_hx_local_1)(inst.add, 1)(2), 103, _hx_c._hx_AnonObject(fileName = "TestMisc.hx" ,lineNumber = 253 ,className = "unit.TestMisc" ,methodName = "testDynamicClosure" ))
		self.eq(add(1, 2), 103, _hx_c._hx_AnonObject(fileName = "TestMisc.hx" ,lineNumber = 254 ,className = "unit.TestMisc" ,methodName = "testDynamicClosure" ))
		inst1 = _hx_c.unit_MyDynamicSubClass(100)
		add1 = inst1.add
		self.eq(inst1.add(1, 2), 206, _hx_c._hx_AnonObject(fileName = "TestMisc.hx" ,lineNumber = 259 ,className = "unit.TestMisc" ,methodName = "testDynamicClosure" ))
		def _hx_local_3(f1,x1):
			def _hx_local_2(y1):
				return f1(x1, y1)
			return _hx_local_2
		
		self.eq((_hx_local_3)(inst1.add, 1)(2), 206, _hx_c._hx_AnonObject(fileName = "TestMisc.hx" ,lineNumber = 260 ,className = "unit.TestMisc" ,methodName = "testDynamicClosure" ))
		self.eq(add1(1, 2), 206, _hx_c._hx_AnonObject(fileName = "TestMisc.hx" ,lineNumber = 261 ,className = "unit.TestMisc" ,methodName = "testDynamicClosure" ))
		inst2 = _hx_c.unit_MyDynamicSubClass2(100)
		add2 = inst2.add
		self.eq(inst2.add(1, 2), 206, _hx_c._hx_AnonObject(fileName = "TestMisc.hx" ,lineNumber = 266 ,className = "unit.TestMisc" ,methodName = "testDynamicClosure" ))
		def _hx_local_5(f2,x2):
			def _hx_local_4(y2):
				return f2(x2, y2)
			return _hx_local_4
		
		self.eq((_hx_local_5)(inst2.add, 1)(2), 206, _hx_c._hx_AnonObject(fileName = "TestMisc.hx" ,lineNumber = 267 ,className = "unit.TestMisc" ,methodName = "testDynamicClosure" ))
		self.eq(add2(1, 2), 206, _hx_c._hx_AnonObject(fileName = "TestMisc.hx" ,lineNumber = 268 ,className = "unit.TestMisc" ,methodName = "testDynamicClosure" ))
		def _hx_local_6(x3,y3):
			return inst2.get() * 2 + x3 + y3
		inst2.add = _hx_local_6
		add3 = inst2.add
		self.eq(inst2.add(1, 2), 203, _hx_c._hx_AnonObject(fileName = "TestMisc.hx" ,lineNumber = 273 ,className = "unit.TestMisc" ,methodName = "testDynamicClosure" ))
		def _hx_local_8(f3,x4):
			def _hx_local_7(y4):
				return f3(x4, y4)
			return _hx_local_7
		
		self.eq((_hx_local_8)(inst2.add, 1)(2), 203, _hx_c._hx_AnonObject(fileName = "TestMisc.hx" ,lineNumber = 274 ,className = "unit.TestMisc" ,methodName = "testDynamicClosure" ))
		self.eq(add3(1, 2), 203, _hx_c._hx_AnonObject(fileName = "TestMisc.hx" ,lineNumber = 275 ,className = "unit.TestMisc" ,methodName = "testDynamicClosure" ))
		inst3 = _hx_c.unit_MyOtherDynamicClass(0)
		add4 = inst3.add
		self.eq(inst3.add(1, 2), 13, _hx_c._hx_AnonObject(fileName = "TestMisc.hx" ,lineNumber = 281 ,className = "unit.TestMisc" ,methodName = "testDynamicClosure" ))
		def _hx_local_10(f4,x5):
			def _hx_local_9(y5):
				return f4(x5, y5)
			return _hx_local_9
		
		self.eq((_hx_local_10)(inst3.add, 1)(2), 13, _hx_c._hx_AnonObject(fileName = "TestMisc.hx" ,lineNumber = 282 ,className = "unit.TestMisc" ,methodName = "testDynamicClosure" ))
		self.eq(add4(1, 2), 13, _hx_c._hx_AnonObject(fileName = "TestMisc.hx" ,lineNumber = 283 ,className = "unit.TestMisc" ,methodName = "testDynamicClosure" ))
		self.eq(_hx_c.unit_MyDynamicClass.staticDynamic(1, 2), 13, _hx_c._hx_AnonObject(fileName = "TestMisc.hx" ,lineNumber = 287 ,className = "unit.TestMisc" ,methodName = "testDynamicClosure" ))
		def _hx_local_11(x6,y6):
			return x6 + y6 + 100
		_hx_c.unit_MyDynamicClass.staticDynamic = _hx_local_11
		self.eq(_hx_c.unit_MyDynamicClass.staticDynamic(1, 2), 103, _hx_c._hx_AnonObject(fileName = "TestMisc.hx" ,lineNumber = 289 ,className = "unit.TestMisc" ,methodName = "testDynamicClosure" ))
	

	def testMD5(self):
		self.eq(_hx_c.haxe_crypto_Md5.encode(""), "d41d8cd98f00b204e9800998ecf8427e", _hx_c._hx_AnonObject(fileName = "TestMisc.hx" ,lineNumber = 293 ,className = "unit.TestMisc" ,methodName = "testMD5" ))
		self.eq(_hx_c.haxe_crypto_Md5.encode("hello"), "5d41402abc4b2a76b9719d911017c592", _hx_c._hx_AnonObject(fileName = "TestMisc.hx" ,lineNumber = 294 ,className = "unit.TestMisc" ,methodName = "testMD5" ))
		self.allow(_hx_c.haxe_crypto_Md5.encode("héllo"), ["1a722f7e6c801d9e470a10cb91ba406d", "be50e8478cf24ff3595bc7307fb91b50"], _hx_c._hx_AnonObject(fileName = "TestMisc.hx" ,lineNumber = 296 ,className = "unit.TestMisc" ,methodName = "testMD5" ))
		self.eq(_hx_c.haxe_io_Bytes.ofString("héllo").toHex(), "68c3a96c6c6f", _hx_c._hx_AnonObject(fileName = "TestMisc.hx" ,lineNumber = 298 ,className = "unit.TestMisc" ,methodName = "testMD5" ))
		self.eq(_hx_c.haxe_crypto_Md5.make(_hx_c.haxe_io_Bytes.ofString("héllo")).toHex(), "be50e8478cf24ff3595bc7307fb91b50", _hx_c._hx_AnonObject(fileName = "TestMisc.hx" ,lineNumber = 299 ,className = "unit.TestMisc" ,methodName = "testMD5" ))
	

	def testSHA1(self):
		self.eq(_hx_c.haxe_crypto_Sha1.encode(""), "da39a3ee5e6b4b0d3255bfef95601890afd80709", _hx_c._hx_AnonObject(fileName = "TestMisc.hx" ,lineNumber = 303 ,className = "unit.TestMisc" ,methodName = "testSHA1" ))
		self.eq(_hx_c.haxe_crypto_Sha1.encode("hello"), "aaf4c61ddcc5e8a2dabede0f3b482cd9aea9434d", _hx_c._hx_AnonObject(fileName = "TestMisc.hx" ,lineNumber = 304 ,className = "unit.TestMisc" ,methodName = "testSHA1" ))
		self.allow(_hx_c.haxe_crypto_Sha1.encode("héllo"), ["028db752c14604d624e8b1c121d600c427b8a3ba", "35b5ea45c5e41f78b46a937cc74d41dfea920890"], _hx_c._hx_AnonObject(fileName = "TestMisc.hx" ,lineNumber = 306 ,className = "unit.TestMisc" ,methodName = "testSHA1" ))
		self.eq(_hx_c.haxe_crypto_Sha1.make(_hx_c.haxe_io_Bytes.ofString("héllo")).toHex(), "35b5ea45c5e41f78b46a937cc74d41dfea920890", _hx_c._hx_AnonObject(fileName = "TestMisc.hx" ,lineNumber = 308 ,className = "unit.TestMisc" ,methodName = "testSHA1" ))
	

	def testBaseCode(self):
		b = _hx_c.haxe_crypto_BaseCode(_hx_c.haxe_io_Bytes.ofString("0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_-"))
		self.eq(b.encodeString("Héllow"), "iceFr6NLtM", _hx_c._hx_AnonObject(fileName = "TestMisc.hx" ,lineNumber = 313 ,className = "unit.TestMisc" ,methodName = "testBaseCode" ))
		self.eq(b.decodeString("iceFr6NLtM"), "Héllow", _hx_c._hx_AnonObject(fileName = "TestMisc.hx" ,lineNumber = 314 ,className = "unit.TestMisc" ,methodName = "testBaseCode" ))
	

	def testUrlEncode(self):
		self.eq(_hx_c.StringTools.urlEncode("é"), "%C3%A9", _hx_c._hx_AnonObject(fileName = "TestMisc.hx" ,lineNumber = 318 ,className = "unit.TestMisc" ,methodName = "testUrlEncode" ))
		self.eq(_hx_c.StringTools.urlDecode("%C3%A9"), "é", _hx_c._hx_AnonObject(fileName = "TestMisc.hx" ,lineNumber = 319 ,className = "unit.TestMisc" ,methodName = "testUrlEncode" ))
	

	def opt1(self,x = None,y = None):
		if x is None:
			x = None
		
		if y is None:
			y = None
		
		return _hx_c._hx_AnonObject(x = x ,y = y )
	

	def opt2(self,x = 5,y = "hello"):
		if x is None:
			x = 5
		
		if y is None:
			y = "hello"
		
		return _hx_c._hx_AnonObject(x = x ,y = y )
	

	def opt3(self,x = 5,y = 6):
		if x is None:
			x = 5
		
		if y is None:
			y = 6
		
		return _hx_c._hx_AnonObject(x = x ,y = y )
	

	def opt4(self,x = 10):
		if x is None:
			x = 10
		
		return x + 1
	

	def testOptionalParams(self):
		self.eq(self.opt1().x, None, _hx_c._hx_AnonObject(fileName = "TestMisc.hx" ,lineNumber = 339 ,className = "unit.TestMisc" ,methodName = "testOptionalParams" ))
		self.eq(self.opt1().y, None, _hx_c._hx_AnonObject(fileName = "TestMisc.hx" ,lineNumber = 340 ,className = "unit.TestMisc" ,methodName = "testOptionalParams" ))
		self.eq(self.opt1(55).x, 55, _hx_c._hx_AnonObject(fileName = "TestMisc.hx" ,lineNumber = 341 ,className = "unit.TestMisc" ,methodName = "testOptionalParams" ))
		self.eq(self.opt1(55).y, None, _hx_c._hx_AnonObject(fileName = "TestMisc.hx" ,lineNumber = 342 ,className = "unit.TestMisc" ,methodName = "testOptionalParams" ))
		self.eq(self.opt1(None, "str").x, None, _hx_c._hx_AnonObject(fileName = "TestMisc.hx" ,lineNumber = 343 ,className = "unit.TestMisc" ,methodName = "testOptionalParams" ))
		self.eq(self.opt1(None, "str").y, "str", _hx_c._hx_AnonObject(fileName = "TestMisc.hx" ,lineNumber = 344 ,className = "unit.TestMisc" ,methodName = "testOptionalParams" ))
		self.eq(self.opt1(66, "hello").x, 66, _hx_c._hx_AnonObject(fileName = "TestMisc.hx" ,lineNumber = 345 ,className = "unit.TestMisc" ,methodName = "testOptionalParams" ))
		self.eq(self.opt1(66, "hello").y, "hello", _hx_c._hx_AnonObject(fileName = "TestMisc.hx" ,lineNumber = 346 ,className = "unit.TestMisc" ,methodName = "testOptionalParams" ))
		self.eq(self.opt2().x, 5, _hx_c._hx_AnonObject(fileName = "TestMisc.hx" ,lineNumber = 348 ,className = "unit.TestMisc" ,methodName = "testOptionalParams" ))
		self.eq(self.opt2().y, "hello", _hx_c._hx_AnonObject(fileName = "TestMisc.hx" ,lineNumber = 349 ,className = "unit.TestMisc" ,methodName = "testOptionalParams" ))
		self.eq(self.opt2(None, None).x, 5, _hx_c._hx_AnonObject(fileName = "TestMisc.hx" ,lineNumber = 352 ,className = "unit.TestMisc" ,methodName = "testOptionalParams" ))
		self.eq(self.opt2(0, None).y, "hello", _hx_c._hx_AnonObject(fileName = "TestMisc.hx" ,lineNumber = 354 ,className = "unit.TestMisc" ,methodName = "testOptionalParams" ))
		self.eq(self.opt3().x, 5, _hx_c._hx_AnonObject(fileName = "TestMisc.hx" ,lineNumber = 356 ,className = "unit.TestMisc" ,methodName = "testOptionalParams" ))
		self.eq(self.opt3().y, 6, _hx_c._hx_AnonObject(fileName = "TestMisc.hx" ,lineNumber = 357 ,className = "unit.TestMisc" ,methodName = "testOptionalParams" ))
		self.eq(self.opt3(9).x, 9, _hx_c._hx_AnonObject(fileName = "TestMisc.hx" ,lineNumber = 358 ,className = "unit.TestMisc" ,methodName = "testOptionalParams" ))
		self.eq(self.opt3(9).y, 6, _hx_c._hx_AnonObject(fileName = "TestMisc.hx" ,lineNumber = 359 ,className = "unit.TestMisc" ,methodName = "testOptionalParams" ))
		self.eq(self.opt3(9, 10).x, 9, _hx_c._hx_AnonObject(fileName = "TestMisc.hx" ,lineNumber = 360 ,className = "unit.TestMisc" ,methodName = "testOptionalParams" ))
		self.eq(self.opt3(9, 10).y, 10, _hx_c._hx_AnonObject(fileName = "TestMisc.hx" ,lineNumber = 361 ,className = "unit.TestMisc" ,methodName = "testOptionalParams" ))
		self.eq(self.opt3(None, None).x, 5, _hx_c._hx_AnonObject(fileName = "TestMisc.hx" ,lineNumber = 362 ,className = "unit.TestMisc" ,methodName = "testOptionalParams" ))
		self.eq(self.opt3(None, None).y, 6, _hx_c._hx_AnonObject(fileName = "TestMisc.hx" ,lineNumber = 363 ,className = "unit.TestMisc" ,methodName = "testOptionalParams" ))
		self.eq(self.opt3(None).x, 5, _hx_c._hx_AnonObject(fileName = "TestMisc.hx" ,lineNumber = 364 ,className = "unit.TestMisc" ,methodName = "testOptionalParams" ))
		self.eq(self.opt3(None).y, 6, _hx_c._hx_AnonObject(fileName = "TestMisc.hx" ,lineNumber = 365 ,className = "unit.TestMisc" ,methodName = "testOptionalParams" ))
		self.eq(self.opt3(None, 7).x, 5, _hx_c._hx_AnonObject(fileName = "TestMisc.hx" ,lineNumber = 366 ,className = "unit.TestMisc" ,methodName = "testOptionalParams" ))
		self.eq(self.opt3(None, 7).y, 7, _hx_c._hx_AnonObject(fileName = "TestMisc.hx" ,lineNumber = 367 ,className = "unit.TestMisc" ,methodName = "testOptionalParams" ))
		self.eq(self.opt3(None, 7.4).x, 5, _hx_c._hx_AnonObject(fileName = "TestMisc.hx" ,lineNumber = 370 ,className = "unit.TestMisc" ,methodName = "testOptionalParams" ))
		self.eq(self.opt3(None, 7.4).y, 7.4, _hx_c._hx_AnonObject(fileName = "TestMisc.hx" ,lineNumber = 371 ,className = "unit.TestMisc" ,methodName = "testOptionalParams" ))
		self.eq(self.opt4(), 11, _hx_c._hx_AnonObject(fileName = "TestMisc.hx" ,lineNumber = 373 ,className = "unit.TestMisc" ,methodName = "testOptionalParams" ))
		self.eq(self.opt4(None), 11, _hx_c._hx_AnonObject(fileName = "TestMisc.hx" ,lineNumber = 375 ,className = "unit.TestMisc" ,methodName = "testOptionalParams" ))
		opt4b = self.opt4
		self.eq(opt4b(), 11, _hx_c._hx_AnonObject(fileName = "TestMisc.hx" ,lineNumber = 379 ,className = "unit.TestMisc" ,methodName = "testOptionalParams" ))
		self.eq(opt4b(3), 4, _hx_c._hx_AnonObject(fileName = "TestMisc.hx" ,lineNumber = 380 ,className = "unit.TestMisc" ,methodName = "testOptionalParams" ))
		self.eq(opt4b(None), 11, _hx_c._hx_AnonObject(fileName = "TestMisc.hx" ,lineNumber = 382 ,className = "unit.TestMisc" ,methodName = "testOptionalParams" ))
		def _hx_local_0(a,b = 2):
			if b is None:
				b = 2
			
			return a + b
		
		opt5 = _hx_local_0
		self.eq(3, opt5(1), _hx_c._hx_AnonObject(fileName = "TestMisc.hx" ,lineNumber = 390 ,className = "unit.TestMisc" ,methodName = "testOptionalParams" ))
		self.eq(3, opt5(1, 2), _hx_c._hx_AnonObject(fileName = "TestMisc.hx" ,lineNumber = 391 ,className = "unit.TestMisc" ,methodName = "testOptionalParams" ))
		self.eq(3, opt5(1, None), _hx_c._hx_AnonObject(fileName = "TestMisc.hx" ,lineNumber = 392 ,className = "unit.TestMisc" ,methodName = "testOptionalParams" ))
	

	def testIncr(self):
		z = 0
		def _hx_local_1():
			nonlocal z
			_hx_local_0 = z
			z = z + 1
			return _hx_local_0
			
		
		self.eq(_hx_local_1(), 0, _hx_c._hx_AnonObject(fileName = "TestMisc.hx" ,lineNumber = 397 ,className = "unit.TestMisc" ,methodName = "testIncr" ))
		self.eq(z, 1, _hx_c._hx_AnonObject(fileName = "TestMisc.hx" ,lineNumber = 398 ,className = "unit.TestMisc" ,methodName = "testIncr" ))
		def _hx_local_2():
			nonlocal z
			z = z + 1
			return z
			
		
		self.eq(_hx_local_2(), 2, _hx_c._hx_AnonObject(fileName = "TestMisc.hx" ,lineNumber = 399 ,className = "unit.TestMisc" ,methodName = "testIncr" ))
		self.eq(z, 2, _hx_c._hx_AnonObject(fileName = "TestMisc.hx" ,lineNumber = 400 ,className = "unit.TestMisc" ,methodName = "testIncr" ))
		z = z + 1
		self.eq(z, 3, _hx_c._hx_AnonObject(fileName = "TestMisc.hx" ,lineNumber = 402 ,className = "unit.TestMisc" ,methodName = "testIncr" ))
		z = z + 1
		self.eq(z, 4, _hx_c._hx_AnonObject(fileName = "TestMisc.hx" ,lineNumber = 404 ,className = "unit.TestMisc" ,methodName = "testIncr" ))
		def _hx_local_5():
			nonlocal z
			z = z + 3
			return z
			
		
		self.eq(_hx_local_5(), 7, _hx_c._hx_AnonObject(fileName = "TestMisc.hx" ,lineNumber = 406 ,className = "unit.TestMisc" ,methodName = "testIncr" ))
		x = 0
		arr = [3]
		def _hx_local_12():
			def _hx_local_7():
				nonlocal x
				_hx_local_6 = x
				x = x + 1
				return _hx_local_6
				
			
			_hx_local_8 = arr
			_hx_local_9 = _hx_local_7()
			_hx_local_10 = _hx_array_get(_hx_local_8,_hx_local_9)
			_hx_array_set(_hx_local_8,_hx_local_9, _hx_local_10 + 1)
			return _hx_local_10
		
		self.eq(_hx_local_12(), 3, _hx_c._hx_AnonObject(fileName = "TestMisc.hx" ,lineNumber = 410 ,className = "unit.TestMisc" ,methodName = "testIncr" ))
		self.eq(x, 1, _hx_c._hx_AnonObject(fileName = "TestMisc.hx" ,lineNumber = 412 ,className = "unit.TestMisc" ,methodName = "testIncr" ))
		self.eq(_hx_array_get(arr,0), 4, _hx_c._hx_AnonObject(fileName = "TestMisc.hx" ,lineNumber = 414 ,className = "unit.TestMisc" ,methodName = "testIncr" ))
		x = 0
		def _hx_local_19():
			def _hx_local_14():
				nonlocal x
				_hx_local_13 = x
				x = x + 1
				return _hx_local_13
				
			
			_hx_local_15 = arr
			_hx_local_16 = _hx_local_14()
			_hx_local_17 = _hx_array_get(_hx_local_15,_hx_local_16)
			_hx_array_set(_hx_local_15,_hx_local_16, _hx_local_17 + 3)
			return _hx_array_get(_hx_local_15,_hx_local_16)
		
		self.eq(_hx_local_19(), 7, _hx_c._hx_AnonObject(fileName = "TestMisc.hx" ,lineNumber = 416 ,className = "unit.TestMisc" ,methodName = "testIncr" ))
		self.eq(_hx_array_get(arr,0), 7, _hx_c._hx_AnonObject(fileName = "TestMisc.hx" ,lineNumber = 417 ,className = "unit.TestMisc" ,methodName = "testIncr" ))
		x1 = 0
		arr1 = [_hx_c._hx_AnonObject(v = 3 )]
		def _hx_local_24():
			def _hx_local_21():
				nonlocal x1
				_hx_local_20 = x1
				x1 = x1 + 1
				return _hx_local_20
				
			
			_hx_local_22 = _hx_array_get(arr1,_hx_local_21())
			_hx_local_23 = _hx_local_22.v
			_hx_local_22.v = _hx_local_23 + 1
			return _hx_local_23
		
		self.eq(_hx_local_24(), 3, _hx_c._hx_AnonObject(fileName = "TestMisc.hx" ,lineNumber = 421 ,className = "unit.TestMisc" ,methodName = "testIncr" ))
		self.eq(x1, 1, _hx_c._hx_AnonObject(fileName = "TestMisc.hx" ,lineNumber = 422 ,className = "unit.TestMisc" ,methodName = "testIncr" ))
		self.eq(_hx_array_get(arr1,0).v, 4, _hx_c._hx_AnonObject(fileName = "TestMisc.hx" ,lineNumber = 423 ,className = "unit.TestMisc" ,methodName = "testIncr" ))
		x1 = 0
		def _hx_local_29():
			def _hx_local_26():
				nonlocal x1
				_hx_local_25 = x1
				x1 = x1 + 1
				return _hx_local_25
				
			
			_hx_local_27 = _hx_array_get(arr1,_hx_local_26())
			_hx_local_28 = _hx_local_27.v
			_hx_local_27.v = _hx_local_28 + 3
			return _hx_local_27.v
		
		self.eq(_hx_local_29(), 7, _hx_c._hx_AnonObject(fileName = "TestMisc.hx" ,lineNumber = 427 ,className = "unit.TestMisc" ,methodName = "testIncr" ))
		self.eq(_hx_array_get(arr1,0).v, 7, _hx_c._hx_AnonObject(fileName = "TestMisc.hx" ,lineNumber = 428 ,className = "unit.TestMisc" ,methodName = "testIncr" ))
		x1 = 0
		arr2 = [_hx_c._hx_AnonObject(v = 3 )]
		def _hx_local_34():
			def _hx_local_31():
				nonlocal x1
				_hx_local_30 = x1
				x1 = x1 + 1
				return _hx_local_30
				
			
			_hx_local_32 = _hx_array_get(arr2,_hx_local_31())
			_hx_local_33 = _hx_local_32.v
			_hx_local_32.v = _hx_local_33 + 1
			return _hx_local_33
		
		self.eq(_hx_local_34(), 3, _hx_c._hx_AnonObject(fileName = "TestMisc.hx" ,lineNumber = 433 ,className = "unit.TestMisc" ,methodName = "testIncr" ))
		self.eq(x1, 1, _hx_c._hx_AnonObject(fileName = "TestMisc.hx" ,lineNumber = 434 ,className = "unit.TestMisc" ,methodName = "testIncr" ))
		self.eq(_hx_array_get(arr2,0).v, 4, _hx_c._hx_AnonObject(fileName = "TestMisc.hx" ,lineNumber = 435 ,className = "unit.TestMisc" ,methodName = "testIncr" ))
		x1 = 0
		def _hx_local_39():
			def _hx_local_36():
				nonlocal x1
				_hx_local_35 = x1
				x1 = x1 + 1
				return _hx_local_35
				
			
			_hx_local_37 = _hx_array_get(arr2,_hx_local_36())
			_hx_local_38 = _hx_local_37.v
			_hx_local_37.v = _hx_local_38 + 3
			return _hx_local_37.v
		
		self.eq(_hx_local_39(), 7, _hx_c._hx_AnonObject(fileName = "TestMisc.hx" ,lineNumber = 439 ,className = "unit.TestMisc" ,methodName = "testIncr" ))
		self.eq(_hx_array_get(arr2,0).v, 7, _hx_c._hx_AnonObject(fileName = "TestMisc.hx" ,lineNumber = 440 ,className = "unit.TestMisc" ,methodName = "testIncr" ))
	

	def testInitOrder(self):
		i = 0
		def _hx_local_1():
			nonlocal i
			_hx_local_0 = i
			i = i + 1
			return _hx_local_0
			
		
		def _hx_local_3():
			nonlocal i
			_hx_local_2 = i
			i = i + 1
			return _hx_local_2
			
		
		def _hx_local_5():
			nonlocal i
			_hx_local_4 = i
			i = i + 1
			return _hx_local_4
			
		
		def _hx_local_7():
			nonlocal i
			_hx_local_6 = i
			i = i + 1
			return _hx_local_6
			
		
		o = _hx_c._hx_AnonObject(y = _hx_local_1() ,x = _hx_local_3() ,z = _hx_local_5() ,blabla = _hx_local_7() )
		self.eq(o.y, 0, _hx_c._hx_AnonObject(fileName = "TestMisc.hx" ,lineNumber = 452 ,className = "unit.TestMisc" ,methodName = "testInitOrder" ))
		self.eq(o.x, 1, _hx_c._hx_AnonObject(fileName = "TestMisc.hx" ,lineNumber = 453 ,className = "unit.TestMisc" ,methodName = "testInitOrder" ))
		self.eq(o.z, 2, _hx_c._hx_AnonObject(fileName = "TestMisc.hx" ,lineNumber = 454 ,className = "unit.TestMisc" ,methodName = "testInitOrder" ))
		self.eq(o.blabla, 3, _hx_c._hx_AnonObject(fileName = "TestMisc.hx" ,lineNumber = 455 ,className = "unit.TestMisc" ,methodName = "testInitOrder" ))
	

	def testInline(self):
		x = 3
		self.eq(2 * (x + 5), 16, _hx_c._hx_AnonObject(fileName = "TestMisc.hx" ,lineNumber = 463 ,className = "unit.TestMisc" ,methodName = "testInline" ))
		self.eq(-(x + 5), -8, _hx_c._hx_AnonObject(fileName = "TestMisc.hx" ,lineNumber = 464 ,className = "unit.TestMisc" ,methodName = "testInline" ))
	

	def testEvalAccessOrder(self):
		a = [0, 0]
		x = 0
		def _hx_local_6():
			nonlocal x
			nonlocal x
			_hx_local_0 = x
			x = x + 1
			return _hx_local_0
			
			
		
		_hx_local_1 = _hx_local_6
		_hx_local_2 = a
		_hx_local_3 = _hx_local_1()
		_hx_local_4 = _hx_array_get(_hx_local_2,_hx_local_3)
		_hx_array_set(_hx_local_2,_hx_local_3, _hx_local_4 + 1)
		_hx_local_4
		
		self.eq(_hx_array_get(a,0), 1, _hx_c._hx_AnonObject(fileName = "TestMisc.hx" ,lineNumber = 471 ,className = "unit.TestMisc" ,methodName = "testEvalAccessOrder" ))
		self.eq(_hx_array_get(a,1), 0, _hx_c._hx_AnonObject(fileName = "TestMisc.hx" ,lineNumber = 472 ,className = "unit.TestMisc" ,methodName = "testEvalAccessOrder" ))
		x1 = 0
		a1 = list()
		def _hx_local_8():
			nonlocal x1
			_hx_local_7 = x1
			x1 = x1 + 1
			return _hx_local_7
			
		
		def _hx_local_10():
			nonlocal x1
			_hx_local_9 = x1
			x1 = x1 + 1
			return _hx_local_9
			
		
		_hx_array_set(a1,_hx_local_8(), _hx_local_10())
		self.eq(_hx_array_get(a1,0), 1, _hx_c._hx_AnonObject(fileName = "TestMisc.hx" ,lineNumber = 477 ,className = "unit.TestMisc" ,methodName = "testEvalAccessOrder" ))
		x2 = 0
		def _hx_local_14():
			def _hx_local_13():
				def _hx_local_12():
					nonlocal x2
					_hx_local_11 = x2
					x2 = x2 + 1
					return _hx_local_11
					
				
				return _hx_local_12()
			
			return _hx_local_13()
		
		foo = _hx_local_14
		_hx_array_set(a1,foo(), foo())
		self.eq(_hx_array_get(a1,0), 1, _hx_c._hx_AnonObject(fileName = "TestMisc.hx" ,lineNumber = 482 ,className = "unit.TestMisc" ,methodName = "testEvalAccessOrder" ))
	

	def testStaticVarFun(self):
		self.eq(_hx_c.unit_TestMisc.add(2, 3), 5, _hx_c._hx_AnonObject(fileName = "TestMisc.hx" ,lineNumber = 488 ,className = "unit.TestMisc" ,methodName = "testStaticVarFun" ))

	def testDefArgs(self):
		e = _hx_c.unit_ExtDefArgs()
		self.eq(e.get(), 7, _hx_c._hx_AnonObject(fileName = "TestMisc.hx" ,lineNumber = 493 ,className = "unit.TestMisc" ,methodName = "testDefArgs" ))
		b = e
		self.eq(b.get(), 7, _hx_c._hx_AnonObject(fileName = "TestMisc.hx" ,lineNumber = 495 ,className = "unit.TestMisc" ,methodName = "testDefArgs" ))
		i = e
		self.eq(i.get(), 7, _hx_c._hx_AnonObject(fileName = "TestMisc.hx" ,lineNumber = 497 ,className = "unit.TestMisc" ,methodName = "testDefArgs" ))
	

	def testStringBuf(self):
		b = _hx_c.StringBuf()
		def _hx_local_0():
			_this = b.b.getvalue()
			return _hx_builtin.len(_this)
		
		self.eq(_hx_local_0(), 0, _hx_c._hx_AnonObject(fileName = "TestMisc.hx" ,lineNumber = 502 ,className = "unit.TestMisc" ,methodName = "testStringBuf" ))
		s = _hx_c.Std.string(-45)
		b.b.write(s)
		
		s1 = _hx_c.Std.string(1.456)
		b.b.write(s1)
		
		s2 = _hx_c.Std.string(None)
		b.b.write(s2)
		
		s3 = _hx_c.Std.string(True)
		b.b.write(s3)
		
		s4 = _hx_c.Std.string(False)
		b.b.write(s4)
		
		s5 = _hx_c.Std.string("Hello!")
		b.b.write(s5)
		
		s6 = None
		if 2 is None:
			s6 = _hx_c.python_Tools.substr("Bla", 1, None)
		else:
			s6 = _hx_c.python_Tools.substr("Bla", 1, 2)
		b.b.write(s6)
		
		s7 = None
		c = 82
		s7 = "".join(_hx_builtin.map(_hx_builtin.chr, [c]))
		
		b.b.write(s7)
		
		self.eq(b.b.getvalue(), "-451.456nulltruefalseHello!laR", _hx_c._hx_AnonObject(fileName = "TestMisc.hx" ,lineNumber = 511 ,className = "unit.TestMisc" ,methodName = "testStringBuf" ))
		def _hx_local_1():
			_this1 = b.b.getvalue()
			return _hx_builtin.len(_this1)
		
		self.eq(_hx_local_1(), 30, _hx_c._hx_AnonObject(fileName = "TestMisc.hx" ,lineNumber = 512 ,className = "unit.TestMisc" ,methodName = "testStringBuf" ))
	

	def testToString(self):
		def _hx_local_0():
			return "foo"
		x = _hx_c._hx_AnonObject(toString = _hx_local_0 )
		self.eq(_hx_c.Std.string(x), "foo", _hx_c._hx_AnonObject(fileName = "TestMisc.hx" ,lineNumber = 518 ,className = "unit.TestMisc" ,methodName = "testToString" ))
	

	def testFormat(self):
		x = 5
		y = 6
		self.eq(Std.string("" + Std.string(x)) + Std.string((x + y)), "511", _hx_c._hx_AnonObject(fileName = "TestMisc.hx" ,lineNumber = 534 ,className = "unit.TestMisc" ,methodName = "testFormat" ))
	

	def testJSon(self):
		_g = self
		str = _hx_c.haxe_Json.stringify(_hx_c._hx_AnonObject(x = -4500 ,y = 1.456 ,a = ["hello", "wor'\"\n\t\rd"] ))
		len = _hx_builtin.len(str) - 2
		str = _hx_c.python_Tools.substr(str, 1, len)
		
		parts = _hx_c.python_internal_StringImpl.split(str, ",")
		self.t(_hx_c.python_internal_ArrayImpl.remove(parts, "\"x\":-4500"), _hx_c._hx_AnonObject(fileName = "TestMisc.hx" ,lineNumber = 542 ,className = "unit.TestMisc" ,methodName = "testJSon" ))
		self.t(_hx_c.python_internal_ArrayImpl.remove(parts, "\"y\":1.456"), _hx_c._hx_AnonObject(fileName = "TestMisc.hx" ,lineNumber = 543 ,className = "unit.TestMisc" ,methodName = "testJSon" ))
		self.t(_hx_c.python_internal_ArrayImpl.remove(parts, "\"a\":[\"hello\""), _hx_c._hx_AnonObject(fileName = "TestMisc.hx" ,lineNumber = 544 ,className = "unit.TestMisc" ,methodName = "testJSon" ))
		self.t(_hx_c.python_internal_ArrayImpl.remove(parts, "\"wor'\\\"\\n\\t\\rd\"]"), _hx_c._hx_AnonObject(fileName = "TestMisc.hx" ,lineNumber = 545 ,className = "unit.TestMisc" ,methodName = "testJSon" ))
		self.eq("#".join(_hx_builtin.list(_hx_builtin.map(_hx_c.Std.string, parts))), "", _hx_c._hx_AnonObject(fileName = "TestMisc.hx" ,lineNumber = 546 ,className = "unit.TestMisc" ,methodName = "testJSon" ))
		def _hx_local_0(v,pos = None):
			if pos is None:
				pos = None
			
			_g.eq(_hx_c.haxe_Json.parse(_hx_c.haxe_Json.stringify(v)), v, _hx_c._hx_AnonObject(fileName = "TestMisc.hx" ,lineNumber = 553 ,className = "unit.TestMisc" ,methodName = "testJSon" ))
		
		id = _hx_local_0
		def _hx_local_1(v1):
			str1 = _hx_c.haxe_Json.stringify(v1)
			_g.eq(_hx_c.haxe_Json.stringify(_hx_c.haxe_Json.parse(str1)), str1, _hx_c._hx_AnonObject(fileName = "TestMisc.hx" ,lineNumber = 556 ,className = "unit.TestMisc" ,methodName = "testJSon" ))
		
		deepId = _hx_local_1
		id(True, _hx_c._hx_AnonObject(fileName = "TestMisc.hx" ,lineNumber = 559 ,className = "unit.TestMisc" ,methodName = "testJSon" ))
		id(False, _hx_c._hx_AnonObject(fileName = "TestMisc.hx" ,lineNumber = 560 ,className = "unit.TestMisc" ,methodName = "testJSon" ))
		id(None, _hx_c._hx_AnonObject(fileName = "TestMisc.hx" ,lineNumber = 561 ,className = "unit.TestMisc" ,methodName = "testJSon" ))
		id(0, _hx_c._hx_AnonObject(fileName = "TestMisc.hx" ,lineNumber = 562 ,className = "unit.TestMisc" ,methodName = "testJSon" ))
		id(145, _hx_c._hx_AnonObject(fileName = "TestMisc.hx" ,lineNumber = 563 ,className = "unit.TestMisc" ,methodName = "testJSon" ))
		id(-145, _hx_c._hx_AnonObject(fileName = "TestMisc.hx" ,lineNumber = 564 ,className = "unit.TestMisc" ,methodName = "testJSon" ))
		id(0.15461, _hx_c._hx_AnonObject(fileName = "TestMisc.hx" ,lineNumber = 565 ,className = "unit.TestMisc" ,methodName = "testJSon" ))
		id(-485.15461, _hx_c._hx_AnonObject(fileName = "TestMisc.hx" ,lineNumber = 566 ,className = "unit.TestMisc" ,methodName = "testJSon" ))
		id(1e10, _hx_c._hx_AnonObject(fileName = "TestMisc.hx" ,lineNumber = 567 ,className = "unit.TestMisc" ,methodName = "testJSon" ))
		id(-1e-10, _hx_c._hx_AnonObject(fileName = "TestMisc.hx" ,lineNumber = 568 ,className = "unit.TestMisc" ,methodName = "testJSon" ))
		id("", _hx_c._hx_AnonObject(fileName = "TestMisc.hx" ,lineNumber = 569 ,className = "unit.TestMisc" ,methodName = "testJSon" ))
		id("hello", _hx_c._hx_AnonObject(fileName = "TestMisc.hx" ,lineNumber = 570 ,className = "unit.TestMisc" ,methodName = "testJSon" ))
		id("he\n\r\t\\\\llo", _hx_c._hx_AnonObject(fileName = "TestMisc.hx" ,lineNumber = 571 ,className = "unit.TestMisc" ,methodName = "testJSon" ))
		deepId(_hx_c._hx_AnonObject(field = 4 ))
		deepId(_hx_c._hx_AnonObject(test = _hx_c._hx_AnonObject(nested = None ) ))
		mix = [1, 2, 3, "str"]
		deepId(_hx_c._hx_AnonObject(array = mix ))
		self.eq(_hx_c.haxe_Json.parse("\"\\u00E9\""), "é", _hx_c._hx_AnonObject(fileName = "TestMisc.hx" ,lineNumber = 578 ,className = "unit.TestMisc" ,methodName = "testJSon" ))
		self.eq(_hx_c.haxe_Json.stringify(float("inf")), "null", _hx_c._hx_AnonObject(fileName = "TestMisc.hx" ,lineNumber = 580 ,className = "unit.TestMisc" ,methodName = "testJSon" ))
		self.eq(_hx_c.haxe_Json.stringify(float("-inf")), "null", _hx_c._hx_AnonObject(fileName = "TestMisc.hx" ,lineNumber = 581 ,className = "unit.TestMisc" ,methodName = "testJSon" ))
		self.eq(_hx_c.haxe_Json.stringify(float("nan")), "null", _hx_c._hx_AnonObject(fileName = "TestMisc.hx" ,lineNumber = 582 ,className = "unit.TestMisc" ,methodName = "testJSon" ))
	

	def testConstructorsOpts(self):
		b = _hx_c.unit_BaseConstrOpt()
		self.eq(b.s, "test", _hx_c._hx_AnonObject(fileName = "TestMisc.hx" ,lineNumber = 587 ,className = "unit.TestMisc" ,methodName = "testConstructorsOpts" ))
		self.eq(b.i, -5, _hx_c._hx_AnonObject(fileName = "TestMisc.hx" ,lineNumber = 588 ,className = "unit.TestMisc" ,methodName = "testConstructorsOpts" ))
		self.eq(b.b, True, _hx_c._hx_AnonObject(fileName = "TestMisc.hx" ,lineNumber = 589 ,className = "unit.TestMisc" ,methodName = "testConstructorsOpts" ))
		b1 = _hx_c.unit_BaseConstrOpt(None, 99)
		self.eq(b1.s, "test", _hx_c._hx_AnonObject(fileName = "TestMisc.hx" ,lineNumber = 592 ,className = "unit.TestMisc" ,methodName = "testConstructorsOpts" ))
		self.eq(b1.i, 99, _hx_c._hx_AnonObject(fileName = "TestMisc.hx" ,lineNumber = 593 ,className = "unit.TestMisc" ,methodName = "testConstructorsOpts" ))
		self.eq(b1.b, True, _hx_c._hx_AnonObject(fileName = "TestMisc.hx" ,lineNumber = 594 ,className = "unit.TestMisc" ,methodName = "testConstructorsOpts" ))
		b2 = _hx_c.unit_SubConstrOpt()
		self.eq(b2.s, "test", _hx_c._hx_AnonObject(fileName = "TestMisc.hx" ,lineNumber = 597 ,className = "unit.TestMisc" ,methodName = "testConstructorsOpts" ))
		self.eq(b2.i, -5, _hx_c._hx_AnonObject(fileName = "TestMisc.hx" ,lineNumber = 598 ,className = "unit.TestMisc" ,methodName = "testConstructorsOpts" ))
		self.eq(b2.b, True, _hx_c._hx_AnonObject(fileName = "TestMisc.hx" ,lineNumber = 599 ,className = "unit.TestMisc" ,methodName = "testConstructorsOpts" ))
		b3 = _hx_c.unit_SubConstrOpt2()
		self.eq(b3.s, "test", _hx_c._hx_AnonObject(fileName = "TestMisc.hx" ,lineNumber = 602 ,className = "unit.TestMisc" ,methodName = "testConstructorsOpts" ))
		self.eq(b3.i, -5, _hx_c._hx_AnonObject(fileName = "TestMisc.hx" ,lineNumber = 603 ,className = "unit.TestMisc" ,methodName = "testConstructorsOpts" ))
		self.eq(b3.b, True, _hx_c._hx_AnonObject(fileName = "TestMisc.hx" ,lineNumber = 604 ,className = "unit.TestMisc" ,methodName = "testConstructorsOpts" ))
		b4 = _hx_c.unit_SubConstrOpt3()
		self.eq(b4.s, "test2", _hx_c._hx_AnonObject(fileName = "TestMisc.hx" ,lineNumber = 607 ,className = "unit.TestMisc" ,methodName = "testConstructorsOpts" ))
		self.eq(b4.i, -6, _hx_c._hx_AnonObject(fileName = "TestMisc.hx" ,lineNumber = 608 ,className = "unit.TestMisc" ,methodName = "testConstructorsOpts" ))
		self.eq(b4.b, True, _hx_c._hx_AnonObject(fileName = "TestMisc.hx" ,lineNumber = 609 ,className = "unit.TestMisc" ,methodName = "testConstructorsOpts" ))
	

	def testNoReturnThrow(self):
		def _hx_local_0():
			raise _HxException("never call me")
		test = _hx_local_0
		s = None
		try:
			s = test()
		except Exception as _hx_e:
			_hx_e1 = _hx_e.val if isinstance(_hx_e, _HxException) else _hx_e
			if isinstance(_hx_e1, _hx_c.String):
				e = _hx_e1
				s = e
			else:
				raise _hx_e
		self.eq(s, "never call me", _hx_c._hx_AnonObject(fileName = "TestMisc.hx" ,lineNumber = 617 ,className = "unit.TestMisc" ,methodName = "testNoReturnThrow" ))
	





unit_TestMisc._hx_class = unit_TestMisc
unit_TestMisc._hx_class_name = "unit.TestMisc"
_hx_classes["unit.TestMisc"] = unit_TestMisc
_hx_c.unit_TestMisc = unit_TestMisc
unit_TestMisc._hx_fields = []
unit_TestMisc._hx_props = []
unit_TestMisc._hx_methods = ["testPackageConflict","testDate","testClosure","testCaptureUnique","testCaptureUnique2","testSelfRef","testHiddenType","testHiddenTypeScope","testHiddenTypeCapture","id","sq","testPropertyInit","testInlineClosure","testDynamicClosure","testMD5","testSHA1","testBaseCode","testUrlEncode","opt1","opt2","opt3","opt4","testOptionalParams","testIncr","testInitOrder","testInline","testEvalAccessOrder","testStaticVarFun","testDefArgs","testStringBuf","testToString","testFormat","testJSon","testConstructorsOpts","testNoReturnThrow"]
unit_TestMisc._hx_statics = ["unit","foo","add"]
unit_TestMisc._hx_interfaces = []
unit_TestMisc._hx_super = unit_Test
unit_TestMisc._hx_meta = _hx_c._hx_AnonObject(obj=_hx_c._hx_AnonObject(),statics=_hx_c._hx_AnonObject(),fields=_hx_c._hx_AnonObject())
def unit_TestMisc_hx_empty_init (_hx_o):
	pass
unit_TestMisc._hx_empty_init = unit_TestMisc_hx_empty_init
# print unit.TestOps.TestOps
class unit_TestOps(unit_Test):


	def __init__(self):
		super().__init__()
	def testOps(self):
		self.eq(Std.string(1 + 2) + "", "3", _hx_c._hx_AnonObject(fileName = "TestOps.hx" ,lineNumber = 7 ,className = "unit.TestOps" ,methodName = "testOps" ))
		self.eq(Std.string(1 + 2) + "", "3", _hx_c._hx_AnonObject(fileName = "TestOps.hx" ,lineNumber = 8 ,className = "unit.TestOps" ,methodName = "testOps" ))
		self.eq(Std.string(1) + Std.string((Std.string(2) + "")), "12", _hx_c._hx_AnonObject(fileName = "TestOps.hx" ,lineNumber = 9 ,className = "unit.TestOps" ,methodName = "testOps" ))
		self.eq(Std.string(4 - 3) + "", "1", _hx_c._hx_AnonObject(fileName = "TestOps.hx" ,lineNumber = 11 ,className = "unit.TestOps" ,methodName = "testOps" ))
		self.eq(Std.string(4 - 3) + "", "1", _hx_c._hx_AnonObject(fileName = "TestOps.hx" ,lineNumber = 12 ,className = "unit.TestOps" ,methodName = "testOps" ))
		self.eq((4 | 3) & 1, 1, _hx_c._hx_AnonObject(fileName = "TestOps.hx" ,lineNumber = 15 ,className = "unit.TestOps" ,methodName = "testOps" ))
		self.eq((4 | 3) & 1, 1, _hx_c._hx_AnonObject(fileName = "TestOps.hx" ,lineNumber = 16 ,className = "unit.TestOps" ,methodName = "testOps" ))
		self.eq(4 | 3 & 1, 5, _hx_c._hx_AnonObject(fileName = "TestOps.hx" ,lineNumber = 17 ,className = "unit.TestOps" ,methodName = "testOps" ))
		self.eq(4 & 3 | 1, 1, _hx_c._hx_AnonObject(fileName = "TestOps.hx" ,lineNumber = 19 ,className = "unit.TestOps" ,methodName = "testOps" ))
		self.eq(4 & 3 | 1, 1, _hx_c._hx_AnonObject(fileName = "TestOps.hx" ,lineNumber = 20 ,className = "unit.TestOps" ,methodName = "testOps" ))
		self.eq(4 & (3 | 1), 0, _hx_c._hx_AnonObject(fileName = "TestOps.hx" ,lineNumber = 21 ,className = "unit.TestOps" ,methodName = "testOps" ))
		self.eq(-5 + 1, -4, _hx_c._hx_AnonObject(fileName = "TestOps.hx" ,lineNumber = 23 ,className = "unit.TestOps" ,methodName = "testOps" ))
		self.eq(-(5 + 1), -6, _hx_c._hx_AnonObject(fileName = "TestOps.hx" ,lineNumber = 24 ,className = "unit.TestOps" ,methodName = "testOps" ))
		self.t(5 << 2 == 20, _hx_c._hx_AnonObject(fileName = "TestOps.hx" ,lineNumber = 26 ,className = "unit.TestOps" ,methodName = "testOps" ))
		self.t(5 << 2 == 20, _hx_c._hx_AnonObject(fileName = "TestOps.hx" ,lineNumber = 27 ,className = "unit.TestOps" ,methodName = "testOps" ))
		self.t(20 == 5 << 2, _hx_c._hx_AnonObject(fileName = "TestOps.hx" ,lineNumber = 28 ,className = "unit.TestOps" ,methodName = "testOps" ))
		self.t(20 == 5 << 2, _hx_c._hx_AnonObject(fileName = "TestOps.hx" ,lineNumber = 29 ,className = "unit.TestOps" ,methodName = "testOps" ))
		self.eq(5 % 3 * 4, 8, _hx_c._hx_AnonObject(fileName = "TestOps.hx" ,lineNumber = 31 ,className = "unit.TestOps" ,methodName = "testOps" ))
		self.eq(5 % 3 * 4, 8, _hx_c._hx_AnonObject(fileName = "TestOps.hx" ,lineNumber = 32 ,className = "unit.TestOps" ,methodName = "testOps" ))
		self.eq(5 % (3 * 4), 5, _hx_c._hx_AnonObject(fileName = "TestOps.hx" ,lineNumber = 33 ,className = "unit.TestOps" ,methodName = "testOps" ))
		self.eq(20 / 2 / 2, 5, _hx_c._hx_AnonObject(fileName = "TestOps.hx" ,lineNumber = 35 ,className = "unit.TestOps" ,methodName = "testOps" ))
		self.eq(20 / 2 / 2, 5, _hx_c._hx_AnonObject(fileName = "TestOps.hx" ,lineNumber = 36 ,className = "unit.TestOps" ,methodName = "testOps" ))
		self.eq(20 / (2 / 2), 20, _hx_c._hx_AnonObject(fileName = "TestOps.hx" ,lineNumber = 37 ,className = "unit.TestOps" ,methodName = "testOps" ))
		self.eq(2 << 3 >> 1, 8, _hx_c._hx_AnonObject(fileName = "TestOps.hx" ,lineNumber = 39 ,className = "unit.TestOps" ,methodName = "testOps" ))
		self.eq(2 << 3 >> 1, 8, _hx_c._hx_AnonObject(fileName = "TestOps.hx" ,lineNumber = 40 ,className = "unit.TestOps" ,methodName = "testOps" ))
		self.eq(2 << (3 >> 1), 4, _hx_c._hx_AnonObject(fileName = "TestOps.hx" ,lineNumber = 41 ,className = "unit.TestOps" ,methodName = "testOps" ))
		self.f((1 & 32768) != 0, _hx_c._hx_AnonObject(fileName = "TestOps.hx" ,lineNumber = 43 ,className = "unit.TestOps" ,methodName = "testOps" ))
		self.f((1 & 32768) != 0, _hx_c._hx_AnonObject(fileName = "TestOps.hx" ,lineNumber = 44 ,className = "unit.TestOps" ,methodName = "testOps" ))
		self.f(0 != (1 & 32768), _hx_c._hx_AnonObject(fileName = "TestOps.hx" ,lineNumber = 45 ,className = "unit.TestOps" ,methodName = "testOps" ))
		self.f(0 != (1 & 32768), _hx_c._hx_AnonObject(fileName = "TestOps.hx" ,lineNumber = 46 ,className = "unit.TestOps" ,methodName = "testOps" ))
		self.eq(5 * (10 % 3), 5, _hx_c._hx_AnonObject(fileName = "TestOps.hx" ,lineNumber = 48 ,className = "unit.TestOps" ,methodName = "testOps" ))
		self.eq(5 * (10 % 3), 5, _hx_c._hx_AnonObject(fileName = "TestOps.hx" ,lineNumber = 49 ,className = "unit.TestOps" ,methodName = "testOps" ))
		self.eq(5 * 10 % 3, 2, _hx_c._hx_AnonObject(fileName = "TestOps.hx" ,lineNumber = 50 ,className = "unit.TestOps" ,methodName = "testOps" ))
		self.eq(10 % 3 * 5, 5, _hx_c._hx_AnonObject(fileName = "TestOps.hx" ,lineNumber = 52 ,className = "unit.TestOps" ,methodName = "testOps" ))
		self.eq(10 % 3 * 5, 5, _hx_c._hx_AnonObject(fileName = "TestOps.hx" ,lineNumber = 53 ,className = "unit.TestOps" ,methodName = "testOps" ))
		self.eq(10 % (3 * 5), 10, _hx_c._hx_AnonObject(fileName = "TestOps.hx" ,lineNumber = 54 ,className = "unit.TestOps" ,methodName = "testOps" ))
		self.eq(100 % 100, 0, _hx_c._hx_AnonObject(fileName = "TestOps.hx" ,lineNumber = 55 ,className = "unit.TestOps" ,methodName = "testOps" ))
		self.eq(-100 % 100, 0, _hx_c._hx_AnonObject(fileName = "TestOps.hx" ,lineNumber = 56 ,className = "unit.TestOps" ,methodName = "testOps" ))
		self.eq(_hx_modf(101.5, 100), 1.5, _hx_c._hx_AnonObject(fileName = "TestOps.hx" ,lineNumber = 57 ,className = "unit.TestOps" ,methodName = "testOps" ))
		self.eq(_hx_modf(-101.5, 100), -1.5, _hx_c._hx_AnonObject(fileName = "TestOps.hx" ,lineNumber = 58 ,className = "unit.TestOps" ,methodName = "testOps" ))
		x = 101.5
		x = _hx_modf(x, 100)
		self.eq(x, 1.5, _hx_c._hx_AnonObject(fileName = "TestOps.hx" ,lineNumber = 61 ,className = "unit.TestOps" ,methodName = "testOps" ))
		self.t(_hx_math.isnan(_hx_modf(5.0, 0.0)), _hx_c._hx_AnonObject(fileName = "TestOps.hx" ,lineNumber = 62 ,className = "unit.TestOps" ,methodName = "testOps" ))
		def _hx_local_1():
			def _hx_local_3():
				nonlocal x
				x = _hx_modf(x, 0.0)
				return x
				
			
			f = _hx_local_3()
			return _hx_math.isnan(f)
		
		self.t(_hx_local_1(), _hx_c._hx_AnonObject(fileName = "TestOps.hx" ,lineNumber = 63 ,className = "unit.TestOps" ,methodName = "testOps" ))
		x1 = [-101.5]
		_hx_local_4 = x1
		_hx_local_5 = 0
		_hx_local_6 = _hx_array_get(_hx_local_4,_hx_local_5)
		_hx_array_set(_hx_local_4,_hx_local_5, _hx_modf(_hx_local_6, 100))
		_hx_array_get(_hx_local_4,_hx_local_5)
		
		self.eq(_hx_array_get(x1,0), -1.5, _hx_c._hx_AnonObject(fileName = "TestOps.hx" ,lineNumber = 71 ,className = "unit.TestOps" ,methodName = "testOps" ))
		self.eq(1 if (True) else 6 * 5, 1, _hx_c._hx_AnonObject(fileName = "TestOps.hx" ,lineNumber = 72 ,className = "unit.TestOps" ,methodName = "testOps" ))
		self.eq(1 if (False) else 6 * 5, 30, _hx_c._hx_AnonObject(fileName = "TestOps.hx" ,lineNumber = 73 ,className = "unit.TestOps" ,methodName = "testOps" ))
		self.eq((1 if (True) else 6) * 5, 5, _hx_c._hx_AnonObject(fileName = "TestOps.hx" ,lineNumber = 74 ,className = "unit.TestOps" ,methodName = "testOps" ))
		self.eq((1 if (False) else 6) * 5, 30, _hx_c._hx_AnonObject(fileName = "TestOps.hx" ,lineNumber = 75 ,className = "unit.TestOps" ,methodName = "testOps" ))
		self.eq(1 + (4 if (5 == 6) else 1), 2, _hx_c._hx_AnonObject(fileName = "TestOps.hx" ,lineNumber = 77 ,className = "unit.TestOps" ,methodName = "testOps" ))
		self.eq(1 if (1 + 1 == 3) else 5, 5, _hx_c._hx_AnonObject(fileName = "TestOps.hx" ,lineNumber = 78 ,className = "unit.TestOps" ,methodName = "testOps" ))
		self.eq(0 if (-3 == 3) else 1, 1, _hx_c._hx_AnonObject(fileName = "TestOps.hx" ,lineNumber = 80 ,className = "unit.TestOps" ,methodName = "testOps" ))
		self.t(True if (not True) else True, _hx_c._hx_AnonObject(fileName = "TestOps.hx" ,lineNumber = 81 ,className = "unit.TestOps" ,methodName = "testOps" ))
		k = False
		def _hx_local_10():
			def _hx_local_8():
				nonlocal k
				k = False
				return k
				
			
			def _hx_local_9():
				nonlocal k
				k = True
				return k
				
			
			return _hx_local_8() if True else _hx_local_9()
		
		self.f(_hx_local_10(), _hx_c._hx_AnonObject(fileName = "TestOps.hx" ,lineNumber = 84 ,className = "unit.TestOps" ,methodName = "testOps" ))
		self.f(k, _hx_c._hx_AnonObject(fileName = "TestOps.hx" ,lineNumber = 85 ,className = "unit.TestOps" ,methodName = "testOps" ))
		def _hx_local_12():
			def _hx_local_11():
				nonlocal k
				k = True
				return k
				
			
			return False if _hx_local_11() else True
		
		self.f(_hx_local_12(), _hx_c._hx_AnonObject(fileName = "TestOps.hx" ,lineNumber = 86 ,className = "unit.TestOps" ,methodName = "testOps" ))
		self.t(k, _hx_c._hx_AnonObject(fileName = "TestOps.hx" ,lineNumber = 87 ,className = "unit.TestOps" ,methodName = "testOps" ))
		self.t(True or False and False, _hx_c._hx_AnonObject(fileName = "TestOps.hx" ,lineNumber = 89 ,className = "unit.TestOps" ,methodName = "testOps" ))
		x2 = 1
		def _hx_local_14():
			nonlocal x2
			_hx_local_13 = x2
			x2 = x2 + 1
			return _hx_local_13
			
		
		self.eq(-_hx_local_14(), -1, _hx_c._hx_AnonObject(fileName = "TestOps.hx" ,lineNumber = 92 ,className = "unit.TestOps" ,methodName = "testOps" ))
		def _hx_local_16():
			nonlocal x2
			_hx_local_15 = x2
			x2 = x2 - 1
			return _hx_local_15
			
		
		self.eq(-_hx_local_16(), -2, _hx_c._hx_AnonObject(fileName = "TestOps.hx" ,lineNumber = 93 ,className = "unit.TestOps" ,methodName = "testOps" ))
		def _hx_local_17():
			_this = "bla" + "x"
			return _this.find("x") if (None is None) else _this.find("x", None)
		
		self.eq(_hx_local_17(), 3, _hx_c._hx_AnonObject(fileName = "TestOps.hx" ,lineNumber = 95 ,className = "unit.TestOps" ,methodName = "testOps" ))
		self.eq(5 * 3 + 4, 19, _hx_c._hx_AnonObject(fileName = "TestOps.hx" ,lineNumber = 97 ,className = "unit.TestOps" ,methodName = "testOps" ))
		self.eq(5 * 3 + 4, 19, _hx_c._hx_AnonObject(fileName = "TestOps.hx" ,lineNumber = 98 ,className = "unit.TestOps" ,methodName = "testOps" ))
	





unit_TestOps._hx_class = unit_TestOps
unit_TestOps._hx_class_name = "unit.TestOps"
_hx_classes["unit.TestOps"] = unit_TestOps
_hx_c.unit_TestOps = unit_TestOps
unit_TestOps._hx_fields = []
unit_TestOps._hx_props = []
unit_TestOps._hx_methods = ["testOps"]
unit_TestOps._hx_statics = []
unit_TestOps._hx_interfaces = []
unit_TestOps._hx_super = unit_Test
unit_TestOps._hx_meta = _hx_c._hx_AnonObject(obj=_hx_c._hx_AnonObject(),statics=_hx_c._hx_AnonObject(),fields=_hx_c._hx_AnonObject())
def unit_TestOps_hx_empty_init (_hx_o):
	pass
unit_TestOps._hx_empty_init = unit_TestOps_hx_empty_init
class unit_E1(_hx_c.Enum):
	def __init__(self, t, i, p):
		super(unit_E1,self).__init__(t, i, p)

unit_E1.C1 = unit_E1("C1", 0, list())

unit_E1._hx_constructs = ["C1"]
unit_E1._hx_class = unit_E1
unit_E1._hx_class_name = "unit.E1"
_hx_classes["unit.E1"] = unit_E1
_hx_c.unit_E1 = unit_E1
unit_E1._hx_meta = _hx_c._hx_AnonObject(obj=_hx_c._hx_AnonObject(),fields=_hx_c._hx_AnonObject())
class unit_E2(_hx_c.Enum):
	def __init__(self, t, i, p):
		super(unit_E2,self).__init__(t, i, p)

unit_E2.C1 = unit_E2("C1", 0, list())

unit_E2._hx_constructs = ["C1"]
unit_E2._hx_class = unit_E2
unit_E2._hx_class_name = "unit.E2"
_hx_classes["unit.E2"] = unit_E2
_hx_c.unit_E2 = unit_E2
unit_E2._hx_meta = _hx_c._hx_AnonObject(obj=_hx_c._hx_AnonObject(),fields=_hx_c._hx_AnonObject())
# print unit.TestOrder.TestOrder
class unit_TestOrder(unit_Test):


	def __init__(self):
		super().__init__()
	def testUsing(self):
		self.eq(_hx_c.unit_Using3.usingTest("foo"), "3", _hx_c._hx_AnonObject(fileName = "TestOrder.hx" ,lineNumber = 17 ,className = "unit.TestOrder" ,methodName = "testUsing" ))
		c = _hx_c.unit_E2.C1
		_hx_local_0 = _hx_c.unit_Test
		_hx_local_1 = _hx_local_0.count
		_hx_local_0.count = _hx_local_1 + 1
		_hx_local_1
		
		self.eq("TEnum(unit.E2,[])", "TEnum(unit.E2,[])", _hx_c._hx_AnonObject(fileName = "TestOrder.hx" ,lineNumber = 21 ,className = "unit.TestOrder" ,methodName = "testUsing" ))
		
		self.eq(c, _hx_c.unit_E2.C1, _hx_c._hx_AnonObject(fileName = "TestOrder.hx" ,lineNumber = 22 ,className = "unit.TestOrder" ,methodName = "testUsing" ))
	





unit_TestOrder._hx_class = unit_TestOrder
unit_TestOrder._hx_class_name = "unit.TestOrder"
_hx_classes["unit.TestOrder"] = unit_TestOrder
_hx_c.unit_TestOrder = unit_TestOrder
unit_TestOrder._hx_fields = []
unit_TestOrder._hx_props = []
unit_TestOrder._hx_methods = ["testUsing"]
unit_TestOrder._hx_statics = []
unit_TestOrder._hx_interfaces = []
unit_TestOrder._hx_super = unit_Test
unit_TestOrder._hx_meta = _hx_c._hx_AnonObject(obj=_hx_c._hx_AnonObject(),statics=_hx_c._hx_AnonObject(),fields=_hx_c._hx_AnonObject())
def unit_TestOrder_hx_empty_init (_hx_o):
	pass
unit_TestOrder._hx_empty_init = unit_TestOrder_hx_empty_init
# print unit.TestReflect.InterfWithProp
class unit_InterfWithProp:

	# var x
	pass




unit_InterfWithProp._hx_class = unit_InterfWithProp
unit_InterfWithProp._hx_class_name = "unit.InterfWithProp"
_hx_classes["unit.InterfWithProp"] = unit_InterfWithProp
_hx_c.unit_InterfWithProp = unit_InterfWithProp
unit_InterfWithProp._hx_fields = []
unit_InterfWithProp._hx_props = ["x"]
unit_InterfWithProp._hx_methods = []
unit_InterfWithProp._hx_statics = []
unit_InterfWithProp._hx_interfaces = []
unit_InterfWithProp._hx_meta = _hx_c._hx_AnonObject(obj=_hx_c._hx_AnonObject(),statics=_hx_c._hx_AnonObject(),fields=_hx_c._hx_AnonObject())
def unit_InterfWithProp_hx_empty_init (_hx_o):
	pass
unit_InterfWithProp._hx_empty_init = unit_InterfWithProp_hx_empty_init
# print unit.TestReflect.ClassWithProp
class unit_ClassWithProp:


	def __init__(self):
		self._x = None
		self._x = 5
	
	# var x
	# var _x
	def get_x(self):
		return self._x

	def set_x(self,v):
		self._x = v
		return v
	





unit_ClassWithProp._hx_class = unit_ClassWithProp
unit_ClassWithProp._hx_class_name = "unit.ClassWithProp"
_hx_classes["unit.ClassWithProp"] = unit_ClassWithProp
_hx_c.unit_ClassWithProp = unit_ClassWithProp
unit_ClassWithProp._hx_fields = ["_x"]
unit_ClassWithProp._hx_props = ["x"]
unit_ClassWithProp._hx_methods = ["get_x","set_x"]
unit_ClassWithProp._hx_statics = ["STAT_X","set_STAT_X"]
unit_ClassWithProp._hx_interfaces = [unit_InterfWithProp]
unit_ClassWithProp._hx_meta = _hx_c._hx_AnonObject(obj=_hx_c._hx_AnonObject(),statics=_hx_c._hx_AnonObject(),fields=_hx_c._hx_AnonObject())
def unit_ClassWithProp_hx_empty_init (_hx_o):
	_hx_o._x = None
unit_ClassWithProp._hx_empty_init = unit_ClassWithProp_hx_empty_init
# print unit.TestReflect.SubClassWithProp
class unit_SubClassWithProp(unit_ClassWithProp):


	def __init__(self):
		self.y = None
		super().__init__()
		self.set_y(10)
		
	
	# var y
	def get_x(self):
		return self._x + 1

	def get_y(self):
		return self.y

	def set_y(self,v):
		self.y = v
		return v
	





unit_SubClassWithProp._hx_class = unit_SubClassWithProp
unit_SubClassWithProp._hx_class_name = "unit.SubClassWithProp"
_hx_classes["unit.SubClassWithProp"] = unit_SubClassWithProp
_hx_c.unit_SubClassWithProp = unit_SubClassWithProp
unit_SubClassWithProp._hx_fields = ["y"]
unit_SubClassWithProp._hx_props = []
unit_SubClassWithProp._hx_methods = ["get_x","get_y","set_y"]
unit_SubClassWithProp._hx_statics = []
unit_SubClassWithProp._hx_interfaces = []
unit_SubClassWithProp._hx_super = unit_ClassWithProp
unit_SubClassWithProp._hx_meta = _hx_c._hx_AnonObject(obj=_hx_c._hx_AnonObject(),statics=_hx_c._hx_AnonObject(),fields=_hx_c._hx_AnonObject())
def unit_SubClassWithProp_hx_empty_init (_hx_o):
	_hx_o.y = None
unit_SubClassWithProp._hx_empty_init = unit_SubClassWithProp_hx_empty_init
# print unit.TestReflect.TestReflect
class unit_TestReflect(unit_Test):


	def __init__(self):
		super().__init__()
	def testTypes(self):
		_g1 = 1
		_g = _hx_builtin.len(_hx_c.unit_TestReflect.TYPES)
		while _g1 < _g:
			i = _g1
			_g1 = _g1 + 1
			
			t = _hx_array_get(_hx_c.unit_TestReflect.TYPES,i)
			name = _hx_array_get(_hx_c.unit_TestReflect.TNAMES,i)
			self.infos("type " + Std.string(name))
			self.f(t is None, _hx_c._hx_AnonObject(fileName = "TestReflect.hx" ,lineNumber = 99 ,className = "unit.TestReflect" ,methodName = "testTypes" ))
			if name == "Enum":
				None
			elif t == _hx_c.unit_MyEnum or t == _hx_c.Bool:
				self.eq(_hx_c.Type.getEnumName(t), name, _hx_c._hx_AnonObject(fileName = "TestReflect.hx" ,lineNumber = 103 ,className = "unit.TestReflect" ,methodName = "testTypes" ))
				self.eq(_hx_c.Type.resolveEnum(name), t, _hx_c._hx_AnonObject(fileName = "TestReflect.hx" ,lineNumber = 104 ,className = "unit.TestReflect" ,methodName = "testTypes" ))
			
			else:
				self.eq(_hx_c.Type.getClassName(t), name, _hx_c._hx_AnonObject(fileName = "TestReflect.hx" ,lineNumber = 106 ,className = "unit.TestReflect" ,methodName = "testTypes" ))
				self.eq(_hx_c.Type.resolveClass(name), t, _hx_c._hx_AnonObject(fileName = "TestReflect.hx" ,lineNumber = 107 ,className = "unit.TestReflect" ,methodName = "testTypes" ))
			
		
		
		self.infos(None)
	

	def testIs(self):
		self._hx_is(None, None, None, _hx_c._hx_AnonObject(fileName = "TestReflect.hx" ,lineNumber = 114 ,className = "unit.TestReflect" ,methodName = "testIs" ))
		self._hx_is(0, _hx_c.Int, _hx_c.Float, _hx_c._hx_AnonObject(fileName = "TestReflect.hx" ,lineNumber = 115 ,className = "unit.TestReflect" ,methodName = "testIs" ))
		self._hx_is(1, _hx_c.Int, _hx_c.Float, _hx_c._hx_AnonObject(fileName = "TestReflect.hx" ,lineNumber = 116 ,className = "unit.TestReflect" ,methodName = "testIs" ))
		self._hx_is(-1, _hx_c.Int, _hx_c.Float, _hx_c._hx_AnonObject(fileName = "TestReflect.hx" ,lineNumber = 117 ,className = "unit.TestReflect" ,methodName = "testIs" ))
		self._hx_is(2.0, _hx_c.Int, _hx_c.Float, _hx_c._hx_AnonObject(fileName = "TestReflect.hx" ,lineNumber = 118 ,className = "unit.TestReflect" ,methodName = "testIs" ))
		self._hx_is(1.2, _hx_c.Float, None, _hx_c._hx_AnonObject(fileName = "TestReflect.hx" ,lineNumber = 119 ,className = "unit.TestReflect" ,methodName = "testIs" ))
		self._hx_is(1e10, _hx_c.Float, None, _hx_c._hx_AnonObject(fileName = "TestReflect.hx" ,lineNumber = 120 ,className = "unit.TestReflect" ,methodName = "testIs" ))
		self._hx_is(-1e10, _hx_c.Float, None, _hx_c._hx_AnonObject(fileName = "TestReflect.hx" ,lineNumber = 121 ,className = "unit.TestReflect" ,methodName = "testIs" ))
		self._hx_is(float("nan"), _hx_c.Float, None, _hx_c._hx_AnonObject(fileName = "TestReflect.hx" ,lineNumber = 122 ,className = "unit.TestReflect" ,methodName = "testIs" ))
		self._hx_is(float("inf"), _hx_c.Float, None, _hx_c._hx_AnonObject(fileName = "TestReflect.hx" ,lineNumber = 123 ,className = "unit.TestReflect" ,methodName = "testIs" ))
		self._hx_is(float("-inf"), _hx_c.Float, None, _hx_c._hx_AnonObject(fileName = "TestReflect.hx" ,lineNumber = 124 ,className = "unit.TestReflect" ,methodName = "testIs" ))
		self._hx_is(True, _hx_c.Bool, None, _hx_c._hx_AnonObject(fileName = "TestReflect.hx" ,lineNumber = 125 ,className = "unit.TestReflect" ,methodName = "testIs" ))
		self._hx_is(False, _hx_c.Bool, None, _hx_c._hx_AnonObject(fileName = "TestReflect.hx" ,lineNumber = 126 ,className = "unit.TestReflect" ,methodName = "testIs" ))
		self._hx_is("Hello", _hx_c.String, None, _hx_c._hx_AnonObject(fileName = "TestReflect.hx" ,lineNumber = 127 ,className = "unit.TestReflect" ,methodName = "testIs" ))
		self._hx_is("123", _hx_c.String, None, _hx_c._hx_AnonObject(fileName = "TestReflect.hx" ,lineNumber = 128 ,className = "unit.TestReflect" ,methodName = "testIs" ))
		self._hx_is("false", _hx_c.String, None, _hx_c._hx_AnonObject(fileName = "TestReflect.hx" ,lineNumber = 129 ,className = "unit.TestReflect" ,methodName = "testIs" ))
		self._hx_is("", _hx_c.String, None, _hx_c._hx_AnonObject(fileName = "TestReflect.hx" ,lineNumber = 130 ,className = "unit.TestReflect" ,methodName = "testIs" ))
		self._hx_is([], list, None, _hx_c._hx_AnonObject(fileName = "TestReflect.hx" ,lineNumber = 131 ,className = "unit.TestReflect" ,methodName = "testIs" ))
		self._hx_is(_hx_c.List(), _hx_c.List, None, _hx_c._hx_AnonObject(fileName = "TestReflect.hx" ,lineNumber = 132 ,className = "unit.TestReflect" ,methodName = "testIs" ))
		self._hx_is(_hx_c.haxe_ds_StringMap(), _hx_c.haxe_ds_StringMap, None, _hx_c._hx_AnonObject(fileName = "TestReflect.hx" ,lineNumber = 133 ,className = "unit.TestReflect" ,methodName = "testIs" ))
		self._hx_is(_hx_c.unit_MyClass(0), _hx_c.unit_MyClass, None, _hx_c._hx_AnonObject(fileName = "TestReflect.hx" ,lineNumber = 134 ,className = "unit.TestReflect" ,methodName = "testIs" ))
		self._hx_is(_hx_c.unit_MySubClass(0), _hx_c.unit_MyClass, _hx_c.unit_MySubClass, _hx_c._hx_AnonObject(fileName = "TestReflect.hx" ,lineNumber = 135 ,className = "unit.TestReflect" ,methodName = "testIs" ))
		self._hx_is(_hx_c.unit_MyEnum.A, _hx_c.unit_MyEnum, None, _hx_c._hx_AnonObject(fileName = "TestReflect.hx" ,lineNumber = 136 ,className = "unit.TestReflect" ,methodName = "testIs" ))
		self._hx_is(_hx_c.unit_MyEnum.C(0, ""), _hx_c.unit_MyEnum, None, _hx_c._hx_AnonObject(fileName = "TestReflect.hx" ,lineNumber = 137 ,className = "unit.TestReflect" ,methodName = "testIs" ))
		self._hx_is(_hx_c.Date.now(), _hx_c.Date, None, _hx_c._hx_AnonObject(fileName = "TestReflect.hx" ,lineNumber = 138 ,className = "unit.TestReflect" ,methodName = "testIs" ))
		self._hx_is(_hx_c._hx_AnonObject(x = 0 ), None, None, _hx_c._hx_AnonObject(fileName = "TestReflect.hx" ,lineNumber = 139 ,className = "unit.TestReflect" ,methodName = "testIs" ))
		def _hx_local_0():
			None
		self._hx_is(_hx_local_0, None, None, _hx_c._hx_AnonObject(fileName = "TestReflect.hx" ,lineNumber = 140 ,className = "unit.TestReflect" ,methodName = "testIs" ))
		self._hx_is(_hx_c.unit_MyClass, _hx_c.Class, None, _hx_c._hx_AnonObject(fileName = "TestReflect.hx" ,lineNumber = 141 ,className = "unit.TestReflect" ,methodName = "testIs" ))
		self._hx_is(_hx_c.unit_MyEnum, _hx_c.Enum, None, _hx_c._hx_AnonObject(fileName = "TestReflect.hx" ,lineNumber = 142 ,className = "unit.TestReflect" ,methodName = "testIs" ))
		self._hx_is(_hx_c.Class, _hx_c.Class, None, _hx_c._hx_AnonObject(fileName = "TestReflect.hx" ,lineNumber = 143 ,className = "unit.TestReflect" ,methodName = "testIs" ))
	

	def _hx_is(self,v,t1,t2 = None,pos = None):
		if t2 is None:
			t2 = None
		
		if pos is None:
			pos = None
		
		_g1 = 0
		_g = _hx_builtin.len(_hx_c.unit_TestReflect.TYPES)
		while _g1 < _g:
			i = _g1
			_g1 = _g1 + 1
			
			c = _hx_array_get(_hx_c.unit_TestReflect.TYPES,i)
			self.infos(Std.string(Std.string(_hx_c.Std.string(v)) + " is ") + Std.string(_hx_array_get(_hx_c.unit_TestReflect.TNAMES,i)))
			self.eq(_hx_c.Std._hx_is(v, c), c is not None and (c == t1 or c == t2) or c == _hx_c.Dynamic, pos)
		
		
		self.infos(None)
		self.t(_hx_c.Std._hx_is(v, _hx_c.Dynamic), pos)
	

	def testTypeof(self):
		self.typeof(None, _hx_c.ValueType.TNull, _hx_c._hx_AnonObject(fileName = "TestReflect.hx" ,lineNumber = 164 ,className = "unit.TestReflect" ,methodName = "testTypeof" ))
		self.typeof(0, _hx_c.ValueType.TInt, _hx_c._hx_AnonObject(fileName = "TestReflect.hx" ,lineNumber = 165 ,className = "unit.TestReflect" ,methodName = "testTypeof" ))
		self.typeof(1, _hx_c.ValueType.TInt, _hx_c._hx_AnonObject(fileName = "TestReflect.hx" ,lineNumber = 166 ,className = "unit.TestReflect" ,methodName = "testTypeof" ))
		self.typeof(-1, _hx_c.ValueType.TInt, _hx_c._hx_AnonObject(fileName = "TestReflect.hx" ,lineNumber = 167 ,className = "unit.TestReflect" ,methodName = "testTypeof" ))
		self.typeof(1.2, _hx_c.ValueType.TFloat, _hx_c._hx_AnonObject(fileName = "TestReflect.hx" ,lineNumber = 168 ,className = "unit.TestReflect" ,methodName = "testTypeof" ))
		self.typeof(1e10, _hx_c.ValueType.TFloat, _hx_c._hx_AnonObject(fileName = "TestReflect.hx" ,lineNumber = 169 ,className = "unit.TestReflect" ,methodName = "testTypeof" ))
		self.typeof(-1e10, _hx_c.ValueType.TFloat, _hx_c._hx_AnonObject(fileName = "TestReflect.hx" ,lineNumber = 170 ,className = "unit.TestReflect" ,methodName = "testTypeof" ))
		self.typeof(float("nan"), _hx_c.ValueType.TFloat, _hx_c._hx_AnonObject(fileName = "TestReflect.hx" ,lineNumber = 171 ,className = "unit.TestReflect" ,methodName = "testTypeof" ))
		self.typeof(float("inf"), _hx_c.ValueType.TFloat, _hx_c._hx_AnonObject(fileName = "TestReflect.hx" ,lineNumber = 172 ,className = "unit.TestReflect" ,methodName = "testTypeof" ))
		self.typeof(float("-inf"), _hx_c.ValueType.TFloat, _hx_c._hx_AnonObject(fileName = "TestReflect.hx" ,lineNumber = 173 ,className = "unit.TestReflect" ,methodName = "testTypeof" ))
		self.typeof(True, _hx_c.ValueType.TBool, _hx_c._hx_AnonObject(fileName = "TestReflect.hx" ,lineNumber = 174 ,className = "unit.TestReflect" ,methodName = "testTypeof" ))
		self.typeof(False, _hx_c.ValueType.TBool, _hx_c._hx_AnonObject(fileName = "TestReflect.hx" ,lineNumber = 175 ,className = "unit.TestReflect" ,methodName = "testTypeof" ))
		self.typeof("Hello", _hx_c.ValueType.TClass(_hx_c.String), _hx_c._hx_AnonObject(fileName = "TestReflect.hx" ,lineNumber = 176 ,className = "unit.TestReflect" ,methodName = "testTypeof" ))
		self.typeof("", _hx_c.ValueType.TClass(_hx_c.String), _hx_c._hx_AnonObject(fileName = "TestReflect.hx" ,lineNumber = 177 ,className = "unit.TestReflect" ,methodName = "testTypeof" ))
		self.typeof([], _hx_c.ValueType.TClass(list), _hx_c._hx_AnonObject(fileName = "TestReflect.hx" ,lineNumber = 178 ,className = "unit.TestReflect" ,methodName = "testTypeof" ))
		self.typeof(_hx_c.List(), _hx_c.ValueType.TClass(_hx_c.List), _hx_c._hx_AnonObject(fileName = "TestReflect.hx" ,lineNumber = 179 ,className = "unit.TestReflect" ,methodName = "testTypeof" ))
		self.typeof(_hx_c.haxe_ds_StringMap(), _hx_c.ValueType.TClass(_hx_c.haxe_ds_StringMap), _hx_c._hx_AnonObject(fileName = "TestReflect.hx" ,lineNumber = 180 ,className = "unit.TestReflect" ,methodName = "testTypeof" ))
		self.typeof(_hx_c.unit_MyClass(0), _hx_c.ValueType.TClass(_hx_c.unit_MyClass), _hx_c._hx_AnonObject(fileName = "TestReflect.hx" ,lineNumber = 181 ,className = "unit.TestReflect" ,methodName = "testTypeof" ))
		self.typeof(_hx_c.unit_MySubClass(0), _hx_c.ValueType.TClass(_hx_c.unit_MySubClass), _hx_c._hx_AnonObject(fileName = "TestReflect.hx" ,lineNumber = 182 ,className = "unit.TestReflect" ,methodName = "testTypeof" ))
		self.typeof(_hx_c.unit_MyEnum.A, _hx_c.ValueType.TEnum(_hx_c.unit_MyEnum), _hx_c._hx_AnonObject(fileName = "TestReflect.hx" ,lineNumber = 183 ,className = "unit.TestReflect" ,methodName = "testTypeof" ))
		self.typeof(_hx_c.unit_MyEnum.C(0, ""), _hx_c.ValueType.TEnum(_hx_c.unit_MyEnum), _hx_c._hx_AnonObject(fileName = "TestReflect.hx" ,lineNumber = 184 ,className = "unit.TestReflect" ,methodName = "testTypeof" ))
		self.typeof(_hx_c.Date.now(), _hx_c.ValueType.TClass(_hx_c.Date), _hx_c._hx_AnonObject(fileName = "TestReflect.hx" ,lineNumber = 185 ,className = "unit.TestReflect" ,methodName = "testTypeof" ))
		self.typeof(_hx_c._hx_AnonObject(x = 0 ), _hx_c.ValueType.TObject, _hx_c._hx_AnonObject(fileName = "TestReflect.hx" ,lineNumber = 186 ,className = "unit.TestReflect" ,methodName = "testTypeof" ))
		def _hx_local_0():
			None
		self.typeof(_hx_local_0, _hx_c.ValueType.TFunction, _hx_c._hx_AnonObject(fileName = "TestReflect.hx" ,lineNumber = 187 ,className = "unit.TestReflect" ,methodName = "testTypeof" ))
		self.typeof(_hx_c.unit_MyClass, _hx_c.ValueType.TObject, _hx_c._hx_AnonObject(fileName = "TestReflect.hx" ,lineNumber = 188 ,className = "unit.TestReflect" ,methodName = "testTypeof" ))
		self.typeof(_hx_c.unit_MyEnum, _hx_c.ValueType.TObject, _hx_c._hx_AnonObject(fileName = "TestReflect.hx" ,lineNumber = 189 ,className = "unit.TestReflect" ,methodName = "testTypeof" ))
		self.typeof(_hx_c.Class, _hx_c.ValueType.TObject, _hx_c._hx_AnonObject(fileName = "TestReflect.hx" ,lineNumber = 192 ,className = "unit.TestReflect" ,methodName = "testTypeof" ))
		self.typeof(_hx_c.Enum, _hx_c.ValueType.TObject, _hx_c._hx_AnonObject(fileName = "TestReflect.hx" ,lineNumber = 193 ,className = "unit.TestReflect" ,methodName = "testTypeof" ))
	

	def typeof(self,v,rt,pos = None):
		if pos is None:
			pos = None
		
		vt = _hx_c.Type.typeof(v)
		self.infos(Std.string(Std.string(Std.string(Std.string("typeof(" + Std.string(_hx_c.Std.string(v))) + ") = ") + Std.string(_hx_c.Std.string(vt))) + " but should be ") + Std.string(_hx_c.Std.string(rt)))
		self.t(_hx_c.Type.enumEq(vt, rt), pos)
	

	def testConv(self):
		self.eq("A", "A", _hx_c._hx_AnonObject(fileName = "TestReflect.hx" ,lineNumber = 204 ,className = "unit.TestReflect" ,methodName = "testConv" ))
		def _hx_local_0():
			c = 1024
			"".join(_hx_builtin.map(_hx_builtin.chr, [c]))
		
		self.unspec(_hx_local_0)
		self.eq(_hx_c.python_internal_StringImpl.charCodeAt("A", 0), 65, _hx_c._hx_AnonObject(fileName = "TestReflect.hx" ,lineNumber = 206 ,className = "unit.TestReflect" ,methodName = "testConv" ))
		self.eq(_hx_c.python_internal_StringImpl.charCodeAt("", 0), None, _hx_c._hx_AnonObject(fileName = "TestReflect.hx" ,lineNumber = 207 ,className = "unit.TestReflect" ,methodName = "testConv" ))
		self.eq(65, 65, _hx_c._hx_AnonObject(fileName = "TestReflect.hx" ,lineNumber = 208 ,className = "unit.TestReflect" ,methodName = "testConv" ))
		self.eq(65, 65, _hx_c._hx_AnonObject(fileName = "TestReflect.hx" ,lineNumber = 209 ,className = "unit.TestReflect" ,methodName = "testConv" ))
		self.eq(-65, -65, _hx_c._hx_AnonObject(fileName = "TestReflect.hx" ,lineNumber = 210 ,className = "unit.TestReflect" ,methodName = "testConv" ))
		self.eq(1, 1, _hx_c._hx_AnonObject(fileName = "TestReflect.hx" ,lineNumber = 211 ,className = "unit.TestReflect" ,methodName = "testConv" ))
		self.eq(-1, -1, _hx_c._hx_AnonObject(fileName = "TestReflect.hx" ,lineNumber = 212 ,className = "unit.TestReflect" ,methodName = "testConv" ))
		self.eq(1, 1, _hx_c._hx_AnonObject(fileName = "TestReflect.hx" ,lineNumber = 213 ,className = "unit.TestReflect" ,methodName = "testConv" ))
		self.eq(-1, -1, _hx_c._hx_AnonObject(fileName = "TestReflect.hx" ,lineNumber = 214 ,className = "unit.TestReflect" ,methodName = "testConv" ))
		self.eq(_hx_c.Std.parseInt("65"), 65, _hx_c._hx_AnonObject(fileName = "TestReflect.hx" ,lineNumber = 215 ,className = "unit.TestReflect" ,methodName = "testConv" ))
		self.eq(_hx_c.Std.parseInt("65.3"), 65, _hx_c._hx_AnonObject(fileName = "TestReflect.hx" ,lineNumber = 216 ,className = "unit.TestReflect" ,methodName = "testConv" ))
		self.eq(_hx_c.Std.parseFloat("65"), 65.0, _hx_c._hx_AnonObject(fileName = "TestReflect.hx" ,lineNumber = 217 ,className = "unit.TestReflect" ,methodName = "testConv" ))
		self.eq(_hx_c.Std.parseFloat("65.3"), 65.3, _hx_c._hx_AnonObject(fileName = "TestReflect.hx" ,lineNumber = 218 ,className = "unit.TestReflect" ,methodName = "testConv" ))
		self.eq(_hx_c.Std.parseFloat("-1e10"), -1e10, _hx_c._hx_AnonObject(fileName = "TestReflect.hx" ,lineNumber = 219 ,className = "unit.TestReflect" ,methodName = "testConv" ))
		self.eq(_hx_c.Std.parseInt("0xFF"), 255, _hx_c._hx_AnonObject(fileName = "TestReflect.hx" ,lineNumber = 220 ,className = "unit.TestReflect" ,methodName = "testConv" ))
	

	def testCreate(self):
		i = _hx_c.Type.createInstance(_hx_c.unit_MyClass, [33])
		self.t(_hx_c.Std._hx_is(i, _hx_c.unit_MyClass), _hx_c._hx_AnonObject(fileName = "TestReflect.hx" ,lineNumber = 225 ,className = "unit.TestReflect" ,methodName = "testCreate" ))
		self.eq(i.get(), 33, _hx_c._hx_AnonObject(fileName = "TestReflect.hx" ,lineNumber = 226 ,className = "unit.TestReflect" ,methodName = "testCreate" ))
		self.eq(i.intValue, 55, _hx_c._hx_AnonObject(fileName = "TestReflect.hx" ,lineNumber = 227 ,className = "unit.TestReflect" ,methodName = "testCreate" ))
		i1 = _hx_c.Type.createEmptyInstance(_hx_c.unit_MyClass)
		self.t(_hx_c.Std._hx_is(i1, _hx_c.unit_MyClass), _hx_c._hx_AnonObject(fileName = "TestReflect.hx" ,lineNumber = 229 ,className = "unit.TestReflect" ,methodName = "testCreate" ))
		self.eq(i1.get(), None, _hx_c._hx_AnonObject(fileName = "TestReflect.hx" ,lineNumber = 230 ,className = "unit.TestReflect" ,methodName = "testCreate" ))
		self.eq(i1.intValue, None, _hx_c._hx_AnonObject(fileName = "TestReflect.hx" ,lineNumber = 231 ,className = "unit.TestReflect" ,methodName = "testCreate" ))
		e = _hx_c.Type.createEnum(_hx_c.unit_MyEnum, "A")
		self.eq(e, _hx_c.unit_MyEnum.A, _hx_c._hx_AnonObject(fileName = "TestReflect.hx" ,lineNumber = 233 ,className = "unit.TestReflect" ,methodName = "testCreate" ))
		e1 = _hx_c.Type.createEnum(_hx_c.unit_MyEnum, "C", [55, "hello"])
		if (e1.index) == 2:
			s = e1.params[1]
			i2 = e1.params[0]
			self.eq(i2, 55, _hx_c._hx_AnonObject(fileName = "TestReflect.hx" ,lineNumber = 236 ,className = "unit.TestReflect" ,methodName = "testCreate" ))
			self.eq(s, "hello", _hx_c._hx_AnonObject(fileName = "TestReflect.hx" ,lineNumber = 236 ,className = "unit.TestReflect" ,methodName = "testCreate" ))
			
		
		else:
			self._hx_assert(_hx_c._hx_AnonObject(fileName = "TestReflect.hx" ,lineNumber = 237 ,className = "unit.TestReflect" ,methodName = "testCreate" ))
		def _hx_local_0():
			_hx_c.Type.createEnum(_hx_c.unit_MyEnum, "A", [0])
		self.exc(_hx_local_0, _hx_c._hx_AnonObject(fileName = "TestReflect.hx" ,lineNumber = 239 ,className = "unit.TestReflect" ,methodName = "testCreate" ))
		def _hx_local_1():
			_hx_c.Type.createEnum(_hx_c.unit_MyEnum, "C")
		self.exc(_hx_local_1, _hx_c._hx_AnonObject(fileName = "TestReflect.hx" ,lineNumber = 240 ,className = "unit.TestReflect" ,methodName = "testCreate" ))
		def _hx_local_2():
			_hx_c.Type.createEnum(_hx_c.unit_MyEnum, "Z", [])
		self.exc(_hx_local_2, _hx_c._hx_AnonObject(fileName = "TestReflect.hx" ,lineNumber = 241 ,className = "unit.TestReflect" ,methodName = "testCreate" ))
	

	def testCompare(self):
		a = _hx_c.unit_MyClass(0)
		b = _hx_c.unit_MyClass(1)
		self.t(_hx_c.Reflect.compareMethods(a.add, a.add), _hx_c._hx_AnonObject(fileName = "TestReflect.hx" ,lineNumber = 247 ,className = "unit.TestReflect" ,methodName = "testCompare" ))
		self.f(_hx_c.Reflect.compareMethods(a.add, b.add), _hx_c._hx_AnonObject(fileName = "TestReflect.hx" ,lineNumber = 248 ,className = "unit.TestReflect" ,methodName = "testCompare" ))
		self.f(_hx_c.Reflect.compareMethods(a.add, a.get), _hx_c._hx_AnonObject(fileName = "TestReflect.hx" ,lineNumber = 249 ,className = "unit.TestReflect" ,methodName = "testCompare" ))
		self.f(_hx_c.Reflect.compareMethods(a.add, None), _hx_c._hx_AnonObject(fileName = "TestReflect.hx" ,lineNumber = 250 ,className = "unit.TestReflect" ,methodName = "testCompare" ))
		self.f(_hx_c.Reflect.compareMethods(None, a.add), _hx_c._hx_AnonObject(fileName = "TestReflect.hx" ,lineNumber = 251 ,className = "unit.TestReflect" ,methodName = "testCompare" ))
	

	def testGetProp(self):
		c = _hx_c.unit_ClassWithProp()
		self.eq(c.get_x(), 5, _hx_c._hx_AnonObject(fileName = "TestReflect.hx" ,lineNumber = 270 ,className = "unit.TestReflect" ,methodName = "testGetProp" ))
		self.eq(_hx_c.Reflect.getProperty(c, "x"), 5, _hx_c._hx_AnonObject(fileName = "TestReflect.hx" ,lineNumber = 272 ,className = "unit.TestReflect" ,methodName = "testGetProp" ))
		c.set_x(0)
		field = None
		if _hx_c.python_internal_KeywordHandler.keywords.exists("x"):
			field = "_hx_" + "x"
		else:
			field = "x"
		if _hx_builtin.hasattr(c, "set_" + Std.string(field)):
			tmp = _hx_builtin.getattr(c, "set_" + Std.string(field))
			tmp(10)
		
		else:
			_hx_builtin.setattr(c, field, 10)
		
		self.eq(c.get_x(), 10, _hx_c._hx_AnonObject(fileName = "TestReflect.hx" ,lineNumber = 278 ,className = "unit.TestReflect" ,methodName = "testGetProp" ))
		self.eq(_hx_c.Reflect.getProperty(c, "x"), 10, _hx_c._hx_AnonObject(fileName = "TestReflect.hx" ,lineNumber = 279 ,className = "unit.TestReflect" ,methodName = "testGetProp" ))
		c1 = _hx_c.unit_ClassWithProp()
		self.eq(c1.get_x(), 5, _hx_c._hx_AnonObject(fileName = "TestReflect.hx" ,lineNumber = 282 ,className = "unit.TestReflect" ,methodName = "testGetProp" ))
		self.eq(_hx_c.Reflect.getProperty(c1, "x"), 5, _hx_c._hx_AnonObject(fileName = "TestReflect.hx" ,lineNumber = 284 ,className = "unit.TestReflect" ,methodName = "testGetProp" ))
		field1 = None
		if _hx_c.python_internal_KeywordHandler.keywords.exists("x"):
			field1 = "_hx_" + "x"
		else:
			field1 = "x"
		if _hx_builtin.hasattr(c1, "set_" + Std.string(field1)):
			tmp1 = _hx_builtin.getattr(c1, "set_" + Std.string(field1))
			tmp1(10)
		
		else:
			_hx_builtin.setattr(c1, field1, 10)
		
		self.eq(c1.get_x(), 10, _hx_c._hx_AnonObject(fileName = "TestReflect.hx" ,lineNumber = 286 ,className = "unit.TestReflect" ,methodName = "testGetProp" ))
		self.eq(_hx_c.Reflect.getProperty(c1, "x"), 10, _hx_c._hx_AnonObject(fileName = "TestReflect.hx" ,lineNumber = 287 ,className = "unit.TestReflect" ,methodName = "testGetProp" ))
		c2 = _hx_c.unit_SubClassWithProp()
		self.eq(c2.get_x(), 6, _hx_c._hx_AnonObject(fileName = "TestReflect.hx" ,lineNumber = 290 ,className = "unit.TestReflect" ,methodName = "testGetProp" ))
		self.eq(_hx_c.Reflect.getProperty(c2, "x"), 6, _hx_c._hx_AnonObject(fileName = "TestReflect.hx" ,lineNumber = 291 ,className = "unit.TestReflect" ,methodName = "testGetProp" ))
		self.eq(c2.y, 10, _hx_c._hx_AnonObject(fileName = "TestReflect.hx" ,lineNumber = 292 ,className = "unit.TestReflect" ,methodName = "testGetProp" ))
		self.eq(_hx_c.Reflect.getProperty(c2, "y"), 10, _hx_c._hx_AnonObject(fileName = "TestReflect.hx" ,lineNumber = 293 ,className = "unit.TestReflect" ,methodName = "testGetProp" ))
		field2 = None
		if _hx_c.python_internal_KeywordHandler.keywords.exists("x"):
			field2 = "_hx_" + "x"
		else:
			field2 = "x"
		if _hx_builtin.hasattr(c2, "set_" + Std.string(field2)):
			tmp2 = _hx_builtin.getattr(c2, "set_" + Std.string(field2))
			tmp2(10)
		
		else:
			_hx_builtin.setattr(c2, field2, 10)
		
		field3 = None
		if _hx_c.python_internal_KeywordHandler.keywords.exists("y"):
			field3 = "_hx_" + "y"
		else:
			field3 = "y"
		if _hx_builtin.hasattr(c2, "set_" + Std.string(field3)):
			tmp3 = _hx_builtin.getattr(c2, "set_" + Std.string(field3))
			tmp3(20)
		
		else:
			_hx_builtin.setattr(c2, field3, 20)
		
		self.eq(c2.get_x(), 11, _hx_c._hx_AnonObject(fileName = "TestReflect.hx" ,lineNumber = 298 ,className = "unit.TestReflect" ,methodName = "testGetProp" ))
		self.eq(_hx_c.Reflect.getProperty(c2, "x"), 11, _hx_c._hx_AnonObject(fileName = "TestReflect.hx" ,lineNumber = 299 ,className = "unit.TestReflect" ,methodName = "testGetProp" ))
		self.eq(c2.y, 20, _hx_c._hx_AnonObject(fileName = "TestReflect.hx" ,lineNumber = 300 ,className = "unit.TestReflect" ,methodName = "testGetProp" ))
		self.eq(_hx_c.Reflect.getProperty(c2, "y"), 20, _hx_c._hx_AnonObject(fileName = "TestReflect.hx" ,lineNumber = 301 ,className = "unit.TestReflect" ,methodName = "testGetProp" ))
		self.eq(_hx_c.unit_ClassWithProp.STAT_X, 6, _hx_c._hx_AnonObject(fileName = "TestReflect.hx" ,lineNumber = 303 ,className = "unit.TestReflect" ,methodName = "testGetProp" ))
		self.eq(_hx_c.Reflect.getProperty(_hx_c.unit_ClassWithProp, "STAT_X"), 6, _hx_c._hx_AnonObject(fileName = "TestReflect.hx" ,lineNumber = 304 ,className = "unit.TestReflect" ,methodName = "testGetProp" ))
		o = _hx_c.unit_ClassWithProp
		field4 = None
		if _hx_c.python_internal_KeywordHandler.keywords.exists("STAT_X"):
			field4 = "_hx_" + "STAT_X"
		else:
			field4 = "STAT_X"
		if _hx_builtin.hasattr(o, "set_" + Std.string(field4)):
			tmp4 = _hx_builtin.getattr(o, "set_" + Std.string(field4))
			tmp4(8)
		
		else:
			_hx_builtin.setattr(o, field4, 8)
		
		self.eq(_hx_c.unit_ClassWithProp.STAT_X, 16, _hx_c._hx_AnonObject(fileName = "TestReflect.hx" ,lineNumber = 308 ,className = "unit.TestReflect" ,methodName = "testGetProp" ))
		self.eq(_hx_c.Reflect.getProperty(_hx_c.unit_ClassWithProp, "STAT_X"), 16, _hx_c._hx_AnonObject(fileName = "TestReflect.hx" ,lineNumber = 309 ,className = "unit.TestReflect" ,methodName = "testGetProp" ))
	





unit_TestReflect._hx_class = unit_TestReflect
unit_TestReflect._hx_class_name = "unit.TestReflect"
_hx_classes["unit.TestReflect"] = unit_TestReflect
_hx_c.unit_TestReflect = unit_TestReflect
unit_TestReflect._hx_fields = []
unit_TestReflect._hx_props = []
unit_TestReflect._hx_methods = ["testTypes","testIs","is","testTypeof","typeof","testConv","testCreate","testCompare","testGetProp"]
unit_TestReflect._hx_statics = ["TYPES","u","u2","TNAMES"]
unit_TestReflect._hx_interfaces = []
unit_TestReflect._hx_super = unit_Test
unit_TestReflect._hx_meta = _hx_c._hx_AnonObject(obj=_hx_c._hx_AnonObject(),statics=_hx_c._hx_AnonObject(),fields=_hx_c._hx_AnonObject())
def unit_TestReflect_hx_empty_init (_hx_o):
	pass
unit_TestReflect._hx_empty_init = unit_TestReflect_hx_empty_init
# print unit.TestResource.TestResource
class unit_TestResource(unit_Test):


	def __init__(self):
		super().__init__()
	def testResources(self):
		names = _hx_c.haxe_Resource.listNames()
		self.eq(_hx_builtin.len(names), 2, _hx_c._hx_AnonObject(fileName = "TestResource.hx" ,lineNumber = 9 ,className = "unit.TestResource" ,methodName = "testResources" ))
		if _hx_array_get(names,0) == "res1.txt":
			self.eq(_hx_array_get(names,1), "res2.bin", _hx_c._hx_AnonObject(fileName = "TestResource.hx" ,lineNumber = 11 ,className = "unit.TestResource" ,methodName = "testResources" ))
		else:
			self.eq(_hx_array_get(names,0), "res2.bin", _hx_c._hx_AnonObject(fileName = "TestResource.hx" ,lineNumber = 13 ,className = "unit.TestResource" ,methodName = "testResources" ))
			self.eq(_hx_array_get(names,1), "res1.txt", _hx_c._hx_AnonObject(fileName = "TestResource.hx" ,lineNumber = 14 ,className = "unit.TestResource" ,methodName = "testResources" ))
		
		self.eq(_hx_c.haxe_Resource.getString("res1.txt"), _hx_c.unit_TestResource.STR, _hx_c._hx_AnonObject(fileName = "TestResource.hx" ,lineNumber = 16 ,className = "unit.TestResource" ,methodName = "testResources" ))
		def _hx_local_0():
			_this = _hx_c.haxe_Resource.getString("res2.bin")
			return _hx_c.python_Tools.substr(_this, 0, 2)
		
		self.eq(_hx_local_0(), "MZ", _hx_c._hx_AnonObject(fileName = "TestResource.hx" ,lineNumber = 22 ,className = "unit.TestResource" ,methodName = "testResources" ))
		self.eq(_hx_c.haxe_Resource.getBytes("res1.txt").compare(_hx_c.haxe_io_Bytes.ofString(_hx_c.unit_TestResource.STR)), 0, _hx_c._hx_AnonObject(fileName = "TestResource.hx" ,lineNumber = 24 ,className = "unit.TestResource" ,methodName = "testResources" ))
		b = _hx_c.haxe_Resource.getBytes("res2.bin")
		firsts = [77, 90, 144, 0, 3, 0, 0, 0, 4, 0, 0, 0, 255, 255, 0, 0, 184]
		lasts = [214, 82, 3, 26, 44, 78, 69, 75, 79, 0, 28, 0, 0]
		_g1 = 0
		_g = _hx_builtin.len(firsts)
		while _g1 < _g:
			i = _g1
			_g1 = _g1 + 1
			
			self.eq(_hx_array_get(b.b,i), _hx_array_get(firsts,i), _hx_c._hx_AnonObject(fileName = "TestResource.hx" ,lineNumber = 29 ,className = "unit.TestResource" ,methodName = "testResources" ))
		
		
		_g11 = 0
		_g2 = _hx_builtin.len(lasts)
		while _g11 < _g2:
			i1 = _g11
			_g11 = _g11 + 1
			
			def _hx_local_1():
				pos = b.length - _hx_builtin.len(lasts) + i1
				return _hx_array_get(b.b,pos)
			
			self.eq(_hx_local_1(), _hx_array_get(lasts,i1), _hx_c._hx_AnonObject(fileName = "TestResource.hx" ,lineNumber = 31 ,className = "unit.TestResource" ,methodName = "testResources" ))
		
		
	





unit_TestResource._hx_class = unit_TestResource
unit_TestResource._hx_class_name = "unit.TestResource"
_hx_classes["unit.TestResource"] = unit_TestResource
_hx_c.unit_TestResource = unit_TestResource
unit_TestResource._hx_fields = []
unit_TestResource._hx_props = []
unit_TestResource._hx_methods = ["testResources"]
unit_TestResource._hx_statics = ["STR"]
unit_TestResource._hx_interfaces = []
unit_TestResource._hx_super = unit_Test
unit_TestResource._hx_meta = _hx_c._hx_AnonObject(obj=_hx_c._hx_AnonObject(),statics=_hx_c._hx_AnonObject(),fields=_hx_c._hx_AnonObject())
def unit_TestResource_hx_empty_init (_hx_o):
	pass
unit_TestResource._hx_empty_init = unit_TestResource_hx_empty_init
# print unit.TestSerialize.TestSerialize
class unit_TestSerialize(unit_Test):


	def __init__(self):
		super().__init__()
	def id(self,v):
		return _hx_c.haxe_Unserializer.run(_hx_c.haxe_Serializer.run(v))

	def test(self):
		values = [None, True, False, 0, 1, 1506, -11259375, 12.3, -1e10, "hello", "éé", "\r\n", "\n", "   ", ""]
		_g = 0
		while _g < _hx_builtin.len(values):
			v = _hx_array_get(values,_g)
			_g = _g + 1
			self.eq(self.id(v), v, _hx_c._hx_AnonObject(fileName = "TestSerialize.hx" ,lineNumber = 15 ,className = "unit.TestSerialize" ,methodName = "test" ))
		
		
		def _hx_local_0():
			f = self.id(float("nan"))
			return _hx_math.isnan(f)
		
		self.t(_hx_local_0(), _hx_c._hx_AnonObject(fileName = "TestSerialize.hx" ,lineNumber = 19 ,className = "unit.TestSerialize" ,methodName = "test" ))
		self.t(self.id(float("inf")) > 0, _hx_c._hx_AnonObject(fileName = "TestSerialize.hx" ,lineNumber = 20 ,className = "unit.TestSerialize" ,methodName = "test" ))
		self.f(self.id(float("-inf")) > 0, _hx_c._hx_AnonObject(fileName = "TestSerialize.hx" ,lineNumber = 21 ,className = "unit.TestSerialize" ,methodName = "test" ))
		def _hx_local_1():
			f1 = self.id(float("inf"))
			return f1 != float("inf") and f1 != float("-inf") and not _hx_math.isnan(f1)
		
		self.f(_hx_local_1(), _hx_c._hx_AnonObject(fileName = "TestSerialize.hx" ,lineNumber = 23 ,className = "unit.TestSerialize" ,methodName = "test" ))
		def _hx_local_2():
			f2 = self.id(float("-inf"))
			return f2 != float("inf") and f2 != float("-inf") and not _hx_math.isnan(f2)
		
		self.f(_hx_local_2(), _hx_c._hx_AnonObject(fileName = "TestSerialize.hx" ,lineNumber = 25 ,className = "unit.TestSerialize" ,methodName = "test" ))
		self.doTestCollection([])
		self.doTestCollection([1, 2, 4, 5])
		self.doTestCollection([1, 2, None, None, None, None, None, 4, 5])
		d = _hx_c.Date.now()
		d2 = self.id(d)
		self.t(_hx_c.Std._hx_is(d2, _hx_c.Date), _hx_c._hx_AnonObject(fileName = "TestSerialize.hx" ,lineNumber = 38 ,className = "unit.TestSerialize" ,methodName = "test" ))
		self.eq(d2.toString(), d.toString(), _hx_c._hx_AnonObject(fileName = "TestSerialize.hx" ,lineNumber = 39 ,className = "unit.TestSerialize" ,methodName = "test" ))
		o = _hx_c._hx_AnonObject(x = "a" ,y = -1.56 ,z = "hello" )
		o2 = self.id(o)
		self.eq(o.x, o2.x, _hx_c._hx_AnonObject(fileName = "TestSerialize.hx" ,lineNumber = 43 ,className = "unit.TestSerialize" ,methodName = "test" ))
		self.eq(o.y, o2.y, _hx_c._hx_AnonObject(fileName = "TestSerialize.hx" ,lineNumber = 44 ,className = "unit.TestSerialize" ,methodName = "test" ))
		self.eq(o.z, o2.z, _hx_c._hx_AnonObject(fileName = "TestSerialize.hx" ,lineNumber = 45 ,className = "unit.TestSerialize" ,methodName = "test" ))
		c = _hx_c.unit_MyClass(999)
		c.intValue = 33
		c.stringValue = "Hello"
		c2 = self.id(c)
		self.t(_hx_c.Std._hx_is(c2, _hx_c.unit_MyClass), _hx_c._hx_AnonObject(fileName = "TestSerialize.hx" ,lineNumber = 52 ,className = "unit.TestSerialize" ,methodName = "test" ))
		self.f(c == c2, _hx_c._hx_AnonObject(fileName = "TestSerialize.hx" ,lineNumber = 53 ,className = "unit.TestSerialize" ,methodName = "test" ))
		self.eq(c2.intValue, c.intValue, _hx_c._hx_AnonObject(fileName = "TestSerialize.hx" ,lineNumber = 54 ,className = "unit.TestSerialize" ,methodName = "test" ))
		self.eq(c2.stringValue, c.stringValue, _hx_c._hx_AnonObject(fileName = "TestSerialize.hx" ,lineNumber = 55 ,className = "unit.TestSerialize" ,methodName = "test" ))
		self.eq(c2.get(), 999, _hx_c._hx_AnonObject(fileName = "TestSerialize.hx" ,lineNumber = 56 ,className = "unit.TestSerialize" ,methodName = "test" ))
		_hx_c.haxe_Serializer.USE_ENUM_INDEX = False
		self.doTestEnums()
		_hx_c.haxe_Serializer.USE_ENUM_INDEX = True
		self.doTestEnums()
		h = _hx_c.haxe_ds_StringMap()
		h.set("keya", 2)
		h.set("kéyb", -465)
		h2 = self.id(h)
		self.t(_hx_c.Std._hx_is(h2, _hx_c.haxe_ds_StringMap), _hx_c._hx_AnonObject(fileName = "TestSerialize.hx" ,lineNumber = 70 ,className = "unit.TestSerialize" ,methodName = "test" ))
		self.eq(h2.get("keya"), 2, _hx_c._hx_AnonObject(fileName = "TestSerialize.hx" ,lineNumber = 71 ,className = "unit.TestSerialize" ,methodName = "test" ))
		self.eq(h2.get("kéyb"), -465, _hx_c._hx_AnonObject(fileName = "TestSerialize.hx" ,lineNumber = 72 ,className = "unit.TestSerialize" ,methodName = "test" ))
		self.eq(_hx_c.Lambda.count(h2), 2, _hx_c._hx_AnonObject(fileName = "TestSerialize.hx" ,lineNumber = 73 ,className = "unit.TestSerialize" ,methodName = "test" ))
		h1 = _hx_c.haxe_ds_IntMap()
		h1.set(55, 2)
		h1.set(-101, -465)
		h21 = self.id(h1)
		self.t(_hx_c.Std._hx_is(h21, _hx_c.haxe_ds_IntMap), _hx_c._hx_AnonObject(fileName = "TestSerialize.hx" ,lineNumber = 81 ,className = "unit.TestSerialize" ,methodName = "test" ))
		self.eq(h21.h.get(55, None), 2, _hx_c._hx_AnonObject(fileName = "TestSerialize.hx" ,lineNumber = 82 ,className = "unit.TestSerialize" ,methodName = "test" ))
		self.eq(h21.h.get(-101, None), -465, _hx_c._hx_AnonObject(fileName = "TestSerialize.hx" ,lineNumber = 83 ,className = "unit.TestSerialize" ,methodName = "test" ))
		self.eq(_hx_c.Lambda.count(h21), 2, _hx_c._hx_AnonObject(fileName = "TestSerialize.hx" ,lineNumber = 84 ,className = "unit.TestSerialize" ,methodName = "test" ))
		h3 = _hx_c.haxe_ds_ObjectMap()
		a = _hx_c.unit_ClassWithoutHashCode(9)
		b = _hx_c.unit_ClassWithoutHashCode(8)
		h3.set(a, b)
		h3.set(b, a)
		h22 = self.id(h3)
		self.t(_hx_c.Std._hx_is(h22, _hx_c.haxe_ds_ObjectMap), _hx_c._hx_AnonObject(fileName = "TestSerialize.hx" ,lineNumber = 93 ,className = "unit.TestSerialize" ,methodName = "test" ))
		self.f(a in h22.h, _hx_c._hx_AnonObject(fileName = "TestSerialize.hx" ,lineNumber = 95 ,className = "unit.TestSerialize" ,methodName = "test" ))
		self.f(b in h22.h, _hx_c._hx_AnonObject(fileName = "TestSerialize.hx" ,lineNumber = 96 ,className = "unit.TestSerialize" ,methodName = "test" ))
		self.t(a in h3.h, _hx_c._hx_AnonObject(fileName = "TestSerialize.hx" ,lineNumber = 98 ,className = "unit.TestSerialize" ,methodName = "test" ))
		self.t(b in h3.h, _hx_c._hx_AnonObject(fileName = "TestSerialize.hx" ,lineNumber = 99 ,className = "unit.TestSerialize" ,methodName = "test" ))
		self.eq(h3.h.get(a, None), b, _hx_c._hx_AnonObject(fileName = "TestSerialize.hx" ,lineNumber = 100 ,className = "unit.TestSerialize" ,methodName = "test" ))
		self.eq(h3.h.get(b, None), a, _hx_c._hx_AnonObject(fileName = "TestSerialize.hx" ,lineNumber = 101 ,className = "unit.TestSerialize" ,methodName = "test" ))
		nothing = True
		_it = h22.keys()
		while _it.hasNext():
			k = _it.next()
			nothing = False
			self.t(k.i == 8 or k.i == 9, _hx_c._hx_AnonObject(fileName = "TestSerialize.hx" ,lineNumber = 105 ,className = "unit.TestSerialize" ,methodName = "test" ))
			self.t(k in h22.h, _hx_c._hx_AnonObject(fileName = "TestSerialize.hx" ,lineNumber = 106 ,className = "unit.TestSerialize" ,methodName = "test" ))
			v1 = h22.h.get(k, None)
			self.t(v1.i == 8 or v1.i == 9, _hx_c._hx_AnonObject(fileName = "TestSerialize.hx" ,lineNumber = 108 ,className = "unit.TestSerialize" ,methodName = "test" ))
		
		self.f(nothing, _hx_c._hx_AnonObject(fileName = "TestSerialize.hx" ,lineNumber = 110 ,className = "unit.TestSerialize" ,methodName = "test" ))
		self.doTestBytes(_hx_c.haxe_io_Bytes.alloc(0))
		self.doTestBytes(_hx_c.haxe_io_Bytes.ofString("A"))
		self.doTestBytes(_hx_c.haxe_io_Bytes.ofString("AB"))
		self.doTestBytes(_hx_c.haxe_io_Bytes.ofString("ABC"))
		self.doTestBytes(_hx_c.haxe_io_Bytes.ofString("ABCD"))
		self.doTestBytes(_hx_c.haxe_io_Bytes.ofString("héllé"))
		b1 = _hx_c.haxe_io_Bytes.alloc(100)
		_g1 = 0
		_g2 = b1.length
		while _g1 < _g2:
			i = _g1
			_g1 = _g1 + 1
			
			_hx_array_set(b1.b,i, i % 10 & 255)
		
		
		self.doTestBytes(b1)
		c.ref = c
		_hx_c.haxe_Serializer.USE_CACHE = True
		c21 = self.id(c)
		_hx_c.haxe_Serializer.USE_CACHE = False
		self.eq(c21.ref, c21, _hx_c._hx_AnonObject(fileName = "TestSerialize.hx" ,lineNumber = 129 ,className = "unit.TestSerialize" ,methodName = "test" ))
		def _hx_local_3():
			_hx_c.haxe_Unserializer.run(None)
		self.exc(_hx_local_3, _hx_c._hx_AnonObject(fileName = "TestSerialize.hx" ,lineNumber = 133 ,className = "unit.TestSerialize" ,methodName = "test" ))
		def _hx_local_4():
			_hx_c.haxe_Unserializer.run("")
		self.exc(_hx_local_4, _hx_c._hx_AnonObject(fileName = "TestSerialize.hx" ,lineNumber = 136 ,className = "unit.TestSerialize" ,methodName = "test" ))
	

	def doTestEnums(self):
		self.eq(self.id(_hx_c.unit_MyEnum.A), _hx_c.unit_MyEnum.A, _hx_c._hx_AnonObject(fileName = "TestSerialize.hx" ,lineNumber = 141 ,className = "unit.TestSerialize" ,methodName = "doTestEnums" ))
		self.eq(self.id(_hx_c.unit_MyEnum.B), _hx_c.unit_MyEnum.B, _hx_c._hx_AnonObject(fileName = "TestSerialize.hx" ,lineNumber = 142 ,className = "unit.TestSerialize" ,methodName = "doTestEnums" ))
		c = _hx_c.unit_MyEnum.C(0, "hello")
		self.t(_hx_c.Type.enumEq(self.id(c), c), _hx_c._hx_AnonObject(fileName = "TestSerialize.hx" ,lineNumber = 144 ,className = "unit.TestSerialize" ,methodName = "doTestEnums" ))
		self.t(_hx_c.Type.enumEq(self.id(_hx_c.unit_MyEnum.D(_hx_c.unit_MyEnum.D(c))), _hx_c.unit_MyEnum.D(_hx_c.unit_MyEnum.D(c))), _hx_c._hx_AnonObject(fileName = "TestSerialize.hx" ,lineNumber = 145 ,className = "unit.TestSerialize" ,methodName = "doTestEnums" ))
		self.t(_hx_c.Std._hx_is(self.id(c), _hx_c.unit_MyEnum), _hx_c._hx_AnonObject(fileName = "TestSerialize.hx" ,lineNumber = 146 ,className = "unit.TestSerialize" ,methodName = "doTestEnums" ))
		def _hx_local_0():
			_g = self.id(c)
			def _hx_local_4():
				def _hx_local_2():
					def _hx_local_3():
						return True
					_hx_local_1 = _hx_local_3
					return _hx_local_1() if (_g.index) == 2 else False
				
				return _hx_local_2()
			
			return _hx_local_4()
		
		self.t(_hx_local_0(), _hx_c._hx_AnonObject(fileName = "TestSerialize.hx" ,lineNumber = 147 ,className = "unit.TestSerialize" ,methodName = "doTestEnums" ))
	

	def doTestCollection(self,a):
		a2 = self.id(a)
		self.eq(_hx_builtin.len(a2), _hx_builtin.len(a), _hx_c._hx_AnonObject(fileName = "TestSerialize.hx" ,lineNumber = 157 ,className = "unit.TestSerialize" ,methodName = "doTestCollection" ))
		_g1 = 0
		_g = _hx_builtin.len(a)
		while _g1 < _g:
			i = _g1
			_g1 = _g1 + 1
			
			self.eq(_hx_array_get(a2,i), _hx_array_get(a,i), _hx_c._hx_AnonObject(fileName = "TestSerialize.hx" ,lineNumber = 160 ,className = "unit.TestSerialize" ,methodName = "doTestCollection" ))
		
		
		l = _hx_c.Lambda.list(a)
		l2 = self.id(l)
		self.t(_hx_c.Std._hx_is(l2, _hx_c.List), _hx_c._hx_AnonObject(fileName = "TestSerialize.hx" ,lineNumber = 165 ,className = "unit.TestSerialize" ,methodName = "doTestCollection" ))
		self.eq(l2.length, l.length, _hx_c._hx_AnonObject(fileName = "TestSerialize.hx" ,lineNumber = 166 ,className = "unit.TestSerialize" ,methodName = "doTestCollection" ))
		it = l.iterator()
		_it = l2.iterator()
		while _it.hasNext():
			x = _it.next()
			self.eq(x, it.next(), _hx_c._hx_AnonObject(fileName = "TestSerialize.hx" ,lineNumber = 172 ,className = "unit.TestSerialize" ,methodName = "doTestCollection" ))
		self.f(it.hasNext(), _hx_c._hx_AnonObject(fileName = "TestSerialize.hx" ,lineNumber = 173 ,className = "unit.TestSerialize" ,methodName = "doTestCollection" ))
	

	def doTestBytes(self,b):
		b2 = self.id(b)
		self.t(_hx_c.Std._hx_is(b2, _hx_c.haxe_io_Bytes), _hx_c._hx_AnonObject(fileName = "TestSerialize.hx" ,lineNumber = 178 ,className = "unit.TestSerialize" ,methodName = "doTestBytes" ))
		self.eq(b2.length, b.length, _hx_c._hx_AnonObject(fileName = "TestSerialize.hx" ,lineNumber = 179 ,className = "unit.TestSerialize" ,methodName = "doTestBytes" ))
		_g1 = 0
		_g = b.length
		while _g1 < _g:
			i = _g1
			_g1 = _g1 + 1
			
			self.eq(_hx_array_get(b2.b,i), _hx_array_get(b.b,i), _hx_c._hx_AnonObject(fileName = "TestSerialize.hx" ,lineNumber = 181 ,className = "unit.TestSerialize" ,methodName = "doTestBytes" ))
		
		
		self.infos(None)
	





unit_TestSerialize._hx_class = unit_TestSerialize
unit_TestSerialize._hx_class_name = "unit.TestSerialize"
_hx_classes["unit.TestSerialize"] = unit_TestSerialize
_hx_c.unit_TestSerialize = unit_TestSerialize
unit_TestSerialize._hx_fields = []
unit_TestSerialize._hx_props = []
unit_TestSerialize._hx_methods = ["id","test","doTestEnums","doTestCollection","doTestBytes"]
unit_TestSerialize._hx_statics = []
unit_TestSerialize._hx_interfaces = []
unit_TestSerialize._hx_super = unit_Test
unit_TestSerialize._hx_meta = _hx_c._hx_AnonObject(obj=_hx_c._hx_AnonObject(),statics=_hx_c._hx_AnonObject(),fields=_hx_c._hx_AnonObject())
def unit_TestSerialize_hx_empty_init (_hx_o):
	pass
unit_TestSerialize._hx_empty_init = unit_TestSerialize_hx_empty_init
# print unit.TestSpecification.C
class unit_C:


	def __init__(self):
		self.v = None
		self.prop = None
		self.v = "var"
		self.prop = "prop"
		_hx_c.unit_C.staticVar = "staticVar"
		_hx_c.unit_C.staticProp = "staticProp"
		
	
	def func(self):
		None

	# var v
	# var prop




unit_C._hx_class = unit_C
unit_C._hx_class_name = "unit.C"
_hx_classes["unit.C"] = unit_C
_hx_c.unit_C = unit_C
unit_C._hx_fields = ["v","prop"]
unit_C._hx_props = []
unit_C._hx_methods = ["func"]
unit_C._hx_statics = ["staticFunc","staticVar","staticProp"]
unit_C._hx_interfaces = []
unit_C._hx_meta = _hx_c._hx_AnonObject(obj=_hx_c._hx_AnonObject(),statics=_hx_c._hx_AnonObject(),fields=_hx_c._hx_AnonObject())
def unit_C_hx_empty_init (_hx_o):
	_hx_o.v = None
	_hx_o.prop = None
unit_C._hx_empty_init = unit_C_hx_empty_init
# print unit.TestSpecification.C2
class unit_C2:


	def __init__(self):
		self.v = None
		self.prop = None
		self.v = "var"
		self.prop = "prop"
		self.set_propAcc("0")
		
	
	def func(self):
		return "foo"

	# var v
	# var prop
	# var propAcc
	def get_propAcc(self):
		return "1"

	def set_propAcc(self,v):
		def _hx_local_1():
			def _hx_local_0():
				self.propAcc = _hx_toUpperCase(v)
				return self.propAcc
			
			return _hx_local_0()
		
		return _hx_local_1()
	





unit_C2._hx_class = unit_C2
unit_C2._hx_class_name = "unit.C2"
_hx_classes["unit.C2"] = unit_C2
_hx_c.unit_C2 = unit_C2
unit_C2._hx_fields = ["v","prop","propAcc"]
unit_C2._hx_props = []
unit_C2._hx_methods = ["func","get_propAcc","set_propAcc"]
unit_C2._hx_statics = []
unit_C2._hx_interfaces = []
unit_C2._hx_meta = _hx_c._hx_AnonObject(obj=_hx_c._hx_AnonObject(),statics=_hx_c._hx_AnonObject(),fields=_hx_c._hx_AnonObject())
def unit_C2_hx_empty_init (_hx_o):
	_hx_o.v = None
	_hx_o.prop = None
unit_C2._hx_empty_init = unit_C2_hx_empty_init
# print unit.TestSpecification.CChild
class unit_CChild(unit_C):


	def __init__(self):
		super().__init__()




unit_CChild._hx_class = unit_CChild
unit_CChild._hx_class_name = "unit.CChild"
_hx_classes["unit.CChild"] = unit_CChild
_hx_c.unit_CChild = unit_CChild
unit_CChild._hx_fields = []
unit_CChild._hx_props = []
unit_CChild._hx_methods = []
unit_CChild._hx_statics = []
unit_CChild._hx_interfaces = []
unit_CChild._hx_super = unit_C
unit_CChild._hx_meta = _hx_c._hx_AnonObject(obj=_hx_c._hx_AnonObject(),statics=_hx_c._hx_AnonObject(),fields=_hx_c._hx_AnonObject())
def unit_CChild_hx_empty_init (_hx_o):
	pass
unit_CChild._hx_empty_init = unit_CChild_hx_empty_init
# print unit.TestSpecification.CDyn
class unit_CDyn(unit_C):


	def __init__(self):
		super().__init__()




unit_CDyn._hx_class = unit_CDyn
unit_CDyn._hx_class_name = "unit.CDyn"
_hx_classes["unit.CDyn"] = unit_CDyn
_hx_c.unit_CDyn = unit_CDyn
unit_CDyn._hx_fields = []
unit_CDyn._hx_props = []
unit_CDyn._hx_methods = []
unit_CDyn._hx_statics = []
unit_CDyn._hx_interfaces = []
unit_CDyn._hx_super = unit_C
unit_CDyn._hx_meta = _hx_c._hx_AnonObject(obj=_hx_c._hx_AnonObject(),statics=_hx_c._hx_AnonObject(),fields=_hx_c._hx_AnonObject())
def unit_CDyn_hx_empty_init (_hx_o):
	pass
unit_CDyn._hx_empty_init = unit_CDyn_hx_empty_init
# print unit.TestSpecification.EmptyClass
class unit_TestSpecification_EmptyClass:


	def __init__(self):
		None




unit_TestSpecification_EmptyClass._hx_class = unit_TestSpecification_EmptyClass
unit_TestSpecification_EmptyClass._hx_class_name = "unit._TestSpecification._TestSpecification.EmptyClass"
_hx_classes["unit._TestSpecification._TestSpecification.EmptyClass"] = unit_TestSpecification_EmptyClass
_hx_c.unit_TestSpecification_EmptyClass = unit_TestSpecification_EmptyClass
unit_TestSpecification_EmptyClass._hx_fields = []
unit_TestSpecification_EmptyClass._hx_props = []
unit_TestSpecification_EmptyClass._hx_methods = []
unit_TestSpecification_EmptyClass._hx_statics = []
unit_TestSpecification_EmptyClass._hx_interfaces = []
unit_TestSpecification_EmptyClass._hx_meta = _hx_c._hx_AnonObject(obj=_hx_c._hx_AnonObject(),statics=_hx_c._hx_AnonObject(),fields=_hx_c._hx_AnonObject())
def unit_TestSpecification_EmptyClass_hx_empty_init (_hx_o):
	pass
unit_TestSpecification_EmptyClass._hx_empty_init = unit_TestSpecification_EmptyClass_hx_empty_init
# print unit.TestSpecification.ReallyEmptyClass
class unit_TestSpecification_ReallyEmptyClass:

	pass




unit_TestSpecification_ReallyEmptyClass._hx_class = unit_TestSpecification_ReallyEmptyClass
unit_TestSpecification_ReallyEmptyClass._hx_class_name = "unit._TestSpecification._TestSpecification.ReallyEmptyClass"
_hx_classes["unit._TestSpecification._TestSpecification.ReallyEmptyClass"] = unit_TestSpecification_ReallyEmptyClass
_hx_c.unit_TestSpecification_ReallyEmptyClass = unit_TestSpecification_ReallyEmptyClass
unit_TestSpecification_ReallyEmptyClass._hx_fields = []
unit_TestSpecification_ReallyEmptyClass._hx_props = []
unit_TestSpecification_ReallyEmptyClass._hx_methods = []
unit_TestSpecification_ReallyEmptyClass._hx_statics = []
unit_TestSpecification_ReallyEmptyClass._hx_interfaces = []
unit_TestSpecification_ReallyEmptyClass._hx_meta = _hx_c._hx_AnonObject(obj=_hx_c._hx_AnonObject(),statics=_hx_c._hx_AnonObject(),fields=_hx_c._hx_AnonObject())
def unit_TestSpecification_ReallyEmptyClass_hx_empty_init (_hx_o):
	pass
unit_TestSpecification_ReallyEmptyClass._hx_empty_init = unit_TestSpecification_ReallyEmptyClass_hx_empty_init
# print unit.TestSpecification.ClassWithToString
class unit_TestSpecification_ClassWithToString:


	def __init__(self):
		None
	def toString(self):
		return "ClassWithToString.toString()"





unit_TestSpecification_ClassWithToString._hx_class = unit_TestSpecification_ClassWithToString
unit_TestSpecification_ClassWithToString._hx_class_name = "unit._TestSpecification._TestSpecification.ClassWithToString"
_hx_classes["unit._TestSpecification._TestSpecification.ClassWithToString"] = unit_TestSpecification_ClassWithToString
_hx_c.unit_TestSpecification_ClassWithToString = unit_TestSpecification_ClassWithToString
unit_TestSpecification_ClassWithToString._hx_fields = []
unit_TestSpecification_ClassWithToString._hx_props = []
unit_TestSpecification_ClassWithToString._hx_methods = ["toString"]
unit_TestSpecification_ClassWithToString._hx_statics = []
unit_TestSpecification_ClassWithToString._hx_interfaces = []
unit_TestSpecification_ClassWithToString._hx_meta = _hx_c._hx_AnonObject(obj=_hx_c._hx_AnonObject(),statics=_hx_c._hx_AnonObject(),fields=_hx_c._hx_AnonObject())
def unit_TestSpecification_ClassWithToString_hx_empty_init (_hx_o):
	pass
unit_TestSpecification_ClassWithToString._hx_empty_init = unit_TestSpecification_ClassWithToString_hx_empty_init
# print unit.TestSpecification.ClassWithToStringChild
class unit_TestSpecification_ClassWithToStringChild(unit_TestSpecification_ClassWithToString):


	def __init__(self):
		super().__init__()




unit_TestSpecification_ClassWithToStringChild._hx_class = unit_TestSpecification_ClassWithToStringChild
unit_TestSpecification_ClassWithToStringChild._hx_class_name = "unit._TestSpecification._TestSpecification.ClassWithToStringChild"
_hx_classes["unit._TestSpecification._TestSpecification.ClassWithToStringChild"] = unit_TestSpecification_ClassWithToStringChild
_hx_c.unit_TestSpecification_ClassWithToStringChild = unit_TestSpecification_ClassWithToStringChild
unit_TestSpecification_ClassWithToStringChild._hx_fields = []
unit_TestSpecification_ClassWithToStringChild._hx_props = []
unit_TestSpecification_ClassWithToStringChild._hx_methods = []
unit_TestSpecification_ClassWithToStringChild._hx_statics = []
unit_TestSpecification_ClassWithToStringChild._hx_interfaces = []
unit_TestSpecification_ClassWithToStringChild._hx_super = unit_TestSpecification_ClassWithToString
unit_TestSpecification_ClassWithToStringChild._hx_meta = _hx_c._hx_AnonObject(obj=_hx_c._hx_AnonObject(),statics=_hx_c._hx_AnonObject(),fields=_hx_c._hx_AnonObject())
def unit_TestSpecification_ClassWithToStringChild_hx_empty_init (_hx_o):
	pass
unit_TestSpecification_ClassWithToStringChild._hx_empty_init = unit_TestSpecification_ClassWithToStringChild_hx_empty_init
# print unit.TestSpecification.ClassWithToStringChild2
class unit_TestSpecification_ClassWithToStringChild2(unit_TestSpecification_ClassWithToString):


	def __init__(self):
		super().__init__()
	def toString(self):
		return "ClassWithToStringChild2.toString()"





unit_TestSpecification_ClassWithToStringChild2._hx_class = unit_TestSpecification_ClassWithToStringChild2
unit_TestSpecification_ClassWithToStringChild2._hx_class_name = "unit._TestSpecification._TestSpecification.ClassWithToStringChild2"
_hx_classes["unit._TestSpecification._TestSpecification.ClassWithToStringChild2"] = unit_TestSpecification_ClassWithToStringChild2
_hx_c.unit_TestSpecification_ClassWithToStringChild2 = unit_TestSpecification_ClassWithToStringChild2
unit_TestSpecification_ClassWithToStringChild2._hx_fields = []
unit_TestSpecification_ClassWithToStringChild2._hx_props = []
unit_TestSpecification_ClassWithToStringChild2._hx_methods = ["toString"]
unit_TestSpecification_ClassWithToStringChild2._hx_statics = []
unit_TestSpecification_ClassWithToStringChild2._hx_interfaces = []
unit_TestSpecification_ClassWithToStringChild2._hx_super = unit_TestSpecification_ClassWithToString
unit_TestSpecification_ClassWithToStringChild2._hx_meta = _hx_c._hx_AnonObject(obj=_hx_c._hx_AnonObject(),statics=_hx_c._hx_AnonObject(),fields=_hx_c._hx_AnonObject())
def unit_TestSpecification_ClassWithToStringChild2_hx_empty_init (_hx_o):
	pass
unit_TestSpecification_ClassWithToStringChild2._hx_empty_init = unit_TestSpecification_ClassWithToStringChild2_hx_empty_init
# print unit.TestSpecification.ClassWithCtorDefaultValues
class unit_TestSpecification_ClassWithCtorDefaultValues:


	def __init__(self,a = 1,b = "foo"):
		if a is None:
			a = 1
		
		if b is None:
			b = "foo"
		
		self.a = None
		self.b = None
		self.a = a
		self.b = b
		
	
	# var a
	# var b




unit_TestSpecification_ClassWithCtorDefaultValues._hx_class = unit_TestSpecification_ClassWithCtorDefaultValues
unit_TestSpecification_ClassWithCtorDefaultValues._hx_class_name = "unit._TestSpecification._TestSpecification.ClassWithCtorDefaultValues"
_hx_classes["unit._TestSpecification._TestSpecification.ClassWithCtorDefaultValues"] = unit_TestSpecification_ClassWithCtorDefaultValues
_hx_c.unit_TestSpecification_ClassWithCtorDefaultValues = unit_TestSpecification_ClassWithCtorDefaultValues
unit_TestSpecification_ClassWithCtorDefaultValues._hx_fields = ["a","b"]
unit_TestSpecification_ClassWithCtorDefaultValues._hx_props = []
unit_TestSpecification_ClassWithCtorDefaultValues._hx_methods = []
unit_TestSpecification_ClassWithCtorDefaultValues._hx_statics = []
unit_TestSpecification_ClassWithCtorDefaultValues._hx_interfaces = []
unit_TestSpecification_ClassWithCtorDefaultValues._hx_meta = _hx_c._hx_AnonObject(obj=_hx_c._hx_AnonObject(),statics=_hx_c._hx_AnonObject(),fields=_hx_c._hx_AnonObject())
def unit_TestSpecification_ClassWithCtorDefaultValues_hx_empty_init (_hx_o):
	_hx_o.a = None
	_hx_o.b = None
unit_TestSpecification_ClassWithCtorDefaultValues._hx_empty_init = unit_TestSpecification_ClassWithCtorDefaultValues_hx_empty_init
# print unit.TestSpecification.ClassWithCtorDefaultValuesChild
class unit_TestSpecification_ClassWithCtorDefaultValuesChild(unit_TestSpecification_ClassWithCtorDefaultValues):


	def __init__(self,a = None,b = None):
		if a is None:
			a = None
		
		if b is None:
			b = None
		
		super().__init__(a, b)
	




unit_TestSpecification_ClassWithCtorDefaultValuesChild._hx_class = unit_TestSpecification_ClassWithCtorDefaultValuesChild
unit_TestSpecification_ClassWithCtorDefaultValuesChild._hx_class_name = "unit._TestSpecification._TestSpecification.ClassWithCtorDefaultValuesChild"
_hx_classes["unit._TestSpecification._TestSpecification.ClassWithCtorDefaultValuesChild"] = unit_TestSpecification_ClassWithCtorDefaultValuesChild
_hx_c.unit_TestSpecification_ClassWithCtorDefaultValuesChild = unit_TestSpecification_ClassWithCtorDefaultValuesChild
unit_TestSpecification_ClassWithCtorDefaultValuesChild._hx_fields = []
unit_TestSpecification_ClassWithCtorDefaultValuesChild._hx_props = []
unit_TestSpecification_ClassWithCtorDefaultValuesChild._hx_methods = []
unit_TestSpecification_ClassWithCtorDefaultValuesChild._hx_statics = []
unit_TestSpecification_ClassWithCtorDefaultValuesChild._hx_interfaces = []
unit_TestSpecification_ClassWithCtorDefaultValuesChild._hx_super = unit_TestSpecification_ClassWithCtorDefaultValues
unit_TestSpecification_ClassWithCtorDefaultValuesChild._hx_meta = _hx_c._hx_AnonObject(obj=_hx_c._hx_AnonObject(),statics=_hx_c._hx_AnonObject(),fields=_hx_c._hx_AnonObject())
def unit_TestSpecification_ClassWithCtorDefaultValuesChild_hx_empty_init (_hx_o):
	pass
unit_TestSpecification_ClassWithCtorDefaultValuesChild._hx_empty_init = unit_TestSpecification_ClassWithCtorDefaultValuesChild_hx_empty_init
class unit_TestSpecification_SomeEnum(_hx_c.Enum):
	def __init__(self, t, i, p):
		super(unit_TestSpecification_SomeEnum,self).__init__(t, i, p)

unit_TestSpecification_SomeEnum.NoArguments = unit_TestSpecification_SomeEnum("NoArguments", 0, list())

def _unit_TestSpecification_SomeEnum_statics_OneArgument (t):
	return unit_TestSpecification_SomeEnum("OneArgument", 1, [t])
unit_TestSpecification_SomeEnum.OneArgument = _unit_TestSpecification_SomeEnum_statics_OneArgument

unit_TestSpecification_SomeEnum._hx_constructs = ["NoArguments","OneArgument"]
unit_TestSpecification_SomeEnum._hx_class = unit_TestSpecification_SomeEnum
unit_TestSpecification_SomeEnum._hx_class_name = "unit._TestSpecification._TestSpecification.SomeEnum"
_hx_classes["unit._TestSpecification._TestSpecification.SomeEnum"] = unit_TestSpecification_SomeEnum
_hx_c.unit_TestSpecification_SomeEnum = unit_TestSpecification_SomeEnum
unit_TestSpecification_SomeEnum._hx_meta = _hx_c._hx_AnonObject(obj=_hx_c._hx_AnonObject(),fields=_hx_c._hx_AnonObject())
# print unit.TestSpecification.IntWrap
class unit_TestSpecification_IntWrap:


	def __init__(self,i):
		self.i = None
		self.i = i
	
	# var i




unit_TestSpecification_IntWrap._hx_class = unit_TestSpecification_IntWrap
unit_TestSpecification_IntWrap._hx_class_name = "unit._TestSpecification._TestSpecification.IntWrap"
_hx_classes["unit._TestSpecification._TestSpecification.IntWrap"] = unit_TestSpecification_IntWrap
_hx_c.unit_TestSpecification_IntWrap = unit_TestSpecification_IntWrap
unit_TestSpecification_IntWrap._hx_fields = ["i"]
unit_TestSpecification_IntWrap._hx_props = []
unit_TestSpecification_IntWrap._hx_methods = []
unit_TestSpecification_IntWrap._hx_statics = ["compare"]
unit_TestSpecification_IntWrap._hx_interfaces = []
unit_TestSpecification_IntWrap._hx_meta = _hx_c._hx_AnonObject(obj=_hx_c._hx_AnonObject(),statics=_hx_c._hx_AnonObject(),fields=_hx_c._hx_AnonObject())
def unit_TestSpecification_IntWrap_hx_empty_init (_hx_o):
	_hx_o.i = None
unit_TestSpecification_IntWrap._hx_empty_init = unit_TestSpecification_IntWrap_hx_empty_init
class unit_TestSpecification_E(_hx_c.Enum):
	def __init__(self, t, i, p):
		super(unit_TestSpecification_E,self).__init__(t, i, p)

def _unit_TestSpecification_E_statics_OneArg (i):
	return unit_TestSpecification_E("OneArg", 1, [i])
unit_TestSpecification_E.OneArg = _unit_TestSpecification_E_statics_OneArg

def _unit_TestSpecification_E_statics_MultipleArgs (i,s):
	return unit_TestSpecification_E("MultipleArgs", 3, [i,s])
unit_TestSpecification_E.MultipleArgs = _unit_TestSpecification_E_statics_MultipleArgs

unit_TestSpecification_E.NoArgs = unit_TestSpecification_E("NoArgs", 0, list())

def _unit_TestSpecification_E_statics_RecArg (e):
	return unit_TestSpecification_E("RecArg", 2, [e])
unit_TestSpecification_E.RecArg = _unit_TestSpecification_E_statics_RecArg

unit_TestSpecification_E._hx_constructs = ["NoArgs","OneArg","RecArg","MultipleArgs"]
unit_TestSpecification_E._hx_class = unit_TestSpecification_E
unit_TestSpecification_E._hx_class_name = "unit._TestSpecification._TestSpecification.E"
_hx_classes["unit._TestSpecification._TestSpecification.E"] = unit_TestSpecification_E
_hx_c.unit_TestSpecification_E = unit_TestSpecification_E
unit_TestSpecification_E._hx_meta = _hx_c._hx_AnonObject(obj=_hx_c._hx_AnonObject(),fields=_hx_c._hx_AnonObject())
class unit_EnumFlagTest(_hx_c.Enum):
	def __init__(self, t, i, p):
		super(unit_EnumFlagTest,self).__init__(t, i, p)

unit_EnumFlagTest.EA = unit_EnumFlagTest("EA", 0, list())

unit_EnumFlagTest.EC = unit_EnumFlagTest("EC", 2, list())

unit_EnumFlagTest.EB = unit_EnumFlagTest("EB", 1, list())

unit_EnumFlagTest._hx_constructs = ["EA","EB","EC"]
unit_EnumFlagTest._hx_class = unit_EnumFlagTest
unit_EnumFlagTest._hx_class_name = "unit.EnumFlagTest"
_hx_classes["unit.EnumFlagTest"] = unit_EnumFlagTest
_hx_c.unit_EnumFlagTest = unit_EnumFlagTest
unit_EnumFlagTest._hx_meta = _hx_c._hx_AnonObject(obj=_hx_c._hx_AnonObject(),fields=_hx_c._hx_AnonObject())
class unit_EVMTest(_hx_c.Enum):
	def __init__(self, t, i, p):
		super(unit_EVMTest,self).__init__(t, i, p)

def _unit_EVMTest_statics_EVMC (s,i = None):
	return unit_EVMTest("EVMC", 2, [s,i])
unit_EVMTest.EVMC = _unit_EVMTest_statics_EVMC

def _unit_EVMTest_statics_EVMF (a):
	return unit_EVMTest("EVMF", 5, [a])
unit_EVMTest.EVMF = _unit_EVMTest_statics_EVMF

def _unit_EVMTest_statics_EVMB (s = None):
	return unit_EVMTest("EVMB", 1, [s])
unit_EVMTest.EVMB = _unit_EVMTest_statics_EVMB

def _unit_EVMTest_statics_EVME (n = None):
	return unit_EVMTest("EVME", 4, [n])
unit_EVMTest.EVME = _unit_EVMTest_statics_EVME

unit_EVMTest.EVMA = unit_EVMTest("EVMA", 0, list())

def _unit_EVMTest_statics_EVMD (n):
	return unit_EVMTest("EVMD", 3, [n])
unit_EVMTest.EVMD = _unit_EVMTest_statics_EVMD

unit_EVMTest._hx_constructs = ["EVMA","EVMB","EVMC","EVMD","EVME","EVMF"]
unit_EVMTest._hx_class = unit_EVMTest
unit_EVMTest._hx_class_name = "unit.EVMTest"
_hx_classes["unit.EVMTest"] = unit_EVMTest
_hx_c.unit_EVMTest = unit_EVMTest
unit_EVMTest._hx_meta = _hx_c._hx_AnonObject(obj=_hx_c._hx_AnonObject(),fields=_hx_c._hx_AnonObject())
# print unit.TestSpecification.TestSpecification
class unit_TestSpecification(unit_Test):


	def __init__(self):
		super().__init__()
	def testMath_unit_hx(self):
		zero = 0.0
		one = 1.0
		self.f(float("nan") == float("nan"), _hx_c._hx_AnonObject(fileName = "Math.unit.hx" ,lineNumber = 6 ,className = "unit.TestSpecification" ,methodName = "testMath_unit_hx" ))
		def _hx_local_0():
			f = float("nan")
			return _hx_math.isnan(f)
		
		self.t(_hx_local_0(), _hx_c._hx_AnonObject(fileName = "Math.unit.hx" ,lineNumber = 7 ,className = "unit.TestSpecification" ,methodName = "testMath_unit_hx" ))
		def _hx_local_1():
			f1 = None
			if -1 < 0:
				f1 = float("nan")
			else:
				f1 = _hx_math.sqrt(-1)
			return _hx_math.isnan(f1)
		
		self.t(_hx_local_1(), _hx_c._hx_AnonObject(fileName = "Math.unit.hx" ,lineNumber = 8 ,className = "unit.TestSpecification" ,methodName = "testMath_unit_hx" ))
		self.feq(float("-inf"), float("-inf"), _hx_c._hx_AnonObject(fileName = "Math.unit.hx" ,lineNumber = 9 ,className = "unit.TestSpecification" ,methodName = "testMath_unit_hx" ))
		self.feq(float("inf"), float("inf"), _hx_c._hx_AnonObject(fileName = "Math.unit.hx" ,lineNumber = 10 ,className = "unit.TestSpecification" ,methodName = "testMath_unit_hx" ))
		self.feq(float("inf") + float("inf"), float("inf"), _hx_c._hx_AnonObject(fileName = "Math.unit.hx" ,lineNumber = 12 ,className = "unit.TestSpecification" ,methodName = "testMath_unit_hx" ))
		self.feq(float("-inf") + float("-inf"), float("-inf"), _hx_c._hx_AnonObject(fileName = "Math.unit.hx" ,lineNumber = 13 ,className = "unit.TestSpecification" ,methodName = "testMath_unit_hx" ))
		self.feq(float("inf") + one, float("inf"), _hx_c._hx_AnonObject(fileName = "Math.unit.hx" ,lineNumber = 14 ,className = "unit.TestSpecification" ,methodName = "testMath_unit_hx" ))
		self.feq(float("-inf") + one, float("-inf"), _hx_c._hx_AnonObject(fileName = "Math.unit.hx" ,lineNumber = 15 ,className = "unit.TestSpecification" ,methodName = "testMath_unit_hx" ))
		def _hx_local_2():
			f2 = float("inf") + float("-inf")
			return _hx_math.isnan(f2)
		
		self.t(_hx_local_2(), _hx_c._hx_AnonObject(fileName = "Math.unit.hx" ,lineNumber = 16 ,className = "unit.TestSpecification" ,methodName = "testMath_unit_hx" ))
		def _hx_local_3():
			f3 = float("inf") + float("nan")
			return _hx_math.isnan(f3)
		
		self.t(_hx_local_3(), _hx_c._hx_AnonObject(fileName = "Math.unit.hx" ,lineNumber = 17 ,className = "unit.TestSpecification" ,methodName = "testMath_unit_hx" ))
		def _hx_local_4():
			f4 = float("-inf") + float("nan")
			return _hx_math.isnan(f4)
		
		self.t(_hx_local_4(), _hx_c._hx_AnonObject(fileName = "Math.unit.hx" ,lineNumber = 18 ,className = "unit.TestSpecification" ,methodName = "testMath_unit_hx" ))
		self.feq(one - float("inf"), float("-inf"), _hx_c._hx_AnonObject(fileName = "Math.unit.hx" ,lineNumber = 20 ,className = "unit.TestSpecification" ,methodName = "testMath_unit_hx" ))
		self.feq(one - float("-inf"), float("inf"), _hx_c._hx_AnonObject(fileName = "Math.unit.hx" ,lineNumber = 21 ,className = "unit.TestSpecification" ,methodName = "testMath_unit_hx" ))
		self.feq(-float("inf"), float("-inf"), _hx_c._hx_AnonObject(fileName = "Math.unit.hx" ,lineNumber = 22 ,className = "unit.TestSpecification" ,methodName = "testMath_unit_hx" ))
		self.feq(-float("-inf"), float("inf"), _hx_c._hx_AnonObject(fileName = "Math.unit.hx" ,lineNumber = 23 ,className = "unit.TestSpecification" ,methodName = "testMath_unit_hx" ))
		self.feq(float("inf") - one, float("inf"), _hx_c._hx_AnonObject(fileName = "Math.unit.hx" ,lineNumber = 24 ,className = "unit.TestSpecification" ,methodName = "testMath_unit_hx" ))
		self.feq(float("-inf") - one, float("-inf"), _hx_c._hx_AnonObject(fileName = "Math.unit.hx" ,lineNumber = 25 ,className = "unit.TestSpecification" ,methodName = "testMath_unit_hx" ))
		def _hx_local_5():
			f5 = float("inf") - float("inf")
			return _hx_math.isnan(f5)
		
		self.t(_hx_local_5(), _hx_c._hx_AnonObject(fileName = "Math.unit.hx" ,lineNumber = 26 ,className = "unit.TestSpecification" ,methodName = "testMath_unit_hx" ))
		def _hx_local_6():
			f6 = float("-inf") - float("-inf")
			return _hx_math.isnan(f6)
		
		self.t(_hx_local_6(), _hx_c._hx_AnonObject(fileName = "Math.unit.hx" ,lineNumber = 27 ,className = "unit.TestSpecification" ,methodName = "testMath_unit_hx" ))
		self.feq(float("inf") - float("-inf"), float("inf"), _hx_c._hx_AnonObject(fileName = "Math.unit.hx" ,lineNumber = 28 ,className = "unit.TestSpecification" ,methodName = "testMath_unit_hx" ))
		self.feq(float("-inf") - float("inf"), float("-inf"), _hx_c._hx_AnonObject(fileName = "Math.unit.hx" ,lineNumber = 29 ,className = "unit.TestSpecification" ,methodName = "testMath_unit_hx" ))
		def _hx_local_7():
			f7 = float("inf") - float("nan")
			return _hx_math.isnan(f7)
		
		self.t(_hx_local_7(), _hx_c._hx_AnonObject(fileName = "Math.unit.hx" ,lineNumber = 30 ,className = "unit.TestSpecification" ,methodName = "testMath_unit_hx" ))
		def _hx_local_8():
			f8 = float("-inf") - float("nan")
			return _hx_math.isnan(f8)
		
		self.t(_hx_local_8(), _hx_c._hx_AnonObject(fileName = "Math.unit.hx" ,lineNumber = 31 ,className = "unit.TestSpecification" ,methodName = "testMath_unit_hx" ))
		def _hx_local_9():
			f9 = float("nan") - float("inf")
			return _hx_math.isnan(f9)
		
		self.t(_hx_local_9(), _hx_c._hx_AnonObject(fileName = "Math.unit.hx" ,lineNumber = 32 ,className = "unit.TestSpecification" ,methodName = "testMath_unit_hx" ))
		def _hx_local_10():
			f10 = float("nan") - float("-inf")
			return _hx_math.isnan(f10)
		
		self.t(_hx_local_10(), _hx_c._hx_AnonObject(fileName = "Math.unit.hx" ,lineNumber = 33 ,className = "unit.TestSpecification" ,methodName = "testMath_unit_hx" ))
		self.feq(float("inf") * one, float("inf"), _hx_c._hx_AnonObject(fileName = "Math.unit.hx" ,lineNumber = 35 ,className = "unit.TestSpecification" ,methodName = "testMath_unit_hx" ))
		self.feq(float("-inf") * one, float("-inf"), _hx_c._hx_AnonObject(fileName = "Math.unit.hx" ,lineNumber = 36 ,className = "unit.TestSpecification" ,methodName = "testMath_unit_hx" ))
		def _hx_local_11():
			f11 = float("inf") * zero
			return _hx_math.isnan(f11)
		
		self.t(_hx_local_11(), _hx_c._hx_AnonObject(fileName = "Math.unit.hx" ,lineNumber = 37 ,className = "unit.TestSpecification" ,methodName = "testMath_unit_hx" ))
		def _hx_local_12():
			f12 = float("-inf") * zero
			return _hx_math.isnan(f12)
		
		self.t(_hx_local_12(), _hx_c._hx_AnonObject(fileName = "Math.unit.hx" ,lineNumber = 38 ,className = "unit.TestSpecification" ,methodName = "testMath_unit_hx" ))
		self.feq(float("inf") * float("inf"), float("inf"), _hx_c._hx_AnonObject(fileName = "Math.unit.hx" ,lineNumber = 39 ,className = "unit.TestSpecification" ,methodName = "testMath_unit_hx" ))
		self.feq(float("-inf") * float("-inf"), float("inf"), _hx_c._hx_AnonObject(fileName = "Math.unit.hx" ,lineNumber = 40 ,className = "unit.TestSpecification" ,methodName = "testMath_unit_hx" ))
		self.feq(float("inf") * float("-inf"), float("-inf"), _hx_c._hx_AnonObject(fileName = "Math.unit.hx" ,lineNumber = 41 ,className = "unit.TestSpecification" ,methodName = "testMath_unit_hx" ))
		def _hx_local_13():
			f13 = float("inf") * float("nan")
			return _hx_math.isnan(f13)
		
		self.t(_hx_local_13(), _hx_c._hx_AnonObject(fileName = "Math.unit.hx" ,lineNumber = 42 ,className = "unit.TestSpecification" ,methodName = "testMath_unit_hx" ))
		def _hx_local_14():
			f14 = float("-inf") * float("nan")
			return _hx_math.isnan(f14)
		
		self.t(_hx_local_14(), _hx_c._hx_AnonObject(fileName = "Math.unit.hx" ,lineNumber = 43 ,className = "unit.TestSpecification" ,methodName = "testMath_unit_hx" ))
		self.feq(float("inf") / one, float("inf"), _hx_c._hx_AnonObject(fileName = "Math.unit.hx" ,lineNumber = 45 ,className = "unit.TestSpecification" ,methodName = "testMath_unit_hx" ))
		self.feq(float("-inf") / one, float("-inf"), _hx_c._hx_AnonObject(fileName = "Math.unit.hx" ,lineNumber = 46 ,className = "unit.TestSpecification" ,methodName = "testMath_unit_hx" ))
		f15 = float("inf") / float("inf")
		_hx_math.isnan(f15)
		
		f16 = float("inf") / float("-inf")
		_hx_math.isnan(f16)
		
		f17 = float("-inf") / float("inf")
		_hx_math.isnan(f17)
		
		f18 = float("-inf") / float("-inf")
		_hx_math.isnan(f18)
		
		f19 = float("nan") / float("inf")
		_hx_math.isnan(f19)
		
		f20 = float("inf") / float("nan")
		_hx_math.isnan(f20)
		
		f21 = float("nan") / float("inf")
		_hx_math.isnan(f21)
		
		f22 = float("-inf") / float("nan")
		_hx_math.isnan(f22)
		
		self.feq(_hx_math.fabs(-1.223), 1.223, _hx_c._hx_AnonObject(fileName = "Math.unit.hx" ,lineNumber = 59 ,className = "unit.TestSpecification" ,methodName = "testMath_unit_hx" ))
		self.feq(_hx_math.fabs(1.223), 1.223, _hx_c._hx_AnonObject(fileName = "Math.unit.hx" ,lineNumber = 60 ,className = "unit.TestSpecification" ,methodName = "testMath_unit_hx" ))
		self.feq(_hx_math.fabs(0), 0, _hx_c._hx_AnonObject(fileName = "Math.unit.hx" ,lineNumber = 61 ,className = "unit.TestSpecification" ,methodName = "testMath_unit_hx" ))
		def _hx_local_15():
			f23 = None
			v = float("nan")
			f23 = _hx_math.fabs(v)
			
			return _hx_math.isnan(f23)
		
		self.t(_hx_local_15(), _hx_c._hx_AnonObject(fileName = "Math.unit.hx" ,lineNumber = 62 ,className = "unit.TestSpecification" ,methodName = "testMath_unit_hx" ))
		def _hx_local_16():
			v1 = float("-inf")
			return _hx_math.fabs(v1)
		
		self.feq(_hx_local_16(), float("inf"), _hx_c._hx_AnonObject(fileName = "Math.unit.hx" ,lineNumber = 63 ,className = "unit.TestSpecification" ,methodName = "testMath_unit_hx" ))
		def _hx_local_17():
			v2 = float("inf")
			return _hx_math.fabs(v2)
		
		self.feq(_hx_local_17(), float("inf"), _hx_c._hx_AnonObject(fileName = "Math.unit.hx" ,lineNumber = 64 ,className = "unit.TestSpecification" ,methodName = "testMath_unit_hx" ))
		self.feq(0.0 if (_hx_math.isnan(0.0)) else 1.0 if (_hx_math.isnan(1.0)) else _hx_builtin.min(0.0, 1.0), 0.0, _hx_c._hx_AnonObject(fileName = "Math.unit.hx" ,lineNumber = 67 ,className = "unit.TestSpecification" ,methodName = "testMath_unit_hx" ))
		self.feq(0.0 if (_hx_math.isnan(0.0)) else -1.0 if (_hx_math.isnan(-1.0)) else _hx_builtin.min(0.0, -1.0), -1.0, _hx_c._hx_AnonObject(fileName = "Math.unit.hx" ,lineNumber = 68 ,className = "unit.TestSpecification" ,methodName = "testMath_unit_hx" ))
		self.feq(0.0 if (_hx_math.isnan(0.0)) else 0.0 if (_hx_math.isnan(0.0)) else _hx_builtin.min(0.0, 0.0), 0.0, _hx_c._hx_AnonObject(fileName = "Math.unit.hx" ,lineNumber = 69 ,className = "unit.TestSpecification" ,methodName = "testMath_unit_hx" ))
		self.feq(1.0 if (_hx_math.isnan(1.0)) else 1.0 if (_hx_math.isnan(1.0)) else _hx_builtin.min(1.0, 1.0), 1.0, _hx_c._hx_AnonObject(fileName = "Math.unit.hx" ,lineNumber = 70 ,className = "unit.TestSpecification" ,methodName = "testMath_unit_hx" ))
		def _hx_local_18():
			b = float("-inf")
			a = float("-inf")
			return a if (_hx_math.isnan(a)) else b if (_hx_math.isnan(b)) else _hx_builtin.min(a, b)
		
		self.feq(_hx_local_18(), float("-inf"), _hx_c._hx_AnonObject(fileName = "Math.unit.hx" ,lineNumber = 71 ,className = "unit.TestSpecification" ,methodName = "testMath_unit_hx" ))
		def _hx_local_19():
			b1 = float("inf")
			a1 = float("-inf")
			return a1 if (_hx_math.isnan(a1)) else b1 if (_hx_math.isnan(b1)) else _hx_builtin.min(a1, b1)
		
		self.feq(_hx_local_19(), float("-inf"), _hx_c._hx_AnonObject(fileName = "Math.unit.hx" ,lineNumber = 72 ,className = "unit.TestSpecification" ,methodName = "testMath_unit_hx" ))
		def _hx_local_20():
			b2 = float("inf")
			a2 = float("inf")
			return a2 if (_hx_math.isnan(a2)) else b2 if (_hx_math.isnan(b2)) else _hx_builtin.min(a2, b2)
		
		self.feq(_hx_local_20(), float("inf"), _hx_c._hx_AnonObject(fileName = "Math.unit.hx" ,lineNumber = 73 ,className = "unit.TestSpecification" ,methodName = "testMath_unit_hx" ))
		def _hx_local_21():
			a3 = float("inf")
			return a3 if (_hx_math.isnan(a3)) else zero if (_hx_math.isnan(zero)) else _hx_builtin.min(a3, zero)
		
		self.eq(_hx_local_21(), zero, _hx_c._hx_AnonObject(fileName = "Math.unit.hx" ,lineNumber = 74 ,className = "unit.TestSpecification" ,methodName = "testMath_unit_hx" ))
		def _hx_local_22():
			a4 = float("-inf")
			return a4 if (_hx_math.isnan(a4)) else zero if (_hx_math.isnan(zero)) else _hx_builtin.min(a4, zero)
		
		self.feq(_hx_local_22(), float("-inf"), _hx_c._hx_AnonObject(fileName = "Math.unit.hx" ,lineNumber = 75 ,className = "unit.TestSpecification" ,methodName = "testMath_unit_hx" ))
		def _hx_local_23():
			f24 = None
			b3 = float("nan")
			a5 = float("-inf")
			if _hx_math.isnan(a5):
				f24 = a5
			elif _hx_math.isnan(b3):
				f24 = b3
			else:
				f24 = _hx_builtin.min(a5, b3)
			
			return _hx_math.isnan(f24)
		
		self.t(_hx_local_23(), _hx_c._hx_AnonObject(fileName = "Math.unit.hx" ,lineNumber = 76 ,className = "unit.TestSpecification" ,methodName = "testMath_unit_hx" ))
		def _hx_local_24():
			f25 = None
			b4 = float("nan")
			a6 = float("inf")
			if _hx_math.isnan(a6):
				f25 = a6
			elif _hx_math.isnan(b4):
				f25 = b4
			else:
				f25 = _hx_builtin.min(a6, b4)
			
			return _hx_math.isnan(f25)
		
		self.t(_hx_local_24(), _hx_c._hx_AnonObject(fileName = "Math.unit.hx" ,lineNumber = 77 ,className = "unit.TestSpecification" ,methodName = "testMath_unit_hx" ))
		def _hx_local_25():
			f26 = None
			b5 = float("nan")
			a7 = float("nan")
			if _hx_math.isnan(a7):
				f26 = a7
			elif _hx_math.isnan(b5):
				f26 = b5
			else:
				f26 = _hx_builtin.min(a7, b5)
			
			return _hx_math.isnan(f26)
		
		self.t(_hx_local_25(), _hx_c._hx_AnonObject(fileName = "Math.unit.hx" ,lineNumber = 78 ,className = "unit.TestSpecification" ,methodName = "testMath_unit_hx" ))
		def _hx_local_26():
			f27 = None
			b6 = float("nan")
			if _hx_math.isnan(one):
				f27 = one
			elif _hx_math.isnan(b6):
				f27 = b6
			else:
				f27 = _hx_builtin.min(one, b6)
			
			return _hx_math.isnan(f27)
		
		self.t(_hx_local_26(), _hx_c._hx_AnonObject(fileName = "Math.unit.hx" ,lineNumber = 79 ,className = "unit.TestSpecification" ,methodName = "testMath_unit_hx" ))
		def _hx_local_27():
			f28 = None
			b7 = float("nan")
			if _hx_math.isnan(zero):
				f28 = zero
			elif _hx_math.isnan(b7):
				f28 = b7
			else:
				f28 = _hx_builtin.min(zero, b7)
			
			return _hx_math.isnan(f28)
		
		self.t(_hx_local_27(), _hx_c._hx_AnonObject(fileName = "Math.unit.hx" ,lineNumber = 80 ,className = "unit.TestSpecification" ,methodName = "testMath_unit_hx" ))
		def _hx_local_28():
			f29 = None
			b8 = float("-inf")
			a8 = float("nan")
			if _hx_math.isnan(a8):
				f29 = a8
			elif _hx_math.isnan(b8):
				f29 = b8
			else:
				f29 = _hx_builtin.min(a8, b8)
			
			return _hx_math.isnan(f29)
		
		self.t(_hx_local_28(), _hx_c._hx_AnonObject(fileName = "Math.unit.hx" ,lineNumber = 81 ,className = "unit.TestSpecification" ,methodName = "testMath_unit_hx" ))
		def _hx_local_29():
			f30 = None
			b9 = float("inf")
			a9 = float("nan")
			if _hx_math.isnan(a9):
				f30 = a9
			elif _hx_math.isnan(b9):
				f30 = b9
			else:
				f30 = _hx_builtin.min(a9, b9)
			
			return _hx_math.isnan(f30)
		
		self.t(_hx_local_29(), _hx_c._hx_AnonObject(fileName = "Math.unit.hx" ,lineNumber = 82 ,className = "unit.TestSpecification" ,methodName = "testMath_unit_hx" ))
		def _hx_local_30():
			f31 = None
			a10 = float("nan")
			if _hx_math.isnan(a10):
				f31 = a10
			elif _hx_math.isnan(one):
				f31 = one
			else:
				f31 = _hx_builtin.min(a10, one)
			
			return _hx_math.isnan(f31)
		
		self.t(_hx_local_30(), _hx_c._hx_AnonObject(fileName = "Math.unit.hx" ,lineNumber = 83 ,className = "unit.TestSpecification" ,methodName = "testMath_unit_hx" ))
		def _hx_local_31():
			f32 = None
			a11 = float("nan")
			if _hx_math.isnan(a11):
				f32 = a11
			elif _hx_math.isnan(zero):
				f32 = zero
			else:
				f32 = _hx_builtin.min(a11, zero)
			
			return _hx_math.isnan(f32)
		
		self.t(_hx_local_31(), _hx_c._hx_AnonObject(fileName = "Math.unit.hx" ,lineNumber = 84 ,className = "unit.TestSpecification" ,methodName = "testMath_unit_hx" ))
		self.feq(0.0 if (_hx_math.isnan(0.0)) else 1.0 if (_hx_math.isnan(1.0)) else _hx_builtin.max(0.0, 1.0), 1.0, _hx_c._hx_AnonObject(fileName = "Math.unit.hx" ,lineNumber = 87 ,className = "unit.TestSpecification" ,methodName = "testMath_unit_hx" ))
		self.feq(0.0 if (_hx_math.isnan(0.0)) else -1.0 if (_hx_math.isnan(-1.0)) else _hx_builtin.max(0.0, -1.0), 0.0, _hx_c._hx_AnonObject(fileName = "Math.unit.hx" ,lineNumber = 88 ,className = "unit.TestSpecification" ,methodName = "testMath_unit_hx" ))
		self.feq(0.0 if (_hx_math.isnan(0.0)) else 0.0 if (_hx_math.isnan(0.0)) else _hx_builtin.max(0.0, 0.0), 0.0, _hx_c._hx_AnonObject(fileName = "Math.unit.hx" ,lineNumber = 89 ,className = "unit.TestSpecification" ,methodName = "testMath_unit_hx" ))
		self.feq(1.0 if (_hx_math.isnan(1.0)) else 1.0 if (_hx_math.isnan(1.0)) else _hx_builtin.max(1.0, 1.0), 1.0, _hx_c._hx_AnonObject(fileName = "Math.unit.hx" ,lineNumber = 90 ,className = "unit.TestSpecification" ,methodName = "testMath_unit_hx" ))
		def _hx_local_32():
			b10 = float("-inf")
			a12 = float("-inf")
			return a12 if (_hx_math.isnan(a12)) else b10 if (_hx_math.isnan(b10)) else _hx_builtin.max(a12, b10)
		
		self.feq(_hx_local_32(), float("-inf"), _hx_c._hx_AnonObject(fileName = "Math.unit.hx" ,lineNumber = 91 ,className = "unit.TestSpecification" ,methodName = "testMath_unit_hx" ))
		def _hx_local_33():
			b11 = float("inf")
			a13 = float("-inf")
			return a13 if (_hx_math.isnan(a13)) else b11 if (_hx_math.isnan(b11)) else _hx_builtin.max(a13, b11)
		
		self.feq(_hx_local_33(), float("inf"), _hx_c._hx_AnonObject(fileName = "Math.unit.hx" ,lineNumber = 92 ,className = "unit.TestSpecification" ,methodName = "testMath_unit_hx" ))
		def _hx_local_34():
			b12 = float("inf")
			a14 = float("inf")
			return a14 if (_hx_math.isnan(a14)) else b12 if (_hx_math.isnan(b12)) else _hx_builtin.max(a14, b12)
		
		self.feq(_hx_local_34(), float("inf"), _hx_c._hx_AnonObject(fileName = "Math.unit.hx" ,lineNumber = 93 ,className = "unit.TestSpecification" ,methodName = "testMath_unit_hx" ))
		def _hx_local_35():
			a15 = float("inf")
			return a15 if (_hx_math.isnan(a15)) else zero if (_hx_math.isnan(zero)) else _hx_builtin.max(a15, zero)
		
		self.feq(_hx_local_35(), float("inf"), _hx_c._hx_AnonObject(fileName = "Math.unit.hx" ,lineNumber = 94 ,className = "unit.TestSpecification" ,methodName = "testMath_unit_hx" ))
		def _hx_local_36():
			a16 = float("-inf")
			return a16 if (_hx_math.isnan(a16)) else zero if (_hx_math.isnan(zero)) else _hx_builtin.max(a16, zero)
		
		self.eq(_hx_local_36(), 0, _hx_c._hx_AnonObject(fileName = "Math.unit.hx" ,lineNumber = 95 ,className = "unit.TestSpecification" ,methodName = "testMath_unit_hx" ))
		def _hx_local_37():
			f33 = None
			b13 = float("nan")
			a17 = float("-inf")
			if _hx_math.isnan(a17):
				f33 = a17
			elif _hx_math.isnan(b13):
				f33 = b13
			else:
				f33 = _hx_builtin.max(a17, b13)
			
			return _hx_math.isnan(f33)
		
		self.t(_hx_local_37(), _hx_c._hx_AnonObject(fileName = "Math.unit.hx" ,lineNumber = 96 ,className = "unit.TestSpecification" ,methodName = "testMath_unit_hx" ))
		def _hx_local_38():
			f34 = None
			b14 = float("nan")
			a18 = float("inf")
			if _hx_math.isnan(a18):
				f34 = a18
			elif _hx_math.isnan(b14):
				f34 = b14
			else:
				f34 = _hx_builtin.max(a18, b14)
			
			return _hx_math.isnan(f34)
		
		self.t(_hx_local_38(), _hx_c._hx_AnonObject(fileName = "Math.unit.hx" ,lineNumber = 97 ,className = "unit.TestSpecification" ,methodName = "testMath_unit_hx" ))
		def _hx_local_39():
			f35 = None
			b15 = float("nan")
			a19 = float("nan")
			if _hx_math.isnan(a19):
				f35 = a19
			elif _hx_math.isnan(b15):
				f35 = b15
			else:
				f35 = _hx_builtin.max(a19, b15)
			
			return _hx_math.isnan(f35)
		
		self.t(_hx_local_39(), _hx_c._hx_AnonObject(fileName = "Math.unit.hx" ,lineNumber = 98 ,className = "unit.TestSpecification" ,methodName = "testMath_unit_hx" ))
		def _hx_local_40():
			f36 = None
			b16 = float("nan")
			if _hx_math.isnan(one):
				f36 = one
			elif _hx_math.isnan(b16):
				f36 = b16
			else:
				f36 = _hx_builtin.max(one, b16)
			
			return _hx_math.isnan(f36)
		
		self.t(_hx_local_40(), _hx_c._hx_AnonObject(fileName = "Math.unit.hx" ,lineNumber = 99 ,className = "unit.TestSpecification" ,methodName = "testMath_unit_hx" ))
		def _hx_local_41():
			f37 = None
			b17 = float("nan")
			if _hx_math.isnan(zero):
				f37 = zero
			elif _hx_math.isnan(b17):
				f37 = b17
			else:
				f37 = _hx_builtin.max(zero, b17)
			
			return _hx_math.isnan(f37)
		
		self.t(_hx_local_41(), _hx_c._hx_AnonObject(fileName = "Math.unit.hx" ,lineNumber = 100 ,className = "unit.TestSpecification" ,methodName = "testMath_unit_hx" ))
		def _hx_local_42():
			f38 = None
			b18 = float("-inf")
			a20 = float("nan")
			if _hx_math.isnan(a20):
				f38 = a20
			elif _hx_math.isnan(b18):
				f38 = b18
			else:
				f38 = _hx_builtin.max(a20, b18)
			
			return _hx_math.isnan(f38)
		
		self.t(_hx_local_42(), _hx_c._hx_AnonObject(fileName = "Math.unit.hx" ,lineNumber = 101 ,className = "unit.TestSpecification" ,methodName = "testMath_unit_hx" ))
		def _hx_local_43():
			f39 = None
			b19 = float("inf")
			a21 = float("nan")
			if _hx_math.isnan(a21):
				f39 = a21
			elif _hx_math.isnan(b19):
				f39 = b19
			else:
				f39 = _hx_builtin.max(a21, b19)
			
			return _hx_math.isnan(f39)
		
		self.t(_hx_local_43(), _hx_c._hx_AnonObject(fileName = "Math.unit.hx" ,lineNumber = 102 ,className = "unit.TestSpecification" ,methodName = "testMath_unit_hx" ))
		def _hx_local_44():
			f40 = None
			a22 = float("nan")
			if _hx_math.isnan(a22):
				f40 = a22
			elif _hx_math.isnan(one):
				f40 = one
			else:
				f40 = _hx_builtin.max(a22, one)
			
			return _hx_math.isnan(f40)
		
		self.t(_hx_local_44(), _hx_c._hx_AnonObject(fileName = "Math.unit.hx" ,lineNumber = 103 ,className = "unit.TestSpecification" ,methodName = "testMath_unit_hx" ))
		def _hx_local_45():
			f41 = None
			a23 = float("nan")
			if _hx_math.isnan(a23):
				f41 = a23
			elif _hx_math.isnan(zero):
				f41 = zero
			else:
				f41 = _hx_builtin.max(a23, zero)
			
			return _hx_math.isnan(f41)
		
		self.t(_hx_local_45(), _hx_c._hx_AnonObject(fileName = "Math.unit.hx" ,lineNumber = 104 ,className = "unit.TestSpecification" ,methodName = "testMath_unit_hx" ))
		self.feq(float("nan") if (0.0 == float("inf") or 0.0 == float("-inf")) else _hx_math.sin(0.0), 0.0, _hx_c._hx_AnonObject(fileName = "Math.unit.hx" ,lineNumber = 107 ,className = "unit.TestSpecification" ,methodName = "testMath_unit_hx" ))
		def _hx_local_46():
			v3 = _hx_math.pi / 2
			return float("nan") if (v3 == float("inf") or v3 == float("-inf")) else _hx_math.sin(v3)
		
		self.feq(_hx_local_46(), 1.0, _hx_c._hx_AnonObject(fileName = "Math.unit.hx" ,lineNumber = 108 ,className = "unit.TestSpecification" ,methodName = "testMath_unit_hx" ))
		def _hx_local_47():
			v4 = _hx_math.pi
			return float("nan") if (v4 == float("inf") or v4 == float("-inf")) else _hx_math.sin(v4)
		
		self.feq(_hx_local_47(), 0.0, _hx_c._hx_AnonObject(fileName = "Math.unit.hx" ,lineNumber = 109 ,className = "unit.TestSpecification" ,methodName = "testMath_unit_hx" ))
		def _hx_local_48():
			v5 = _hx_math.pi * 3 / 2
			return float("nan") if (v5 == float("inf") or v5 == float("-inf")) else _hx_math.sin(v5)
		
		self.feq(_hx_local_48(), -1.0, _hx_c._hx_AnonObject(fileName = "Math.unit.hx" ,lineNumber = 110 ,className = "unit.TestSpecification" ,methodName = "testMath_unit_hx" ))
		def _hx_local_49():
			f42 = None
			v6 = float("inf")
			if v6 == float("inf") or v6 == float("-inf"):
				f42 = float("nan")
			else:
				f42 = _hx_math.sin(v6)
			
			return _hx_math.isnan(f42)
		
		self.t(_hx_local_49(), _hx_c._hx_AnonObject(fileName = "Math.unit.hx" ,lineNumber = 111 ,className = "unit.TestSpecification" ,methodName = "testMath_unit_hx" ))
		def _hx_local_50():
			f43 = None
			v7 = float("-inf")
			if v7 == float("inf") or v7 == float("-inf"):
				f43 = float("nan")
			else:
				f43 = _hx_math.sin(v7)
			
			return _hx_math.isnan(f43)
		
		self.t(_hx_local_50(), _hx_c._hx_AnonObject(fileName = "Math.unit.hx" ,lineNumber = 112 ,className = "unit.TestSpecification" ,methodName = "testMath_unit_hx" ))
		def _hx_local_51():
			f44 = None
			v8 = float("nan")
			if v8 == float("inf") or v8 == float("-inf"):
				f44 = float("nan")
			else:
				f44 = _hx_math.sin(v8)
			
			return _hx_math.isnan(f44)
		
		self.t(_hx_local_51(), _hx_c._hx_AnonObject(fileName = "Math.unit.hx" ,lineNumber = 113 ,className = "unit.TestSpecification" ,methodName = "testMath_unit_hx" ))
		self.feq(float("nan") if (0.0 == float("inf") or 0.0 == float("-inf")) else _hx_math.cos(0.0), 1.0, _hx_c._hx_AnonObject(fileName = "Math.unit.hx" ,lineNumber = 116 ,className = "unit.TestSpecification" ,methodName = "testMath_unit_hx" ))
		def _hx_local_52():
			v9 = _hx_math.pi / 2
			return float("nan") if (v9 == float("inf") or v9 == float("-inf")) else _hx_math.cos(v9)
		
		self.feq(_hx_local_52(), 0.0, _hx_c._hx_AnonObject(fileName = "Math.unit.hx" ,lineNumber = 117 ,className = "unit.TestSpecification" ,methodName = "testMath_unit_hx" ))
		def _hx_local_53():
			v10 = _hx_math.pi
			return float("nan") if (v10 == float("inf") or v10 == float("-inf")) else _hx_math.cos(v10)
		
		self.feq(_hx_local_53(), -1.0, _hx_c._hx_AnonObject(fileName = "Math.unit.hx" ,lineNumber = 118 ,className = "unit.TestSpecification" ,methodName = "testMath_unit_hx" ))
		def _hx_local_54():
			v11 = _hx_math.pi * 3 / 2
			return float("nan") if (v11 == float("inf") or v11 == float("-inf")) else _hx_math.cos(v11)
		
		self.feq(_hx_local_54(), 0.0, _hx_c._hx_AnonObject(fileName = "Math.unit.hx" ,lineNumber = 119 ,className = "unit.TestSpecification" ,methodName = "testMath_unit_hx" ))
		def _hx_local_55():
			f45 = None
			v12 = float("inf")
			if v12 == float("inf") or v12 == float("-inf"):
				f45 = float("nan")
			else:
				f45 = _hx_math.cos(v12)
			
			return _hx_math.isnan(f45)
		
		self.t(_hx_local_55(), _hx_c._hx_AnonObject(fileName = "Math.unit.hx" ,lineNumber = 120 ,className = "unit.TestSpecification" ,methodName = "testMath_unit_hx" ))
		def _hx_local_56():
			f46 = None
			v13 = float("-inf")
			if v13 == float("inf") or v13 == float("-inf"):
				f46 = float("nan")
			else:
				f46 = _hx_math.cos(v13)
			
			return _hx_math.isnan(f46)
		
		self.t(_hx_local_56(), _hx_c._hx_AnonObject(fileName = "Math.unit.hx" ,lineNumber = 121 ,className = "unit.TestSpecification" ,methodName = "testMath_unit_hx" ))
		def _hx_local_57():
			f47 = None
			v14 = float("nan")
			if v14 == float("inf") or v14 == float("-inf"):
				f47 = float("nan")
			else:
				f47 = _hx_math.cos(v14)
			
			return _hx_math.isnan(f47)
		
		self.t(_hx_local_57(), _hx_c._hx_AnonObject(fileName = "Math.unit.hx" ,lineNumber = 122 ,className = "unit.TestSpecification" ,methodName = "testMath_unit_hx" ))
		self.feq(0.0 if (0.0 == float("-inf")) else float("inf") if (0.0 == float("inf")) else _hx_math.exp(0.0), 1.0, _hx_c._hx_AnonObject(fileName = "Math.unit.hx" ,lineNumber = 125 ,className = "unit.TestSpecification" ,methodName = "testMath_unit_hx" ))
		self.feq(0.0 if (1.0 == float("-inf")) else float("inf") if (1.0 == float("inf")) else _hx_math.exp(1.0), 2.7182818284590452353602874713527, _hx_c._hx_AnonObject(fileName = "Math.unit.hx" ,lineNumber = 126 ,className = "unit.TestSpecification" ,methodName = "testMath_unit_hx" ))
		def _hx_local_58():
			v15 = float("inf")
			return 0.0 if (v15 == float("-inf")) else float("inf") if (v15 == float("inf")) else _hx_math.exp(v15)
		
		self.feq(_hx_local_58(), float("inf"), _hx_c._hx_AnonObject(fileName = "Math.unit.hx" ,lineNumber = 127 ,className = "unit.TestSpecification" ,methodName = "testMath_unit_hx" ))
		def _hx_local_59():
			v16 = float("-inf")
			return 0.0 if (v16 == float("-inf")) else float("inf") if (v16 == float("inf")) else _hx_math.exp(v16)
		
		self.feq(_hx_local_59(), 0.0, _hx_c._hx_AnonObject(fileName = "Math.unit.hx" ,lineNumber = 128 ,className = "unit.TestSpecification" ,methodName = "testMath_unit_hx" ))
		def _hx_local_60():
			f48 = None
			v17 = float("nan")
			if v17 == float("-inf"):
				f48 = 0.0
			elif v17 == float("inf"):
				f48 = float("inf")
			else:
				f48 = _hx_math.exp(v17)
			
			return _hx_math.isnan(f48)
		
		self.t(_hx_local_60(), _hx_c._hx_AnonObject(fileName = "Math.unit.hx" ,lineNumber = 129 ,className = "unit.TestSpecification" ,methodName = "testMath_unit_hx" ))
		self.feq(float("-inf") if (0.0 == 0.0) else float("nan") if (0.0 < 0.0) else _hx_math.log(0.0), float("-inf"), _hx_c._hx_AnonObject(fileName = "Math.unit.hx" ,lineNumber = 132 ,className = "unit.TestSpecification" ,methodName = "testMath_unit_hx" ))
		self.feq(float("-inf") if (2.7182818284590452353602874713527 == 0.0) else float("nan") if (2.7182818284590452353602874713527 < 0.0) else _hx_math.log(2.7182818284590452353602874713527), 1.0, _hx_c._hx_AnonObject(fileName = "Math.unit.hx" ,lineNumber = 133 ,className = "unit.TestSpecification" ,methodName = "testMath_unit_hx" ))
		def _hx_local_61():
			f49 = None
			if -1.0 == 0.0:
				f49 = float("-inf")
			elif -1.0 < 0.0:
				f49 = float("nan")
			else:
				f49 = _hx_math.log(-1.0)
			return _hx_math.isnan(f49)
		
		self.t(_hx_local_61(), _hx_c._hx_AnonObject(fileName = "Math.unit.hx" ,lineNumber = 134 ,className = "unit.TestSpecification" ,methodName = "testMath_unit_hx" ))
		def _hx_local_62():
			f50 = None
			v18 = float("nan")
			if v18 == 0.0:
				f50 = float("-inf")
			elif v18 < 0.0:
				f50 = float("nan")
			else:
				f50 = _hx_math.log(v18)
			
			return _hx_math.isnan(f50)
		
		self.t(_hx_local_62(), _hx_c._hx_AnonObject(fileName = "Math.unit.hx" ,lineNumber = 135 ,className = "unit.TestSpecification" ,methodName = "testMath_unit_hx" ))
		def _hx_local_63():
			f51 = None
			v19 = float("-inf")
			if v19 == 0.0:
				f51 = float("-inf")
			elif v19 < 0.0:
				f51 = float("nan")
			else:
				f51 = _hx_math.log(v19)
			
			return _hx_math.isnan(f51)
		
		self.t(_hx_local_63(), _hx_c._hx_AnonObject(fileName = "Math.unit.hx" ,lineNumber = 136 ,className = "unit.TestSpecification" ,methodName = "testMath_unit_hx" ))
		def _hx_local_64():
			v20 = float("inf")
			return float("-inf") if (v20 == 0.0) else float("nan") if (v20 < 0.0) else _hx_math.log(v20)
		
		self.feq(_hx_local_64(), float("inf"), _hx_c._hx_AnonObject(fileName = "Math.unit.hx" ,lineNumber = 137 ,className = "unit.TestSpecification" ,methodName = "testMath_unit_hx" ))
		floats = [1.33, 12.0, -112.999992, 0.0, float("-inf"), float("inf")]
		_g = 0
		while _g < _hx_builtin.len(floats):
			f52 = _hx_array_get(floats,_g)
			_g = _g + 1
		
		
		self.feq(float("nan") if (4.0 < 0) else _hx_math.sqrt(4.0), 2, _hx_c._hx_AnonObject(fileName = "Math.unit.hx" ,lineNumber = 146 ,className = "unit.TestSpecification" ,methodName = "testMath_unit_hx" ))
		self.feq(float("nan") if (0.0 < 0) else _hx_math.sqrt(0.0), 0.0, _hx_c._hx_AnonObject(fileName = "Math.unit.hx" ,lineNumber = 147 ,className = "unit.TestSpecification" ,methodName = "testMath_unit_hx" ))
		def _hx_local_65():
			v21 = float("inf")
			return float("nan") if (v21 < 0) else _hx_math.sqrt(v21)
		
		self.feq(_hx_local_65(), float("inf"), _hx_c._hx_AnonObject(fileName = "Math.unit.hx" ,lineNumber = 148 ,className = "unit.TestSpecification" ,methodName = "testMath_unit_hx" ))
		def _hx_local_66():
			f53 = None
			v22 = float("-inf")
			if v22 < 0:
				f53 = float("nan")
			else:
				f53 = _hx_math.sqrt(v22)
			
			return _hx_math.isnan(f53)
		
		self.t(_hx_local_66(), _hx_c._hx_AnonObject(fileName = "Math.unit.hx" ,lineNumber = 149 ,className = "unit.TestSpecification" ,methodName = "testMath_unit_hx" ))
		def _hx_local_67():
			f54 = None
			v23 = float("nan")
			if v23 < 0:
				f54 = float("nan")
			else:
				f54 = _hx_math.sqrt(v23)
			
			return _hx_math.isnan(f54)
		
		self.t(_hx_local_67(), _hx_c._hx_AnonObject(fileName = "Math.unit.hx" ,lineNumber = 150 ,className = "unit.TestSpecification" ,methodName = "testMath_unit_hx" ))
		def _hx_local_68():
			f55 = None
			if -1.0 < 0:
				f55 = float("nan")
			else:
				f55 = _hx_math.sqrt(-1.0)
			return _hx_math.isnan(f55)
		
		self.t(_hx_local_68(), _hx_c._hx_AnonObject(fileName = "Math.unit.hx" ,lineNumber = 151 ,className = "unit.TestSpecification" ,methodName = "testMath_unit_hx" ))
		self.eq(_hx_math.floor(0.0 + 0.5), 0, _hx_c._hx_AnonObject(fileName = "Math.unit.hx" ,lineNumber = 154 ,className = "unit.TestSpecification" ,methodName = "testMath_unit_hx" ))
		self.eq(_hx_math.floor(0.1 + 0.5), 0, _hx_c._hx_AnonObject(fileName = "Math.unit.hx" ,lineNumber = 155 ,className = "unit.TestSpecification" ,methodName = "testMath_unit_hx" ))
		self.eq(_hx_math.floor(0.4999 + 0.5), 0, _hx_c._hx_AnonObject(fileName = "Math.unit.hx" ,lineNumber = 156 ,className = "unit.TestSpecification" ,methodName = "testMath_unit_hx" ))
		self.eq(_hx_math.floor(0.5 + 0.5), 1, _hx_c._hx_AnonObject(fileName = "Math.unit.hx" ,lineNumber = 157 ,className = "unit.TestSpecification" ,methodName = "testMath_unit_hx" ))
		self.eq(_hx_math.floor(1.0 + 0.5), 1, _hx_c._hx_AnonObject(fileName = "Math.unit.hx" ,lineNumber = 158 ,className = "unit.TestSpecification" ,methodName = "testMath_unit_hx" ))
		self.eq(_hx_math.floor(1.499 + 0.5), 1, _hx_c._hx_AnonObject(fileName = "Math.unit.hx" ,lineNumber = 159 ,className = "unit.TestSpecification" ,methodName = "testMath_unit_hx" ))
		self.eq(_hx_math.floor(-0.1 + 0.5), 0, _hx_c._hx_AnonObject(fileName = "Math.unit.hx" ,lineNumber = 160 ,className = "unit.TestSpecification" ,methodName = "testMath_unit_hx" ))
		self.eq(_hx_math.floor(-0.4999 + 0.5), 0, _hx_c._hx_AnonObject(fileName = "Math.unit.hx" ,lineNumber = 161 ,className = "unit.TestSpecification" ,methodName = "testMath_unit_hx" ))
		self.eq(_hx_math.floor(-0.5 + 0.5), 0, _hx_c._hx_AnonObject(fileName = "Math.unit.hx" ,lineNumber = 162 ,className = "unit.TestSpecification" ,methodName = "testMath_unit_hx" ))
		self.eq(_hx_math.floor(-0.50001 + 0.5), -1, _hx_c._hx_AnonObject(fileName = "Math.unit.hx" ,lineNumber = 163 ,className = "unit.TestSpecification" ,methodName = "testMath_unit_hx" ))
		self.eq(_hx_math.floor(-1.0 + 0.5), -1, _hx_c._hx_AnonObject(fileName = "Math.unit.hx" ,lineNumber = 164 ,className = "unit.TestSpecification" ,methodName = "testMath_unit_hx" ))
		self.eq(_hx_math.floor(-1.499 + 0.5), -1, _hx_c._hx_AnonObject(fileName = "Math.unit.hx" ,lineNumber = 165 ,className = "unit.TestSpecification" ,methodName = "testMath_unit_hx" ))
		self.eq(_hx_math.floor(-1.5 + 0.5), -1, _hx_c._hx_AnonObject(fileName = "Math.unit.hx" ,lineNumber = 166 ,className = "unit.TestSpecification" ,methodName = "testMath_unit_hx" ))
		self.eq(_hx_math.floor(-1.50001 + 0.5), -2, _hx_c._hx_AnonObject(fileName = "Math.unit.hx" ,lineNumber = 167 ,className = "unit.TestSpecification" ,methodName = "testMath_unit_hx" ))
		def _hx_local_69():
			v24 = float("inf")
			return v24 if (v24 == float("inf") or v24 == float("-inf")) else float("nan") if (_hx_math.isnan(v24)) else _hx_math.floor(v24 + 0.5)
		
		self.feq(_hx_local_69(), float("inf"), _hx_c._hx_AnonObject(fileName = "Math.unit.hx" ,lineNumber = 168 ,className = "unit.TestSpecification" ,methodName = "testMath_unit_hx" ))
		def _hx_local_70():
			v25 = float("-inf")
			return v25 if (v25 == float("inf") or v25 == float("-inf")) else float("nan") if (_hx_math.isnan(v25)) else _hx_math.floor(v25 + 0.5)
		
		self.feq(_hx_local_70(), float("-inf"), _hx_c._hx_AnonObject(fileName = "Math.unit.hx" ,lineNumber = 169 ,className = "unit.TestSpecification" ,methodName = "testMath_unit_hx" ))
		def _hx_local_71():
			f56 = None
			v26 = float("nan")
			if v26 == float("inf") or v26 == float("-inf"):
				f56 = v26
			elif _hx_math.isnan(v26):
				f56 = float("nan")
			else:
				f56 = _hx_math.floor(v26 + 0.5)
			
			return _hx_math.isnan(f56)
		
		self.t(_hx_local_71(), _hx_c._hx_AnonObject(fileName = "Math.unit.hx" ,lineNumber = 170 ,className = "unit.TestSpecification" ,methodName = "testMath_unit_hx" ))
		self.eq(_hx_math.floor(0.0), 0, _hx_c._hx_AnonObject(fileName = "Math.unit.hx" ,lineNumber = 173 ,className = "unit.TestSpecification" ,methodName = "testMath_unit_hx" ))
		self.eq(_hx_math.floor(0.9999), 0, _hx_c._hx_AnonObject(fileName = "Math.unit.hx" ,lineNumber = 174 ,className = "unit.TestSpecification" ,methodName = "testMath_unit_hx" ))
		self.eq(_hx_math.floor(1.0), 1, _hx_c._hx_AnonObject(fileName = "Math.unit.hx" ,lineNumber = 175 ,className = "unit.TestSpecification" ,methodName = "testMath_unit_hx" ))
		self.eq(_hx_math.floor(-0.0001), -1, _hx_c._hx_AnonObject(fileName = "Math.unit.hx" ,lineNumber = 176 ,className = "unit.TestSpecification" ,methodName = "testMath_unit_hx" ))
		self.eq(_hx_math.floor(-1.0), -1, _hx_c._hx_AnonObject(fileName = "Math.unit.hx" ,lineNumber = 177 ,className = "unit.TestSpecification" ,methodName = "testMath_unit_hx" ))
		self.eq(_hx_math.floor(-1.0001), -2, _hx_c._hx_AnonObject(fileName = "Math.unit.hx" ,lineNumber = 178 ,className = "unit.TestSpecification" ,methodName = "testMath_unit_hx" ))
		def _hx_local_72():
			v27 = float("inf")
			return v27 if (v27 == float("inf") or v27 == float("-inf")) else float("nan") if (_hx_math.isnan(v27)) else _hx_math.floor(v27)
		
		self.feq(_hx_local_72(), float("inf"), _hx_c._hx_AnonObject(fileName = "Math.unit.hx" ,lineNumber = 179 ,className = "unit.TestSpecification" ,methodName = "testMath_unit_hx" ))
		def _hx_local_73():
			v28 = float("-inf")
			return v28 if (v28 == float("inf") or v28 == float("-inf")) else float("nan") if (_hx_math.isnan(v28)) else _hx_math.floor(v28)
		
		self.feq(_hx_local_73(), float("-inf"), _hx_c._hx_AnonObject(fileName = "Math.unit.hx" ,lineNumber = 180 ,className = "unit.TestSpecification" ,methodName = "testMath_unit_hx" ))
		def _hx_local_74():
			f57 = None
			v29 = float("nan")
			if v29 == float("inf") or v29 == float("-inf"):
				f57 = v29
			elif _hx_math.isnan(v29):
				f57 = float("nan")
			else:
				f57 = _hx_math.floor(v29)
			
			return _hx_math.isnan(f57)
		
		self.t(_hx_local_74(), _hx_c._hx_AnonObject(fileName = "Math.unit.hx" ,lineNumber = 181 ,className = "unit.TestSpecification" ,methodName = "testMath_unit_hx" ))
		self.eq(_hx_math.ceil(0.0), 0, _hx_c._hx_AnonObject(fileName = "Math.unit.hx" ,lineNumber = 184 ,className = "unit.TestSpecification" ,methodName = "testMath_unit_hx" ))
		self.eq(_hx_math.ceil(-0.9999), 0, _hx_c._hx_AnonObject(fileName = "Math.unit.hx" ,lineNumber = 185 ,className = "unit.TestSpecification" ,methodName = "testMath_unit_hx" ))
		self.eq(_hx_math.ceil(-1.0), -1, _hx_c._hx_AnonObject(fileName = "Math.unit.hx" ,lineNumber = 186 ,className = "unit.TestSpecification" ,methodName = "testMath_unit_hx" ))
		self.eq(_hx_math.ceil(0.0001), 1, _hx_c._hx_AnonObject(fileName = "Math.unit.hx" ,lineNumber = 187 ,className = "unit.TestSpecification" ,methodName = "testMath_unit_hx" ))
		self.eq(_hx_math.ceil(1.0), 1, _hx_c._hx_AnonObject(fileName = "Math.unit.hx" ,lineNumber = 188 ,className = "unit.TestSpecification" ,methodName = "testMath_unit_hx" ))
		self.eq(_hx_math.ceil(1.0001), 2, _hx_c._hx_AnonObject(fileName = "Math.unit.hx" ,lineNumber = 189 ,className = "unit.TestSpecification" ,methodName = "testMath_unit_hx" ))
		def _hx_local_75():
			v30 = float("inf")
			return v30 if (v30 == float("inf") or v30 == float("-inf")) else float("nan") if (_hx_math.isnan(v30)) else _hx_math.ceil(v30)
		
		self.feq(_hx_local_75(), float("inf"), _hx_c._hx_AnonObject(fileName = "Math.unit.hx" ,lineNumber = 190 ,className = "unit.TestSpecification" ,methodName = "testMath_unit_hx" ))
		def _hx_local_76():
			v31 = float("-inf")
			return v31 if (v31 == float("inf") or v31 == float("-inf")) else float("nan") if (_hx_math.isnan(v31)) else _hx_math.ceil(v31)
		
		self.feq(_hx_local_76(), float("-inf"), _hx_c._hx_AnonObject(fileName = "Math.unit.hx" ,lineNumber = 191 ,className = "unit.TestSpecification" ,methodName = "testMath_unit_hx" ))
		def _hx_local_77():
			f58 = None
			v32 = float("nan")
			if v32 == float("inf") or v32 == float("-inf"):
				f58 = v32
			elif _hx_math.isnan(v32):
				f58 = float("nan")
			else:
				f58 = _hx_math.ceil(v32)
			
			return _hx_math.isnan(f58)
		
		self.t(_hx_local_77(), _hx_c._hx_AnonObject(fileName = "Math.unit.hx" ,lineNumber = 192 ,className = "unit.TestSpecification" ,methodName = "testMath_unit_hx" ))
		def _hx_local_78():
			f59 = float("inf")
			return f59 != float("inf") and f59 != float("-inf") and not _hx_math.isnan(f59)
		
		self.f(_hx_local_78(), _hx_c._hx_AnonObject(fileName = "Math.unit.hx" ,lineNumber = 198 ,className = "unit.TestSpecification" ,methodName = "testMath_unit_hx" ))
		def _hx_local_79():
			f60 = float("-inf")
			return f60 != float("inf") and f60 != float("-inf") and not _hx_math.isnan(f60)
		
		self.f(_hx_local_79(), _hx_c._hx_AnonObject(fileName = "Math.unit.hx" ,lineNumber = 199 ,className = "unit.TestSpecification" ,methodName = "testMath_unit_hx" ))
		def _hx_local_80():
			f61 = float("nan")
			return f61 != float("inf") and f61 != float("-inf") and not _hx_math.isnan(f61)
		
		self.f(_hx_local_80(), _hx_c._hx_AnonObject(fileName = "Math.unit.hx" ,lineNumber = 200 ,className = "unit.TestSpecification" ,methodName = "testMath_unit_hx" ))
		self.t(0.0 != float("inf") and 0.0 != float("-inf") and not _hx_math.isnan(0.0), _hx_c._hx_AnonObject(fileName = "Math.unit.hx" ,lineNumber = 201 ,className = "unit.TestSpecification" ,methodName = "testMath_unit_hx" ))
		def _hx_local_81():
			f62 = float("inf")
			return _hx_math.isnan(f62)
		
		self.f(_hx_local_81(), _hx_c._hx_AnonObject(fileName = "Math.unit.hx" ,lineNumber = 204 ,className = "unit.TestSpecification" ,methodName = "testMath_unit_hx" ))
		def _hx_local_82():
			f63 = float("-inf")
			return _hx_math.isnan(f63)
		
		self.f(_hx_local_82(), _hx_c._hx_AnonObject(fileName = "Math.unit.hx" ,lineNumber = 205 ,className = "unit.TestSpecification" ,methodName = "testMath_unit_hx" ))
		def _hx_local_83():
			f64 = float("nan")
			return _hx_math.isnan(f64)
		
		self.t(_hx_local_83(), _hx_c._hx_AnonObject(fileName = "Math.unit.hx" ,lineNumber = 206 ,className = "unit.TestSpecification" ,methodName = "testMath_unit_hx" ))
		self.f(_hx_math.isnan(0.0), _hx_c._hx_AnonObject(fileName = "Math.unit.hx" ,lineNumber = 207 ,className = "unit.TestSpecification" ,methodName = "testMath_unit_hx" ))
	

	def testDateTools_unit_hx(self):
		d = _hx_c.Date(2012, 1, 17, 1, 2, 3)
		self.eq(_hx_c.DateTools.getMonthDays(d), 29, _hx_c._hx_AnonObject(fileName = "DateTools.unit.hx" ,lineNumber = 3 ,className = "unit.TestSpecification" ,methodName = "testDateTools_unit_hx" ))
		diff = 59 * 1000.0
		d2 = _hx_c.Date.fromTime(d.date.timestamp() * 1000.0 + diff)
		self.eq(d2.toString(), "2012-02-17 01:03:02", _hx_c._hx_AnonObject(fileName = "DateTools.unit.hx" ,lineNumber = 8 ,className = "unit.TestSpecification" ,methodName = "testDateTools_unit_hx" ))
		self.feq(_hx_c.Date.UTC(1982, 10, 10, 14, 2, 20), 405784940000., _hx_c._hx_AnonObject(fileName = "DateTools.unit.hx" ,lineNumber = 12 ,className = "unit.TestSpecification" ,methodName = "testDateTools_unit_hx" ))
	

	def testString_unit_hx(self):
		str = "foo"
		str2 = _hx_c.String(str)
		self.eq(str, str2, _hx_c._hx_AnonObject(fileName = "String.unit.hx" ,lineNumber = 4 ,className = "unit.TestSpecification" ,methodName = "testString_unit_hx" ))
		self.eq("foo".upper(), "FOO", _hx_c._hx_AnonObject(fileName = "String.unit.hx" ,lineNumber = 7 ,className = "unit.TestSpecification" ,methodName = "testString_unit_hx" ))
		self.eq("_bar".upper(), "_BAR", _hx_c._hx_AnonObject(fileName = "String.unit.hx" ,lineNumber = 8 ,className = "unit.TestSpecification" ,methodName = "testString_unit_hx" ))
		self.eq("123b".upper(), "123B", _hx_c._hx_AnonObject(fileName = "String.unit.hx" ,lineNumber = 9 ,className = "unit.TestSpecification" ,methodName = "testString_unit_hx" ))
		self.eq("".upper(), "", _hx_c._hx_AnonObject(fileName = "String.unit.hx" ,lineNumber = 10 ,className = "unit.TestSpecification" ,methodName = "testString_unit_hx" ))
		self.eq("A".upper(), "A", _hx_c._hx_AnonObject(fileName = "String.unit.hx" ,lineNumber = 11 ,className = "unit.TestSpecification" ,methodName = "testString_unit_hx" ))
		self.eq("FOO".lower(), "foo", _hx_c._hx_AnonObject(fileName = "String.unit.hx" ,lineNumber = 14 ,className = "unit.TestSpecification" ,methodName = "testString_unit_hx" ))
		self.eq("_BAR".lower(), "_bar", _hx_c._hx_AnonObject(fileName = "String.unit.hx" ,lineNumber = 15 ,className = "unit.TestSpecification" ,methodName = "testString_unit_hx" ))
		self.eq("123B".lower(), "123b", _hx_c._hx_AnonObject(fileName = "String.unit.hx" ,lineNumber = 16 ,className = "unit.TestSpecification" ,methodName = "testString_unit_hx" ))
		self.eq("".lower(), "", _hx_c._hx_AnonObject(fileName = "String.unit.hx" ,lineNumber = 17 ,className = "unit.TestSpecification" ,methodName = "testString_unit_hx" ))
		self.eq("a".lower(), "a", _hx_c._hx_AnonObject(fileName = "String.unit.hx" ,lineNumber = 18 ,className = "unit.TestSpecification" ,methodName = "testString_unit_hx" ))
		s = "foo1bar"
		self.eq("" if (0 < 0 or 0 >= _hx_builtin.len(s)) else s[0], "f", _hx_c._hx_AnonObject(fileName = "String.unit.hx" ,lineNumber = 22 ,className = "unit.TestSpecification" ,methodName = "testString_unit_hx" ))
		self.eq("" if (1 < 0 or 1 >= _hx_builtin.len(s)) else s[1], "o", _hx_c._hx_AnonObject(fileName = "String.unit.hx" ,lineNumber = 23 ,className = "unit.TestSpecification" ,methodName = "testString_unit_hx" ))
		self.eq("" if (2 < 0 or 2 >= _hx_builtin.len(s)) else s[2], "o", _hx_c._hx_AnonObject(fileName = "String.unit.hx" ,lineNumber = 24 ,className = "unit.TestSpecification" ,methodName = "testString_unit_hx" ))
		self.eq("" if (3 < 0 or 3 >= _hx_builtin.len(s)) else s[3], "1", _hx_c._hx_AnonObject(fileName = "String.unit.hx" ,lineNumber = 25 ,className = "unit.TestSpecification" ,methodName = "testString_unit_hx" ))
		self.eq("" if (4 < 0 or 4 >= _hx_builtin.len(s)) else s[4], "b", _hx_c._hx_AnonObject(fileName = "String.unit.hx" ,lineNumber = 26 ,className = "unit.TestSpecification" ,methodName = "testString_unit_hx" ))
		self.eq("" if (5 < 0 or 5 >= _hx_builtin.len(s)) else s[5], "a", _hx_c._hx_AnonObject(fileName = "String.unit.hx" ,lineNumber = 27 ,className = "unit.TestSpecification" ,methodName = "testString_unit_hx" ))
		self.eq("" if (6 < 0 or 6 >= _hx_builtin.len(s)) else s[6], "r", _hx_c._hx_AnonObject(fileName = "String.unit.hx" ,lineNumber = 28 ,className = "unit.TestSpecification" ,methodName = "testString_unit_hx" ))
		self.eq("" if (7 < 0 or 7 >= _hx_builtin.len(s)) else s[7], "", _hx_c._hx_AnonObject(fileName = "String.unit.hx" ,lineNumber = 29 ,className = "unit.TestSpecification" ,methodName = "testString_unit_hx" ))
		self.eq("" if (-1 < 0 or -1 >= _hx_builtin.len(s)) else s[-1], "", _hx_c._hx_AnonObject(fileName = "String.unit.hx" ,lineNumber = 30 ,className = "unit.TestSpecification" ,methodName = "testString_unit_hx" ))
		self.eq("" if (0 < 0 or 0 >= _hx_builtin.len("")) else ""[0], "", _hx_c._hx_AnonObject(fileName = "String.unit.hx" ,lineNumber = 31 ,className = "unit.TestSpecification" ,methodName = "testString_unit_hx" ))
		self.eq("" if (1 < 0 or 1 >= _hx_builtin.len("")) else ""[1], "", _hx_c._hx_AnonObject(fileName = "String.unit.hx" ,lineNumber = 32 ,className = "unit.TestSpecification" ,methodName = "testString_unit_hx" ))
		self.eq("" if (-1 < 0 or -1 >= _hx_builtin.len("")) else ""[-1], "", _hx_c._hx_AnonObject(fileName = "String.unit.hx" ,lineNumber = 33 ,className = "unit.TestSpecification" ,methodName = "testString_unit_hx" ))
		s1 = "foo1bar"
		self.eq(_hx_c.python_internal_StringImpl.charCodeAt(s1, 0), 102, _hx_c._hx_AnonObject(fileName = "String.unit.hx" ,lineNumber = 37 ,className = "unit.TestSpecification" ,methodName = "testString_unit_hx" ))
		self.eq(_hx_c.python_internal_StringImpl.charCodeAt(s1, 1), 111, _hx_c._hx_AnonObject(fileName = "String.unit.hx" ,lineNumber = 38 ,className = "unit.TestSpecification" ,methodName = "testString_unit_hx" ))
		self.eq(_hx_c.python_internal_StringImpl.charCodeAt(s1, 2), 111, _hx_c._hx_AnonObject(fileName = "String.unit.hx" ,lineNumber = 39 ,className = "unit.TestSpecification" ,methodName = "testString_unit_hx" ))
		self.eq(_hx_c.python_internal_StringImpl.charCodeAt(s1, 3), 49, _hx_c._hx_AnonObject(fileName = "String.unit.hx" ,lineNumber = 40 ,className = "unit.TestSpecification" ,methodName = "testString_unit_hx" ))
		self.eq(_hx_c.python_internal_StringImpl.charCodeAt(s1, 4), 98, _hx_c._hx_AnonObject(fileName = "String.unit.hx" ,lineNumber = 41 ,className = "unit.TestSpecification" ,methodName = "testString_unit_hx" ))
		self.eq(_hx_c.python_internal_StringImpl.charCodeAt(s1, 5), 97, _hx_c._hx_AnonObject(fileName = "String.unit.hx" ,lineNumber = 42 ,className = "unit.TestSpecification" ,methodName = "testString_unit_hx" ))
		self.eq(_hx_c.python_internal_StringImpl.charCodeAt(s1, 6), 114, _hx_c._hx_AnonObject(fileName = "String.unit.hx" ,lineNumber = 43 ,className = "unit.TestSpecification" ,methodName = "testString_unit_hx" ))
		self.eq(_hx_c.python_internal_StringImpl.charCodeAt(s1, 7), None, _hx_c._hx_AnonObject(fileName = "String.unit.hx" ,lineNumber = 44 ,className = "unit.TestSpecification" ,methodName = "testString_unit_hx" ))
		self.eq(_hx_c.python_internal_StringImpl.charCodeAt(s1, -1), None, _hx_c._hx_AnonObject(fileName = "String.unit.hx" ,lineNumber = 45 ,className = "unit.TestSpecification" ,methodName = "testString_unit_hx" ))
		self.eq(102, 102, _hx_c._hx_AnonObject(fileName = "String.unit.hx" ,lineNumber = 48 ,className = "unit.TestSpecification" ,methodName = "testString_unit_hx" ))
		self.eq(111, 111, _hx_c._hx_AnonObject(fileName = "String.unit.hx" ,lineNumber = 49 ,className = "unit.TestSpecification" ,methodName = "testString_unit_hx" ))
		self.eq(49, 49, _hx_c._hx_AnonObject(fileName = "String.unit.hx" ,lineNumber = 50 ,className = "unit.TestSpecification" ,methodName = "testString_unit_hx" ))
		self.eq(98, 98, _hx_c._hx_AnonObject(fileName = "String.unit.hx" ,lineNumber = 51 ,className = "unit.TestSpecification" ,methodName = "testString_unit_hx" ))
		self.eq(97, 97, _hx_c._hx_AnonObject(fileName = "String.unit.hx" ,lineNumber = 52 ,className = "unit.TestSpecification" ,methodName = "testString_unit_hx" ))
		self.eq(114, 114, _hx_c._hx_AnonObject(fileName = "String.unit.hx" ,lineNumber = 53 ,className = "unit.TestSpecification" ,methodName = "testString_unit_hx" ))
		s2 = "foo1bar"
		self.eq(s2.find("f") if (None is None) else s2.find("f", None), 0, _hx_c._hx_AnonObject(fileName = "String.unit.hx" ,lineNumber = 57 ,className = "unit.TestSpecification" ,methodName = "testString_unit_hx" ))
		self.eq(s2.find("o") if (None is None) else s2.find("o", None), 1, _hx_c._hx_AnonObject(fileName = "String.unit.hx" ,lineNumber = 58 ,className = "unit.TestSpecification" ,methodName = "testString_unit_hx" ))
		self.eq(s2.find("1") if (None is None) else s2.find("1", None), 3, _hx_c._hx_AnonObject(fileName = "String.unit.hx" ,lineNumber = 59 ,className = "unit.TestSpecification" ,methodName = "testString_unit_hx" ))
		self.eq(s2.find("b") if (None is None) else s2.find("b", None), 4, _hx_c._hx_AnonObject(fileName = "String.unit.hx" ,lineNumber = 60 ,className = "unit.TestSpecification" ,methodName = "testString_unit_hx" ))
		self.eq(s2.find("a") if (None is None) else s2.find("a", None), 5, _hx_c._hx_AnonObject(fileName = "String.unit.hx" ,lineNumber = 61 ,className = "unit.TestSpecification" ,methodName = "testString_unit_hx" ))
		self.eq(s2.find("r") if (None is None) else s2.find("r", None), 6, _hx_c._hx_AnonObject(fileName = "String.unit.hx" ,lineNumber = 62 ,className = "unit.TestSpecification" ,methodName = "testString_unit_hx" ))
		self.eq(s2.find("z") if (None is None) else s2.find("z", None), -1, _hx_c._hx_AnonObject(fileName = "String.unit.hx" ,lineNumber = 63 ,className = "unit.TestSpecification" ,methodName = "testString_unit_hx" ))
		self.eq(s2.find("foo") if (None is None) else s2.find("foo", None), 0, _hx_c._hx_AnonObject(fileName = "String.unit.hx" ,lineNumber = 67 ,className = "unit.TestSpecification" ,methodName = "testString_unit_hx" ))
		self.eq(s2.find("oo") if (None is None) else s2.find("oo", None), 1, _hx_c._hx_AnonObject(fileName = "String.unit.hx" ,lineNumber = 68 ,className = "unit.TestSpecification" ,methodName = "testString_unit_hx" ))
		self.eq(s2.find("o") if (1 is None) else s2.find("o", 1), 1, _hx_c._hx_AnonObject(fileName = "String.unit.hx" ,lineNumber = 72 ,className = "unit.TestSpecification" ,methodName = "testString_unit_hx" ))
		self.eq(s2.find("o") if (2 is None) else s2.find("o", 2), 2, _hx_c._hx_AnonObject(fileName = "String.unit.hx" ,lineNumber = 73 ,className = "unit.TestSpecification" ,methodName = "testString_unit_hx" ))
		self.eq(s2.find("o") if (3 is None) else s2.find("o", 3), -1, _hx_c._hx_AnonObject(fileName = "String.unit.hx" ,lineNumber = 74 ,className = "unit.TestSpecification" ,methodName = "testString_unit_hx" ))
		s3 = "foofoofoobarbar"
		def _hx_local_1():
			def _hx_local_0():
				i = s3.rfind("r", 0, None + 1)
				startLeft = None
				if i == -1:
					b = None + 1 - _hx_builtin.len("r")
					if _hx_math.isnan(0):
						startLeft = 0
					elif _hx_math.isnan(b):
						startLeft = b
					else:
						startLeft = _hx_builtin.max(0, b)
				
				else:
					startLeft = i + 1
				check = s3.find("r", startLeft, _hx_builtin.len(s3))
				return check if (check > i and check <= None) else i
			
			return s3.rfind("r", 0, _hx_builtin.len(s3)) if None is None else _hx_local_0()
		
		self.eq(_hx_local_1(), 14, _hx_c._hx_AnonObject(fileName = "String.unit.hx" ,lineNumber = 78 ,className = "unit.TestSpecification" ,methodName = "testString_unit_hx" ))
		def _hx_local_3():
			def _hx_local_2():
				i1 = s3.rfind("a", 0, None + 1)
				startLeft1 = None
				if i1 == -1:
					b1 = None + 1 - _hx_builtin.len("a")
					if _hx_math.isnan(0):
						startLeft1 = 0
					elif _hx_math.isnan(b1):
						startLeft1 = b1
					else:
						startLeft1 = _hx_builtin.max(0, b1)
				
				else:
					startLeft1 = i1 + 1
				check1 = s3.find("a", startLeft1, _hx_builtin.len(s3))
				return check1 if (check1 > i1 and check1 <= None) else i1
			
			return s3.rfind("a", 0, _hx_builtin.len(s3)) if None is None else _hx_local_2()
		
		self.eq(_hx_local_3(), 13, _hx_c._hx_AnonObject(fileName = "String.unit.hx" ,lineNumber = 79 ,className = "unit.TestSpecification" ,methodName = "testString_unit_hx" ))
		def _hx_local_5():
			def _hx_local_4():
				i2 = s3.rfind("b", 0, None + 1)
				startLeft2 = None
				if i2 == -1:
					b2 = None + 1 - _hx_builtin.len("b")
					if _hx_math.isnan(0):
						startLeft2 = 0
					elif _hx_math.isnan(b2):
						startLeft2 = b2
					else:
						startLeft2 = _hx_builtin.max(0, b2)
				
				else:
					startLeft2 = i2 + 1
				check2 = s3.find("b", startLeft2, _hx_builtin.len(s3))
				return check2 if (check2 > i2 and check2 <= None) else i2
			
			return s3.rfind("b", 0, _hx_builtin.len(s3)) if None is None else _hx_local_4()
		
		self.eq(_hx_local_5(), 12, _hx_c._hx_AnonObject(fileName = "String.unit.hx" ,lineNumber = 80 ,className = "unit.TestSpecification" ,methodName = "testString_unit_hx" ))
		def _hx_local_7():
			def _hx_local_6():
				i3 = s3.rfind("bar", 0, None + 1)
				startLeft3 = None
				if i3 == -1:
					b3 = None + 1 - _hx_builtin.len("bar")
					if _hx_math.isnan(0):
						startLeft3 = 0
					elif _hx_math.isnan(b3):
						startLeft3 = b3
					else:
						startLeft3 = _hx_builtin.max(0, b3)
				
				else:
					startLeft3 = i3 + 1
				check3 = s3.find("bar", startLeft3, _hx_builtin.len(s3))
				return check3 if (check3 > i3 and check3 <= None) else i3
			
			return s3.rfind("bar", 0, _hx_builtin.len(s3)) if None is None else _hx_local_6()
		
		self.eq(_hx_local_7(), 12, _hx_c._hx_AnonObject(fileName = "String.unit.hx" ,lineNumber = 81 ,className = "unit.TestSpecification" ,methodName = "testString_unit_hx" ))
		def _hx_local_9():
			def _hx_local_8():
				i4 = s3.rfind("foo", 0, None + 1)
				startLeft4 = None
				if i4 == -1:
					b4 = None + 1 - _hx_builtin.len("foo")
					if _hx_math.isnan(0):
						startLeft4 = 0
					elif _hx_math.isnan(b4):
						startLeft4 = b4
					else:
						startLeft4 = _hx_builtin.max(0, b4)
				
				else:
					startLeft4 = i4 + 1
				check4 = s3.find("foo", startLeft4, _hx_builtin.len(s3))
				return check4 if (check4 > i4 and check4 <= None) else i4
			
			return s3.rfind("foo", 0, _hx_builtin.len(s3)) if None is None else _hx_local_8()
		
		self.eq(_hx_local_9(), 6, _hx_c._hx_AnonObject(fileName = "String.unit.hx" ,lineNumber = 82 ,className = "unit.TestSpecification" ,methodName = "testString_unit_hx" ))
		def _hx_local_11():
			def _hx_local_10():
				i5 = s3.rfind("foofoo", 0, None + 1)
				startLeft5 = None
				if i5 == -1:
					b5 = None + 1 - _hx_builtin.len("foofoo")
					if _hx_math.isnan(0):
						startLeft5 = 0
					elif _hx_math.isnan(b5):
						startLeft5 = b5
					else:
						startLeft5 = _hx_builtin.max(0, b5)
				
				else:
					startLeft5 = i5 + 1
				check5 = s3.find("foofoo", startLeft5, _hx_builtin.len(s3))
				return check5 if (check5 > i5 and check5 <= None) else i5
			
			return s3.rfind("foofoo", 0, _hx_builtin.len(s3)) if None is None else _hx_local_10()
		
		self.eq(_hx_local_11(), 3, _hx_c._hx_AnonObject(fileName = "String.unit.hx" ,lineNumber = 83 ,className = "unit.TestSpecification" ,methodName = "testString_unit_hx" ))
		def _hx_local_13():
			def _hx_local_12():
				i6 = s3.rfind("f", 0, None + 1)
				startLeft6 = None
				if i6 == -1:
					b6 = None + 1 - _hx_builtin.len("f")
					if _hx_math.isnan(0):
						startLeft6 = 0
					elif _hx_math.isnan(b6):
						startLeft6 = b6
					else:
						startLeft6 = _hx_builtin.max(0, b6)
				
				else:
					startLeft6 = i6 + 1
				check6 = s3.find("f", startLeft6, _hx_builtin.len(s3))
				return check6 if (check6 > i6 and check6 <= None) else i6
			
			return s3.rfind("f", 0, _hx_builtin.len(s3)) if None is None else _hx_local_12()
		
		self.eq(_hx_local_13(), 6, _hx_c._hx_AnonObject(fileName = "String.unit.hx" ,lineNumber = 84 ,className = "unit.TestSpecification" ,methodName = "testString_unit_hx" ))
		def _hx_local_15():
			def _hx_local_14():
				i7 = s3.rfind("barb", 0, None + 1)
				startLeft7 = None
				if i7 == -1:
					b7 = None + 1 - _hx_builtin.len("barb")
					if _hx_math.isnan(0):
						startLeft7 = 0
					elif _hx_math.isnan(b7):
						startLeft7 = b7
					else:
						startLeft7 = _hx_builtin.max(0, b7)
				
				else:
					startLeft7 = i7 + 1
				check7 = s3.find("barb", startLeft7, _hx_builtin.len(s3))
				return check7 if (check7 > i7 and check7 <= None) else i7
			
			return s3.rfind("barb", 0, _hx_builtin.len(s3)) if None is None else _hx_local_14()
		
		self.eq(_hx_local_15(), 9, _hx_c._hx_AnonObject(fileName = "String.unit.hx" ,lineNumber = 85 ,className = "unit.TestSpecification" ,methodName = "testString_unit_hx" ))
		def _hx_local_17():
			def _hx_local_16():
				i8 = s3.rfind("z", 0, None + 1)
				startLeft8 = None
				if i8 == -1:
					b8 = None + 1 - _hx_builtin.len("z")
					if _hx_math.isnan(0):
						startLeft8 = 0
					elif _hx_math.isnan(b8):
						startLeft8 = b8
					else:
						startLeft8 = _hx_builtin.max(0, b8)
				
				else:
					startLeft8 = i8 + 1
				check8 = s3.find("z", startLeft8, _hx_builtin.len(s3))
				return check8 if (check8 > i8 and check8 <= None) else i8
			
			return s3.rfind("z", 0, _hx_builtin.len(s3)) if None is None else _hx_local_16()
		
		self.eq(_hx_local_17(), -1, _hx_c._hx_AnonObject(fileName = "String.unit.hx" ,lineNumber = 86 ,className = "unit.TestSpecification" ,methodName = "testString_unit_hx" ))
		def _hx_local_19():
			def _hx_local_18():
				i9 = s3.rfind("r", 0, 14 + 1)
				startLeft9 = None
				if i9 == -1:
					b9 = 14 + 1 - _hx_builtin.len("r")
					if _hx_math.isnan(0):
						startLeft9 = 0
					elif _hx_math.isnan(b9):
						startLeft9 = b9
					else:
						startLeft9 = _hx_builtin.max(0, b9)
				
				else:
					startLeft9 = i9 + 1
				check9 = s3.find("r", startLeft9, _hx_builtin.len(s3))
				return check9 if (check9 > i9 and check9 <= 14) else i9
			
			return s3.rfind("r", 0, _hx_builtin.len(s3)) if 14 is None else _hx_local_18()
		
		self.eq(_hx_local_19(), 14, _hx_c._hx_AnonObject(fileName = "String.unit.hx" ,lineNumber = 90 ,className = "unit.TestSpecification" ,methodName = "testString_unit_hx" ))
		def _hx_local_21():
			def _hx_local_20():
				i10 = s3.rfind("r", 0, 13 + 1)
				startLeft10 = None
				if i10 == -1:
					b10 = 13 + 1 - _hx_builtin.len("r")
					if _hx_math.isnan(0):
						startLeft10 = 0
					elif _hx_math.isnan(b10):
						startLeft10 = b10
					else:
						startLeft10 = _hx_builtin.max(0, b10)
				
				else:
					startLeft10 = i10 + 1
				check10 = s3.find("r", startLeft10, _hx_builtin.len(s3))
				return check10 if (check10 > i10 and check10 <= 13) else i10
			
			return s3.rfind("r", 0, _hx_builtin.len(s3)) if 13 is None else _hx_local_20()
		
		self.eq(_hx_local_21(), 11, _hx_c._hx_AnonObject(fileName = "String.unit.hx" ,lineNumber = 91 ,className = "unit.TestSpecification" ,methodName = "testString_unit_hx" ))
		def _hx_local_23():
			def _hx_local_22():
				i11 = s3.rfind("a", 0, 14 + 1)
				startLeft11 = None
				if i11 == -1:
					b11 = 14 + 1 - _hx_builtin.len("a")
					if _hx_math.isnan(0):
						startLeft11 = 0
					elif _hx_math.isnan(b11):
						startLeft11 = b11
					else:
						startLeft11 = _hx_builtin.max(0, b11)
				
				else:
					startLeft11 = i11 + 1
				check11 = s3.find("a", startLeft11, _hx_builtin.len(s3))
				return check11 if (check11 > i11 and check11 <= 14) else i11
			
			return s3.rfind("a", 0, _hx_builtin.len(s3)) if 14 is None else _hx_local_22()
		
		self.eq(_hx_local_23(), 13, _hx_c._hx_AnonObject(fileName = "String.unit.hx" ,lineNumber = 92 ,className = "unit.TestSpecification" ,methodName = "testString_unit_hx" ))
		def _hx_local_25():
			def _hx_local_24():
				i12 = s3.rfind("a", 0, 13 + 1)
				startLeft12 = None
				if i12 == -1:
					b12 = 13 + 1 - _hx_builtin.len("a")
					if _hx_math.isnan(0):
						startLeft12 = 0
					elif _hx_math.isnan(b12):
						startLeft12 = b12
					else:
						startLeft12 = _hx_builtin.max(0, b12)
				
				else:
					startLeft12 = i12 + 1
				check12 = s3.find("a", startLeft12, _hx_builtin.len(s3))
				return check12 if (check12 > i12 and check12 <= 13) else i12
			
			return s3.rfind("a", 0, _hx_builtin.len(s3)) if 13 is None else _hx_local_24()
		
		self.eq(_hx_local_25(), 13, _hx_c._hx_AnonObject(fileName = "String.unit.hx" ,lineNumber = 93 ,className = "unit.TestSpecification" ,methodName = "testString_unit_hx" ))
		def _hx_local_27():
			def _hx_local_26():
				i13 = s3.rfind("a", 0, 12 + 1)
				startLeft13 = None
				if i13 == -1:
					b13 = 12 + 1 - _hx_builtin.len("a")
					if _hx_math.isnan(0):
						startLeft13 = 0
					elif _hx_math.isnan(b13):
						startLeft13 = b13
					else:
						startLeft13 = _hx_builtin.max(0, b13)
				
				else:
					startLeft13 = i13 + 1
				check13 = s3.find("a", startLeft13, _hx_builtin.len(s3))
				return check13 if (check13 > i13 and check13 <= 12) else i13
			
			return s3.rfind("a", 0, _hx_builtin.len(s3)) if 12 is None else _hx_local_26()
		
		self.eq(_hx_local_27(), 10, _hx_c._hx_AnonObject(fileName = "String.unit.hx" ,lineNumber = 94 ,className = "unit.TestSpecification" ,methodName = "testString_unit_hx" ))
		def _hx_local_29():
			def _hx_local_28():
				i14 = s3.rfind("bar", 0, 12 + 1)
				startLeft14 = None
				if i14 == -1:
					b14 = 12 + 1 - _hx_builtin.len("bar")
					if _hx_math.isnan(0):
						startLeft14 = 0
					elif _hx_math.isnan(b14):
						startLeft14 = b14
					else:
						startLeft14 = _hx_builtin.max(0, b14)
				
				else:
					startLeft14 = i14 + 1
				check14 = s3.find("bar", startLeft14, _hx_builtin.len(s3))
				return check14 if (check14 > i14 and check14 <= 12) else i14
			
			return s3.rfind("bar", 0, _hx_builtin.len(s3)) if 12 is None else _hx_local_28()
		
		self.eq(_hx_local_29(), 12, _hx_c._hx_AnonObject(fileName = "String.unit.hx" ,lineNumber = 95 ,className = "unit.TestSpecification" ,methodName = "testString_unit_hx" ))
		def _hx_local_31():
			def _hx_local_30():
				i15 = s3.rfind("bar", 0, 11 + 1)
				startLeft15 = None
				if i15 == -1:
					b15 = 11 + 1 - _hx_builtin.len("bar")
					if _hx_math.isnan(0):
						startLeft15 = 0
					elif _hx_math.isnan(b15):
						startLeft15 = b15
					else:
						startLeft15 = _hx_builtin.max(0, b15)
				
				else:
					startLeft15 = i15 + 1
				check15 = s3.find("bar", startLeft15, _hx_builtin.len(s3))
				return check15 if (check15 > i15 and check15 <= 11) else i15
			
			return s3.rfind("bar", 0, _hx_builtin.len(s3)) if 11 is None else _hx_local_30()
		
		self.eq(_hx_local_31(), 9, _hx_c._hx_AnonObject(fileName = "String.unit.hx" ,lineNumber = 96 ,className = "unit.TestSpecification" ,methodName = "testString_unit_hx" ))
		def _hx_local_33():
			def _hx_local_32():
				i16 = s3.rfind("bar", 0, 9 + 1)
				startLeft16 = None
				if i16 == -1:
					b16 = 9 + 1 - _hx_builtin.len("bar")
					if _hx_math.isnan(0):
						startLeft16 = 0
					elif _hx_math.isnan(b16):
						startLeft16 = b16
					else:
						startLeft16 = _hx_builtin.max(0, b16)
				
				else:
					startLeft16 = i16 + 1
				check16 = s3.find("bar", startLeft16, _hx_builtin.len(s3))
				return check16 if (check16 > i16 and check16 <= 9) else i16
			
			return s3.rfind("bar", 0, _hx_builtin.len(s3)) if 9 is None else _hx_local_32()
		
		self.eq(_hx_local_33(), 9, _hx_c._hx_AnonObject(fileName = "String.unit.hx" ,lineNumber = 97 ,className = "unit.TestSpecification" ,methodName = "testString_unit_hx" ))
		def _hx_local_35():
			def _hx_local_34():
				i17 = s3.rfind("bar", 0, 8 + 1)
				startLeft17 = None
				if i17 == -1:
					b17 = 8 + 1 - _hx_builtin.len("bar")
					if _hx_math.isnan(0):
						startLeft17 = 0
					elif _hx_math.isnan(b17):
						startLeft17 = b17
					else:
						startLeft17 = _hx_builtin.max(0, b17)
				
				else:
					startLeft17 = i17 + 1
				check17 = s3.find("bar", startLeft17, _hx_builtin.len(s3))
				return check17 if (check17 > i17 and check17 <= 8) else i17
			
			return s3.rfind("bar", 0, _hx_builtin.len(s3)) if 8 is None else _hx_local_34()
		
		self.eq(_hx_local_35(), -1, _hx_c._hx_AnonObject(fileName = "String.unit.hx" ,lineNumber = 98 ,className = "unit.TestSpecification" ,methodName = "testString_unit_hx" ))
		s4 = "xfooxfooxxbarxbarxx"
		self.eq(_hx_array_get(_hx_c.python_internal_StringImpl.split(s4, "x"),0), "", _hx_c._hx_AnonObject(fileName = "String.unit.hx" ,lineNumber = 102 ,className = "unit.TestSpecification" ,methodName = "testString_unit_hx" ))
		self.eq(_hx_array_get(_hx_c.python_internal_StringImpl.split(s4, "x"),1), "foo", _hx_c._hx_AnonObject(fileName = "String.unit.hx" ,lineNumber = 102 ,className = "unit.TestSpecification" ,methodName = "testString_unit_hx" ))
		self.eq(_hx_array_get(_hx_c.python_internal_StringImpl.split(s4, "x"),2), "foo", _hx_c._hx_AnonObject(fileName = "String.unit.hx" ,lineNumber = 102 ,className = "unit.TestSpecification" ,methodName = "testString_unit_hx" ))
		self.eq(_hx_array_get(_hx_c.python_internal_StringImpl.split(s4, "x"),3), "", _hx_c._hx_AnonObject(fileName = "String.unit.hx" ,lineNumber = 102 ,className = "unit.TestSpecification" ,methodName = "testString_unit_hx" ))
		self.eq(_hx_array_get(_hx_c.python_internal_StringImpl.split(s4, "x"),4), "bar", _hx_c._hx_AnonObject(fileName = "String.unit.hx" ,lineNumber = 102 ,className = "unit.TestSpecification" ,methodName = "testString_unit_hx" ))
		self.eq(_hx_array_get(_hx_c.python_internal_StringImpl.split(s4, "x"),5), "bar", _hx_c._hx_AnonObject(fileName = "String.unit.hx" ,lineNumber = 102 ,className = "unit.TestSpecification" ,methodName = "testString_unit_hx" ))
		self.eq(_hx_array_get(_hx_c.python_internal_StringImpl.split(s4, "x"),6), "", _hx_c._hx_AnonObject(fileName = "String.unit.hx" ,lineNumber = 102 ,className = "unit.TestSpecification" ,methodName = "testString_unit_hx" ))
		self.eq(_hx_array_get(_hx_c.python_internal_StringImpl.split(s4, "x"),7), "", _hx_c._hx_AnonObject(fileName = "String.unit.hx" ,lineNumber = 102 ,className = "unit.TestSpecification" ,methodName = "testString_unit_hx" ))
		
		self.eq(_hx_array_get(_hx_c.python_internal_StringImpl.split(s4, "xx"),0), "xfooxfoo", _hx_c._hx_AnonObject(fileName = "String.unit.hx" ,lineNumber = 103 ,className = "unit.TestSpecification" ,methodName = "testString_unit_hx" ))
		self.eq(_hx_array_get(_hx_c.python_internal_StringImpl.split(s4, "xx"),1), "barxbar", _hx_c._hx_AnonObject(fileName = "String.unit.hx" ,lineNumber = 103 ,className = "unit.TestSpecification" ,methodName = "testString_unit_hx" ))
		self.eq(_hx_array_get(_hx_c.python_internal_StringImpl.split(s4, "xx"),2), "", _hx_c._hx_AnonObject(fileName = "String.unit.hx" ,lineNumber = 103 ,className = "unit.TestSpecification" ,methodName = "testString_unit_hx" ))
		
		self.eq(_hx_array_get(_hx_c.python_internal_StringImpl.split(s4, ""),0), "x", _hx_c._hx_AnonObject(fileName = "String.unit.hx" ,lineNumber = 104 ,className = "unit.TestSpecification" ,methodName = "testString_unit_hx" ))
		self.eq(_hx_array_get(_hx_c.python_internal_StringImpl.split(s4, ""),1), "f", _hx_c._hx_AnonObject(fileName = "String.unit.hx" ,lineNumber = 104 ,className = "unit.TestSpecification" ,methodName = "testString_unit_hx" ))
		self.eq(_hx_array_get(_hx_c.python_internal_StringImpl.split(s4, ""),2), "o", _hx_c._hx_AnonObject(fileName = "String.unit.hx" ,lineNumber = 104 ,className = "unit.TestSpecification" ,methodName = "testString_unit_hx" ))
		self.eq(_hx_array_get(_hx_c.python_internal_StringImpl.split(s4, ""),3), "o", _hx_c._hx_AnonObject(fileName = "String.unit.hx" ,lineNumber = 104 ,className = "unit.TestSpecification" ,methodName = "testString_unit_hx" ))
		self.eq(_hx_array_get(_hx_c.python_internal_StringImpl.split(s4, ""),4), "x", _hx_c._hx_AnonObject(fileName = "String.unit.hx" ,lineNumber = 104 ,className = "unit.TestSpecification" ,methodName = "testString_unit_hx" ))
		self.eq(_hx_array_get(_hx_c.python_internal_StringImpl.split(s4, ""),5), "f", _hx_c._hx_AnonObject(fileName = "String.unit.hx" ,lineNumber = 104 ,className = "unit.TestSpecification" ,methodName = "testString_unit_hx" ))
		self.eq(_hx_array_get(_hx_c.python_internal_StringImpl.split(s4, ""),6), "o", _hx_c._hx_AnonObject(fileName = "String.unit.hx" ,lineNumber = 104 ,className = "unit.TestSpecification" ,methodName = "testString_unit_hx" ))
		self.eq(_hx_array_get(_hx_c.python_internal_StringImpl.split(s4, ""),7), "o", _hx_c._hx_AnonObject(fileName = "String.unit.hx" ,lineNumber = 104 ,className = "unit.TestSpecification" ,methodName = "testString_unit_hx" ))
		self.eq(_hx_array_get(_hx_c.python_internal_StringImpl.split(s4, ""),8), "x", _hx_c._hx_AnonObject(fileName = "String.unit.hx" ,lineNumber = 104 ,className = "unit.TestSpecification" ,methodName = "testString_unit_hx" ))
		self.eq(_hx_array_get(_hx_c.python_internal_StringImpl.split(s4, ""),9), "x", _hx_c._hx_AnonObject(fileName = "String.unit.hx" ,lineNumber = 104 ,className = "unit.TestSpecification" ,methodName = "testString_unit_hx" ))
		self.eq(_hx_array_get(_hx_c.python_internal_StringImpl.split(s4, ""),10), "b", _hx_c._hx_AnonObject(fileName = "String.unit.hx" ,lineNumber = 104 ,className = "unit.TestSpecification" ,methodName = "testString_unit_hx" ))
		self.eq(_hx_array_get(_hx_c.python_internal_StringImpl.split(s4, ""),11), "a", _hx_c._hx_AnonObject(fileName = "String.unit.hx" ,lineNumber = 104 ,className = "unit.TestSpecification" ,methodName = "testString_unit_hx" ))
		self.eq(_hx_array_get(_hx_c.python_internal_StringImpl.split(s4, ""),12), "r", _hx_c._hx_AnonObject(fileName = "String.unit.hx" ,lineNumber = 104 ,className = "unit.TestSpecification" ,methodName = "testString_unit_hx" ))
		self.eq(_hx_array_get(_hx_c.python_internal_StringImpl.split(s4, ""),13), "x", _hx_c._hx_AnonObject(fileName = "String.unit.hx" ,lineNumber = 104 ,className = "unit.TestSpecification" ,methodName = "testString_unit_hx" ))
		self.eq(_hx_array_get(_hx_c.python_internal_StringImpl.split(s4, ""),14), "b", _hx_c._hx_AnonObject(fileName = "String.unit.hx" ,lineNumber = 104 ,className = "unit.TestSpecification" ,methodName = "testString_unit_hx" ))
		self.eq(_hx_array_get(_hx_c.python_internal_StringImpl.split(s4, ""),15), "a", _hx_c._hx_AnonObject(fileName = "String.unit.hx" ,lineNumber = 104 ,className = "unit.TestSpecification" ,methodName = "testString_unit_hx" ))
		self.eq(_hx_array_get(_hx_c.python_internal_StringImpl.split(s4, ""),16), "r", _hx_c._hx_AnonObject(fileName = "String.unit.hx" ,lineNumber = 104 ,className = "unit.TestSpecification" ,methodName = "testString_unit_hx" ))
		self.eq(_hx_array_get(_hx_c.python_internal_StringImpl.split(s4, ""),17), "x", _hx_c._hx_AnonObject(fileName = "String.unit.hx" ,lineNumber = 104 ,className = "unit.TestSpecification" ,methodName = "testString_unit_hx" ))
		self.eq(_hx_array_get(_hx_c.python_internal_StringImpl.split(s4, ""),18), "x", _hx_c._hx_AnonObject(fileName = "String.unit.hx" ,lineNumber = 104 ,className = "unit.TestSpecification" ,methodName = "testString_unit_hx" ))
		
		self.eq(_hx_array_get(_hx_c.python_internal_StringImpl.split(s4, "z"),0), "xfooxfooxxbarxbarxx", _hx_c._hx_AnonObject(fileName = "String.unit.hx" ,lineNumber = 105 ,className = "unit.TestSpecification" ,methodName = "testString_unit_hx" ))
		s5 = "xfooxfooxxbarxbarxx"
		self.eq(_hx_c.python_Tools.substr(s5, 0, None), "xfooxfooxxbarxbarxx", _hx_c._hx_AnonObject(fileName = "String.unit.hx" ,lineNumber = 109 ,className = "unit.TestSpecification" ,methodName = "testString_unit_hx" ))
		self.eq(_hx_c.python_Tools.substr(s5, 1, None), "fooxfooxxbarxbarxx", _hx_c._hx_AnonObject(fileName = "String.unit.hx" ,lineNumber = 110 ,className = "unit.TestSpecification" ,methodName = "testString_unit_hx" ))
		self.eq(_hx_c.python_Tools.substr(s5, 19, None), "", _hx_c._hx_AnonObject(fileName = "String.unit.hx" ,lineNumber = 111 ,className = "unit.TestSpecification" ,methodName = "testString_unit_hx" ))
		self.eq(_hx_c.python_Tools.substr(s5, 18, None), "x", _hx_c._hx_AnonObject(fileName = "String.unit.hx" ,lineNumber = 112 ,className = "unit.TestSpecification" ,methodName = "testString_unit_hx" ))
		self.eq(_hx_c.python_Tools.substr(s5, 17, None), "xx", _hx_c._hx_AnonObject(fileName = "String.unit.hx" ,lineNumber = 113 ,className = "unit.TestSpecification" ,methodName = "testString_unit_hx" ))
		self.eq(_hx_c.python_Tools.substr(s5, -1, None), "x", _hx_c._hx_AnonObject(fileName = "String.unit.hx" ,lineNumber = 114 ,className = "unit.TestSpecification" ,methodName = "testString_unit_hx" ))
		self.eq(_hx_c.python_Tools.substr(s5, -2, None), "xx", _hx_c._hx_AnonObject(fileName = "String.unit.hx" ,lineNumber = 115 ,className = "unit.TestSpecification" ,methodName = "testString_unit_hx" ))
		self.eq(_hx_c.python_Tools.substr(s5, -18, None), "fooxfooxxbarxbarxx", _hx_c._hx_AnonObject(fileName = "String.unit.hx" ,lineNumber = 116 ,className = "unit.TestSpecification" ,methodName = "testString_unit_hx" ))
		self.eq(_hx_c.python_Tools.substr(s5, -19, None), "xfooxfooxxbarxbarxx", _hx_c._hx_AnonObject(fileName = "String.unit.hx" ,lineNumber = 117 ,className = "unit.TestSpecification" ,methodName = "testString_unit_hx" ))
		self.eq(_hx_c.python_Tools.substr(s5, -100, None), "xfooxfooxxbarxbarxx", _hx_c._hx_AnonObject(fileName = "String.unit.hx" ,lineNumber = 118 ,className = "unit.TestSpecification" ,methodName = "testString_unit_hx" ))
		self.eq(_hx_c.python_Tools.substr(s5, 0, 0), "", _hx_c._hx_AnonObject(fileName = "String.unit.hx" ,lineNumber = 119 ,className = "unit.TestSpecification" ,methodName = "testString_unit_hx" ))
		self.eq(_hx_c.python_Tools.substr(s5, 0, 1), "x", _hx_c._hx_AnonObject(fileName = "String.unit.hx" ,lineNumber = 120 ,className = "unit.TestSpecification" ,methodName = "testString_unit_hx" ))
		self.eq(_hx_c.python_Tools.substr(s5, 0, 2), "xf", _hx_c._hx_AnonObject(fileName = "String.unit.hx" ,lineNumber = 121 ,className = "unit.TestSpecification" ,methodName = "testString_unit_hx" ))
		self.eq(_hx_c.python_Tools.substr(s5, 0, 100), "xfooxfooxxbarxbarxx", _hx_c._hx_AnonObject(fileName = "String.unit.hx" ,lineNumber = 122 ,className = "unit.TestSpecification" ,methodName = "testString_unit_hx" ))
		self.eq(_hx_c.python_Tools.substr(s5, 0, -1), "xfooxfooxxbarxbarx", _hx_c._hx_AnonObject(fileName = "String.unit.hx" ,lineNumber = 123 ,className = "unit.TestSpecification" ,methodName = "testString_unit_hx" ))
		self.eq(_hx_c.python_Tools.substr(s5, 0, -2), "xfooxfooxxbarxbar", _hx_c._hx_AnonObject(fileName = "String.unit.hx" ,lineNumber = 124 ,className = "unit.TestSpecification" ,methodName = "testString_unit_hx" ))
		self.eq(_hx_c.python_Tools.substr(s5, 0, -100), "", _hx_c._hx_AnonObject(fileName = "String.unit.hx" ,lineNumber = 127 ,className = "unit.TestSpecification" ,methodName = "testString_unit_hx" ))
		s6 = "xfooxfooxxbarxbarxx"
		self.eq(_hx_c.python_Tools.substring(s6, 0, 0), "", _hx_c._hx_AnonObject(fileName = "String.unit.hx" ,lineNumber = 131 ,className = "unit.TestSpecification" ,methodName = "testString_unit_hx" ))
		self.eq(_hx_c.python_Tools.substring(s6, 0, 1), "x", _hx_c._hx_AnonObject(fileName = "String.unit.hx" ,lineNumber = 132 ,className = "unit.TestSpecification" ,methodName = "testString_unit_hx" ))
		self.eq(_hx_c.python_Tools.substring(s6, 1, 0), "x", _hx_c._hx_AnonObject(fileName = "String.unit.hx" ,lineNumber = 133 ,className = "unit.TestSpecification" ,methodName = "testString_unit_hx" ))
		self.eq(_hx_c.python_Tools.substring(s6, 0, 2), "xf", _hx_c._hx_AnonObject(fileName = "String.unit.hx" ,lineNumber = 134 ,className = "unit.TestSpecification" ,methodName = "testString_unit_hx" ))
		self.eq(_hx_c.python_Tools.substring(s6, 2, 0), "xf", _hx_c._hx_AnonObject(fileName = "String.unit.hx" ,lineNumber = 135 ,className = "unit.TestSpecification" ,methodName = "testString_unit_hx" ))
		self.eq(_hx_c.python_Tools.substring(s6, -1, 0), "", _hx_c._hx_AnonObject(fileName = "String.unit.hx" ,lineNumber = 136 ,className = "unit.TestSpecification" ,methodName = "testString_unit_hx" ))
		self.eq(_hx_c.python_Tools.substring(s6, 0, -1), "", _hx_c._hx_AnonObject(fileName = "String.unit.hx" ,lineNumber = 137 ,className = "unit.TestSpecification" ,methodName = "testString_unit_hx" ))
		self.eq(_hx_c.python_Tools.substring(s6, -1, -1), "", _hx_c._hx_AnonObject(fileName = "String.unit.hx" ,lineNumber = 138 ,className = "unit.TestSpecification" ,methodName = "testString_unit_hx" ))
		self.eq(_hx_c.python_Tools.substring(s6, -1, 1), "x", _hx_c._hx_AnonObject(fileName = "String.unit.hx" ,lineNumber = 139 ,className = "unit.TestSpecification" ,methodName = "testString_unit_hx" ))
		self.eq(_hx_c.python_Tools.substring(s6, 1, -1), "x", _hx_c._hx_AnonObject(fileName = "String.unit.hx" ,lineNumber = 140 ,className = "unit.TestSpecification" ,methodName = "testString_unit_hx" ))
		self.eq(_hx_c.python_Tools.substring(s6, -1, 2), "xf", _hx_c._hx_AnonObject(fileName = "String.unit.hx" ,lineNumber = 141 ,className = "unit.TestSpecification" ,methodName = "testString_unit_hx" ))
		self.eq(_hx_c.python_Tools.substring(s6, 2, -1), "xf", _hx_c._hx_AnonObject(fileName = "String.unit.hx" ,lineNumber = 142 ,className = "unit.TestSpecification" ,methodName = "testString_unit_hx" ))
		self.eq(_hx_c.python_Tools.substring(s6, 0, None), "xfooxfooxxbarxbarxx", _hx_c._hx_AnonObject(fileName = "String.unit.hx" ,lineNumber = 143 ,className = "unit.TestSpecification" ,methodName = "testString_unit_hx" ))
		self.eq(_hx_c.python_Tools.substring(s6, 1, None), "fooxfooxxbarxbarxx", _hx_c._hx_AnonObject(fileName = "String.unit.hx" ,lineNumber = 144 ,className = "unit.TestSpecification" ,methodName = "testString_unit_hx" ))
		self.eq(_hx_c.python_Tools.substring(s6, 2, None), "ooxfooxxbarxbarxx", _hx_c._hx_AnonObject(fileName = "String.unit.hx" ,lineNumber = 145 ,className = "unit.TestSpecification" ,methodName = "testString_unit_hx" ))
		self.eq(_hx_c.python_Tools.substring(s6, 0, -1), "", _hx_c._hx_AnonObject(fileName = "String.unit.hx" ,lineNumber = 146 ,className = "unit.TestSpecification" ,methodName = "testString_unit_hx" ))
		self.eq(_hx_c.python_Tools.substring(s6, 1, -1), "x", _hx_c._hx_AnonObject(fileName = "String.unit.hx" ,lineNumber = 147 ,className = "unit.TestSpecification" ,methodName = "testString_unit_hx" ))
		self.eq(_hx_c.python_Tools.substring(s6, 2, -1), "xf", _hx_c._hx_AnonObject(fileName = "String.unit.hx" ,lineNumber = 148 ,className = "unit.TestSpecification" ,methodName = "testString_unit_hx" ))
		self.eq(_hx_c.python_Tools.substring(s6, 20, 0), "xfooxfooxxbarxbarxx", _hx_c._hx_AnonObject(fileName = "String.unit.hx" ,lineNumber = 149 ,className = "unit.TestSpecification" ,methodName = "testString_unit_hx" ))
		self.eq(_hx_c.python_Tools.substring(s6, 0, 100), "xfooxfooxxbarxbarxx", _hx_c._hx_AnonObject(fileName = "String.unit.hx" ,lineNumber = 150 ,className = "unit.TestSpecification" ,methodName = "testString_unit_hx" ))
		self.eq(_hx_c.python_Tools.substring(s6, 100, 120), "", _hx_c._hx_AnonObject(fileName = "String.unit.hx" ,lineNumber = 151 ,className = "unit.TestSpecification" ,methodName = "testString_unit_hx" ))
		self.eq(_hx_c.python_Tools.substring(s6, 100, 0), "xfooxfooxxbarxbarxx", _hx_c._hx_AnonObject(fileName = "String.unit.hx" ,lineNumber = 152 ,className = "unit.TestSpecification" ,methodName = "testString_unit_hx" ))
		self.eq(_hx_c.python_Tools.substring(s6, 120, 100), "", _hx_c._hx_AnonObject(fileName = "String.unit.hx" ,lineNumber = 153 ,className = "unit.TestSpecification" ,methodName = "testString_unit_hx" ))
		self.eq("A", "A", _hx_c._hx_AnonObject(fileName = "String.unit.hx" ,lineNumber = 156 ,className = "unit.TestSpecification" ,methodName = "testString_unit_hx" ))
	

	def testStringBuf_unit_hx(self):
		x = _hx_c.StringBuf()
		self.eq(x.b.getvalue(), "", _hx_c._hx_AnonObject(fileName = "StringBuf.unit.hx" ,lineNumber = 3 ,className = "unit.TestSpecification" ,methodName = "testStringBuf_unit_hx" ))
		s = _hx_c.Std.string(None)
		x.b.write(s)
		
		self.eq(x.b.getvalue(), "null", _hx_c._hx_AnonObject(fileName = "StringBuf.unit.hx" ,lineNumber = 5 ,className = "unit.TestSpecification" ,methodName = "testStringBuf_unit_hx" ))
		x1 = _hx_c.StringBuf()
		s1 = None
		c = 32
		s1 = "".join(_hx_builtin.map(_hx_builtin.chr, [c]))
		
		x1.b.write(s1)
		
		self.eq(x1.b.getvalue(), " ", _hx_c._hx_AnonObject(fileName = "StringBuf.unit.hx" ,lineNumber = 10 ,className = "unit.TestSpecification" ,methodName = "testStringBuf_unit_hx" ))
		x2 = _hx_c.StringBuf()
		s2 = None
		if None is None:
			s2 = _hx_c.python_Tools.substr("abcdefg", 1, None)
		else:
			s2 = _hx_c.python_Tools.substr("abcdefg", 1, None)
		x2.b.write(s2)
		
		self.eq(x2.b.getvalue(), "bcdefg", _hx_c._hx_AnonObject(fileName = "StringBuf.unit.hx" ,lineNumber = 15 ,className = "unit.TestSpecification" ,methodName = "testStringBuf_unit_hx" ))
		x3 = _hx_c.StringBuf()
		s3 = None
		if None is None:
			s3 = _hx_c.python_Tools.substr("abcdefg", 1, None)
		else:
			s3 = _hx_c.python_Tools.substr("abcdefg", 1, None)
		x3.b.write(s3)
		
		self.eq(x3.b.getvalue(), "bcdefg", _hx_c._hx_AnonObject(fileName = "StringBuf.unit.hx" ,lineNumber = 18 ,className = "unit.TestSpecification" ,methodName = "testStringBuf_unit_hx" ))
		x4 = _hx_c.StringBuf()
		s4 = None
		if 3 is None:
			s4 = _hx_c.python_Tools.substr("abcdefg", 1, None)
		else:
			s4 = _hx_c.python_Tools.substr("abcdefg", 1, 3)
		x4.b.write(s4)
		
		self.eq(x4.b.getvalue(), "bcd", _hx_c._hx_AnonObject(fileName = "StringBuf.unit.hx" ,lineNumber = 21 ,className = "unit.TestSpecification" ,methodName = "testStringBuf_unit_hx" ))
		def _hx_local_0(s5):
			return s5
		identityTest = _hx_local_0
		self.eq(identityTest(x4), x4, _hx_c._hx_AnonObject(fileName = "StringBuf.unit.hx" ,lineNumber = 27 ,className = "unit.TestSpecification" ,methodName = "testStringBuf_unit_hx" ))
	

	def testArray_unit_hx(self):
		self.eq(_hx_builtin.len([]), 0, _hx_c._hx_AnonObject(fileName = "Array.unit.hx" ,lineNumber = 2 ,className = "unit.TestSpecification" ,methodName = "testArray_unit_hx" ))
		self.eq(_hx_builtin.len([1]), 1, _hx_c._hx_AnonObject(fileName = "Array.unit.hx" ,lineNumber = 3 ,className = "unit.TestSpecification" ,methodName = "testArray_unit_hx" ))
		a = []
		_hx_array_set(a,4, 1)
		self.eq(_hx_builtin.len(a), 5, _hx_c._hx_AnonObject(fileName = "Array.unit.hx" ,lineNumber = 6 ,className = "unit.TestSpecification" ,methodName = "testArray_unit_hx" ))
		self.eq(_hx_builtin.len([] + []), 0, _hx_c._hx_AnonObject(fileName = "Array.unit.hx" ,lineNumber = 9 ,className = "unit.TestSpecification" ,methodName = "testArray_unit_hx" ))
		self.eq(_hx_array_get(([1] + []),0), 1, _hx_c._hx_AnonObject(fileName = "Array.unit.hx" ,lineNumber = 10 ,className = "unit.TestSpecification" ,methodName = "testArray_unit_hx" ))
		self.eq(_hx_array_get(([] + [1]),0), 1, _hx_c._hx_AnonObject(fileName = "Array.unit.hx" ,lineNumber = 11 ,className = "unit.TestSpecification" ,methodName = "testArray_unit_hx" ))
		self.eq(_hx_array_get(([1] + [2]),0), 1, _hx_c._hx_AnonObject(fileName = "Array.unit.hx" ,lineNumber = 12 ,className = "unit.TestSpecification" ,methodName = "testArray_unit_hx" ))
		self.eq(_hx_array_get(([1] + [2]),1), 2, _hx_c._hx_AnonObject(fileName = "Array.unit.hx" ,lineNumber = 12 ,className = "unit.TestSpecification" ,methodName = "testArray_unit_hx" ))
		
		self.eq(_hx_array_get(([1, 2] + [2, 1]),0), 1, _hx_c._hx_AnonObject(fileName = "Array.unit.hx" ,lineNumber = 13 ,className = "unit.TestSpecification" ,methodName = "testArray_unit_hx" ))
		self.eq(_hx_array_get(([1, 2] + [2, 1]),1), 2, _hx_c._hx_AnonObject(fileName = "Array.unit.hx" ,lineNumber = 13 ,className = "unit.TestSpecification" ,methodName = "testArray_unit_hx" ))
		self.eq(_hx_array_get(([1, 2] + [2, 1]),2), 2, _hx_c._hx_AnonObject(fileName = "Array.unit.hx" ,lineNumber = 13 ,className = "unit.TestSpecification" ,methodName = "testArray_unit_hx" ))
		self.eq(_hx_array_get(([1, 2] + [2, 1]),3), 1, _hx_c._hx_AnonObject(fileName = "Array.unit.hx" ,lineNumber = 13 ,className = "unit.TestSpecification" ,methodName = "testArray_unit_hx" ))
		
		self.eq("".join(_hx_builtin.list(_hx_builtin.map(_hx_c.Std.string, [1, 2]))), "12", _hx_c._hx_AnonObject(fileName = "Array.unit.hx" ,lineNumber = 16 ,className = "unit.TestSpecification" ,methodName = "testArray_unit_hx" ))
		self.eq("x".join(_hx_builtin.list(_hx_builtin.map(_hx_c.Std.string, []))), "", _hx_c._hx_AnonObject(fileName = "Array.unit.hx" ,lineNumber = 17 ,className = "unit.TestSpecification" ,methodName = "testArray_unit_hx" ))
		self.eq("x".join(_hx_builtin.list(_hx_builtin.map(_hx_c.Std.string, [1]))), "1", _hx_c._hx_AnonObject(fileName = "Array.unit.hx" ,lineNumber = 18 ,className = "unit.TestSpecification" ,methodName = "testArray_unit_hx" ))
		self.eq("x".join(_hx_builtin.list(_hx_builtin.map(_hx_c.Std.string, [1, 2]))), "1x2", _hx_c._hx_AnonObject(fileName = "Array.unit.hx" ,lineNumber = 19 ,className = "unit.TestSpecification" ,methodName = "testArray_unit_hx" ))
		self.eq("".join(_hx_builtin.list(_hx_builtin.map(_hx_c.Std.string, []))), "", _hx_c._hx_AnonObject(fileName = "Array.unit.hx" ,lineNumber = 20 ,className = "unit.TestSpecification" ,methodName = "testArray_unit_hx" ))
		def _hx_local_0():
			_this = [_hx_c.unit_TestSpecification_ClassWithToString(), _hx_c.unit_TestSpecification_ClassWithToStringChild(), _hx_c.unit_TestSpecification_ClassWithToStringChild2()]
			return "_".join(_hx_builtin.list(_hx_builtin.map(_hx_c.Std.string, _this)))
		
		self.eq(_hx_local_0(), "ClassWithToString.toString()_ClassWithToString.toString()_ClassWithToStringChild2.toString()", _hx_c._hx_AnonObject(fileName = "Array.unit.hx" ,lineNumber = 21 ,className = "unit.TestSpecification" ,methodName = "testArray_unit_hx" ))
		def _hx_local_1():
			_this1 = []
			return None if (_hx_builtin.len(_this1) == 0) else _this1.pop()
		
		self.eq(_hx_local_1(), None, _hx_c._hx_AnonObject(fileName = "Array.unit.hx" ,lineNumber = 24 ,className = "unit.TestSpecification" ,methodName = "testArray_unit_hx" ))
		def _hx_local_2():
			_this2 = [1]
			return None if (_hx_builtin.len(_this2) == 0) else _this2.pop()
		
		self.eq(_hx_local_2(), 1, _hx_c._hx_AnonObject(fileName = "Array.unit.hx" ,lineNumber = 25 ,className = "unit.TestSpecification" ,methodName = "testArray_unit_hx" ))
		a1 = [1, 2, 3]
		b = a1
		self.eq(None if (_hx_builtin.len(a1) == 0) else a1.pop(), 3, _hx_c._hx_AnonObject(fileName = "Array.unit.hx" ,lineNumber = 28 ,className = "unit.TestSpecification" ,methodName = "testArray_unit_hx" ))
		self.eq(_hx_array_get(a1,0), 1, _hx_c._hx_AnonObject(fileName = "Array.unit.hx" ,lineNumber = 29 ,className = "unit.TestSpecification" ,methodName = "testArray_unit_hx" ))
		self.eq(_hx_array_get(a1,1), 2, _hx_c._hx_AnonObject(fileName = "Array.unit.hx" ,lineNumber = 29 ,className = "unit.TestSpecification" ,methodName = "testArray_unit_hx" ))
		
		self.eq(a1, b, _hx_c._hx_AnonObject(fileName = "Array.unit.hx" ,lineNumber = 30 ,className = "unit.TestSpecification" ,methodName = "testArray_unit_hx" ))
		self.eq(None if (_hx_builtin.len(a1) == 0) else a1.pop(), 2, _hx_c._hx_AnonObject(fileName = "Array.unit.hx" ,lineNumber = 31 ,className = "unit.TestSpecification" ,methodName = "testArray_unit_hx" ))
		self.eq(_hx_array_get(a1,0), 1, _hx_c._hx_AnonObject(fileName = "Array.unit.hx" ,lineNumber = 32 ,className = "unit.TestSpecification" ,methodName = "testArray_unit_hx" ))
		self.eq(a1, b, _hx_c._hx_AnonObject(fileName = "Array.unit.hx" ,lineNumber = 33 ,className = "unit.TestSpecification" ,methodName = "testArray_unit_hx" ))
		self.eq(None if (_hx_builtin.len(a1) == 0) else a1.pop(), 1, _hx_c._hx_AnonObject(fileName = "Array.unit.hx" ,lineNumber = 34 ,className = "unit.TestSpecification" ,methodName = "testArray_unit_hx" ))
		self.eq(_hx_builtin.len(a1), 0, _hx_c._hx_AnonObject(fileName = "Array.unit.hx" ,lineNumber = 35 ,className = "unit.TestSpecification" ,methodName = "testArray_unit_hx" ))
		self.eq(a1, b, _hx_c._hx_AnonObject(fileName = "Array.unit.hx" ,lineNumber = 36 ,className = "unit.TestSpecification" ,methodName = "testArray_unit_hx" ))
		self.eq(None if (_hx_builtin.len(a1) == 0) else a1.pop(), None, _hx_c._hx_AnonObject(fileName = "Array.unit.hx" ,lineNumber = 37 ,className = "unit.TestSpecification" ,methodName = "testArray_unit_hx" ))
		self.eq(_hx_builtin.len(a1), 0, _hx_c._hx_AnonObject(fileName = "Array.unit.hx" ,lineNumber = 38 ,className = "unit.TestSpecification" ,methodName = "testArray_unit_hx" ))
		self.eq(a1, b, _hx_c._hx_AnonObject(fileName = "Array.unit.hx" ,lineNumber = 39 ,className = "unit.TestSpecification" ,methodName = "testArray_unit_hx" ))
		a2 = []
		b1 = a2
		def _hx_local_3():
			a2.append(1)
			return _hx_builtin.len(a2)
		
		self.eq(_hx_local_3(), 1, _hx_c._hx_AnonObject(fileName = "Array.unit.hx" ,lineNumber = 44 ,className = "unit.TestSpecification" ,methodName = "testArray_unit_hx" ))
		self.eq(a2, b1, _hx_c._hx_AnonObject(fileName = "Array.unit.hx" ,lineNumber = 45 ,className = "unit.TestSpecification" ,methodName = "testArray_unit_hx" ))
		self.eq(_hx_array_get(a2,0), 1, _hx_c._hx_AnonObject(fileName = "Array.unit.hx" ,lineNumber = 46 ,className = "unit.TestSpecification" ,methodName = "testArray_unit_hx" ))
		def _hx_local_4():
			a2.append(2)
			return _hx_builtin.len(a2)
		
		self.eq(_hx_local_4(), 2, _hx_c._hx_AnonObject(fileName = "Array.unit.hx" ,lineNumber = 47 ,className = "unit.TestSpecification" ,methodName = "testArray_unit_hx" ))
		self.eq(a2, b1, _hx_c._hx_AnonObject(fileName = "Array.unit.hx" ,lineNumber = 48 ,className = "unit.TestSpecification" ,methodName = "testArray_unit_hx" ))
		self.eq(_hx_array_get(a2,0), 1, _hx_c._hx_AnonObject(fileName = "Array.unit.hx" ,lineNumber = 49 ,className = "unit.TestSpecification" ,methodName = "testArray_unit_hx" ))
		self.eq(_hx_array_get(a2,1), 2, _hx_c._hx_AnonObject(fileName = "Array.unit.hx" ,lineNumber = 49 ,className = "unit.TestSpecification" ,methodName = "testArray_unit_hx" ))
		
		def _hx_local_5():
			a2.append(None)
			return _hx_builtin.len(a2)
		
		self.eq(_hx_local_5(), 3, _hx_c._hx_AnonObject(fileName = "Array.unit.hx" ,lineNumber = 50 ,className = "unit.TestSpecification" ,methodName = "testArray_unit_hx" ))
		self.eq(_hx_array_get(a2,0), 1, _hx_c._hx_AnonObject(fileName = "Array.unit.hx" ,lineNumber = 51 ,className = "unit.TestSpecification" ,methodName = "testArray_unit_hx" ))
		self.eq(_hx_array_get(a2,1), 2, _hx_c._hx_AnonObject(fileName = "Array.unit.hx" ,lineNumber = 51 ,className = "unit.TestSpecification" ,methodName = "testArray_unit_hx" ))
		self.eq(_hx_array_get(a2,2), None, _hx_c._hx_AnonObject(fileName = "Array.unit.hx" ,lineNumber = 51 ,className = "unit.TestSpecification" ,methodName = "testArray_unit_hx" ))
		
		a3 = [1, 2, 3]
		b2 = a3
		a3.reverse()
		self.eq(a3, b2, _hx_c._hx_AnonObject(fileName = "Array.unit.hx" ,lineNumber = 57 ,className = "unit.TestSpecification" ,methodName = "testArray_unit_hx" ))
		self.eq(_hx_array_get(a3,0), 3, _hx_c._hx_AnonObject(fileName = "Array.unit.hx" ,lineNumber = 58 ,className = "unit.TestSpecification" ,methodName = "testArray_unit_hx" ))
		self.eq(_hx_array_get(a3,1), 2, _hx_c._hx_AnonObject(fileName = "Array.unit.hx" ,lineNumber = 58 ,className = "unit.TestSpecification" ,methodName = "testArray_unit_hx" ))
		self.eq(_hx_array_get(a3,2), 1, _hx_c._hx_AnonObject(fileName = "Array.unit.hx" ,lineNumber = 58 ,className = "unit.TestSpecification" ,methodName = "testArray_unit_hx" ))
		
		a4 = []
		a4.reverse()
		self.eq(_hx_builtin.len(a4), 0, _hx_c._hx_AnonObject(fileName = "Array.unit.hx" ,lineNumber = 61 ,className = "unit.TestSpecification" ,methodName = "testArray_unit_hx" ))
		a5 = [1]
		a5.reverse()
		self.eq(_hx_array_get(a5,0), 1, _hx_c._hx_AnonObject(fileName = "Array.unit.hx" ,lineNumber = 64 ,className = "unit.TestSpecification" ,methodName = "testArray_unit_hx" ))
		def _hx_local_6():
			_this3 = []
			return None if (_hx_builtin.len(_this3) == 0) else _this3.pop(0)
		
		self.eq(_hx_local_6(), None, _hx_c._hx_AnonObject(fileName = "Array.unit.hx" ,lineNumber = 67 ,className = "unit.TestSpecification" ,methodName = "testArray_unit_hx" ))
		def _hx_local_7():
			_this4 = [1]
			return None if (_hx_builtin.len(_this4) == 0) else _this4.pop(0)
		
		self.eq(_hx_local_7(), 1, _hx_c._hx_AnonObject(fileName = "Array.unit.hx" ,lineNumber = 68 ,className = "unit.TestSpecification" ,methodName = "testArray_unit_hx" ))
		a6 = [1, 2, 3]
		b3 = a6
		self.eq(None if (_hx_builtin.len(a6) == 0) else a6.pop(0), 1, _hx_c._hx_AnonObject(fileName = "Array.unit.hx" ,lineNumber = 71 ,className = "unit.TestSpecification" ,methodName = "testArray_unit_hx" ))
		self.eq(_hx_array_get(a6,0), 2, _hx_c._hx_AnonObject(fileName = "Array.unit.hx" ,lineNumber = 72 ,className = "unit.TestSpecification" ,methodName = "testArray_unit_hx" ))
		self.eq(_hx_array_get(a6,1), 3, _hx_c._hx_AnonObject(fileName = "Array.unit.hx" ,lineNumber = 72 ,className = "unit.TestSpecification" ,methodName = "testArray_unit_hx" ))
		
		self.eq(a6, b3, _hx_c._hx_AnonObject(fileName = "Array.unit.hx" ,lineNumber = 73 ,className = "unit.TestSpecification" ,methodName = "testArray_unit_hx" ))
		self.eq(None if (_hx_builtin.len(a6) == 0) else a6.pop(0), 2, _hx_c._hx_AnonObject(fileName = "Array.unit.hx" ,lineNumber = 74 ,className = "unit.TestSpecification" ,methodName = "testArray_unit_hx" ))
		self.eq(_hx_array_get(a6,0), 3, _hx_c._hx_AnonObject(fileName = "Array.unit.hx" ,lineNumber = 75 ,className = "unit.TestSpecification" ,methodName = "testArray_unit_hx" ))
		self.eq(a6, b3, _hx_c._hx_AnonObject(fileName = "Array.unit.hx" ,lineNumber = 76 ,className = "unit.TestSpecification" ,methodName = "testArray_unit_hx" ))
		self.eq(None if (_hx_builtin.len(a6) == 0) else a6.pop(0), 3, _hx_c._hx_AnonObject(fileName = "Array.unit.hx" ,lineNumber = 77 ,className = "unit.TestSpecification" ,methodName = "testArray_unit_hx" ))
		self.eq(_hx_builtin.len(a6), 0, _hx_c._hx_AnonObject(fileName = "Array.unit.hx" ,lineNumber = 78 ,className = "unit.TestSpecification" ,methodName = "testArray_unit_hx" ))
		self.eq(a6, b3, _hx_c._hx_AnonObject(fileName = "Array.unit.hx" ,lineNumber = 79 ,className = "unit.TestSpecification" ,methodName = "testArray_unit_hx" ))
		self.eq(None if (_hx_builtin.len(a6) == 0) else a6.pop(0), None, _hx_c._hx_AnonObject(fileName = "Array.unit.hx" ,lineNumber = 80 ,className = "unit.TestSpecification" ,methodName = "testArray_unit_hx" ))
		self.eq(_hx_builtin.len(a6), 0, _hx_c._hx_AnonObject(fileName = "Array.unit.hx" ,lineNumber = 81 ,className = "unit.TestSpecification" ,methodName = "testArray_unit_hx" ))
		self.eq(a6, b3, _hx_c._hx_AnonObject(fileName = "Array.unit.hx" ,lineNumber = 82 ,className = "unit.TestSpecification" ,methodName = "testArray_unit_hx" ))
		i0 = _hx_c.unit_TestSpecification_IntWrap(1)
		i1 = _hx_c.unit_TestSpecification_IntWrap(1)
		i2 = _hx_c.unit_TestSpecification_IntWrap(5)
		i3 = _hx_c.unit_TestSpecification_IntWrap(9)
		i4 = _hx_c.unit_TestSpecification_IntWrap(2)
		a7 = [i4, i0, i1, i3, i0, i2]
		b4 = a7[0:None]
		b4 != a7
		self.eq(_hx_array_get(b4,0), i4, _hx_c._hx_AnonObject(fileName = "Array.unit.hx" ,lineNumber = 93 ,className = "unit.TestSpecification" ,methodName = "testArray_unit_hx" ))
		self.eq(_hx_array_get(b4,1), i0, _hx_c._hx_AnonObject(fileName = "Array.unit.hx" ,lineNumber = 93 ,className = "unit.TestSpecification" ,methodName = "testArray_unit_hx" ))
		self.eq(_hx_array_get(b4,2), i1, _hx_c._hx_AnonObject(fileName = "Array.unit.hx" ,lineNumber = 93 ,className = "unit.TestSpecification" ,methodName = "testArray_unit_hx" ))
		self.eq(_hx_array_get(b4,3), i3, _hx_c._hx_AnonObject(fileName = "Array.unit.hx" ,lineNumber = 93 ,className = "unit.TestSpecification" ,methodName = "testArray_unit_hx" ))
		self.eq(_hx_array_get(b4,4), i0, _hx_c._hx_AnonObject(fileName = "Array.unit.hx" ,lineNumber = 93 ,className = "unit.TestSpecification" ,methodName = "testArray_unit_hx" ))
		self.eq(_hx_array_get(b4,5), i2, _hx_c._hx_AnonObject(fileName = "Array.unit.hx" ,lineNumber = 93 ,className = "unit.TestSpecification" ,methodName = "testArray_unit_hx" ))
		
		b4 = b4[1:None]
		self.eq(_hx_array_get(b4,0), i0, _hx_c._hx_AnonObject(fileName = "Array.unit.hx" ,lineNumber = 95 ,className = "unit.TestSpecification" ,methodName = "testArray_unit_hx" ))
		self.eq(_hx_array_get(b4,1), i1, _hx_c._hx_AnonObject(fileName = "Array.unit.hx" ,lineNumber = 95 ,className = "unit.TestSpecification" ,methodName = "testArray_unit_hx" ))
		self.eq(_hx_array_get(b4,2), i3, _hx_c._hx_AnonObject(fileName = "Array.unit.hx" ,lineNumber = 95 ,className = "unit.TestSpecification" ,methodName = "testArray_unit_hx" ))
		self.eq(_hx_array_get(b4,3), i0, _hx_c._hx_AnonObject(fileName = "Array.unit.hx" ,lineNumber = 95 ,className = "unit.TestSpecification" ,methodName = "testArray_unit_hx" ))
		self.eq(_hx_array_get(b4,4), i2, _hx_c._hx_AnonObject(fileName = "Array.unit.hx" ,lineNumber = 95 ,className = "unit.TestSpecification" ,methodName = "testArray_unit_hx" ))
		
		b4 = b4[1:3]
		self.eq(_hx_array_get(b4,0), i1, _hx_c._hx_AnonObject(fileName = "Array.unit.hx" ,lineNumber = 97 ,className = "unit.TestSpecification" ,methodName = "testArray_unit_hx" ))
		self.eq(_hx_array_get(b4,1), i3, _hx_c._hx_AnonObject(fileName = "Array.unit.hx" ,lineNumber = 97 ,className = "unit.TestSpecification" ,methodName = "testArray_unit_hx" ))
		
		b4 = b4[-1:None]
		self.eq(_hx_array_get(b4,0), i3, _hx_c._hx_AnonObject(fileName = "Array.unit.hx" ,lineNumber = 99 ,className = "unit.TestSpecification" ,methodName = "testArray_unit_hx" ))
		b4 = b4[0:4]
		self.eq(_hx_array_get(b4,0), i3, _hx_c._hx_AnonObject(fileName = "Array.unit.hx" ,lineNumber = 101 ,className = "unit.TestSpecification" ,methodName = "testArray_unit_hx" ))
		self.eq(_hx_array_get(b4[-3:None],0), i3, _hx_c._hx_AnonObject(fileName = "Array.unit.hx" ,lineNumber = 102 ,className = "unit.TestSpecification" ,methodName = "testArray_unit_hx" ))
		def _hx_local_8():
			_this5 = b4[-3:-3]
			return _hx_builtin.len(_this5)
		
		self.eq(_hx_local_8(), 0, _hx_c._hx_AnonObject(fileName = "Array.unit.hx" ,lineNumber = 103 ,className = "unit.TestSpecification" ,methodName = "testArray_unit_hx" ))
		def _hx_local_9():
			_this6 = [1, 2, 3][2:1]
			return _hx_builtin.len(_this6)
		
		self.eq(_hx_local_9(), 0, _hx_c._hx_AnonObject(fileName = "Array.unit.hx" ,lineNumber = 104 ,className = "unit.TestSpecification" ,methodName = "testArray_unit_hx" ))
		i01 = _hx_c.unit_TestSpecification_IntWrap(1)
		i11 = _hx_c.unit_TestSpecification_IntWrap(1)
		i21 = _hx_c.unit_TestSpecification_IntWrap(5)
		i31 = _hx_c.unit_TestSpecification_IntWrap(9)
		i41 = _hx_c.unit_TestSpecification_IntWrap(2)
		a8 = [i41, i01, i11, i31, i01, i21]
		_hx_c.haxe_ds_ArraySort.sort(a8, _hx_c.unit_TestSpecification_IntWrap.compare)
		self.eq(_hx_array_get(a8,0), i01, _hx_c._hx_AnonObject(fileName = "Array.unit.hx" ,lineNumber = 114 ,className = "unit.TestSpecification" ,methodName = "testArray_unit_hx" ))
		self.eq(_hx_array_get(a8,1), i11, _hx_c._hx_AnonObject(fileName = "Array.unit.hx" ,lineNumber = 114 ,className = "unit.TestSpecification" ,methodName = "testArray_unit_hx" ))
		self.eq(_hx_array_get(a8,2), i01, _hx_c._hx_AnonObject(fileName = "Array.unit.hx" ,lineNumber = 114 ,className = "unit.TestSpecification" ,methodName = "testArray_unit_hx" ))
		self.eq(_hx_array_get(a8,3), i41, _hx_c._hx_AnonObject(fileName = "Array.unit.hx" ,lineNumber = 114 ,className = "unit.TestSpecification" ,methodName = "testArray_unit_hx" ))
		self.eq(_hx_array_get(a8,4), i21, _hx_c._hx_AnonObject(fileName = "Array.unit.hx" ,lineNumber = 114 ,className = "unit.TestSpecification" ,methodName = "testArray_unit_hx" ))
		self.eq(_hx_array_get(a8,5), i31, _hx_c._hx_AnonObject(fileName = "Array.unit.hx" ,lineNumber = 114 ,className = "unit.TestSpecification" ,methodName = "testArray_unit_hx" ))
		
		i02 = _hx_c.unit_TestSpecification_IntWrap(1)
		i12 = _hx_c.unit_TestSpecification_IntWrap(1)
		i22 = _hx_c.unit_TestSpecification_IntWrap(5)
		i32 = _hx_c.unit_TestSpecification_IntWrap(9)
		i42 = _hx_c.unit_TestSpecification_IntWrap(2)
		b5 = [i42, i02, i12, i32, i02, i22]
		a9 = None
		pos = 0
		if pos < 0:
			pos = _hx_builtin.len(b5) + pos
		
		if pos < 0:
			pos = 0
		
		res = b5[pos:pos + 0]
		del b5[pos:pos + 0]
		a9 = res
		
		b5 != a9
		self.eq(_hx_builtin.len(a9), 0, _hx_c._hx_AnonObject(fileName = "Array.unit.hx" ,lineNumber = 125 ,className = "unit.TestSpecification" ,methodName = "testArray_unit_hx" ))
		self.eq(_hx_array_get(b5,0), i42, _hx_c._hx_AnonObject(fileName = "Array.unit.hx" ,lineNumber = 126 ,className = "unit.TestSpecification" ,methodName = "testArray_unit_hx" ))
		self.eq(_hx_array_get(b5,1), i02, _hx_c._hx_AnonObject(fileName = "Array.unit.hx" ,lineNumber = 126 ,className = "unit.TestSpecification" ,methodName = "testArray_unit_hx" ))
		self.eq(_hx_array_get(b5,2), i12, _hx_c._hx_AnonObject(fileName = "Array.unit.hx" ,lineNumber = 126 ,className = "unit.TestSpecification" ,methodName = "testArray_unit_hx" ))
		self.eq(_hx_array_get(b5,3), i32, _hx_c._hx_AnonObject(fileName = "Array.unit.hx" ,lineNumber = 126 ,className = "unit.TestSpecification" ,methodName = "testArray_unit_hx" ))
		self.eq(_hx_array_get(b5,4), i02, _hx_c._hx_AnonObject(fileName = "Array.unit.hx" ,lineNumber = 126 ,className = "unit.TestSpecification" ,methodName = "testArray_unit_hx" ))
		self.eq(_hx_array_get(b5,5), i22, _hx_c._hx_AnonObject(fileName = "Array.unit.hx" ,lineNumber = 126 ,className = "unit.TestSpecification" ,methodName = "testArray_unit_hx" ))
		
		len = _hx_builtin.len(b5) - 1
		pos1 = 1
		if pos1 < 0:
			pos1 = _hx_builtin.len(b5) + pos1
		
		if pos1 < 0:
			pos1 = 0
		
		res1 = b5[pos1:pos1 + len]
		del b5[pos1:pos1 + len]
		a9 = res1
		
		
		self.eq(_hx_array_get(b5,0), i42, _hx_c._hx_AnonObject(fileName = "Array.unit.hx" ,lineNumber = 128 ,className = "unit.TestSpecification" ,methodName = "testArray_unit_hx" ))
		self.eq(_hx_array_get(a9,0), i02, _hx_c._hx_AnonObject(fileName = "Array.unit.hx" ,lineNumber = 129 ,className = "unit.TestSpecification" ,methodName = "testArray_unit_hx" ))
		self.eq(_hx_array_get(a9,1), i12, _hx_c._hx_AnonObject(fileName = "Array.unit.hx" ,lineNumber = 129 ,className = "unit.TestSpecification" ,methodName = "testArray_unit_hx" ))
		self.eq(_hx_array_get(a9,2), i32, _hx_c._hx_AnonObject(fileName = "Array.unit.hx" ,lineNumber = 129 ,className = "unit.TestSpecification" ,methodName = "testArray_unit_hx" ))
		self.eq(_hx_array_get(a9,3), i02, _hx_c._hx_AnonObject(fileName = "Array.unit.hx" ,lineNumber = 129 ,className = "unit.TestSpecification" ,methodName = "testArray_unit_hx" ))
		self.eq(_hx_array_get(a9,4), i22, _hx_c._hx_AnonObject(fileName = "Array.unit.hx" ,lineNumber = 129 ,className = "unit.TestSpecification" ,methodName = "testArray_unit_hx" ))
		
		pos2 = 1
		if pos2 < 0:
			pos2 = _hx_builtin.len(a9) + pos2
		
		if pos2 < 0:
			pos2 = 0
		
		res2 = a9[pos2:pos2 + -1]
		del a9[pos2:pos2 + -1]
		b5 = res2
		
		self.eq(_hx_array_get(a9,0), i02, _hx_c._hx_AnonObject(fileName = "Array.unit.hx" ,lineNumber = 131 ,className = "unit.TestSpecification" ,methodName = "testArray_unit_hx" ))
		self.eq(_hx_array_get(a9,1), i12, _hx_c._hx_AnonObject(fileName = "Array.unit.hx" ,lineNumber = 131 ,className = "unit.TestSpecification" ,methodName = "testArray_unit_hx" ))
		self.eq(_hx_array_get(a9,2), i32, _hx_c._hx_AnonObject(fileName = "Array.unit.hx" ,lineNumber = 131 ,className = "unit.TestSpecification" ,methodName = "testArray_unit_hx" ))
		self.eq(_hx_array_get(a9,3), i02, _hx_c._hx_AnonObject(fileName = "Array.unit.hx" ,lineNumber = 131 ,className = "unit.TestSpecification" ,methodName = "testArray_unit_hx" ))
		self.eq(_hx_array_get(a9,4), i22, _hx_c._hx_AnonObject(fileName = "Array.unit.hx" ,lineNumber = 131 ,className = "unit.TestSpecification" ,methodName = "testArray_unit_hx" ))
		
		self.eq(_hx_builtin.len(b5), 0, _hx_c._hx_AnonObject(fileName = "Array.unit.hx" ,lineNumber = 132 ,className = "unit.TestSpecification" ,methodName = "testArray_unit_hx" ))
		pos3 = 0
		if pos3 < 0:
			pos3 = _hx_builtin.len(a9) + pos3
		
		if pos3 < 0:
			pos3 = 0
		
		res3 = a9[pos3:pos3 + 10]
		del a9[pos3:pos3 + 10]
		b5 = res3
		
		self.eq(_hx_array_get(b5,0), i02, _hx_c._hx_AnonObject(fileName = "Array.unit.hx" ,lineNumber = 134 ,className = "unit.TestSpecification" ,methodName = "testArray_unit_hx" ))
		self.eq(_hx_array_get(b5,1), i12, _hx_c._hx_AnonObject(fileName = "Array.unit.hx" ,lineNumber = 134 ,className = "unit.TestSpecification" ,methodName = "testArray_unit_hx" ))
		self.eq(_hx_array_get(b5,2), i32, _hx_c._hx_AnonObject(fileName = "Array.unit.hx" ,lineNumber = 134 ,className = "unit.TestSpecification" ,methodName = "testArray_unit_hx" ))
		self.eq(_hx_array_get(b5,3), i02, _hx_c._hx_AnonObject(fileName = "Array.unit.hx" ,lineNumber = 134 ,className = "unit.TestSpecification" ,methodName = "testArray_unit_hx" ))
		self.eq(_hx_array_get(b5,4), i22, _hx_c._hx_AnonObject(fileName = "Array.unit.hx" ,lineNumber = 134 ,className = "unit.TestSpecification" ,methodName = "testArray_unit_hx" ))
		
		self.eq(_hx_builtin.len(a9), 0, _hx_c._hx_AnonObject(fileName = "Array.unit.hx" ,lineNumber = 135 ,className = "unit.TestSpecification" ,methodName = "testArray_unit_hx" ))
		pos4 = 10
		if pos4 < 0:
			pos4 = _hx_builtin.len(b5) + pos4
		
		if pos4 < 0:
			pos4 = 0
		
		res4 = b5[pos4:pos4 + 10]
		del b5[pos4:pos4 + 10]
		a9 = res4
		
		self.eq(_hx_builtin.len(a9), 0, _hx_c._hx_AnonObject(fileName = "Array.unit.hx" ,lineNumber = 137 ,className = "unit.TestSpecification" ,methodName = "testArray_unit_hx" ))
		b5 = [i02, i12, i32, i02, i22]
		pos5 = -2
		if pos5 < 0:
			pos5 = _hx_builtin.len(b5) + pos5
		
		if pos5 < 0:
			pos5 = 0
		
		res5 = b5[pos5:pos5 + 2]
		del b5[pos5:pos5 + 2]
		a9 = res5
		
		self.eq(_hx_array_get(b5,0), i02, _hx_c._hx_AnonObject(fileName = "Array.unit.hx" ,lineNumber = 140 ,className = "unit.TestSpecification" ,methodName = "testArray_unit_hx" ))
		self.eq(_hx_array_get(b5,1), i12, _hx_c._hx_AnonObject(fileName = "Array.unit.hx" ,lineNumber = 140 ,className = "unit.TestSpecification" ,methodName = "testArray_unit_hx" ))
		self.eq(_hx_array_get(b5,2), i32, _hx_c._hx_AnonObject(fileName = "Array.unit.hx" ,lineNumber = 140 ,className = "unit.TestSpecification" ,methodName = "testArray_unit_hx" ))
		
		self.eq(_hx_array_get(a9,0), i02, _hx_c._hx_AnonObject(fileName = "Array.unit.hx" ,lineNumber = 141 ,className = "unit.TestSpecification" ,methodName = "testArray_unit_hx" ))
		self.eq(_hx_array_get(a9,1), i22, _hx_c._hx_AnonObject(fileName = "Array.unit.hx" ,lineNumber = 141 ,className = "unit.TestSpecification" ,methodName = "testArray_unit_hx" ))
		
		a10 = [_hx_c.unit_TestSpecification_ClassWithToString(), _hx_c.unit_TestSpecification_ClassWithToStringChild(), _hx_c.unit_TestSpecification_ClassWithToStringChild2()]
		comp = "ClassWithToString.toString(),ClassWithToString.toString(),ClassWithToStringChild2.toString()"
		self.t(Std.string("[" + Std.string(",".join(_hx_builtin.list(_hx_builtin.map(_hx_c.Std.string, a10))))) + "]" == Std.string("[" + Std.string(comp)) + "]" or Std.string("[" + Std.string(",".join(_hx_builtin.list(_hx_builtin.map(_hx_c.Std.string, a10))))) + "]" == comp, _hx_c._hx_AnonObject(fileName = "Array.unit.hx" ,lineNumber = 146 ,className = "unit.TestSpecification" ,methodName = "testArray_unit_hx" ))
		a11 = []
		b6 = a11
		a11.insert(0, 1)
		self.eq(a11, b6, _hx_c._hx_AnonObject(fileName = "Array.unit.hx" ,lineNumber = 152 ,className = "unit.TestSpecification" ,methodName = "testArray_unit_hx" ))
		self.eq(_hx_array_get(a11,0), 1, _hx_c._hx_AnonObject(fileName = "Array.unit.hx" ,lineNumber = 153 ,className = "unit.TestSpecification" ,methodName = "testArray_unit_hx" ))
		a11.insert(0, 2)
		self.eq(a11, b6, _hx_c._hx_AnonObject(fileName = "Array.unit.hx" ,lineNumber = 155 ,className = "unit.TestSpecification" ,methodName = "testArray_unit_hx" ))
		self.eq(_hx_array_get(a11,0), 2, _hx_c._hx_AnonObject(fileName = "Array.unit.hx" ,lineNumber = 156 ,className = "unit.TestSpecification" ,methodName = "testArray_unit_hx" ))
		self.eq(_hx_array_get(a11,1), 1, _hx_c._hx_AnonObject(fileName = "Array.unit.hx" ,lineNumber = 156 ,className = "unit.TestSpecification" ,methodName = "testArray_unit_hx" ))
		
		a11.insert(0, None)
		self.eq(_hx_array_get(a11,0), None, _hx_c._hx_AnonObject(fileName = "Array.unit.hx" ,lineNumber = 158 ,className = "unit.TestSpecification" ,methodName = "testArray_unit_hx" ))
		self.eq(_hx_array_get(a11,1), 2, _hx_c._hx_AnonObject(fileName = "Array.unit.hx" ,lineNumber = 158 ,className = "unit.TestSpecification" ,methodName = "testArray_unit_hx" ))
		self.eq(_hx_array_get(a11,2), 1, _hx_c._hx_AnonObject(fileName = "Array.unit.hx" ,lineNumber = 158 ,className = "unit.TestSpecification" ,methodName = "testArray_unit_hx" ))
		
		a12 = []
		a12.insert(5, 1)
		self.eq(_hx_array_get(a12,0), 1, _hx_c._hx_AnonObject(fileName = "Array.unit.hx" ,lineNumber = 163 ,className = "unit.TestSpecification" ,methodName = "testArray_unit_hx" ))
		a13 = [1, 2, 3]
		a13.insert(1, 4)
		self.eq(_hx_array_get(a13,0), 1, _hx_c._hx_AnonObject(fileName = "Array.unit.hx" ,lineNumber = 166 ,className = "unit.TestSpecification" ,methodName = "testArray_unit_hx" ))
		self.eq(_hx_array_get(a13,1), 4, _hx_c._hx_AnonObject(fileName = "Array.unit.hx" ,lineNumber = 166 ,className = "unit.TestSpecification" ,methodName = "testArray_unit_hx" ))
		self.eq(_hx_array_get(a13,2), 2, _hx_c._hx_AnonObject(fileName = "Array.unit.hx" ,lineNumber = 166 ,className = "unit.TestSpecification" ,methodName = "testArray_unit_hx" ))
		self.eq(_hx_array_get(a13,3), 3, _hx_c._hx_AnonObject(fileName = "Array.unit.hx" ,lineNumber = 166 ,className = "unit.TestSpecification" ,methodName = "testArray_unit_hx" ))
		
		a14 = [1, 2, 3]
		a14.insert(-1, 4)
		self.eq(_hx_array_get(a14,0), 1, _hx_c._hx_AnonObject(fileName = "Array.unit.hx" ,lineNumber = 169 ,className = "unit.TestSpecification" ,methodName = "testArray_unit_hx" ))
		self.eq(_hx_array_get(a14,1), 2, _hx_c._hx_AnonObject(fileName = "Array.unit.hx" ,lineNumber = 169 ,className = "unit.TestSpecification" ,methodName = "testArray_unit_hx" ))
		self.eq(_hx_array_get(a14,2), 4, _hx_c._hx_AnonObject(fileName = "Array.unit.hx" ,lineNumber = 169 ,className = "unit.TestSpecification" ,methodName = "testArray_unit_hx" ))
		self.eq(_hx_array_get(a14,3), 3, _hx_c._hx_AnonObject(fileName = "Array.unit.hx" ,lineNumber = 169 ,className = "unit.TestSpecification" ,methodName = "testArray_unit_hx" ))
		
		a14.insert(-2, 8)
		self.eq(_hx_array_get(a14,0), 1, _hx_c._hx_AnonObject(fileName = "Array.unit.hx" ,lineNumber = 171 ,className = "unit.TestSpecification" ,methodName = "testArray_unit_hx" ))
		self.eq(_hx_array_get(a14,1), 2, _hx_c._hx_AnonObject(fileName = "Array.unit.hx" ,lineNumber = 171 ,className = "unit.TestSpecification" ,methodName = "testArray_unit_hx" ))
		self.eq(_hx_array_get(a14,2), 8, _hx_c._hx_AnonObject(fileName = "Array.unit.hx" ,lineNumber = 171 ,className = "unit.TestSpecification" ,methodName = "testArray_unit_hx" ))
		self.eq(_hx_array_get(a14,3), 4, _hx_c._hx_AnonObject(fileName = "Array.unit.hx" ,lineNumber = 171 ,className = "unit.TestSpecification" ,methodName = "testArray_unit_hx" ))
		self.eq(_hx_array_get(a14,4), 3, _hx_c._hx_AnonObject(fileName = "Array.unit.hx" ,lineNumber = 171 ,className = "unit.TestSpecification" ,methodName = "testArray_unit_hx" ))
		
		a14.insert(-8, 9)
		self.eq(_hx_array_get(a14,0), 9, _hx_c._hx_AnonObject(fileName = "Array.unit.hx" ,lineNumber = 173 ,className = "unit.TestSpecification" ,methodName = "testArray_unit_hx" ))
		self.eq(_hx_array_get(a14,1), 1, _hx_c._hx_AnonObject(fileName = "Array.unit.hx" ,lineNumber = 173 ,className = "unit.TestSpecification" ,methodName = "testArray_unit_hx" ))
		self.eq(_hx_array_get(a14,2), 2, _hx_c._hx_AnonObject(fileName = "Array.unit.hx" ,lineNumber = 173 ,className = "unit.TestSpecification" ,methodName = "testArray_unit_hx" ))
		self.eq(_hx_array_get(a14,3), 8, _hx_c._hx_AnonObject(fileName = "Array.unit.hx" ,lineNumber = 173 ,className = "unit.TestSpecification" ,methodName = "testArray_unit_hx" ))
		self.eq(_hx_array_get(a14,4), 4, _hx_c._hx_AnonObject(fileName = "Array.unit.hx" ,lineNumber = 173 ,className = "unit.TestSpecification" ,methodName = "testArray_unit_hx" ))
		self.eq(_hx_array_get(a14,5), 3, _hx_c._hx_AnonObject(fileName = "Array.unit.hx" ,lineNumber = 173 ,className = "unit.TestSpecification" ,methodName = "testArray_unit_hx" ))
		
		i03 = _hx_c.unit_TestSpecification_IntWrap(1)
		i13 = _hx_c.unit_TestSpecification_IntWrap(1)
		i23 = _hx_c.unit_TestSpecification_IntWrap(5)
		i33 = _hx_c.unit_TestSpecification_IntWrap(9)
		i43 = _hx_c.unit_TestSpecification_IntWrap(2)
		a15 = [i43, i03, i13, i33, i03, i23]
		self.t(_hx_c.python_internal_ArrayImpl.remove(a15, i03), _hx_c._hx_AnonObject(fileName = "Array.unit.hx" ,lineNumber = 182 ,className = "unit.TestSpecification" ,methodName = "testArray_unit_hx" ))
		self.eq(_hx_array_get(a15,0), i43, _hx_c._hx_AnonObject(fileName = "Array.unit.hx" ,lineNumber = 183 ,className = "unit.TestSpecification" ,methodName = "testArray_unit_hx" ))
		self.eq(_hx_array_get(a15,1), i13, _hx_c._hx_AnonObject(fileName = "Array.unit.hx" ,lineNumber = 183 ,className = "unit.TestSpecification" ,methodName = "testArray_unit_hx" ))
		self.eq(_hx_array_get(a15,2), i33, _hx_c._hx_AnonObject(fileName = "Array.unit.hx" ,lineNumber = 183 ,className = "unit.TestSpecification" ,methodName = "testArray_unit_hx" ))
		self.eq(_hx_array_get(a15,3), i03, _hx_c._hx_AnonObject(fileName = "Array.unit.hx" ,lineNumber = 183 ,className = "unit.TestSpecification" ,methodName = "testArray_unit_hx" ))
		self.eq(_hx_array_get(a15,4), i23, _hx_c._hx_AnonObject(fileName = "Array.unit.hx" ,lineNumber = 183 ,className = "unit.TestSpecification" ,methodName = "testArray_unit_hx" ))
		
		self.t(_hx_c.python_internal_ArrayImpl.remove(a15, i03), _hx_c._hx_AnonObject(fileName = "Array.unit.hx" ,lineNumber = 184 ,className = "unit.TestSpecification" ,methodName = "testArray_unit_hx" ))
		self.eq(_hx_array_get(a15,0), i43, _hx_c._hx_AnonObject(fileName = "Array.unit.hx" ,lineNumber = 185 ,className = "unit.TestSpecification" ,methodName = "testArray_unit_hx" ))
		self.eq(_hx_array_get(a15,1), i13, _hx_c._hx_AnonObject(fileName = "Array.unit.hx" ,lineNumber = 185 ,className = "unit.TestSpecification" ,methodName = "testArray_unit_hx" ))
		self.eq(_hx_array_get(a15,2), i33, _hx_c._hx_AnonObject(fileName = "Array.unit.hx" ,lineNumber = 185 ,className = "unit.TestSpecification" ,methodName = "testArray_unit_hx" ))
		self.eq(_hx_array_get(a15,3), i23, _hx_c._hx_AnonObject(fileName = "Array.unit.hx" ,lineNumber = 185 ,className = "unit.TestSpecification" ,methodName = "testArray_unit_hx" ))
		
		self.f(_hx_c.python_internal_ArrayImpl.remove(a15, i03), _hx_c._hx_AnonObject(fileName = "Array.unit.hx" ,lineNumber = 186 ,className = "unit.TestSpecification" ,methodName = "testArray_unit_hx" ))
		self.eq(_hx_array_get(a15,0), i43, _hx_c._hx_AnonObject(fileName = "Array.unit.hx" ,lineNumber = 187 ,className = "unit.TestSpecification" ,methodName = "testArray_unit_hx" ))
		self.eq(_hx_array_get(a15,1), i13, _hx_c._hx_AnonObject(fileName = "Array.unit.hx" ,lineNumber = 187 ,className = "unit.TestSpecification" ,methodName = "testArray_unit_hx" ))
		self.eq(_hx_array_get(a15,2), i33, _hx_c._hx_AnonObject(fileName = "Array.unit.hx" ,lineNumber = 187 ,className = "unit.TestSpecification" ,methodName = "testArray_unit_hx" ))
		self.eq(_hx_array_get(a15,3), i23, _hx_c._hx_AnonObject(fileName = "Array.unit.hx" ,lineNumber = 187 ,className = "unit.TestSpecification" ,methodName = "testArray_unit_hx" ))
		
		a16 = ["foo", "bar"]
		self.t(_hx_c.python_internal_ArrayImpl.remove(a16, "foo"), _hx_c._hx_AnonObject(fileName = "Array.unit.hx" ,lineNumber = 189 ,className = "unit.TestSpecification" ,methodName = "testArray_unit_hx" ))
		self.eq(_hx_array_get(a16,0), "bar", _hx_c._hx_AnonObject(fileName = "Array.unit.hx" ,lineNumber = 190 ,className = "unit.TestSpecification" ,methodName = "testArray_unit_hx" ))
		a17 = [i03, None, i13, None, None]
		self.t(_hx_c.python_internal_ArrayImpl.remove(a17, None), _hx_c._hx_AnonObject(fileName = "Array.unit.hx" ,lineNumber = 192 ,className = "unit.TestSpecification" ,methodName = "testArray_unit_hx" ))
		self.eq(_hx_array_get(a17,0), i03, _hx_c._hx_AnonObject(fileName = "Array.unit.hx" ,lineNumber = 193 ,className = "unit.TestSpecification" ,methodName = "testArray_unit_hx" ))
		self.eq(_hx_array_get(a17,1), i13, _hx_c._hx_AnonObject(fileName = "Array.unit.hx" ,lineNumber = 193 ,className = "unit.TestSpecification" ,methodName = "testArray_unit_hx" ))
		self.eq(_hx_array_get(a17,2), None, _hx_c._hx_AnonObject(fileName = "Array.unit.hx" ,lineNumber = 193 ,className = "unit.TestSpecification" ,methodName = "testArray_unit_hx" ))
		self.eq(_hx_array_get(a17,3), None, _hx_c._hx_AnonObject(fileName = "Array.unit.hx" ,lineNumber = 193 ,className = "unit.TestSpecification" ,methodName = "testArray_unit_hx" ))
		
		self.t(_hx_c.python_internal_ArrayImpl.remove(a17, None), _hx_c._hx_AnonObject(fileName = "Array.unit.hx" ,lineNumber = 194 ,className = "unit.TestSpecification" ,methodName = "testArray_unit_hx" ))
		self.eq(_hx_array_get(a17,0), i03, _hx_c._hx_AnonObject(fileName = "Array.unit.hx" ,lineNumber = 195 ,className = "unit.TestSpecification" ,methodName = "testArray_unit_hx" ))
		self.eq(_hx_array_get(a17,1), i13, _hx_c._hx_AnonObject(fileName = "Array.unit.hx" ,lineNumber = 195 ,className = "unit.TestSpecification" ,methodName = "testArray_unit_hx" ))
		self.eq(_hx_array_get(a17,2), None, _hx_c._hx_AnonObject(fileName = "Array.unit.hx" ,lineNumber = 195 ,className = "unit.TestSpecification" ,methodName = "testArray_unit_hx" ))
		
		self.t(_hx_c.python_internal_ArrayImpl.remove(a17, None), _hx_c._hx_AnonObject(fileName = "Array.unit.hx" ,lineNumber = 196 ,className = "unit.TestSpecification" ,methodName = "testArray_unit_hx" ))
		self.eq(_hx_array_get(a17,0), i03, _hx_c._hx_AnonObject(fileName = "Array.unit.hx" ,lineNumber = 197 ,className = "unit.TestSpecification" ,methodName = "testArray_unit_hx" ))
		self.eq(_hx_array_get(a17,1), i13, _hx_c._hx_AnonObject(fileName = "Array.unit.hx" ,lineNumber = 197 ,className = "unit.TestSpecification" ,methodName = "testArray_unit_hx" ))
		
		self.f(_hx_c.python_internal_ArrayImpl.remove(a17, None), _hx_c._hx_AnonObject(fileName = "Array.unit.hx" ,lineNumber = 198 ,className = "unit.TestSpecification" ,methodName = "testArray_unit_hx" ))
		self.eq(_hx_array_get(a17,0), i03, _hx_c._hx_AnonObject(fileName = "Array.unit.hx" ,lineNumber = 199 ,className = "unit.TestSpecification" ,methodName = "testArray_unit_hx" ))
		self.eq(_hx_array_get(a17,1), i13, _hx_c._hx_AnonObject(fileName = "Array.unit.hx" ,lineNumber = 199 ,className = "unit.TestSpecification" ,methodName = "testArray_unit_hx" ))
		
		self.eq(_hx_c.python_internal_ArrayImpl.indexOf([], 10, None), -1, _hx_c._hx_AnonObject(fileName = "Array.unit.hx" ,lineNumber = 202 ,className = "unit.TestSpecification" ,methodName = "testArray_unit_hx" ))
		self.eq(_hx_c.python_internal_ArrayImpl.indexOf([10], 10, None), 0, _hx_c._hx_AnonObject(fileName = "Array.unit.hx" ,lineNumber = 203 ,className = "unit.TestSpecification" ,methodName = "testArray_unit_hx" ))
		self.eq(_hx_c.python_internal_ArrayImpl.indexOf([10, 10], 10, None), 0, _hx_c._hx_AnonObject(fileName = "Array.unit.hx" ,lineNumber = 204 ,className = "unit.TestSpecification" ,methodName = "testArray_unit_hx" ))
		self.eq(_hx_c.python_internal_ArrayImpl.indexOf([2, 10], 10, None), 1, _hx_c._hx_AnonObject(fileName = "Array.unit.hx" ,lineNumber = 205 ,className = "unit.TestSpecification" ,methodName = "testArray_unit_hx" ))
		self.eq(_hx_c.python_internal_ArrayImpl.indexOf([2, 5], 10, None), -1, _hx_c._hx_AnonObject(fileName = "Array.unit.hx" ,lineNumber = 206 ,className = "unit.TestSpecification" ,methodName = "testArray_unit_hx" ))
		self.eq(_hx_c.python_internal_ArrayImpl.indexOf(["foo", "bar", "bar", "baz"], "bar", None), 1, _hx_c._hx_AnonObject(fileName = "Array.unit.hx" ,lineNumber = 207 ,className = "unit.TestSpecification" ,methodName = "testArray_unit_hx" ))
		self.eq(_hx_c.python_internal_ArrayImpl.indexOf([1, 10, 10, 1], 10, 0), 1, _hx_c._hx_AnonObject(fileName = "Array.unit.hx" ,lineNumber = 208 ,className = "unit.TestSpecification" ,methodName = "testArray_unit_hx" ))
		self.eq(_hx_c.python_internal_ArrayImpl.indexOf([1, 10, 10, 1], 10, 1), 1, _hx_c._hx_AnonObject(fileName = "Array.unit.hx" ,lineNumber = 209 ,className = "unit.TestSpecification" ,methodName = "testArray_unit_hx" ))
		self.eq(_hx_c.python_internal_ArrayImpl.indexOf([1, 10, 10, 1], 10, 2), 2, _hx_c._hx_AnonObject(fileName = "Array.unit.hx" ,lineNumber = 210 ,className = "unit.TestSpecification" ,methodName = "testArray_unit_hx" ))
		self.eq(_hx_c.python_internal_ArrayImpl.indexOf([1, 10, 10, 1], 10, 3), -1, _hx_c._hx_AnonObject(fileName = "Array.unit.hx" ,lineNumber = 211 ,className = "unit.TestSpecification" ,methodName = "testArray_unit_hx" ))
		self.eq(_hx_c.python_internal_ArrayImpl.indexOf([1, 10, 10, 1], 10, 4), -1, _hx_c._hx_AnonObject(fileName = "Array.unit.hx" ,lineNumber = 212 ,className = "unit.TestSpecification" ,methodName = "testArray_unit_hx" ))
		self.eq(_hx_c.python_internal_ArrayImpl.indexOf([1, 10, 10, 1], 10, -1), -1, _hx_c._hx_AnonObject(fileName = "Array.unit.hx" ,lineNumber = 213 ,className = "unit.TestSpecification" ,methodName = "testArray_unit_hx" ))
		self.eq(_hx_c.python_internal_ArrayImpl.indexOf([1, 10, 10, 1], 10, -2), 2, _hx_c._hx_AnonObject(fileName = "Array.unit.hx" ,lineNumber = 214 ,className = "unit.TestSpecification" ,methodName = "testArray_unit_hx" ))
		self.eq(_hx_c.python_internal_ArrayImpl.indexOf([1, 10, 10, 1], 10, -3), 1, _hx_c._hx_AnonObject(fileName = "Array.unit.hx" ,lineNumber = 215 ,className = "unit.TestSpecification" ,methodName = "testArray_unit_hx" ))
		self.eq(_hx_c.python_internal_ArrayImpl.indexOf([1, 10, 10, 1], 10, -5), 1, _hx_c._hx_AnonObject(fileName = "Array.unit.hx" ,lineNumber = 216 ,className = "unit.TestSpecification" ,methodName = "testArray_unit_hx" ))
		self.eq(_hx_c.python_internal_ArrayImpl.lastIndexOf([], 10, None), -1, _hx_c._hx_AnonObject(fileName = "Array.unit.hx" ,lineNumber = 219 ,className = "unit.TestSpecification" ,methodName = "testArray_unit_hx" ))
		self.eq(_hx_c.python_internal_ArrayImpl.lastIndexOf([10], 10, None), 0, _hx_c._hx_AnonObject(fileName = "Array.unit.hx" ,lineNumber = 220 ,className = "unit.TestSpecification" ,methodName = "testArray_unit_hx" ))
		self.eq(_hx_c.python_internal_ArrayImpl.lastIndexOf([10, 10], 10, None), 1, _hx_c._hx_AnonObject(fileName = "Array.unit.hx" ,lineNumber = 221 ,className = "unit.TestSpecification" ,methodName = "testArray_unit_hx" ))
		self.eq(_hx_c.python_internal_ArrayImpl.lastIndexOf([2, 10], 10, None), 1, _hx_c._hx_AnonObject(fileName = "Array.unit.hx" ,lineNumber = 222 ,className = "unit.TestSpecification" ,methodName = "testArray_unit_hx" ))
		self.eq(_hx_c.python_internal_ArrayImpl.lastIndexOf([2, 5], 10, None), -1, _hx_c._hx_AnonObject(fileName = "Array.unit.hx" ,lineNumber = 223 ,className = "unit.TestSpecification" ,methodName = "testArray_unit_hx" ))
		self.eq(_hx_c.python_internal_ArrayImpl.lastIndexOf(["foo", "bar", "bar", "baz"], "bar", None), 2, _hx_c._hx_AnonObject(fileName = "Array.unit.hx" ,lineNumber = 224 ,className = "unit.TestSpecification" ,methodName = "testArray_unit_hx" ))
		self.eq(_hx_c.python_internal_ArrayImpl.lastIndexOf([1, 10, 10, 1], 10, 4), 2, _hx_c._hx_AnonObject(fileName = "Array.unit.hx" ,lineNumber = 225 ,className = "unit.TestSpecification" ,methodName = "testArray_unit_hx" ))
		self.eq(_hx_c.python_internal_ArrayImpl.lastIndexOf([1, 10, 10, 1], 10, 3), 2, _hx_c._hx_AnonObject(fileName = "Array.unit.hx" ,lineNumber = 226 ,className = "unit.TestSpecification" ,methodName = "testArray_unit_hx" ))
		self.eq(_hx_c.python_internal_ArrayImpl.lastIndexOf([1, 10, 10, 1], 10, 2), 2, _hx_c._hx_AnonObject(fileName = "Array.unit.hx" ,lineNumber = 227 ,className = "unit.TestSpecification" ,methodName = "testArray_unit_hx" ))
		self.eq(_hx_c.python_internal_ArrayImpl.lastIndexOf([1, 10, 10, 1], 10, 1), 1, _hx_c._hx_AnonObject(fileName = "Array.unit.hx" ,lineNumber = 228 ,className = "unit.TestSpecification" ,methodName = "testArray_unit_hx" ))
		self.eq(_hx_c.python_internal_ArrayImpl.lastIndexOf([1, 10, 10, 1], 10, 0), -1, _hx_c._hx_AnonObject(fileName = "Array.unit.hx" ,lineNumber = 229 ,className = "unit.TestSpecification" ,methodName = "testArray_unit_hx" ))
		self.eq(_hx_c.python_internal_ArrayImpl.lastIndexOf([1, 10, 10, 1], 10, -1), 2, _hx_c._hx_AnonObject(fileName = "Array.unit.hx" ,lineNumber = 230 ,className = "unit.TestSpecification" ,methodName = "testArray_unit_hx" ))
		self.eq(_hx_c.python_internal_ArrayImpl.lastIndexOf([1, 10, 10, 1], 10, -2), 2, _hx_c._hx_AnonObject(fileName = "Array.unit.hx" ,lineNumber = 231 ,className = "unit.TestSpecification" ,methodName = "testArray_unit_hx" ))
		self.eq(_hx_c.python_internal_ArrayImpl.lastIndexOf([1, 10, 10, 1], 10, -3), 1, _hx_c._hx_AnonObject(fileName = "Array.unit.hx" ,lineNumber = 232 ,className = "unit.TestSpecification" ,methodName = "testArray_unit_hx" ))
		self.eq(_hx_c.python_internal_ArrayImpl.lastIndexOf([1, 10, 10, 1], 10, -4), -1, _hx_c._hx_AnonObject(fileName = "Array.unit.hx" ,lineNumber = 233 ,className = "unit.TestSpecification" ,methodName = "testArray_unit_hx" ))
		self.eq(_hx_c.python_internal_ArrayImpl.lastIndexOf([1, 10, 10, 1], 10, -5), -1, _hx_c._hx_AnonObject(fileName = "Array.unit.hx" ,lineNumber = 234 ,className = "unit.TestSpecification" ,methodName = "testArray_unit_hx" ))
		i04 = _hx_c.unit_TestSpecification_IntWrap(1)
		i14 = _hx_c.unit_TestSpecification_IntWrap(1)
		i24 = _hx_c.unit_TestSpecification_IntWrap(5)
		a18 = [i04, i14, i24]
		b7 = _hx_builtin.list(a18)
		a18 != b7
		self.eq(_hx_array_get(b7,0), i04, _hx_c._hx_AnonObject(fileName = "Array.unit.hx" ,lineNumber = 243 ,className = "unit.TestSpecification" ,methodName = "testArray_unit_hx" ))
		self.eq(_hx_array_get(b7,1), i14, _hx_c._hx_AnonObject(fileName = "Array.unit.hx" ,lineNumber = 243 ,className = "unit.TestSpecification" ,methodName = "testArray_unit_hx" ))
		self.eq(_hx_array_get(b7,2), i24, _hx_c._hx_AnonObject(fileName = "Array.unit.hx" ,lineNumber = 243 ,className = "unit.TestSpecification" ,methodName = "testArray_unit_hx" ))
		
		a19 = []
		b8 = _hx_builtin.list(a19)
		a19 != b8
		self.eq(_hx_builtin.len(b8), 0, _hx_c._hx_AnonObject(fileName = "Array.unit.hx" ,lineNumber = 247 ,className = "unit.TestSpecification" ,methodName = "testArray_unit_hx" ))
		def _hx_local_10(i):
			return i * 2
		self.eq(_hx_array_get(_hx_builtin.list(_hx_builtin.map(_hx_local_10, [1, 2, 3])),0), 2, _hx_c._hx_AnonObject(fileName = "Array.unit.hx" ,lineNumber = 250 ,className = "unit.TestSpecification" ,methodName = "testArray_unit_hx" ))
		def _hx_local_11(i5):
			return i5 * 2
		self.eq(_hx_array_get(_hx_builtin.list(_hx_builtin.map(_hx_local_11, [1, 2, 3])),1), 4, _hx_c._hx_AnonObject(fileName = "Array.unit.hx" ,lineNumber = 250 ,className = "unit.TestSpecification" ,methodName = "testArray_unit_hx" ))
		def _hx_local_12(i6):
			return i6 * 2
		self.eq(_hx_array_get(_hx_builtin.list(_hx_builtin.map(_hx_local_12, [1, 2, 3])),2), 6, _hx_c._hx_AnonObject(fileName = "Array.unit.hx" ,lineNumber = 250 ,className = "unit.TestSpecification" ,methodName = "testArray_unit_hx" ))
		
		a20 = [_hx_c.unit_TestSpecification_IntWrap(1), _hx_c.unit_TestSpecification_IntWrap(2)]
		def _hx_local_13(x):
			return x
		b9 = _hx_builtin.list(_hx_builtin.map(_hx_local_13, a20))
		a20 != b9
		self.eq(_hx_builtin.len(b9), _hx_builtin.len(a20), _hx_c._hx_AnonObject(fileName = "Array.unit.hx" ,lineNumber = 254 ,className = "unit.TestSpecification" ,methodName = "testArray_unit_hx" ))
		self.eq(_hx_array_get(a20,0), _hx_array_get(b9,0), _hx_c._hx_AnonObject(fileName = "Array.unit.hx" ,lineNumber = 255 ,className = "unit.TestSpecification" ,methodName = "testArray_unit_hx" ))
		self.eq(_hx_array_get(a20,1), _hx_array_get(b9,1), _hx_c._hx_AnonObject(fileName = "Array.unit.hx" ,lineNumber = 256 ,className = "unit.TestSpecification" ,methodName = "testArray_unit_hx" ))
		def _hx_local_14(s):
			return _hx_toUpperCase(s)
		func = _hx_local_14
		self.eq(_hx_array_get(_hx_builtin.list(_hx_builtin.map(func, ["foo", "bar"])),0), "FOO", _hx_c._hx_AnonObject(fileName = "Array.unit.hx" ,lineNumber = 258 ,className = "unit.TestSpecification" ,methodName = "testArray_unit_hx" ))
		self.eq(_hx_array_get(_hx_builtin.list(_hx_builtin.map(func, ["foo", "bar"])),1), "BAR", _hx_c._hx_AnonObject(fileName = "Array.unit.hx" ,lineNumber = 258 ,className = "unit.TestSpecification" ,methodName = "testArray_unit_hx" ))
		
		def _hx_local_15():
			_this7 = _hx_builtin.list(_hx_builtin.map(func, []))
			return _hx_builtin.len(_this7)
		
		self.eq(_hx_local_15(), 0, _hx_c._hx_AnonObject(fileName = "Array.unit.hx" ,lineNumber = 259 ,className = "unit.TestSpecification" ,methodName = "testArray_unit_hx" ))
		def _hx_local_16(i7):
			return i7 < 3
		self.eq(_hx_array_get(_hx_builtin.list(_hx_builtin.filter(_hx_local_16, [1, 2, 3, 4])),0), 1, _hx_c._hx_AnonObject(fileName = "Array.unit.hx" ,lineNumber = 262 ,className = "unit.TestSpecification" ,methodName = "testArray_unit_hx" ))
		def _hx_local_17(i8):
			return i8 < 3
		self.eq(_hx_array_get(_hx_builtin.list(_hx_builtin.filter(_hx_local_17, [1, 2, 3, 4])),1), 2, _hx_c._hx_AnonObject(fileName = "Array.unit.hx" ,lineNumber = 262 ,className = "unit.TestSpecification" ,methodName = "testArray_unit_hx" ))
		
		def _hx_local_18(i9):
			return True
		self.eq(_hx_array_get(_hx_builtin.list(_hx_builtin.filter(_hx_local_18, [1, 2, 3, 4])),0), 1, _hx_c._hx_AnonObject(fileName = "Array.unit.hx" ,lineNumber = 263 ,className = "unit.TestSpecification" ,methodName = "testArray_unit_hx" ))
		def _hx_local_19(i10):
			return True
		self.eq(_hx_array_get(_hx_builtin.list(_hx_builtin.filter(_hx_local_19, [1, 2, 3, 4])),1), 2, _hx_c._hx_AnonObject(fileName = "Array.unit.hx" ,lineNumber = 263 ,className = "unit.TestSpecification" ,methodName = "testArray_unit_hx" ))
		def _hx_local_20(i15):
			return True
		self.eq(_hx_array_get(_hx_builtin.list(_hx_builtin.filter(_hx_local_20, [1, 2, 3, 4])),2), 3, _hx_c._hx_AnonObject(fileName = "Array.unit.hx" ,lineNumber = 263 ,className = "unit.TestSpecification" ,methodName = "testArray_unit_hx" ))
		def _hx_local_21(i16):
			return True
		self.eq(_hx_array_get(_hx_builtin.list(_hx_builtin.filter(_hx_local_21, [1, 2, 3, 4])),3), 4, _hx_c._hx_AnonObject(fileName = "Array.unit.hx" ,lineNumber = 263 ,className = "unit.TestSpecification" ,methodName = "testArray_unit_hx" ))
		
		def _hx_local_22():
			def _hx_local_23(i17):
				return False
			_this8 = _hx_builtin.list(_hx_builtin.filter(_hx_local_23, [1, 2, 3, 4]))
			return _hx_builtin.len(_this8)
		
		self.eq(_hx_local_22(), 0, _hx_c._hx_AnonObject(fileName = "Array.unit.hx" ,lineNumber = 264 ,className = "unit.TestSpecification" ,methodName = "testArray_unit_hx" ))
		def _hx_local_24():
			def _hx_local_25(i18):
				return True
			_this9 = _hx_builtin.list(_hx_builtin.filter(_hx_local_25, []))
			return _hx_builtin.len(_this9)
		
		self.eq(_hx_local_24(), 0, _hx_c._hx_AnonObject(fileName = "Array.unit.hx" ,lineNumber = 265 ,className = "unit.TestSpecification" ,methodName = "testArray_unit_hx" ))
		def _hx_local_26():
			def _hx_local_27(i19):
				return False
			_this10 = _hx_builtin.list(_hx_builtin.filter(_hx_local_27, []))
			return _hx_builtin.len(_this10)
		
		self.eq(_hx_local_26(), 0, _hx_c._hx_AnonObject(fileName = "Array.unit.hx" ,lineNumber = 266 ,className = "unit.TestSpecification" ,methodName = "testArray_unit_hx" ))
		arr = [_hx_c._hx_AnonObject(id = 1 ), _hx_c._hx_AnonObject(id = 2 ), _hx_c._hx_AnonObject(id = 3 ), _hx_c._hx_AnonObject(id = 4 ), _hx_c._hx_AnonObject(id = 5 )]
		def _hx_local_28(i20):
			return i20.id % 2 != 0
		arr = _hx_builtin.list(_hx_builtin.filter(_hx_local_28, arr))
		values = []
		_g = 0
		while _g < _hx_builtin.len(arr):
			a21 = _hx_array_get(arr,_g)
			_g = _g + 1
			values.append(a21.id)
			_hx_builtin.len(values)
		
		
		self.eq(_hx_array_get(values,0), 1, _hx_c._hx_AnonObject(fileName = "Array.unit.hx" ,lineNumber = 271 ,className = "unit.TestSpecification" ,methodName = "testArray_unit_hx" ))
		self.eq(_hx_array_get(values,1), 3, _hx_c._hx_AnonObject(fileName = "Array.unit.hx" ,lineNumber = 271 ,className = "unit.TestSpecification" ,methodName = "testArray_unit_hx" ))
		self.eq(_hx_array_get(values,2), 5, _hx_c._hx_AnonObject(fileName = "Array.unit.hx" ,lineNumber = 271 ,className = "unit.TestSpecification" ,methodName = "testArray_unit_hx" ))
		
		a22 = [0, 1, 2]
		def _hx_local_29(x1):
			return (x1 & 1) == 0
		def _hx_local_30(x2):
			return x2 * 10
		b10 = _hx_functools.partial(HxOverrides_map, _hx_functools.partial(HxOverrides_filter, a22)(_hx_local_29))(_hx_local_30)
		self.eq(HxOverrides_length(b10), 2, _hx_c._hx_AnonObject(fileName = "Array.unit.hx" ,lineNumber = 277 ,className = "unit.TestSpecification" ,methodName = "testArray_unit_hx" ))
		_hx_array_set(b10,0, 0)
		_hx_array_set(b10,1, 20)
	

	def testList_unit_hx(self):
		l = _hx_c.List()
		self.eq(l.toString(), "{}", _hx_c._hx_AnonObject(fileName = "List.unit.hx" ,lineNumber = 2 ,className = "unit.TestSpecification" ,methodName = "testList_unit_hx" ))
		self.t(l.isEmpty(), _hx_c._hx_AnonObject(fileName = "List.unit.hx" ,lineNumber = 3 ,className = "unit.TestSpecification" ,methodName = "testList_unit_hx" ))
		self.f(l.remove("1"), _hx_c._hx_AnonObject(fileName = "List.unit.hx" ,lineNumber = 4 ,className = "unit.TestSpecification" ,methodName = "testList_unit_hx" ))
		self.eq(l.length, 0, _hx_c._hx_AnonObject(fileName = "List.unit.hx" ,lineNumber = 5 ,className = "unit.TestSpecification" ,methodName = "testList_unit_hx" ))
		self.eq(l.first(), None, _hx_c._hx_AnonObject(fileName = "List.unit.hx" ,lineNumber = 6 ,className = "unit.TestSpecification" ,methodName = "testList_unit_hx" ))
		self.eq(l.last(), None, _hx_c._hx_AnonObject(fileName = "List.unit.hx" ,lineNumber = 7 ,className = "unit.TestSpecification" ,methodName = "testList_unit_hx" ))
		self.eq(l.pop(), None, _hx_c._hx_AnonObject(fileName = "List.unit.hx" ,lineNumber = 8 ,className = "unit.TestSpecification" ,methodName = "testList_unit_hx" ))
		l.add("1")
		self.eq(l.length, 1, _hx_c._hx_AnonObject(fileName = "List.unit.hx" ,lineNumber = 10 ,className = "unit.TestSpecification" ,methodName = "testList_unit_hx" ))
		self.eq(l.first(), "1", _hx_c._hx_AnonObject(fileName = "List.unit.hx" ,lineNumber = 11 ,className = "unit.TestSpecification" ,methodName = "testList_unit_hx" ))
		self.eq(l.last(), "1", _hx_c._hx_AnonObject(fileName = "List.unit.hx" ,lineNumber = 12 ,className = "unit.TestSpecification" ,methodName = "testList_unit_hx" ))
		self.eq(l.toString(), "{1}", _hx_c._hx_AnonObject(fileName = "List.unit.hx" ,lineNumber = 13 ,className = "unit.TestSpecification" ,methodName = "testList_unit_hx" ))
		self.f(l.isEmpty(), _hx_c._hx_AnonObject(fileName = "List.unit.hx" ,lineNumber = 14 ,className = "unit.TestSpecification" ,methodName = "testList_unit_hx" ))
		self.eq(l.join("x"), "1", _hx_c._hx_AnonObject(fileName = "List.unit.hx" ,lineNumber = 15 ,className = "unit.TestSpecification" ,methodName = "testList_unit_hx" ))
		self.eq(l.pop(), "1", _hx_c._hx_AnonObject(fileName = "List.unit.hx" ,lineNumber = 16 ,className = "unit.TestSpecification" ,methodName = "testList_unit_hx" ))
		self.f(l.remove("1"), _hx_c._hx_AnonObject(fileName = "List.unit.hx" ,lineNumber = 17 ,className = "unit.TestSpecification" ,methodName = "testList_unit_hx" ))
		self.eq(l.length, 0, _hx_c._hx_AnonObject(fileName = "List.unit.hx" ,lineNumber = 18 ,className = "unit.TestSpecification" ,methodName = "testList_unit_hx" ))
		l.add("1")
		self.eq(l.length, 1, _hx_c._hx_AnonObject(fileName = "List.unit.hx" ,lineNumber = 20 ,className = "unit.TestSpecification" ,methodName = "testList_unit_hx" ))
		self.t(l.remove("1"), _hx_c._hx_AnonObject(fileName = "List.unit.hx" ,lineNumber = 21 ,className = "unit.TestSpecification" ,methodName = "testList_unit_hx" ))
		l.add("1")
		l.push("2")
		self.eq(l.length, 2, _hx_c._hx_AnonObject(fileName = "List.unit.hx" ,lineNumber = 24 ,className = "unit.TestSpecification" ,methodName = "testList_unit_hx" ))
		self.eq(l.first(), "2", _hx_c._hx_AnonObject(fileName = "List.unit.hx" ,lineNumber = 25 ,className = "unit.TestSpecification" ,methodName = "testList_unit_hx" ))
		self.eq(l.last(), "1", _hx_c._hx_AnonObject(fileName = "List.unit.hx" ,lineNumber = 26 ,className = "unit.TestSpecification" ,methodName = "testList_unit_hx" ))
		self.eq(l.toString(), "{2, 1}", _hx_c._hx_AnonObject(fileName = "List.unit.hx" ,lineNumber = 27 ,className = "unit.TestSpecification" ,methodName = "testList_unit_hx" ))
		self.eq(l.join("x"), "2x1", _hx_c._hx_AnonObject(fileName = "List.unit.hx" ,lineNumber = 28 ,className = "unit.TestSpecification" ,methodName = "testList_unit_hx" ))
		l.clear()
		self.t(l.isEmpty(), _hx_c._hx_AnonObject(fileName = "List.unit.hx" ,lineNumber = 30 ,className = "unit.TestSpecification" ,methodName = "testList_unit_hx" ))
		l.add("1")
		l.add("2")
		l.add("3")
		def _hx_local_0(i):
			return Std.string(i) + Std.string(i)
		l2 = l.map(_hx_local_0)
		self.eq(l2.pop(), "11", _hx_c._hx_AnonObject(fileName = "List.unit.hx" ,lineNumber = 35 ,className = "unit.TestSpecification" ,methodName = "testList_unit_hx" ))
		self.eq(l2.pop(), "22", _hx_c._hx_AnonObject(fileName = "List.unit.hx" ,lineNumber = 36 ,className = "unit.TestSpecification" ,methodName = "testList_unit_hx" ))
		self.eq(l2.pop(), "33", _hx_c._hx_AnonObject(fileName = "List.unit.hx" ,lineNumber = 37 ,className = "unit.TestSpecification" ,methodName = "testList_unit_hx" ))
		def _hx_local_1(i1):
			return i1 != "2"
		l3 = l.filter(_hx_local_1)
		self.eq(l3.pop(), "1", _hx_c._hx_AnonObject(fileName = "List.unit.hx" ,lineNumber = 39 ,className = "unit.TestSpecification" ,methodName = "testList_unit_hx" ))
		self.eq(l3.pop(), "3", _hx_c._hx_AnonObject(fileName = "List.unit.hx" ,lineNumber = 40 ,className = "unit.TestSpecification" ,methodName = "testList_unit_hx" ))
	

	def testLambda_unit_hx(self):
		def _hx_local_0(o):
			return _hx_c.Type.getClassName(_hx_c.Type.getClass(o))
		name = _hx_local_0
		a = [1]
		a2 = _hx_c.Lambda.array(a)
		self.eq(name(a), "Array", _hx_c._hx_AnonObject(fileName = "Lambda.unit.hx" ,lineNumber = 5 ,className = "unit.TestSpecification" ,methodName = "testLambda_unit_hx" ))
		self.eq(name(a2), "Array", _hx_c._hx_AnonObject(fileName = "Lambda.unit.hx" ,lineNumber = 6 ,className = "unit.TestSpecification" ,methodName = "testLambda_unit_hx" ))
		a != a2
		self.eq(_hx_builtin.len(a2), 1, _hx_c._hx_AnonObject(fileName = "Lambda.unit.hx" ,lineNumber = 8 ,className = "unit.TestSpecification" ,methodName = "testLambda_unit_hx" ))
		self.eq(_hx_array_get(a2,0), 1, _hx_c._hx_AnonObject(fileName = "Lambda.unit.hx" ,lineNumber = 9 ,className = "unit.TestSpecification" ,methodName = "testLambda_unit_hx" ))
		e = []
		e2 = _hx_c.Lambda.array(e)
		e != e2
		self.eq(_hx_builtin.len(e2), 0, _hx_c._hx_AnonObject(fileName = "Lambda.unit.hx" ,lineNumber = 13 ,className = "unit.TestSpecification" ,methodName = "testLambda_unit_hx" ))
		a1 = [1]
		l = _hx_c.Lambda.list(a1)
		self.eq(name(a1), "Array", _hx_c._hx_AnonObject(fileName = "Lambda.unit.hx" ,lineNumber = 18 ,className = "unit.TestSpecification" ,methodName = "testLambda_unit_hx" ))
		self.eq(name(l), "List", _hx_c._hx_AnonObject(fileName = "Lambda.unit.hx" ,lineNumber = 19 ,className = "unit.TestSpecification" ,methodName = "testLambda_unit_hx" ))
		self.eq(l.length, 1, _hx_c._hx_AnonObject(fileName = "Lambda.unit.hx" ,lineNumber = 20 ,className = "unit.TestSpecification" ,methodName = "testLambda_unit_hx" ))
		self.eq(l.first(), 1, _hx_c._hx_AnonObject(fileName = "Lambda.unit.hx" ,lineNumber = 21 ,className = "unit.TestSpecification" ,methodName = "testLambda_unit_hx" ))
		l2 = _hx_c.Lambda.list(l)
		self.eq(name(l2), "List", _hx_c._hx_AnonObject(fileName = "Lambda.unit.hx" ,lineNumber = 23 ,className = "unit.TestSpecification" ,methodName = "testLambda_unit_hx" ))
		l != l2
		e1 = _hx_c.List()
		e21 = _hx_c.Lambda.list(e1)
		e1 != e21
		self.eq(e21.length, 0, _hx_c._hx_AnonObject(fileName = "Lambda.unit.hx" ,lineNumber = 28 ,className = "unit.TestSpecification" ,methodName = "testLambda_unit_hx" ))
		a3 = [1, 2, 3]
		def _hx_local_1(i):
			return i * 2
		b = _hx_c.Lambda.map(a3, _hx_local_1)
		self.eq(b.length, 3, _hx_c._hx_AnonObject(fileName = "Lambda.unit.hx" ,lineNumber = 33 ,className = "unit.TestSpecification" ,methodName = "testLambda_unit_hx" ))
		self.eq(b.pop(), 2, _hx_c._hx_AnonObject(fileName = "Lambda.unit.hx" ,lineNumber = 34 ,className = "unit.TestSpecification" ,methodName = "testLambda_unit_hx" ))
		self.eq(b.pop(), 4, _hx_c._hx_AnonObject(fileName = "Lambda.unit.hx" ,lineNumber = 35 ,className = "unit.TestSpecification" ,methodName = "testLambda_unit_hx" ))
		self.eq(b.pop(), 6, _hx_c._hx_AnonObject(fileName = "Lambda.unit.hx" ,lineNumber = 36 ,className = "unit.TestSpecification" ,methodName = "testLambda_unit_hx" ))
		a4 = [1, 2, 3]
		total = 0
		def _hx_local_3(index,i1):
			nonlocal total
			total = total + index
			return i1 * 2
			
		
		myMap = _hx_local_3
		b1 = _hx_c.Lambda.mapi(a4, myMap)
		self.eq(total, 3, _hx_c._hx_AnonObject(fileName = "Lambda.unit.hx" ,lineNumber = 46 ,className = "unit.TestSpecification" ,methodName = "testLambda_unit_hx" ))
		self.eq(b1.length, 3, _hx_c._hx_AnonObject(fileName = "Lambda.unit.hx" ,lineNumber = 47 ,className = "unit.TestSpecification" ,methodName = "testLambda_unit_hx" ))
		self.eq(b1.pop(), 2, _hx_c._hx_AnonObject(fileName = "Lambda.unit.hx" ,lineNumber = 48 ,className = "unit.TestSpecification" ,methodName = "testLambda_unit_hx" ))
		self.eq(b1.pop(), 4, _hx_c._hx_AnonObject(fileName = "Lambda.unit.hx" ,lineNumber = 49 ,className = "unit.TestSpecification" ,methodName = "testLambda_unit_hx" ))
		self.eq(b1.pop(), 6, _hx_c._hx_AnonObject(fileName = "Lambda.unit.hx" ,lineNumber = 50 ,className = "unit.TestSpecification" ,methodName = "testLambda_unit_hx" ))
		self.t(_hx_c.Lambda.has([1, 2, 3], 1), _hx_c._hx_AnonObject(fileName = "Lambda.unit.hx" ,lineNumber = 53 ,className = "unit.TestSpecification" ,methodName = "testLambda_unit_hx" ))
		self.f(_hx_c.Lambda.has([1, 2, 3], 4), _hx_c._hx_AnonObject(fileName = "Lambda.unit.hx" ,lineNumber = 54 ,className = "unit.TestSpecification" ,methodName = "testLambda_unit_hx" ))
		self.f(_hx_c.Lambda.has([], None), _hx_c._hx_AnonObject(fileName = "Lambda.unit.hx" ,lineNumber = 55 ,className = "unit.TestSpecification" ,methodName = "testLambda_unit_hx" ))
		self.t(_hx_c.Lambda.has([None], None), _hx_c._hx_AnonObject(fileName = "Lambda.unit.hx" ,lineNumber = 56 ,className = "unit.TestSpecification" ,methodName = "testLambda_unit_hx" ))
		def _hx_local_4(i2):
			return i2 == 2
		self.t(_hx_c.Lambda.exists([1, 2, 3], _hx_local_4), _hx_c._hx_AnonObject(fileName = "Lambda.unit.hx" ,lineNumber = 59 ,className = "unit.TestSpecification" ,methodName = "testLambda_unit_hx" ))
		def _hx_local_5(i3):
			return i3 == 4
		self.f(_hx_c.Lambda.exists([1, 2, 3], _hx_local_5), _hx_c._hx_AnonObject(fileName = "Lambda.unit.hx" ,lineNumber = 60 ,className = "unit.TestSpecification" ,methodName = "testLambda_unit_hx" ))
		def _hx_local_6(x):
			return True
		self.f(_hx_c.Lambda.exists([], _hx_local_6), _hx_c._hx_AnonObject(fileName = "Lambda.unit.hx" ,lineNumber = 61 ,className = "unit.TestSpecification" ,methodName = "testLambda_unit_hx" ))
		def _hx_local_7(i4):
			return i4 % 2 == 0
		self.t(_hx_c.Lambda.foreach([2, 4, 6], _hx_local_7), _hx_c._hx_AnonObject(fileName = "Lambda.unit.hx" ,lineNumber = 64 ,className = "unit.TestSpecification" ,methodName = "testLambda_unit_hx" ))
		def _hx_local_8(i5):
			return i5 % 2 == 0
		self.f(_hx_c.Lambda.foreach([2, 4, 7], _hx_local_8), _hx_c._hx_AnonObject(fileName = "Lambda.unit.hx" ,lineNumber = 65 ,className = "unit.TestSpecification" ,methodName = "testLambda_unit_hx" ))
		def _hx_local_9(x1):
			return False
		self.t(_hx_c.Lambda.foreach([], _hx_local_9), _hx_c._hx_AnonObject(fileName = "Lambda.unit.hx" ,lineNumber = 66 ,className = "unit.TestSpecification" ,methodName = "testLambda_unit_hx" ))
		check = 0
		sum = 0
		def _hx_local_11(i6):
			nonlocal check
			nonlocal sum
			if check != i6 - 1:
				raise _HxException("no match")
			
			check = i6
			sum = sum + i6
			
		
		_hx_c.Lambda.iter([1, 2, 3], _hx_local_11)
		self.eq(check, 3, _hx_c._hx_AnonObject(fileName = "Lambda.unit.hx" ,lineNumber = 76 ,className = "unit.TestSpecification" ,methodName = "testLambda_unit_hx" ))
		self.eq(sum, 6, _hx_c._hx_AnonObject(fileName = "Lambda.unit.hx" ,lineNumber = 77 ,className = "unit.TestSpecification" ,methodName = "testLambda_unit_hx" ))
		def _hx_local_12(i7):
			raise _HxException("no call")
		_hx_c.Lambda.iter([], _hx_local_12)
		def _hx_local_13(i8):
			return i8 < 3
		self.eq(_hx_array_get(_hx_c.Lambda.array(_hx_c.Lambda.filter([1, 2, 3, 4], _hx_local_13)),0), 1, _hx_c._hx_AnonObject(fileName = "Lambda.unit.hx" ,lineNumber = 81 ,className = "unit.TestSpecification" ,methodName = "testLambda_unit_hx" ))
		def _hx_local_14(i9):
			return i9 < 3
		self.eq(_hx_array_get(_hx_c.Lambda.array(_hx_c.Lambda.filter([1, 2, 3, 4], _hx_local_14)),1), 2, _hx_c._hx_AnonObject(fileName = "Lambda.unit.hx" ,lineNumber = 81 ,className = "unit.TestSpecification" ,methodName = "testLambda_unit_hx" ))
		
		def _hx_local_15(i10):
			return True
		self.eq(_hx_array_get(_hx_c.Lambda.array(_hx_c.Lambda.filter([1, 2, 3, 4], _hx_local_15)),0), 1, _hx_c._hx_AnonObject(fileName = "Lambda.unit.hx" ,lineNumber = 82 ,className = "unit.TestSpecification" ,methodName = "testLambda_unit_hx" ))
		def _hx_local_16(i11):
			return True
		self.eq(_hx_array_get(_hx_c.Lambda.array(_hx_c.Lambda.filter([1, 2, 3, 4], _hx_local_16)),1), 2, _hx_c._hx_AnonObject(fileName = "Lambda.unit.hx" ,lineNumber = 82 ,className = "unit.TestSpecification" ,methodName = "testLambda_unit_hx" ))
		def _hx_local_17(i12):
			return True
		self.eq(_hx_array_get(_hx_c.Lambda.array(_hx_c.Lambda.filter([1, 2, 3, 4], _hx_local_17)),2), 3, _hx_c._hx_AnonObject(fileName = "Lambda.unit.hx" ,lineNumber = 82 ,className = "unit.TestSpecification" ,methodName = "testLambda_unit_hx" ))
		def _hx_local_18(i13):
			return True
		self.eq(_hx_array_get(_hx_c.Lambda.array(_hx_c.Lambda.filter([1, 2, 3, 4], _hx_local_18)),3), 4, _hx_c._hx_AnonObject(fileName = "Lambda.unit.hx" ,lineNumber = 82 ,className = "unit.TestSpecification" ,methodName = "testLambda_unit_hx" ))
		
		def _hx_local_19():
			def _hx_local_20(i14):
				return False
			_this = _hx_c.Lambda.array(_hx_c.Lambda.filter([1, 2, 3, 4], _hx_local_20))
			return _hx_builtin.len(_this)
		
		self.eq(_hx_local_19(), 0, _hx_c._hx_AnonObject(fileName = "Lambda.unit.hx" ,lineNumber = 83 ,className = "unit.TestSpecification" ,methodName = "testLambda_unit_hx" ))
		def _hx_local_21():
			def _hx_local_22(i15):
				return False
			_this1 = _hx_c.Lambda.array(_hx_c.Lambda.filter([], _hx_local_22))
			return _hx_builtin.len(_this1)
		
		self.eq(_hx_local_21(), 0, _hx_c._hx_AnonObject(fileName = "Lambda.unit.hx" ,lineNumber = 84 ,className = "unit.TestSpecification" ,methodName = "testLambda_unit_hx" ))
		def _hx_local_23():
			def _hx_local_24(i16):
				return True
			_this2 = _hx_c.Lambda.array(_hx_c.Lambda.filter([], _hx_local_24))
			return _hx_builtin.len(_this2)
		
		self.eq(_hx_local_23(), 0, _hx_c._hx_AnonObject(fileName = "Lambda.unit.hx" ,lineNumber = 85 ,className = "unit.TestSpecification" ,methodName = "testLambda_unit_hx" ))
		def _hx_local_25():
			_this3 = _hx_c.Lambda.array(_hx_c.Lambda.filter([], None))
			return _hx_builtin.len(_this3)
		
		self.eq(_hx_local_25(), 0, _hx_c._hx_AnonObject(fileName = "Lambda.unit.hx" ,lineNumber = 86 ,className = "unit.TestSpecification" ,methodName = "testLambda_unit_hx" ))
		def _hx_local_26(s,acc):
			return Std.string(s) + Std.string(acc)
		self.eq(_hx_c.Lambda.fold(["b", "c", "d"], _hx_local_26, "a"), "dcba", _hx_c._hx_AnonObject(fileName = "Lambda.unit.hx" ,lineNumber = 90 ,className = "unit.TestSpecification" ,methodName = "testLambda_unit_hx" ))
		def _hx_local_27(s1,acc1):
			return Std.string(s1) + Std.string(acc1)
		self.eq(_hx_c.Lambda.fold([], _hx_local_27, "a"), "a", _hx_c._hx_AnonObject(fileName = "Lambda.unit.hx" ,lineNumber = 91 ,className = "unit.TestSpecification" ,methodName = "testLambda_unit_hx" ))
		def _hx_local_28(s2,acc2):
			return Std.string(s2) + Std.string(acc2)
		self.eq(_hx_c.Lambda.fold([], _hx_local_28, None), None, _hx_c._hx_AnonObject(fileName = "Lambda.unit.hx" ,lineNumber = 92 ,className = "unit.TestSpecification" ,methodName = "testLambda_unit_hx" ))
		self.eq(_hx_c.Lambda.count([1, 2, 3]), 3, _hx_c._hx_AnonObject(fileName = "Lambda.unit.hx" ,lineNumber = 95 ,className = "unit.TestSpecification" ,methodName = "testLambda_unit_hx" ))
		def _hx_local_29(x2):
			return False
		self.eq(_hx_c.Lambda.count([1, 2, 3], _hx_local_29), 0, _hx_c._hx_AnonObject(fileName = "Lambda.unit.hx" ,lineNumber = 96 ,className = "unit.TestSpecification" ,methodName = "testLambda_unit_hx" ))
		def _hx_local_30(x3):
			return True
		self.eq(_hx_c.Lambda.count([1, 2, 3], _hx_local_30), 3, _hx_c._hx_AnonObject(fileName = "Lambda.unit.hx" ,lineNumber = 97 ,className = "unit.TestSpecification" ,methodName = "testLambda_unit_hx" ))
		def _hx_local_31(x4):
			return x4 % 2 == 1
		self.eq(_hx_c.Lambda.count([1, 2, 3], _hx_local_31), 2, _hx_c._hx_AnonObject(fileName = "Lambda.unit.hx" ,lineNumber = 98 ,className = "unit.TestSpecification" ,methodName = "testLambda_unit_hx" ))
		self.eq(_hx_c.Lambda.count([]), 0, _hx_c._hx_AnonObject(fileName = "Lambda.unit.hx" ,lineNumber = 99 ,className = "unit.TestSpecification" ,methodName = "testLambda_unit_hx" ))
		self.t(_hx_c.Lambda.empty([]), _hx_c._hx_AnonObject(fileName = "Lambda.unit.hx" ,lineNumber = 102 ,className = "unit.TestSpecification" ,methodName = "testLambda_unit_hx" ))
		self.f(_hx_c.Lambda.empty([None]), _hx_c._hx_AnonObject(fileName = "Lambda.unit.hx" ,lineNumber = 103 ,className = "unit.TestSpecification" ,methodName = "testLambda_unit_hx" ))
		self.eq(_hx_c.Lambda.indexOf([1, 2, 3], 1), 0, _hx_c._hx_AnonObject(fileName = "Lambda.unit.hx" ,lineNumber = 106 ,className = "unit.TestSpecification" ,methodName = "testLambda_unit_hx" ))
		self.eq(_hx_c.Lambda.indexOf([1, 2, 3], 2), 1, _hx_c._hx_AnonObject(fileName = "Lambda.unit.hx" ,lineNumber = 107 ,className = "unit.TestSpecification" ,methodName = "testLambda_unit_hx" ))
		self.eq(_hx_c.Lambda.indexOf([1, 2, 3], 3), 2, _hx_c._hx_AnonObject(fileName = "Lambda.unit.hx" ,lineNumber = 108 ,className = "unit.TestSpecification" ,methodName = "testLambda_unit_hx" ))
		self.eq(_hx_c.Lambda.indexOf([1, 2, 3, 3], 3), 2, _hx_c._hx_AnonObject(fileName = "Lambda.unit.hx" ,lineNumber = 109 ,className = "unit.TestSpecification" ,methodName = "testLambda_unit_hx" ))
		self.eq(_hx_c.Lambda.indexOf([1, 2, 3], 4), -1, _hx_c._hx_AnonObject(fileName = "Lambda.unit.hx" ,lineNumber = 110 ,className = "unit.TestSpecification" ,methodName = "testLambda_unit_hx" ))
		self.eq(_hx_c.Lambda.indexOf([], 1), -1, _hx_c._hx_AnonObject(fileName = "Lambda.unit.hx" ,lineNumber = 111 ,className = "unit.TestSpecification" ,methodName = "testLambda_unit_hx" ))
		self.eq(_hx_array_get(_hx_c.Lambda.array(_hx_c.Lambda.concat([1, 2, 3], [3, 4, 5])),0), 1, _hx_c._hx_AnonObject(fileName = "Lambda.unit.hx" ,lineNumber = 114 ,className = "unit.TestSpecification" ,methodName = "testLambda_unit_hx" ))
		self.eq(_hx_array_get(_hx_c.Lambda.array(_hx_c.Lambda.concat([1, 2, 3], [3, 4, 5])),1), 2, _hx_c._hx_AnonObject(fileName = "Lambda.unit.hx" ,lineNumber = 114 ,className = "unit.TestSpecification" ,methodName = "testLambda_unit_hx" ))
		self.eq(_hx_array_get(_hx_c.Lambda.array(_hx_c.Lambda.concat([1, 2, 3], [3, 4, 5])),2), 3, _hx_c._hx_AnonObject(fileName = "Lambda.unit.hx" ,lineNumber = 114 ,className = "unit.TestSpecification" ,methodName = "testLambda_unit_hx" ))
		self.eq(_hx_array_get(_hx_c.Lambda.array(_hx_c.Lambda.concat([1, 2, 3], [3, 4, 5])),3), 3, _hx_c._hx_AnonObject(fileName = "Lambda.unit.hx" ,lineNumber = 114 ,className = "unit.TestSpecification" ,methodName = "testLambda_unit_hx" ))
		self.eq(_hx_array_get(_hx_c.Lambda.array(_hx_c.Lambda.concat([1, 2, 3], [3, 4, 5])),4), 4, _hx_c._hx_AnonObject(fileName = "Lambda.unit.hx" ,lineNumber = 114 ,className = "unit.TestSpecification" ,methodName = "testLambda_unit_hx" ))
		self.eq(_hx_array_get(_hx_c.Lambda.array(_hx_c.Lambda.concat([1, 2, 3], [3, 4, 5])),5), 5, _hx_c._hx_AnonObject(fileName = "Lambda.unit.hx" ,lineNumber = 114 ,className = "unit.TestSpecification" ,methodName = "testLambda_unit_hx" ))
		
		self.eq(_hx_array_get(_hx_c.Lambda.array(_hx_c.Lambda.concat([1, 2, 3], [])),0), 1, _hx_c._hx_AnonObject(fileName = "Lambda.unit.hx" ,lineNumber = 115 ,className = "unit.TestSpecification" ,methodName = "testLambda_unit_hx" ))
		self.eq(_hx_array_get(_hx_c.Lambda.array(_hx_c.Lambda.concat([1, 2, 3], [])),1), 2, _hx_c._hx_AnonObject(fileName = "Lambda.unit.hx" ,lineNumber = 115 ,className = "unit.TestSpecification" ,methodName = "testLambda_unit_hx" ))
		self.eq(_hx_array_get(_hx_c.Lambda.array(_hx_c.Lambda.concat([1, 2, 3], [])),2), 3, _hx_c._hx_AnonObject(fileName = "Lambda.unit.hx" ,lineNumber = 115 ,className = "unit.TestSpecification" ,methodName = "testLambda_unit_hx" ))
		
		self.eq(_hx_array_get(_hx_c.Lambda.array(_hx_c.Lambda.concat([], [1, 2, 3])),0), 1, _hx_c._hx_AnonObject(fileName = "Lambda.unit.hx" ,lineNumber = 116 ,className = "unit.TestSpecification" ,methodName = "testLambda_unit_hx" ))
		self.eq(_hx_array_get(_hx_c.Lambda.array(_hx_c.Lambda.concat([], [1, 2, 3])),1), 2, _hx_c._hx_AnonObject(fileName = "Lambda.unit.hx" ,lineNumber = 116 ,className = "unit.TestSpecification" ,methodName = "testLambda_unit_hx" ))
		self.eq(_hx_array_get(_hx_c.Lambda.array(_hx_c.Lambda.concat([], [1, 2, 3])),2), 3, _hx_c._hx_AnonObject(fileName = "Lambda.unit.hx" ,lineNumber = 116 ,className = "unit.TestSpecification" ,methodName = "testLambda_unit_hx" ))
		
		def _hx_local_32():
			_this4 = _hx_c.Lambda.array(_hx_c.Lambda.concat([], []))
			return _hx_builtin.len(_this4)
		
		self.eq(_hx_local_32(), 0, _hx_c._hx_AnonObject(fileName = "Lambda.unit.hx" ,lineNumber = 117 ,className = "unit.TestSpecification" ,methodName = "testLambda_unit_hx" ))
	

	def testMap_unit_hx(self):
		map = _hx_c.haxe_ds_StringMap()
		self.f(map.exists("foo"), _hx_c._hx_AnonObject(fileName = "Map.unit.hx" ,lineNumber = 3 ,className = "unit.TestSpecification" ,methodName = "testMap_unit_hx" ))
		self.eq(map.get("foo"), None, _hx_c._hx_AnonObject(fileName = "Map.unit.hx" ,lineNumber = 4 ,className = "unit.TestSpecification" ,methodName = "testMap_unit_hx" ))
		map.set("foo", 1)
		map.set("bar", 2)
		map.set("baz", 3)
		dynmap = map
		map2 = dynmap
		map3 = dynmap
		map4 = dynmap
		self.t(_hx_c.Std._hx_is(map, _hx_c.haxe_ds_StringMap), _hx_c._hx_AnonObject(fileName = "Map.unit.hx" ,lineNumber = 12 ,className = "unit.TestSpecification" ,methodName = "testMap_unit_hx" ))
		self.t(map.exists("foo"), _hx_c._hx_AnonObject(fileName = "Map.unit.hx" ,lineNumber = 13 ,className = "unit.TestSpecification" ,methodName = "testMap_unit_hx" ))
		self.t(map.exists("bar"), _hx_c._hx_AnonObject(fileName = "Map.unit.hx" ,lineNumber = 14 ,className = "unit.TestSpecification" ,methodName = "testMap_unit_hx" ))
		self.t(map.exists("baz"), _hx_c._hx_AnonObject(fileName = "Map.unit.hx" ,lineNumber = 15 ,className = "unit.TestSpecification" ,methodName = "testMap_unit_hx" ))
		self.eq(map.get("foo"), 1, _hx_c._hx_AnonObject(fileName = "Map.unit.hx" ,lineNumber = 16 ,className = "unit.TestSpecification" ,methodName = "testMap_unit_hx" ))
		self.eq(map.get("bar"), 2, _hx_c._hx_AnonObject(fileName = "Map.unit.hx" ,lineNumber = 17 ,className = "unit.TestSpecification" ,methodName = "testMap_unit_hx" ))
		self.eq(map.get("baz"), 3, _hx_c._hx_AnonObject(fileName = "Map.unit.hx" ,lineNumber = 18 ,className = "unit.TestSpecification" ,methodName = "testMap_unit_hx" ))
		self.t(map2.exists("foo"), _hx_c._hx_AnonObject(fileName = "Map.unit.hx" ,lineNumber = 19 ,className = "unit.TestSpecification" ,methodName = "testMap_unit_hx" ))
		self.eq(map2.get("foo"), 1, _hx_c._hx_AnonObject(fileName = "Map.unit.hx" ,lineNumber = 20 ,className = "unit.TestSpecification" ,methodName = "testMap_unit_hx" ))
		self.t(map3.exists("foo"), _hx_c._hx_AnonObject(fileName = "Map.unit.hx" ,lineNumber = 21 ,className = "unit.TestSpecification" ,methodName = "testMap_unit_hx" ))
		self.eq(map3.get("foo"), 1, _hx_c._hx_AnonObject(fileName = "Map.unit.hx" ,lineNumber = 22 ,className = "unit.TestSpecification" ,methodName = "testMap_unit_hx" ))
		self.t(map4.exists("foo"), _hx_c._hx_AnonObject(fileName = "Map.unit.hx" ,lineNumber = 23 ,className = "unit.TestSpecification" ,methodName = "testMap_unit_hx" ))
		self.eq(map4.get("foo"), 1, _hx_c._hx_AnonObject(fileName = "Map.unit.hx" ,lineNumber = 24 ,className = "unit.TestSpecification" ,methodName = "testMap_unit_hx" ))
		values = []
		_it = map.iterator()
		while _it.hasNext():
			val = _it.next()
			values.append(val)
			_hx_builtin.len(values)
		
		self.eq(_hx_builtin.len(values), 3, _hx_c._hx_AnonObject(fileName = "Map.unit.hx" ,lineNumber = 29 ,className = "unit.TestSpecification" ,methodName = "testMap_unit_hx" ))
		self.t(_hx_array_get(values,0) == 3 or (_hx_array_get(values,0) == 2 or _hx_array_get(values,0) == 1), _hx_c._hx_AnonObject(fileName = "Map.unit.hx" ,lineNumber = 30 ,className = "unit.TestSpecification" ,methodName = "testMap_unit_hx" ))
		self.t(_hx_array_get(values,1) == 3 or (_hx_array_get(values,1) == 2 or _hx_array_get(values,1) == 1), _hx_c._hx_AnonObject(fileName = "Map.unit.hx" ,lineNumber = 31 ,className = "unit.TestSpecification" ,methodName = "testMap_unit_hx" ))
		self.t(_hx_array_get(values,2) == 3 or (_hx_array_get(values,2) == 2 or _hx_array_get(values,2) == 1), _hx_c._hx_AnonObject(fileName = "Map.unit.hx" ,lineNumber = 32 ,className = "unit.TestSpecification" ,methodName = "testMap_unit_hx" ))
		keys = ["foo", "bar", "baz"]
		_it = map.keys()
		while _it.hasNext():
			key = _it.next()
			self.t(_hx_c.python_internal_ArrayImpl.remove(keys, key), _hx_c._hx_AnonObject(fileName = "Map.unit.hx" ,lineNumber = 35 ,className = "unit.TestSpecification" ,methodName = "testMap_unit_hx" ))
		self.eq(_hx_builtin.len(keys), 0, _hx_c._hx_AnonObject(fileName = "Map.unit.hx" ,lineNumber = 37 ,className = "unit.TestSpecification" ,methodName = "testMap_unit_hx" ))
		self.t(map.remove("bar"), _hx_c._hx_AnonObject(fileName = "Map.unit.hx" ,lineNumber = 38 ,className = "unit.TestSpecification" ,methodName = "testMap_unit_hx" ))
		self.f(map.remove("bar"), _hx_c._hx_AnonObject(fileName = "Map.unit.hx" ,lineNumber = 39 ,className = "unit.TestSpecification" ,methodName = "testMap_unit_hx" ))
		self.t(map.exists("foo"), _hx_c._hx_AnonObject(fileName = "Map.unit.hx" ,lineNumber = 40 ,className = "unit.TestSpecification" ,methodName = "testMap_unit_hx" ))
		self.f(map.exists("bar"), _hx_c._hx_AnonObject(fileName = "Map.unit.hx" ,lineNumber = 41 ,className = "unit.TestSpecification" ,methodName = "testMap_unit_hx" ))
		self.t(map.exists("baz"), _hx_c._hx_AnonObject(fileName = "Map.unit.hx" ,lineNumber = 42 ,className = "unit.TestSpecification" ,methodName = "testMap_unit_hx" ))
		self.eq(map.get("bar"), None, _hx_c._hx_AnonObject(fileName = "Map.unit.hx" ,lineNumber = 43 ,className = "unit.TestSpecification" ,methodName = "testMap_unit_hx" ))
		map1 = _hx_c.haxe_ds_IntMap()
		self.f(1 in map1.h, _hx_c._hx_AnonObject(fileName = "Map.unit.hx" ,lineNumber = 47 ,className = "unit.TestSpecification" ,methodName = "testMap_unit_hx" ))
		self.eq(map1.h.get(1, None), None, _hx_c._hx_AnonObject(fileName = "Map.unit.hx" ,lineNumber = 48 ,className = "unit.TestSpecification" ,methodName = "testMap_unit_hx" ))
		map1.set(1, 1)
		map1.set(2, 2)
		map1.set(3, 3)
		self.t(_hx_c.Std._hx_is(map1, _hx_c.haxe_ds_IntMap), _hx_c._hx_AnonObject(fileName = "Map.unit.hx" ,lineNumber = 52 ,className = "unit.TestSpecification" ,methodName = "testMap_unit_hx" ))
		self.t(1 in map1.h, _hx_c._hx_AnonObject(fileName = "Map.unit.hx" ,lineNumber = 53 ,className = "unit.TestSpecification" ,methodName = "testMap_unit_hx" ))
		self.t(2 in map1.h, _hx_c._hx_AnonObject(fileName = "Map.unit.hx" ,lineNumber = 54 ,className = "unit.TestSpecification" ,methodName = "testMap_unit_hx" ))
		self.t(3 in map1.h, _hx_c._hx_AnonObject(fileName = "Map.unit.hx" ,lineNumber = 55 ,className = "unit.TestSpecification" ,methodName = "testMap_unit_hx" ))
		self.eq(map1.h.get(1, None), 1, _hx_c._hx_AnonObject(fileName = "Map.unit.hx" ,lineNumber = 56 ,className = "unit.TestSpecification" ,methodName = "testMap_unit_hx" ))
		self.eq(map1.h.get(2, None), 2, _hx_c._hx_AnonObject(fileName = "Map.unit.hx" ,lineNumber = 57 ,className = "unit.TestSpecification" ,methodName = "testMap_unit_hx" ))
		self.eq(map1.h.get(3, None), 3, _hx_c._hx_AnonObject(fileName = "Map.unit.hx" ,lineNumber = 58 ,className = "unit.TestSpecification" ,methodName = "testMap_unit_hx" ))
		values1 = []
		_it = map1.iterator()
		while _it.hasNext():
			val1 = _it.next()
			values1.append(val1)
			_hx_builtin.len(values1)
		
		self.eq(_hx_builtin.len(values1), 3, _hx_c._hx_AnonObject(fileName = "Map.unit.hx" ,lineNumber = 63 ,className = "unit.TestSpecification" ,methodName = "testMap_unit_hx" ))
		self.t(_hx_array_get(values1,0) == 3 or (_hx_array_get(values1,0) == 2 or _hx_array_get(values1,0) == 1), _hx_c._hx_AnonObject(fileName = "Map.unit.hx" ,lineNumber = 64 ,className = "unit.TestSpecification" ,methodName = "testMap_unit_hx" ))
		self.t(_hx_array_get(values1,1) == 3 or (_hx_array_get(values1,1) == 2 or _hx_array_get(values1,1) == 1), _hx_c._hx_AnonObject(fileName = "Map.unit.hx" ,lineNumber = 65 ,className = "unit.TestSpecification" ,methodName = "testMap_unit_hx" ))
		self.t(_hx_array_get(values1,2) == 3 or (_hx_array_get(values1,2) == 2 or _hx_array_get(values1,2) == 1), _hx_c._hx_AnonObject(fileName = "Map.unit.hx" ,lineNumber = 66 ,className = "unit.TestSpecification" ,methodName = "testMap_unit_hx" ))
		keys1 = [1, 2, 3]
		_it = map1.keys()
		while _it.hasNext():
			key1 = _it.next()
			self.t(_hx_c.python_internal_ArrayImpl.remove(keys1, key1), _hx_c._hx_AnonObject(fileName = "Map.unit.hx" ,lineNumber = 69 ,className = "unit.TestSpecification" ,methodName = "testMap_unit_hx" ))
		self.eq(_hx_builtin.len(keys1), 0, _hx_c._hx_AnonObject(fileName = "Map.unit.hx" ,lineNumber = 71 ,className = "unit.TestSpecification" ,methodName = "testMap_unit_hx" ))
		self.t(map1.remove(2), _hx_c._hx_AnonObject(fileName = "Map.unit.hx" ,lineNumber = 72 ,className = "unit.TestSpecification" ,methodName = "testMap_unit_hx" ))
		self.f(map1.remove(2), _hx_c._hx_AnonObject(fileName = "Map.unit.hx" ,lineNumber = 73 ,className = "unit.TestSpecification" ,methodName = "testMap_unit_hx" ))
		self.t(1 in map1.h, _hx_c._hx_AnonObject(fileName = "Map.unit.hx" ,lineNumber = 74 ,className = "unit.TestSpecification" ,methodName = "testMap_unit_hx" ))
		self.f(2 in map1.h, _hx_c._hx_AnonObject(fileName = "Map.unit.hx" ,lineNumber = 75 ,className = "unit.TestSpecification" ,methodName = "testMap_unit_hx" ))
		self.t(3 in map1.h, _hx_c._hx_AnonObject(fileName = "Map.unit.hx" ,lineNumber = 76 ,className = "unit.TestSpecification" ,methodName = "testMap_unit_hx" ))
		self.eq(map1.h.get(2, None), None, _hx_c._hx_AnonObject(fileName = "Map.unit.hx" ,lineNumber = 77 ,className = "unit.TestSpecification" ,methodName = "testMap_unit_hx" ))
		map5 = _hx_c.haxe_ds_ObjectMap()
		a = _hx_c.unit_ClassWithHashCode(1)
		b = _hx_c.unit_ClassWithHashCode(2)
		c = _hx_c.unit_ClassWithHashCode(3)
		self.f(a in map5.h, _hx_c._hx_AnonObject(fileName = "Map.unit.hx" ,lineNumber = 84 ,className = "unit.TestSpecification" ,methodName = "testMap_unit_hx" ))
		self.eq(map5.h.get(a, None), None, _hx_c._hx_AnonObject(fileName = "Map.unit.hx" ,lineNumber = 85 ,className = "unit.TestSpecification" ,methodName = "testMap_unit_hx" ))
		map5.set(a, 1)
		map5.set(b, 2)
		map5.set(c, 3)
		self.t(a in map5.h, _hx_c._hx_AnonObject(fileName = "Map.unit.hx" ,lineNumber = 89 ,className = "unit.TestSpecification" ,methodName = "testMap_unit_hx" ))
		self.t(b in map5.h, _hx_c._hx_AnonObject(fileName = "Map.unit.hx" ,lineNumber = 90 ,className = "unit.TestSpecification" ,methodName = "testMap_unit_hx" ))
		self.t(c in map5.h, _hx_c._hx_AnonObject(fileName = "Map.unit.hx" ,lineNumber = 91 ,className = "unit.TestSpecification" ,methodName = "testMap_unit_hx" ))
		self.eq(map5.h.get(a, None), 1, _hx_c._hx_AnonObject(fileName = "Map.unit.hx" ,lineNumber = 92 ,className = "unit.TestSpecification" ,methodName = "testMap_unit_hx" ))
		self.eq(map5.h.get(b, None), 2, _hx_c._hx_AnonObject(fileName = "Map.unit.hx" ,lineNumber = 93 ,className = "unit.TestSpecification" ,methodName = "testMap_unit_hx" ))
		self.eq(map5.h.get(c, None), 3, _hx_c._hx_AnonObject(fileName = "Map.unit.hx" ,lineNumber = 94 ,className = "unit.TestSpecification" ,methodName = "testMap_unit_hx" ))
		values2 = []
		_it = map5.iterator()
		while _it.hasNext():
			val2 = _it.next()
			values2.append(val2)
			_hx_builtin.len(values2)
		
		self.eq(_hx_builtin.len(values2), 3, _hx_c._hx_AnonObject(fileName = "Map.unit.hx" ,lineNumber = 99 ,className = "unit.TestSpecification" ,methodName = "testMap_unit_hx" ))
		self.t(_hx_array_get(values2,0) == 3 or (_hx_array_get(values2,0) == 2 or _hx_array_get(values2,0) == 1), _hx_c._hx_AnonObject(fileName = "Map.unit.hx" ,lineNumber = 100 ,className = "unit.TestSpecification" ,methodName = "testMap_unit_hx" ))
		self.t(_hx_array_get(values2,1) == 3 or (_hx_array_get(values2,1) == 2 or _hx_array_get(values2,1) == 1), _hx_c._hx_AnonObject(fileName = "Map.unit.hx" ,lineNumber = 101 ,className = "unit.TestSpecification" ,methodName = "testMap_unit_hx" ))
		self.t(_hx_array_get(values2,2) == 3 or (_hx_array_get(values2,2) == 2 or _hx_array_get(values2,2) == 1), _hx_c._hx_AnonObject(fileName = "Map.unit.hx" ,lineNumber = 102 ,className = "unit.TestSpecification" ,methodName = "testMap_unit_hx" ))
		keys2 = [a, b, c]
		_it = map5.keys()
		while _it.hasNext():
			key2 = _it.next()
			self.t(_hx_c.python_internal_ArrayImpl.remove(keys2, key2), _hx_c._hx_AnonObject(fileName = "Map.unit.hx" ,lineNumber = 105 ,className = "unit.TestSpecification" ,methodName = "testMap_unit_hx" ))
		self.eq(_hx_builtin.len(keys2), 0, _hx_c._hx_AnonObject(fileName = "Map.unit.hx" ,lineNumber = 107 ,className = "unit.TestSpecification" ,methodName = "testMap_unit_hx" ))
		self.t(map5.remove(b), _hx_c._hx_AnonObject(fileName = "Map.unit.hx" ,lineNumber = 108 ,className = "unit.TestSpecification" ,methodName = "testMap_unit_hx" ))
		self.f(map5.remove(b), _hx_c._hx_AnonObject(fileName = "Map.unit.hx" ,lineNumber = 109 ,className = "unit.TestSpecification" ,methodName = "testMap_unit_hx" ))
		self.t(a in map5.h, _hx_c._hx_AnonObject(fileName = "Map.unit.hx" ,lineNumber = 110 ,className = "unit.TestSpecification" ,methodName = "testMap_unit_hx" ))
		self.f(b in map5.h, _hx_c._hx_AnonObject(fileName = "Map.unit.hx" ,lineNumber = 111 ,className = "unit.TestSpecification" ,methodName = "testMap_unit_hx" ))
		self.t(c in map5.h, _hx_c._hx_AnonObject(fileName = "Map.unit.hx" ,lineNumber = 112 ,className = "unit.TestSpecification" ,methodName = "testMap_unit_hx" ))
		self.eq(map5.h.get(b, None), None, _hx_c._hx_AnonObject(fileName = "Map.unit.hx" ,lineNumber = 113 ,className = "unit.TestSpecification" ,methodName = "testMap_unit_hx" ))
		map6 = _hx_c.haxe_ds_ObjectMap()
		a1 = _hx_c.unit_ClassWithoutHashCode(1)
		b1 = _hx_c.unit_ClassWithoutHashCode(2)
		c1 = _hx_c.unit_ClassWithoutHashCode(3)
		self.f(a1 in map6.h, _hx_c._hx_AnonObject(fileName = "Map.unit.hx" ,lineNumber = 120 ,className = "unit.TestSpecification" ,methodName = "testMap_unit_hx" ))
		self.eq(map6.h.get(a1, None), None, _hx_c._hx_AnonObject(fileName = "Map.unit.hx" ,lineNumber = 121 ,className = "unit.TestSpecification" ,methodName = "testMap_unit_hx" ))
		map6.set(a1, 1)
		map6.set(b1, 2)
		map6.set(c1, 3)
		self.t(a1 in map6.h, _hx_c._hx_AnonObject(fileName = "Map.unit.hx" ,lineNumber = 125 ,className = "unit.TestSpecification" ,methodName = "testMap_unit_hx" ))
		self.t(b1 in map6.h, _hx_c._hx_AnonObject(fileName = "Map.unit.hx" ,lineNumber = 126 ,className = "unit.TestSpecification" ,methodName = "testMap_unit_hx" ))
		self.t(c1 in map6.h, _hx_c._hx_AnonObject(fileName = "Map.unit.hx" ,lineNumber = 127 ,className = "unit.TestSpecification" ,methodName = "testMap_unit_hx" ))
		self.eq(map6.h.get(a1, None), 1, _hx_c._hx_AnonObject(fileName = "Map.unit.hx" ,lineNumber = 128 ,className = "unit.TestSpecification" ,methodName = "testMap_unit_hx" ))
		self.eq(map6.h.get(b1, None), 2, _hx_c._hx_AnonObject(fileName = "Map.unit.hx" ,lineNumber = 129 ,className = "unit.TestSpecification" ,methodName = "testMap_unit_hx" ))
		self.eq(map6.h.get(c1, None), 3, _hx_c._hx_AnonObject(fileName = "Map.unit.hx" ,lineNumber = 130 ,className = "unit.TestSpecification" ,methodName = "testMap_unit_hx" ))
		values3 = []
		_it = map6.iterator()
		while _it.hasNext():
			val3 = _it.next()
			values3.append(val3)
			_hx_builtin.len(values3)
		
		self.eq(_hx_builtin.len(values3), 3, _hx_c._hx_AnonObject(fileName = "Map.unit.hx" ,lineNumber = 135 ,className = "unit.TestSpecification" ,methodName = "testMap_unit_hx" ))
		self.t(_hx_array_get(values3,0) == 3 or (_hx_array_get(values3,0) == 2 or _hx_array_get(values3,0) == 1), _hx_c._hx_AnonObject(fileName = "Map.unit.hx" ,lineNumber = 136 ,className = "unit.TestSpecification" ,methodName = "testMap_unit_hx" ))
		self.t(_hx_array_get(values3,1) == 3 or (_hx_array_get(values3,1) == 2 or _hx_array_get(values3,1) == 1), _hx_c._hx_AnonObject(fileName = "Map.unit.hx" ,lineNumber = 137 ,className = "unit.TestSpecification" ,methodName = "testMap_unit_hx" ))
		self.t(_hx_array_get(values3,2) == 3 or (_hx_array_get(values3,2) == 2 or _hx_array_get(values3,2) == 1), _hx_c._hx_AnonObject(fileName = "Map.unit.hx" ,lineNumber = 138 ,className = "unit.TestSpecification" ,methodName = "testMap_unit_hx" ))
		keys3 = [a1, b1, c1]
		_it = map6.keys()
		while _it.hasNext():
			key3 = _it.next()
			self.t(_hx_c.python_internal_ArrayImpl.remove(keys3, key3), _hx_c._hx_AnonObject(fileName = "Map.unit.hx" ,lineNumber = 141 ,className = "unit.TestSpecification" ,methodName = "testMap_unit_hx" ))
		self.eq(_hx_builtin.len(keys3), 0, _hx_c._hx_AnonObject(fileName = "Map.unit.hx" ,lineNumber = 143 ,className = "unit.TestSpecification" ,methodName = "testMap_unit_hx" ))
		self.t(map6.remove(b1), _hx_c._hx_AnonObject(fileName = "Map.unit.hx" ,lineNumber = 144 ,className = "unit.TestSpecification" ,methodName = "testMap_unit_hx" ))
		self.f(map6.remove(b1), _hx_c._hx_AnonObject(fileName = "Map.unit.hx" ,lineNumber = 145 ,className = "unit.TestSpecification" ,methodName = "testMap_unit_hx" ))
		self.t(a1 in map6.h, _hx_c._hx_AnonObject(fileName = "Map.unit.hx" ,lineNumber = 146 ,className = "unit.TestSpecification" ,methodName = "testMap_unit_hx" ))
		self.f(b1 in map6.h, _hx_c._hx_AnonObject(fileName = "Map.unit.hx" ,lineNumber = 147 ,className = "unit.TestSpecification" ,methodName = "testMap_unit_hx" ))
		self.t(c1 in map6.h, _hx_c._hx_AnonObject(fileName = "Map.unit.hx" ,lineNumber = 148 ,className = "unit.TestSpecification" ,methodName = "testMap_unit_hx" ))
		self.eq(map6.h.get(b1, None), None, _hx_c._hx_AnonObject(fileName = "Map.unit.hx" ,lineNumber = 149 ,className = "unit.TestSpecification" ,methodName = "testMap_unit_hx" ))
	

	def testStd_unit_hx(self):
		known = None
		self.f(_hx_c.Std._hx_is(known, _hx_c.String), _hx_c._hx_AnonObject(fileName = "Std.unit.hx" ,lineNumber = 3 ,className = "unit.TestSpecification" ,methodName = "testStd_unit_hx" ))
		unknown = None
		self.f(_hx_c.Std._hx_is(unknown, _hx_c.String), _hx_c._hx_AnonObject(fileName = "Std.unit.hx" ,lineNumber = 6 ,className = "unit.TestSpecification" ,methodName = "testStd_unit_hx" ))
		self.f(_hx_c.Std._hx_is(None, _hx_c.String), _hx_c._hx_AnonObject(fileName = "Std.unit.hx" ,lineNumber = 7 ,className = "unit.TestSpecification" ,methodName = "testStd_unit_hx" ))
		self.f(_hx_c.Std._hx_is("foo", None), _hx_c._hx_AnonObject(fileName = "Std.unit.hx" ,lineNumber = 8 ,className = "unit.TestSpecification" ,methodName = "testStd_unit_hx" ))
		self.t(_hx_c.Std._hx_is("", _hx_c.String), _hx_c._hx_AnonObject(fileName = "Std.unit.hx" ,lineNumber = 10 ,className = "unit.TestSpecification" ,methodName = "testStd_unit_hx" ))
		self.t(_hx_c.Std._hx_is(False, _hx_c.Bool), _hx_c._hx_AnonObject(fileName = "Std.unit.hx" ,lineNumber = 11 ,className = "unit.TestSpecification" ,methodName = "testStd_unit_hx" ))
		self.t(_hx_c.Std._hx_is(1, _hx_c.Int), _hx_c._hx_AnonObject(fileName = "Std.unit.hx" ,lineNumber = 12 ,className = "unit.TestSpecification" ,methodName = "testStd_unit_hx" ))
		self.f(_hx_c.Std._hx_is(1.5, _hx_c.Int), _hx_c._hx_AnonObject(fileName = "Std.unit.hx" ,lineNumber = 13 ,className = "unit.TestSpecification" ,methodName = "testStd_unit_hx" ))
		self.t(_hx_c.Std._hx_is(1.5, _hx_c.Float), _hx_c._hx_AnonObject(fileName = "Std.unit.hx" ,lineNumber = 14 ,className = "unit.TestSpecification" ,methodName = "testStd_unit_hx" ))
		self.t(_hx_c.Std._hx_is([], list), _hx_c._hx_AnonObject(fileName = "Std.unit.hx" ,lineNumber = 15 ,className = "unit.TestSpecification" ,methodName = "testStd_unit_hx" ))
		self.f(_hx_c.Std._hx_is(_hx_c.unit_MyEnum.A, list), _hx_c._hx_AnonObject(fileName = "Std.unit.hx" ,lineNumber = 16 ,className = "unit.TestSpecification" ,methodName = "testStd_unit_hx" ))
		a = []
		def _hx_local_1():
			_hx_local_0 = None
			try:
				_hx_local_0 = a if (_hx_builtin.isinstance(a, list)) else None
			except Exception as _hx_e:
				_hx_e1 = _hx_e.val if isinstance(_hx_e, _HxException) else _hx_e
				if True:
					e = _hx_e1
					_hx_local_0 = None
				else:
					raise _hx_e
			return _hx_local_0
		
		self.eq(_hx_local_1(), a, _hx_c._hx_AnonObject(fileName = "Std.unit.hx" ,lineNumber = 23 ,className = "unit.TestSpecification" ,methodName = "testStd_unit_hx" ))
		def _hx_local_3():
			_hx_local_2 = None
			try:
				_hx_local_2 = "" if (_hx_builtin.isinstance("", list)) else None
			except Exception as _hx_e:
				_hx_e1 = _hx_e.val if isinstance(_hx_e, _HxException) else _hx_e
				if True:
					e1 = _hx_e1
					_hx_local_2 = None
				else:
					raise _hx_e
			return _hx_local_2
		
		self.eq(_hx_local_3(), None, _hx_c._hx_AnonObject(fileName = "Std.unit.hx" ,lineNumber = 24 ,className = "unit.TestSpecification" ,methodName = "testStd_unit_hx" ))
		def _hx_local_4():
			v = []
			def _hx_local_7():
				def _hx_local_6():
					_hx_local_5 = None
					try:
						_hx_local_5 = v if (_hx_builtin.isinstance(v, _hx_c.String)) else None
					except Exception as _hx_e:
						_hx_e1 = _hx_e.val if isinstance(_hx_e, _HxException) else _hx_e
						if True:
							e2 = _hx_e1
							_hx_local_5 = None
						else:
							raise _hx_e
					return _hx_local_5
				
				return _hx_local_6()
			
			return _hx_local_7()
		
		self.eq(_hx_local_4(), None, _hx_c._hx_AnonObject(fileName = "Std.unit.hx" ,lineNumber = 25 ,className = "unit.TestSpecification" ,methodName = "testStd_unit_hx" ))
		def _hx_local_8():
			v1 = _hx_c.unit_MyChild1()
			def _hx_local_11():
				def _hx_local_10():
					_hx_local_9 = None
					try:
						_hx_local_9 = v1 if (_hx_builtin.isinstance(v1, _hx_c.unit_MyParent)) else None
					except Exception as _hx_e:
						_hx_e1 = _hx_e.val if isinstance(_hx_e, _HxException) else _hx_e
						if True:
							e3 = _hx_e1
							_hx_local_9 = None
						else:
							raise _hx_e
					return _hx_local_9
				
				return _hx_local_10()
			
			return _hx_local_11()
		
		_hx_local_8() is not None
		def _hx_local_12():
			v2 = _hx_c.unit_MyChild1()
			def _hx_local_15():
				def _hx_local_14():
					_hx_local_13 = None
					try:
						_hx_local_13 = v2 if (_hx_builtin.isinstance(v2, _hx_c.unit_MyClass)) else None
					except Exception as _hx_e:
						_hx_e1 = _hx_e.val if isinstance(_hx_e, _HxException) else _hx_e
						if True:
							e4 = _hx_e1
							_hx_local_13 = None
						else:
							raise _hx_e
					return _hx_local_13
				
				return _hx_local_14()
			
			return _hx_local_15()
		
		self.eq(_hx_local_12(), None, _hx_c._hx_AnonObject(fileName = "Std.unit.hx" ,lineNumber = 27 ,className = "unit.TestSpecification" ,methodName = "testStd_unit_hx" ))
		cwts = _hx_c.unit_TestSpecification_ClassWithToString()
		cwtsc = _hx_c.unit_TestSpecification_ClassWithToStringChild()
		cwtsc2 = _hx_c.unit_TestSpecification_ClassWithToStringChild2()
		self.eq(_hx_c.Std.string(cwts), "ClassWithToString.toString()", _hx_c._hx_AnonObject(fileName = "Std.unit.hx" ,lineNumber = 34 ,className = "unit.TestSpecification" ,methodName = "testStd_unit_hx" ))
		self.eq(_hx_c.Std.string(cwtsc), "ClassWithToString.toString()", _hx_c._hx_AnonObject(fileName = "Std.unit.hx" ,lineNumber = 35 ,className = "unit.TestSpecification" ,methodName = "testStd_unit_hx" ))
		self.eq(_hx_c.Std.string(cwtsc2), "ClassWithToStringChild2.toString()", _hx_c._hx_AnonObject(fileName = "Std.unit.hx" ,lineNumber = 36 ,className = "unit.TestSpecification" ,methodName = "testStd_unit_hx" ))
		self.eq(_hx_c.Std.string(_hx_c.unit_TestSpecification_SomeEnum.NoArguments), "NoArguments", _hx_c._hx_AnonObject(fileName = "Std.unit.hx" ,lineNumber = 38 ,className = "unit.TestSpecification" ,methodName = "testStd_unit_hx" ))
		self.eq(_hx_c.Std.string(_hx_c.unit_TestSpecification_SomeEnum.OneArgument("foo")), "OneArgument(foo)", _hx_c._hx_AnonObject(fileName = "Std.unit.hx" ,lineNumber = 39 ,className = "unit.TestSpecification" ,methodName = "testStd_unit_hx" ))
		self.eq(_hx_c.Std.string(None), "null", _hx_c._hx_AnonObject(fileName = "Std.unit.hx" ,lineNumber = 41 ,className = "unit.TestSpecification" ,methodName = "testStd_unit_hx" ))
		self.eq(-1, -1, _hx_c._hx_AnonObject(fileName = "Std.unit.hx" ,lineNumber = 44 ,className = "unit.TestSpecification" ,methodName = "testStd_unit_hx" ))
		self.eq(-1, -1, _hx_c._hx_AnonObject(fileName = "Std.unit.hx" ,lineNumber = 45 ,className = "unit.TestSpecification" ,methodName = "testStd_unit_hx" ))
		self.eq(1, 1, _hx_c._hx_AnonObject(fileName = "Std.unit.hx" ,lineNumber = 46 ,className = "unit.TestSpecification" ,methodName = "testStd_unit_hx" ))
		self.eq(1, 1, _hx_c._hx_AnonObject(fileName = "Std.unit.hx" ,lineNumber = 47 ,className = "unit.TestSpecification" ,methodName = "testStd_unit_hx" ))
		self.eq(0, 0, _hx_c._hx_AnonObject(fileName = "Std.unit.hx" ,lineNumber = 48 ,className = "unit.TestSpecification" ,methodName = "testStd_unit_hx" ))
		self.eq(0, 0, _hx_c._hx_AnonObject(fileName = "Std.unit.hx" ,lineNumber = 49 ,className = "unit.TestSpecification" ,methodName = "testStd_unit_hx" ))
		self.eq(0, 0, _hx_c._hx_AnonObject(fileName = "Std.unit.hx" ,lineNumber = 50 ,className = "unit.TestSpecification" ,methodName = "testStd_unit_hx" ))
		self.eq(0, 0, _hx_c._hx_AnonObject(fileName = "Std.unit.hx" ,lineNumber = 51 ,className = "unit.TestSpecification" ,methodName = "testStd_unit_hx" ))
		self.eq(_hx_c.Std.parseInt("0"), 0, _hx_c._hx_AnonObject(fileName = "Std.unit.hx" ,lineNumber = 54 ,className = "unit.TestSpecification" ,methodName = "testStd_unit_hx" ))
		self.eq(_hx_c.Std.parseInt("   5"), 5, _hx_c._hx_AnonObject(fileName = "Std.unit.hx" ,lineNumber = 55 ,className = "unit.TestSpecification" ,methodName = "testStd_unit_hx" ))
		self.eq(_hx_c.Std.parseInt("0001"), 1, _hx_c._hx_AnonObject(fileName = "Std.unit.hx" ,lineNumber = 56 ,className = "unit.TestSpecification" ,methodName = "testStd_unit_hx" ))
		self.eq(_hx_c.Std.parseInt("0010"), 10, _hx_c._hx_AnonObject(fileName = "Std.unit.hx" ,lineNumber = 57 ,className = "unit.TestSpecification" ,methodName = "testStd_unit_hx" ))
		self.eq(_hx_c.Std.parseInt("100"), 100, _hx_c._hx_AnonObject(fileName = "Std.unit.hx" ,lineNumber = 58 ,className = "unit.TestSpecification" ,methodName = "testStd_unit_hx" ))
		self.eq(_hx_c.Std.parseInt("-100"), -100, _hx_c._hx_AnonObject(fileName = "Std.unit.hx" ,lineNumber = 59 ,className = "unit.TestSpecification" ,methodName = "testStd_unit_hx" ))
		self.eq(_hx_c.Std.parseInt("100x123"), 100, _hx_c._hx_AnonObject(fileName = "Std.unit.hx" ,lineNumber = 60 ,className = "unit.TestSpecification" ,methodName = "testStd_unit_hx" ))
		self.eq(_hx_c.Std.parseInt("12foo13"), 12, _hx_c._hx_AnonObject(fileName = "Std.unit.hx" ,lineNumber = 61 ,className = "unit.TestSpecification" ,methodName = "testStd_unit_hx" ))
		self.eq(_hx_c.Std.parseInt(""), None, _hx_c._hx_AnonObject(fileName = "Std.unit.hx" ,lineNumber = 62 ,className = "unit.TestSpecification" ,methodName = "testStd_unit_hx" ))
		self.eq(_hx_c.Std.parseInt("abcd"), None, _hx_c._hx_AnonObject(fileName = "Std.unit.hx" ,lineNumber = 63 ,className = "unit.TestSpecification" ,methodName = "testStd_unit_hx" ))
		self.eq(_hx_c.Std.parseInt("a10"), None, _hx_c._hx_AnonObject(fileName = "Std.unit.hx" ,lineNumber = 64 ,className = "unit.TestSpecification" ,methodName = "testStd_unit_hx" ))
		self.eq(_hx_c.Std.parseInt(None), None, _hx_c._hx_AnonObject(fileName = "Std.unit.hx" ,lineNumber = 65 ,className = "unit.TestSpecification" ,methodName = "testStd_unit_hx" ))
		self.eq(_hx_c.Std.parseInt("0xFF"), 255, _hx_c._hx_AnonObject(fileName = "Std.unit.hx" ,lineNumber = 66 ,className = "unit.TestSpecification" ,methodName = "testStd_unit_hx" ))
		self.eq(_hx_c.Std.parseInt("0x123"), 291, _hx_c._hx_AnonObject(fileName = "Std.unit.hx" ,lineNumber = 67 ,className = "unit.TestSpecification" ,methodName = "testStd_unit_hx" ))
		self.eq(_hx_c.Std.parseInt("0XFF"), 255, _hx_c._hx_AnonObject(fileName = "Std.unit.hx" ,lineNumber = 68 ,className = "unit.TestSpecification" ,methodName = "testStd_unit_hx" ))
		self.eq(_hx_c.Std.parseInt("0X123"), 291, _hx_c._hx_AnonObject(fileName = "Std.unit.hx" ,lineNumber = 69 ,className = "unit.TestSpecification" ,methodName = "testStd_unit_hx" ))
		self.eq(_hx_c.Std.parseInt("0X01"), 1, _hx_c._hx_AnonObject(fileName = "Std.unit.hx" ,lineNumber = 70 ,className = "unit.TestSpecification" ,methodName = "testStd_unit_hx" ))
		self.eq(_hx_c.Std.parseInt("0x01"), 1, _hx_c._hx_AnonObject(fileName = "Std.unit.hx" ,lineNumber = 71 ,className = "unit.TestSpecification" ,methodName = "testStd_unit_hx" ))
		self.feq(_hx_c.Std.parseFloat("0"), 0., _hx_c._hx_AnonObject(fileName = "Std.unit.hx" ,lineNumber = 74 ,className = "unit.TestSpecification" ,methodName = "testStd_unit_hx" ))
		self.feq(_hx_c.Std.parseFloat("   5.3"), 5.3, _hx_c._hx_AnonObject(fileName = "Std.unit.hx" ,lineNumber = 75 ,className = "unit.TestSpecification" ,methodName = "testStd_unit_hx" ))
		self.feq(_hx_c.Std.parseFloat("0001"), 1., _hx_c._hx_AnonObject(fileName = "Std.unit.hx" ,lineNumber = 76 ,className = "unit.TestSpecification" ,methodName = "testStd_unit_hx" ))
		self.feq(_hx_c.Std.parseFloat("100.45"), 100.45, _hx_c._hx_AnonObject(fileName = "Std.unit.hx" ,lineNumber = 77 ,className = "unit.TestSpecification" ,methodName = "testStd_unit_hx" ))
		self.feq(_hx_c.Std.parseFloat("-100.01"), -100.01, _hx_c._hx_AnonObject(fileName = "Std.unit.hx" ,lineNumber = 78 ,className = "unit.TestSpecification" ,methodName = "testStd_unit_hx" ))
		self.feq(_hx_c.Std.parseFloat("100x123"), 100., _hx_c._hx_AnonObject(fileName = "Std.unit.hx" ,lineNumber = 79 ,className = "unit.TestSpecification" ,methodName = "testStd_unit_hx" ))
		def _hx_local_16():
			f = _hx_c.Std.parseFloat("")
			return _hx_math.isnan(f)
		
		self.t(_hx_local_16(), _hx_c._hx_AnonObject(fileName = "Std.unit.hx" ,lineNumber = 80 ,className = "unit.TestSpecification" ,methodName = "testStd_unit_hx" ))
		def _hx_local_17():
			f1 = _hx_c.Std.parseFloat("abcd")
			return _hx_math.isnan(f1)
		
		self.t(_hx_local_17(), _hx_c._hx_AnonObject(fileName = "Std.unit.hx" ,lineNumber = 81 ,className = "unit.TestSpecification" ,methodName = "testStd_unit_hx" ))
		def _hx_local_18():
			f2 = _hx_c.Std.parseFloat("a10")
			return _hx_math.isnan(f2)
		
		self.t(_hx_local_18(), _hx_c._hx_AnonObject(fileName = "Std.unit.hx" ,lineNumber = 82 ,className = "unit.TestSpecification" ,methodName = "testStd_unit_hx" ))
		def _hx_local_19():
			f3 = _hx_c.Std.parseFloat(None)
			return _hx_math.isnan(f3)
		
		self.t(_hx_local_19(), _hx_c._hx_AnonObject(fileName = "Std.unit.hx" ,lineNumber = 83 ,className = "unit.TestSpecification" ,methodName = "testStd_unit_hx" ))
		self.feq(_hx_c.Std.parseFloat("5.3 "), 5.3, _hx_c._hx_AnonObject(fileName = "Std.unit.hx" ,lineNumber = 84 ,className = "unit.TestSpecification" ,methodName = "testStd_unit_hx" ))
		self.feq(_hx_c.Std.parseFloat("0.0"), 0., _hx_c._hx_AnonObject(fileName = "Std.unit.hx" ,lineNumber = 85 ,className = "unit.TestSpecification" ,methodName = "testStd_unit_hx" ))
		self.feq(_hx_c.Std.parseFloat("5.3 1"), 5.3, _hx_c._hx_AnonObject(fileName = "Std.unit.hx" ,lineNumber = 86 ,className = "unit.TestSpecification" ,methodName = "testStd_unit_hx" ))
		x = None
		if 2 <= 0:
			x = 0
		else:
			x1 = _hx_c.python_lib_Random.random() * 2
			try:
				x = int(x1)
			except Exception as _hx_e:
				_hx_e1 = _hx_e.val if isinstance(_hx_e, _HxException) else _hx_e
				if True:
					e5 = _hx_e1
					x = None
				else:
					raise _hx_e
		
		self.t(x == 1 or x == 0, _hx_c._hx_AnonObject(fileName = "Std.unit.hx" ,lineNumber = 90 ,className = "unit.TestSpecification" ,methodName = "testStd_unit_hx" ))
		def _hx_local_24():
			def _hx_local_20():
				x2 = _hx_c.python_lib_Random.random() * 1
				def _hx_local_23():
					def _hx_local_22():
						_hx_local_21 = None
						try:
							_hx_local_21 = int(x2)
						except Exception as _hx_e:
							_hx_e1 = _hx_e.val if isinstance(_hx_e, _HxException) else _hx_e
							if True:
								e6 = _hx_e1
								_hx_local_21 = None
							else:
								raise _hx_e
						return _hx_local_21
					
					return _hx_local_22()
				
				return _hx_local_23()
			
			return 0 if 1 <= 0 else _hx_local_20()
		
		self.eq(_hx_local_24(), 0, _hx_c._hx_AnonObject(fileName = "Std.unit.hx" ,lineNumber = 91 ,className = "unit.TestSpecification" ,methodName = "testStd_unit_hx" ))
		def _hx_local_29():
			def _hx_local_25():
				x3 = _hx_c.python_lib_Random.random() * 0
				def _hx_local_28():
					def _hx_local_27():
						_hx_local_26 = None
						try:
							_hx_local_26 = int(x3)
						except Exception as _hx_e:
							_hx_e1 = _hx_e.val if isinstance(_hx_e, _HxException) else _hx_e
							if True:
								e7 = _hx_e1
								_hx_local_26 = None
							else:
								raise _hx_e
						return _hx_local_26
					
					return _hx_local_27()
				
				return _hx_local_28()
			
			return 0 if 0 <= 0 else _hx_local_25()
		
		self.eq(_hx_local_29(), 0, _hx_c._hx_AnonObject(fileName = "Std.unit.hx" ,lineNumber = 92 ,className = "unit.TestSpecification" ,methodName = "testStd_unit_hx" ))
		def _hx_local_34():
			def _hx_local_30():
				x4 = _hx_c.python_lib_Random.random() * -100
				def _hx_local_33():
					def _hx_local_32():
						_hx_local_31 = None
						try:
							_hx_local_31 = int(x4)
						except Exception as _hx_e:
							_hx_e1 = _hx_e.val if isinstance(_hx_e, _HxException) else _hx_e
							if True:
								e8 = _hx_e1
								_hx_local_31 = None
							else:
								raise _hx_e
						return _hx_local_31
					
					return _hx_local_32()
				
				return _hx_local_33()
			
			return 0 if -100 <= 0 else _hx_local_30()
		
		self.eq(_hx_local_34(), 0, _hx_c._hx_AnonObject(fileName = "Std.unit.hx" ,lineNumber = 93 ,className = "unit.TestSpecification" ,methodName = "testStd_unit_hx" ))
	

	def testDate_unit_hx(self):
		date = _hx_c.Date(1982, 10, 10, 14, 2, 20)
		self.eq(date.date.hour, 14, _hx_c._hx_AnonObject(fileName = "Date.unit.hx" ,lineNumber = 3 ,className = "unit.TestSpecification" ,methodName = "testDate_unit_hx" ))
		self.eq(date.date.minute, 2, _hx_c._hx_AnonObject(fileName = "Date.unit.hx" ,lineNumber = 4 ,className = "unit.TestSpecification" ,methodName = "testDate_unit_hx" ))
		self.eq(date.date.second, 20, _hx_c._hx_AnonObject(fileName = "Date.unit.hx" ,lineNumber = 5 ,className = "unit.TestSpecification" ,methodName = "testDate_unit_hx" ))
		self.eq(date.date.year, 1982, _hx_c._hx_AnonObject(fileName = "Date.unit.hx" ,lineNumber = 6 ,className = "unit.TestSpecification" ,methodName = "testDate_unit_hx" ))
		self.eq(date.date.month - 1, 10, _hx_c._hx_AnonObject(fileName = "Date.unit.hx" ,lineNumber = 7 ,className = "unit.TestSpecification" ,methodName = "testDate_unit_hx" ))
		self.eq(date.date.day, 10, _hx_c._hx_AnonObject(fileName = "Date.unit.hx" ,lineNumber = 8 ,className = "unit.TestSpecification" ,methodName = "testDate_unit_hx" ))
		self.eq(date.date.isoweekday(), 3, _hx_c._hx_AnonObject(fileName = "Date.unit.hx" ,lineNumber = 9 ,className = "unit.TestSpecification" ,methodName = "testDate_unit_hx" ))
		self.eq(date.toString(), "1982-11-10 14:02:20", _hx_c._hx_AnonObject(fileName = "Date.unit.hx" ,lineNumber = 11 ,className = "unit.TestSpecification" ,methodName = "testDate_unit_hx" ))
	

	def testStringTools_unit_hx(self):
		str = "<foo> & <bar> = 'invalid\"'"
		strEsc = "&lt;foo&gt; &amp; &lt;bar&gt; = 'invalid\"'"
		strEscQuotes = "&lt;foo&gt; &amp; &lt;bar&gt; = &#039;invalid&quot;&#039;"
		self.eq(_hx_c.StringTools.htmlEscape(str, False), strEsc, _hx_c._hx_AnonObject(fileName = "StringTools.unit.hx" ,lineNumber = 5 ,className = "unit.TestSpecification" ,methodName = "testStringTools_unit_hx" ))
		self.eq(_hx_c.StringTools.htmlEscape(str, True), strEscQuotes, _hx_c._hx_AnonObject(fileName = "StringTools.unit.hx" ,lineNumber = 6 ,className = "unit.TestSpecification" ,methodName = "testStringTools_unit_hx" ))
		self.eq(_hx_c.StringTools.htmlUnescape(strEsc), str, _hx_c._hx_AnonObject(fileName = "StringTools.unit.hx" ,lineNumber = 9 ,className = "unit.TestSpecification" ,methodName = "testStringTools_unit_hx" ))
		self.eq(_hx_c.StringTools.htmlUnescape(strEscQuotes), str, _hx_c._hx_AnonObject(fileName = "StringTools.unit.hx" ,lineNumber = 10 ,className = "unit.TestSpecification" ,methodName = "testStringTools_unit_hx" ))
		self.t(_hx_c.StringTools.startsWith("foo", "f"), _hx_c._hx_AnonObject(fileName = "StringTools.unit.hx" ,lineNumber = 13 ,className = "unit.TestSpecification" ,methodName = "testStringTools_unit_hx" ))
		self.t(_hx_c.StringTools.startsWith("foo", "fo"), _hx_c._hx_AnonObject(fileName = "StringTools.unit.hx" ,lineNumber = 14 ,className = "unit.TestSpecification" ,methodName = "testStringTools_unit_hx" ))
		self.t(_hx_c.StringTools.startsWith("foo", "foo"), _hx_c._hx_AnonObject(fileName = "StringTools.unit.hx" ,lineNumber = 15 ,className = "unit.TestSpecification" ,methodName = "testStringTools_unit_hx" ))
		self.f(_hx_c.StringTools.startsWith("foo", "fooo"), _hx_c._hx_AnonObject(fileName = "StringTools.unit.hx" ,lineNumber = 16 ,className = "unit.TestSpecification" ,methodName = "testStringTools_unit_hx" ))
		self.t(_hx_c.StringTools.startsWith("foo", ""), _hx_c._hx_AnonObject(fileName = "StringTools.unit.hx" ,lineNumber = 17 ,className = "unit.TestSpecification" ,methodName = "testStringTools_unit_hx" ))
		self.t(_hx_c.StringTools.startsWith("", ""), _hx_c._hx_AnonObject(fileName = "StringTools.unit.hx" ,lineNumber = 18 ,className = "unit.TestSpecification" ,methodName = "testStringTools_unit_hx" ))
		self.t(_hx_c.StringTools.endsWith("foo", "o"), _hx_c._hx_AnonObject(fileName = "StringTools.unit.hx" ,lineNumber = 21 ,className = "unit.TestSpecification" ,methodName = "testStringTools_unit_hx" ))
		self.t(_hx_c.StringTools.endsWith("foo", "oo"), _hx_c._hx_AnonObject(fileName = "StringTools.unit.hx" ,lineNumber = 22 ,className = "unit.TestSpecification" ,methodName = "testStringTools_unit_hx" ))
		self.t(_hx_c.StringTools.endsWith("foo", "foo"), _hx_c._hx_AnonObject(fileName = "StringTools.unit.hx" ,lineNumber = 23 ,className = "unit.TestSpecification" ,methodName = "testStringTools_unit_hx" ))
		self.f(_hx_c.StringTools.endsWith("foo", "fooo"), _hx_c._hx_AnonObject(fileName = "StringTools.unit.hx" ,lineNumber = 24 ,className = "unit.TestSpecification" ,methodName = "testStringTools_unit_hx" ))
		self.t(_hx_c.StringTools.endsWith("foo", ""), _hx_c._hx_AnonObject(fileName = "StringTools.unit.hx" ,lineNumber = 25 ,className = "unit.TestSpecification" ,methodName = "testStringTools_unit_hx" ))
		self.t(_hx_c.StringTools.endsWith("", ""), _hx_c._hx_AnonObject(fileName = "StringTools.unit.hx" ,lineNumber = 26 ,className = "unit.TestSpecification" ,methodName = "testStringTools_unit_hx" ))
		self.f(_hx_c.StringTools.isSpace("", 0), _hx_c._hx_AnonObject(fileName = "StringTools.unit.hx" ,lineNumber = 29 ,className = "unit.TestSpecification" ,methodName = "testStringTools_unit_hx" ))
		self.f(_hx_c.StringTools.isSpace("", 1), _hx_c._hx_AnonObject(fileName = "StringTools.unit.hx" ,lineNumber = 30 ,className = "unit.TestSpecification" ,methodName = "testStringTools_unit_hx" ))
		self.f(_hx_c.StringTools.isSpace(" ", -1), _hx_c._hx_AnonObject(fileName = "StringTools.unit.hx" ,lineNumber = 31 ,className = "unit.TestSpecification" ,methodName = "testStringTools_unit_hx" ))
		self.f(_hx_c.StringTools.isSpace("a", 0), _hx_c._hx_AnonObject(fileName = "StringTools.unit.hx" ,lineNumber = 32 ,className = "unit.TestSpecification" ,methodName = "testStringTools_unit_hx" ))
		self.t(_hx_c.StringTools.isSpace("  ", 0), _hx_c._hx_AnonObject(fileName = "StringTools.unit.hx" ,lineNumber = 33 ,className = "unit.TestSpecification" ,methodName = "testStringTools_unit_hx" ))
		self.t(_hx_c.StringTools.isSpace(" ", 0), _hx_c._hx_AnonObject(fileName = "StringTools.unit.hx" ,lineNumber = 34 ,className = "unit.TestSpecification" ,methodName = "testStringTools_unit_hx" ))
		self.t(_hx_c.StringTools.isSpace(" a", 0), _hx_c._hx_AnonObject(fileName = "StringTools.unit.hx" ,lineNumber = 35 ,className = "unit.TestSpecification" ,methodName = "testStringTools_unit_hx" ))
		self.t(_hx_c.StringTools.isSpace("\t", 0), _hx_c._hx_AnonObject(fileName = "StringTools.unit.hx" ,lineNumber = 36 ,className = "unit.TestSpecification" ,methodName = "testStringTools_unit_hx" ))
		self.t(_hx_c.StringTools.isSpace("\n", 0), _hx_c._hx_AnonObject(fileName = "StringTools.unit.hx" ,lineNumber = 37 ,className = "unit.TestSpecification" ,methodName = "testStringTools_unit_hx" ))
		self.t(_hx_c.StringTools.isSpace("", 0), _hx_c._hx_AnonObject(fileName = "StringTools.unit.hx" ,lineNumber = 38 ,className = "unit.TestSpecification" ,methodName = "testStringTools_unit_hx" ))
		self.t(_hx_c.StringTools.isSpace("", 0), _hx_c._hx_AnonObject(fileName = "StringTools.unit.hx" ,lineNumber = 39 ,className = "unit.TestSpecification" ,methodName = "testStringTools_unit_hx" ))
		self.t(_hx_c.StringTools.isSpace("\r", 0), _hx_c._hx_AnonObject(fileName = "StringTools.unit.hx" ,lineNumber = 40 ,className = "unit.TestSpecification" ,methodName = "testStringTools_unit_hx" ))
		self.eq(_hx_c.StringTools.ltrim("a"), "a", _hx_c._hx_AnonObject(fileName = "StringTools.unit.hx" ,lineNumber = 43 ,className = "unit.TestSpecification" ,methodName = "testStringTools_unit_hx" ))
		self.eq(_hx_c.StringTools.ltrim("  a"), "a", _hx_c._hx_AnonObject(fileName = "StringTools.unit.hx" ,lineNumber = 44 ,className = "unit.TestSpecification" ,methodName = "testStringTools_unit_hx" ))
		self.eq(_hx_c.StringTools.ltrim("  a b"), "a b", _hx_c._hx_AnonObject(fileName = "StringTools.unit.hx" ,lineNumber = 45 ,className = "unit.TestSpecification" ,methodName = "testStringTools_unit_hx" ))
		self.eq(_hx_c.StringTools.ltrim("    "), "", _hx_c._hx_AnonObject(fileName = "StringTools.unit.hx" ,lineNumber = 46 ,className = "unit.TestSpecification" ,methodName = "testStringTools_unit_hx" ))
		self.eq(_hx_c.StringTools.ltrim(""), "", _hx_c._hx_AnonObject(fileName = "StringTools.unit.hx" ,lineNumber = 47 ,className = "unit.TestSpecification" ,methodName = "testStringTools_unit_hx" ))
		self.eq(_hx_c.StringTools.rtrim("a"), "a", _hx_c._hx_AnonObject(fileName = "StringTools.unit.hx" ,lineNumber = 50 ,className = "unit.TestSpecification" ,methodName = "testStringTools_unit_hx" ))
		self.eq(_hx_c.StringTools.rtrim("a  "), "a", _hx_c._hx_AnonObject(fileName = "StringTools.unit.hx" ,lineNumber = 51 ,className = "unit.TestSpecification" ,methodName = "testStringTools_unit_hx" ))
		self.eq(_hx_c.StringTools.rtrim("a b  "), "a b", _hx_c._hx_AnonObject(fileName = "StringTools.unit.hx" ,lineNumber = 52 ,className = "unit.TestSpecification" ,methodName = "testStringTools_unit_hx" ))
		self.eq(_hx_c.StringTools.rtrim("    "), "", _hx_c._hx_AnonObject(fileName = "StringTools.unit.hx" ,lineNumber = 53 ,className = "unit.TestSpecification" ,methodName = "testStringTools_unit_hx" ))
		self.eq(_hx_c.StringTools.rtrim(""), "", _hx_c._hx_AnonObject(fileName = "StringTools.unit.hx" ,lineNumber = 54 ,className = "unit.TestSpecification" ,methodName = "testStringTools_unit_hx" ))
		self.eq(_hx_c.StringTools.trim("a"), "a", _hx_c._hx_AnonObject(fileName = "StringTools.unit.hx" ,lineNumber = 57 ,className = "unit.TestSpecification" ,methodName = "testStringTools_unit_hx" ))
		self.eq(_hx_c.StringTools.trim("a  "), "a", _hx_c._hx_AnonObject(fileName = "StringTools.unit.hx" ,lineNumber = 58 ,className = "unit.TestSpecification" ,methodName = "testStringTools_unit_hx" ))
		self.eq(_hx_c.StringTools.trim("a b  "), "a b", _hx_c._hx_AnonObject(fileName = "StringTools.unit.hx" ,lineNumber = 59 ,className = "unit.TestSpecification" ,methodName = "testStringTools_unit_hx" ))
		self.eq(_hx_c.StringTools.trim("    "), "", _hx_c._hx_AnonObject(fileName = "StringTools.unit.hx" ,lineNumber = 60 ,className = "unit.TestSpecification" ,methodName = "testStringTools_unit_hx" ))
		self.eq(_hx_c.StringTools.trim(""), "", _hx_c._hx_AnonObject(fileName = "StringTools.unit.hx" ,lineNumber = 61 ,className = "unit.TestSpecification" ,methodName = "testStringTools_unit_hx" ))
		self.eq(_hx_c.StringTools.trim("  a"), "a", _hx_c._hx_AnonObject(fileName = "StringTools.unit.hx" ,lineNumber = 62 ,className = "unit.TestSpecification" ,methodName = "testStringTools_unit_hx" ))
		self.eq(_hx_c.StringTools.trim("  a b"), "a b", _hx_c._hx_AnonObject(fileName = "StringTools.unit.hx" ,lineNumber = 63 ,className = "unit.TestSpecification" ,methodName = "testStringTools_unit_hx" ))
		self.eq(_hx_c.StringTools.trim("  a b  "), "a b", _hx_c._hx_AnonObject(fileName = "StringTools.unit.hx" ,lineNumber = 64 ,className = "unit.TestSpecification" ,methodName = "testStringTools_unit_hx" ))
		self.eq(_hx_c.StringTools.lpad("", "", 2), "", _hx_c._hx_AnonObject(fileName = "StringTools.unit.hx" ,lineNumber = 67 ,className = "unit.TestSpecification" ,methodName = "testStringTools_unit_hx" ))
		self.eq(_hx_c.StringTools.lpad("", "a", 0), "", _hx_c._hx_AnonObject(fileName = "StringTools.unit.hx" ,lineNumber = 68 ,className = "unit.TestSpecification" ,methodName = "testStringTools_unit_hx" ))
		self.eq(_hx_c.StringTools.lpad("b", "a", 0), "b", _hx_c._hx_AnonObject(fileName = "StringTools.unit.hx" ,lineNumber = 69 ,className = "unit.TestSpecification" ,methodName = "testStringTools_unit_hx" ))
		self.eq(_hx_c.StringTools.lpad("b", "", 2), "b", _hx_c._hx_AnonObject(fileName = "StringTools.unit.hx" ,lineNumber = 70 ,className = "unit.TestSpecification" ,methodName = "testStringTools_unit_hx" ))
		self.eq(_hx_c.StringTools.lpad("", "a", 2), "aa", _hx_c._hx_AnonObject(fileName = "StringTools.unit.hx" ,lineNumber = 71 ,className = "unit.TestSpecification" ,methodName = "testStringTools_unit_hx" ))
		self.eq(_hx_c.StringTools.lpad("b", "a", 0), "b", _hx_c._hx_AnonObject(fileName = "StringTools.unit.hx" ,lineNumber = 72 ,className = "unit.TestSpecification" ,methodName = "testStringTools_unit_hx" ))
		self.eq(_hx_c.StringTools.lpad("b", "a", 1), "b", _hx_c._hx_AnonObject(fileName = "StringTools.unit.hx" ,lineNumber = 73 ,className = "unit.TestSpecification" ,methodName = "testStringTools_unit_hx" ))
		self.eq(_hx_c.StringTools.lpad("b", "a", 2), "ab", _hx_c._hx_AnonObject(fileName = "StringTools.unit.hx" ,lineNumber = 74 ,className = "unit.TestSpecification" ,methodName = "testStringTools_unit_hx" ))
		self.eq(_hx_c.StringTools.lpad("b", "a", 3), "aab", _hx_c._hx_AnonObject(fileName = "StringTools.unit.hx" ,lineNumber = 75 ,className = "unit.TestSpecification" ,methodName = "testStringTools_unit_hx" ))
		self.eq(_hx_c.StringTools.lpad("b", "a", 4), "aaab", _hx_c._hx_AnonObject(fileName = "StringTools.unit.hx" ,lineNumber = 76 ,className = "unit.TestSpecification" ,methodName = "testStringTools_unit_hx" ))
		self.eq(_hx_c.StringTools.lpad("b", "abcdef", 4), "abcdefb", _hx_c._hx_AnonObject(fileName = "StringTools.unit.hx" ,lineNumber = 77 ,className = "unit.TestSpecification" ,methodName = "testStringTools_unit_hx" ))
		self.eq(_hx_c.StringTools.rpad("", "", 2), "", _hx_c._hx_AnonObject(fileName = "StringTools.unit.hx" ,lineNumber = 80 ,className = "unit.TestSpecification" ,methodName = "testStringTools_unit_hx" ))
		self.eq(_hx_c.StringTools.rpad("", "a", 0), "", _hx_c._hx_AnonObject(fileName = "StringTools.unit.hx" ,lineNumber = 81 ,className = "unit.TestSpecification" ,methodName = "testStringTools_unit_hx" ))
		self.eq(_hx_c.StringTools.rpad("b", "a", 0), "b", _hx_c._hx_AnonObject(fileName = "StringTools.unit.hx" ,lineNumber = 82 ,className = "unit.TestSpecification" ,methodName = "testStringTools_unit_hx" ))
		self.eq(_hx_c.StringTools.rpad("b", "", 2), "b", _hx_c._hx_AnonObject(fileName = "StringTools.unit.hx" ,lineNumber = 83 ,className = "unit.TestSpecification" ,methodName = "testStringTools_unit_hx" ))
		self.eq(_hx_c.StringTools.rpad("", "a", 2), "aa", _hx_c._hx_AnonObject(fileName = "StringTools.unit.hx" ,lineNumber = 84 ,className = "unit.TestSpecification" ,methodName = "testStringTools_unit_hx" ))
		self.eq(_hx_c.StringTools.rpad("b", "a", 0), "b", _hx_c._hx_AnonObject(fileName = "StringTools.unit.hx" ,lineNumber = 85 ,className = "unit.TestSpecification" ,methodName = "testStringTools_unit_hx" ))
		self.eq(_hx_c.StringTools.rpad("b", "a", 1), "b", _hx_c._hx_AnonObject(fileName = "StringTools.unit.hx" ,lineNumber = 86 ,className = "unit.TestSpecification" ,methodName = "testStringTools_unit_hx" ))
		self.eq(_hx_c.StringTools.rpad("b", "a", 2), "ba", _hx_c._hx_AnonObject(fileName = "StringTools.unit.hx" ,lineNumber = 87 ,className = "unit.TestSpecification" ,methodName = "testStringTools_unit_hx" ))
		self.eq(_hx_c.StringTools.rpad("b", "a", 3), "baa", _hx_c._hx_AnonObject(fileName = "StringTools.unit.hx" ,lineNumber = 88 ,className = "unit.TestSpecification" ,methodName = "testStringTools_unit_hx" ))
		self.eq(_hx_c.StringTools.rpad("b", "a", 4), "baaa", _hx_c._hx_AnonObject(fileName = "StringTools.unit.hx" ,lineNumber = 89 ,className = "unit.TestSpecification" ,methodName = "testStringTools_unit_hx" ))
		self.eq(_hx_c.StringTools.rpad("b", "abcdef", 4), "babcdef", _hx_c._hx_AnonObject(fileName = "StringTools.unit.hx" ,lineNumber = 90 ,className = "unit.TestSpecification" ,methodName = "testStringTools_unit_hx" ))
		s = "xfooxfooxxbarxbarxx"
		self.eq(_hx_c.StringTools.replace(s, "x", ""), "foofoobarbar", _hx_c._hx_AnonObject(fileName = "StringTools.unit.hx" ,lineNumber = 94 ,className = "unit.TestSpecification" ,methodName = "testStringTools_unit_hx" ))
		self.eq(_hx_c.StringTools.replace(s, "", ""), "xfooxfooxxbarxbarxx", _hx_c._hx_AnonObject(fileName = "StringTools.unit.hx" ,lineNumber = 95 ,className = "unit.TestSpecification" ,methodName = "testStringTools_unit_hx" ))
		self.eq(_hx_c.StringTools.replace(s, "", "x"), "xxfxoxoxxxfxoxoxxxxxbxaxrxxxbxaxrxxxx", _hx_c._hx_AnonObject(fileName = "StringTools.unit.hx" ,lineNumber = 96 ,className = "unit.TestSpecification" ,methodName = "testStringTools_unit_hx" ))
		self.eq(_hx_c.StringTools.hex(0, 0), "0", _hx_c._hx_AnonObject(fileName = "StringTools.unit.hx" ,lineNumber = 99 ,className = "unit.TestSpecification" ,methodName = "testStringTools_unit_hx" ))
		self.eq(_hx_c.StringTools.hex(0, 1), "0", _hx_c._hx_AnonObject(fileName = "StringTools.unit.hx" ,lineNumber = 100 ,className = "unit.TestSpecification" ,methodName = "testStringTools_unit_hx" ))
		self.eq(_hx_c.StringTools.hex(0, 2), "00", _hx_c._hx_AnonObject(fileName = "StringTools.unit.hx" ,lineNumber = 101 ,className = "unit.TestSpecification" ,methodName = "testStringTools_unit_hx" ))
		self.eq(_hx_c.StringTools.hex(1, 2), "01", _hx_c._hx_AnonObject(fileName = "StringTools.unit.hx" ,lineNumber = 102 ,className = "unit.TestSpecification" ,methodName = "testStringTools_unit_hx" ))
		self.eq(_hx_c.StringTools.hex(4564562), "45A652", _hx_c._hx_AnonObject(fileName = "StringTools.unit.hx" ,lineNumber = 103 ,className = "unit.TestSpecification" ,methodName = "testStringTools_unit_hx" ))
		self.eq(_hx_c.StringTools.hex(4564562, 0), "45A652", _hx_c._hx_AnonObject(fileName = "StringTools.unit.hx" ,lineNumber = 104 ,className = "unit.TestSpecification" ,methodName = "testStringTools_unit_hx" ))
		self.eq(_hx_c.StringTools.hex(4564562, 1), "45A652", _hx_c._hx_AnonObject(fileName = "StringTools.unit.hx" ,lineNumber = 105 ,className = "unit.TestSpecification" ,methodName = "testStringTools_unit_hx" ))
		self.eq(_hx_c.StringTools.hex(-1), "FFFFFFFF", _hx_c._hx_AnonObject(fileName = "StringTools.unit.hx" ,lineNumber = 106 ,className = "unit.TestSpecification" ,methodName = "testStringTools_unit_hx" ))
		self.eq(_hx_c.StringTools.hex(-2), "FFFFFFFE", _hx_c._hx_AnonObject(fileName = "StringTools.unit.hx" ,lineNumber = 107 ,className = "unit.TestSpecification" ,methodName = "testStringTools_unit_hx" ))
		self.eq(_hx_c.StringTools.hex(11259375, 7), "0ABCDEF", _hx_c._hx_AnonObject(fileName = "StringTools.unit.hx" ,lineNumber = 108 ,className = "unit.TestSpecification" ,methodName = "testStringTools_unit_hx" ))
		self.eq(_hx_c.StringTools.hex(-1, 8), "FFFFFFFF", _hx_c._hx_AnonObject(fileName = "StringTools.unit.hx" ,lineNumber = 109 ,className = "unit.TestSpecification" ,methodName = "testStringTools_unit_hx" ))
		self.eq(_hx_c.StringTools.hex(-481400000, 8), "E34E6B40", _hx_c._hx_AnonObject(fileName = "StringTools.unit.hx" ,lineNumber = 110 ,className = "unit.TestSpecification" ,methodName = "testStringTools_unit_hx" ))
		s1 = "foo1bar"
		self.eq(-1 if (0 >= _hx_builtin.len(s1)) else ord(_hx_array_get(s1,0)), 102, _hx_c._hx_AnonObject(fileName = "StringTools.unit.hx" ,lineNumber = 114 ,className = "unit.TestSpecification" ,methodName = "testStringTools_unit_hx" ))
		self.eq(-1 if (1 >= _hx_builtin.len(s1)) else ord(_hx_array_get(s1,1)), 111, _hx_c._hx_AnonObject(fileName = "StringTools.unit.hx" ,lineNumber = 115 ,className = "unit.TestSpecification" ,methodName = "testStringTools_unit_hx" ))
		self.eq(-1 if (2 >= _hx_builtin.len(s1)) else ord(_hx_array_get(s1,2)), 111, _hx_c._hx_AnonObject(fileName = "StringTools.unit.hx" ,lineNumber = 116 ,className = "unit.TestSpecification" ,methodName = "testStringTools_unit_hx" ))
		self.eq(-1 if (3 >= _hx_builtin.len(s1)) else ord(_hx_array_get(s1,3)), 49, _hx_c._hx_AnonObject(fileName = "StringTools.unit.hx" ,lineNumber = 117 ,className = "unit.TestSpecification" ,methodName = "testStringTools_unit_hx" ))
		self.eq(-1 if (4 >= _hx_builtin.len(s1)) else ord(_hx_array_get(s1,4)), 98, _hx_c._hx_AnonObject(fileName = "StringTools.unit.hx" ,lineNumber = 118 ,className = "unit.TestSpecification" ,methodName = "testStringTools_unit_hx" ))
		self.eq(-1 if (5 >= _hx_builtin.len(s1)) else ord(_hx_array_get(s1,5)), 97, _hx_c._hx_AnonObject(fileName = "StringTools.unit.hx" ,lineNumber = 119 ,className = "unit.TestSpecification" ,methodName = "testStringTools_unit_hx" ))
		self.eq(-1 if (6 >= _hx_builtin.len(s1)) else ord(_hx_array_get(s1,6)), 114, _hx_c._hx_AnonObject(fileName = "StringTools.unit.hx" ,lineNumber = 120 ,className = "unit.TestSpecification" ,methodName = "testStringTools_unit_hx" ))
		str1 = "abc"
		self.eq(-1 if (0 >= _hx_builtin.len(str1)) else ord(_hx_array_get(str1,0)), 97, _hx_c._hx_AnonObject(fileName = "StringTools.unit.hx" ,lineNumber = 122 ,className = "unit.TestSpecification" ,methodName = "testStringTools_unit_hx" ))
		self.eq(-1 if (1 >= _hx_builtin.len(str1)) else ord(_hx_array_get(str1,1)), 98, _hx_c._hx_AnonObject(fileName = "StringTools.unit.hx" ,lineNumber = 123 ,className = "unit.TestSpecification" ,methodName = "testStringTools_unit_hx" ))
		self.eq(-1 if (2 >= _hx_builtin.len(str1)) else ord(_hx_array_get(str1,2)), 99, _hx_c._hx_AnonObject(fileName = "StringTools.unit.hx" ,lineNumber = 124 ,className = "unit.TestSpecification" ,methodName = "testStringTools_unit_hx" ))
		def _hx_local_0():
			s2 = None
			c = 128
			s2 = "".join(_hx_builtin.map(_hx_builtin.chr, [c]))
			
			return -1 if (0 >= _hx_builtin.len(s2)) else ord(_hx_array_get(s2,0))
		
		self.eq(_hx_local_0(), 128, _hx_c._hx_AnonObject(fileName = "StringTools.unit.hx" ,lineNumber = 125 ,className = "unit.TestSpecification" ,methodName = "testStringTools_unit_hx" ))
		def _hx_local_1():
			s3 = None
			c1 = 255
			s3 = "".join(_hx_builtin.map(_hx_builtin.chr, [c1]))
			
			return -1 if (0 >= _hx_builtin.len(s3)) else ord(_hx_array_get(s3,0))
		
		self.eq(_hx_local_1(), 255, _hx_c._hx_AnonObject(fileName = "StringTools.unit.hx" ,lineNumber = 126 ,className = "unit.TestSpecification" ,methodName = "testStringTools_unit_hx" ))
		def _hx_local_2():
			c2 = None
			if 2 >= _hx_builtin.len(str1):
				c2 = -1
			else:
				c2 = ord(_hx_array_get(str1,2))
			return c2 == -1
		
		self.f(_hx_local_2(), _hx_c._hx_AnonObject(fileName = "StringTools.unit.hx" ,lineNumber = 127 ,className = "unit.TestSpecification" ,methodName = "testStringTools_unit_hx" ))
		def _hx_local_3():
			c3 = None
			if 3 >= _hx_builtin.len(str1):
				c3 = -1
			else:
				c3 = ord(_hx_array_get(str1,3))
			return c3 == -1
		
		self.t(_hx_local_3(), _hx_c._hx_AnonObject(fileName = "StringTools.unit.hx" ,lineNumber = 128 ,className = "unit.TestSpecification" ,methodName = "testStringTools_unit_hx" ))
		def _hx_local_4():
			c4 = None
			if 0 >= _hx_builtin.len(""):
				c4 = -1
			else:
				c4 = ord(_hx_array_get("",0))
			return c4 == -1
		
		self.t(_hx_local_4(), _hx_c._hx_AnonObject(fileName = "StringTools.unit.hx" ,lineNumber = 129 ,className = "unit.TestSpecification" ,methodName = "testStringTools_unit_hx" ))
	

	def testEvaluationOrder_unit_hx(self):
		def _hx_local_0(i1,i2,i3):
			return Std.string(Std.string(Std.string(Std.string("" + Std.string(_hx_c.Std.string(i1))) + ";") + Std.string(_hx_c.Std.string(i2))) + ";") + Std.string(_hx_c.Std.string(i3))
		func = _hx_local_0
		i = 0
		def _hx_local_2():
			nonlocal i
			_hx_local_1 = i
			i = i + 1
			return _hx_local_1
			
		
		def _hx_local_4():
			nonlocal i
			_hx_local_3 = i
			i = i + 1
			return _hx_local_3
			
		
		def _hx_local_6():
			nonlocal i
			_hx_local_5 = i
			i = i + 1
			return _hx_local_5
			
		
		self.eq(func(_hx_local_2(), _hx_local_4(), _hx_local_6()), "0;1;2", _hx_c._hx_AnonObject(fileName = "EvaluationOrder.unit.hx" ,lineNumber = 6 ,className = "unit.TestSpecification" ,methodName = "testEvaluationOrder_unit_hx" ))
		def _hx_local_8():
			nonlocal i
			_hx_local_7 = i
			i = i + 1
			return _hx_local_7
			
		
		def _hx_local_10():
			nonlocal i
			_hx_local_9 = i
			i = i + 1
			return _hx_local_9
			
		
		def _hx_local_12():
			nonlocal i
			_hx_local_11 = i
			i = i + 1
			return _hx_local_11
			
		
		a = [_hx_local_8(), _hx_local_10(), _hx_local_12()]
		self.eq(";".join(_hx_builtin.list(_hx_builtin.map(_hx_c.Std.string, a))), "3;4;5", _hx_c._hx_AnonObject(fileName = "EvaluationOrder.unit.hx" ,lineNumber = 9 ,className = "unit.TestSpecification" ,methodName = "testEvaluationOrder_unit_hx" ))
		def _hx_local_14():
			nonlocal i
			_hx_local_13 = i
			i = i + 1
			return _hx_local_13
			
		
		def _hx_local_16():
			nonlocal i
			_hx_local_15 = i
			i = i + 1
			return _hx_local_15
			
		
		def _hx_local_18():
			nonlocal i
			_hx_local_17 = i
			i = i + 1
			return _hx_local_17
			
		
		obj = _hx_c._hx_AnonObject(a = _hx_local_14() ,b = _hx_local_16() ,c = _hx_local_18() )
		obj.a = 6
		obj.b = 7
		obj.c = 8
		def _hx_local_20():
			nonlocal i
			_hx_local_19 = i
			i = i + 1
			return _hx_local_19
			
		
		def _hx_local_21():
			def _hx_local_23():
				nonlocal i
				_hx_local_22 = i
				i = i + 1
				return _hx_local_22
				
			
			def _hx_local_25():
				nonlocal i
				_hx_local_24 = i
				i = i + 1
				return _hx_local_24
				
			
			_this = [_hx_local_23(), _hx_local_25()]
			return ";".join(_hx_builtin.list(_hx_builtin.map(_hx_c.Std.string, _this)))
		
		def _hx_local_27():
			nonlocal i
			_hx_local_26 = i
			i = i + 1
			return _hx_local_26
			
		
		self.eq(func(_hx_local_20(), _hx_local_21(), _hx_local_27()), "9;10;11;12", _hx_c._hx_AnonObject(fileName = "EvaluationOrder.unit.hx" ,lineNumber = 21 ,className = "unit.TestSpecification" ,methodName = "testEvaluationOrder_unit_hx" ))
		buf = []
		def _hx_local_28():
			buf.append(1)
			_hx_builtin.len(buf)
			
			return 1
		
		a1 = _hx_local_28
		def _hx_local_29():
			buf.append(2)
			_hx_builtin.len(buf)
			
			return 2
		
		b = _hx_local_29
		def _hx_local_30():
			buf.append(3)
			_hx_builtin.len(buf)
			
			return 3
		
		c = _hx_local_30
		def _hx_local_31():
			buf.append(4)
			_hx_builtin.len(buf)
			
			return 4
		
		d = _hx_local_31
		def _hx_local_32():
			buf.append(5)
			_hx_builtin.len(buf)
			
			return 5
		
		e = _hx_local_32
		def _hx_local_33():
			buf.append(6)
			_hx_builtin.len(buf)
			
			return 6
		
		f = _hx_local_33
		def _hx_local_35():
			nonlocal buf
			buf = []
			def _hx_local_34():
				return "_".join(_hx_builtin.list(_hx_builtin.map(_hx_c.Std.string, buf)))
			return _hx_local_34
			
		
		begin = _hx_local_35
		end = begin()
		a1() + b() >= 0 and c() + d() >= 0
		self.eq(end(), "1_2_3_4", _hx_c._hx_AnonObject(fileName = "EvaluationOrder.unit.hx" ,lineNumber = 66 ,className = "unit.TestSpecification" ,methodName = "testEvaluationOrder_unit_hx" ))
		end1 = begin()
		a1() + b() >= 99 and c() + d() >= 0
		self.eq(end1(), "1_2", _hx_c._hx_AnonObject(fileName = "EvaluationOrder.unit.hx" ,lineNumber = 70 ,className = "unit.TestSpecification" ,methodName = "testEvaluationOrder_unit_hx" ))
		end2 = begin()
		a1() + b() >= 0 and c() + d() >= 0 and e() + f() >= 0
		self.eq(end2(), "1_2_3_4_5_6", _hx_c._hx_AnonObject(fileName = "EvaluationOrder.unit.hx" ,lineNumber = 74 ,className = "unit.TestSpecification" ,methodName = "testEvaluationOrder_unit_hx" ))
		end3 = begin()
		a1() + b() >= 99 and c() + d() >= 0 and e() + f() >= 0
		self.eq(end3(), "1_2", _hx_c._hx_AnonObject(fileName = "EvaluationOrder.unit.hx" ,lineNumber = 78 ,className = "unit.TestSpecification" ,methodName = "testEvaluationOrder_unit_hx" ))
		end4 = begin()
		a1() + b() >= 0 and c() + d() >= 99 and e() + f() >= 0
		self.eq(end4(), "1_2_3_4", _hx_c._hx_AnonObject(fileName = "EvaluationOrder.unit.hx" ,lineNumber = 82 ,className = "unit.TestSpecification" ,methodName = "testEvaluationOrder_unit_hx" ))
		end5 = begin()
		a1() + b() >= 0 or c() + d() >= 0
		self.eq(end5(), "1_2", _hx_c._hx_AnonObject(fileName = "EvaluationOrder.unit.hx" ,lineNumber = 88 ,className = "unit.TestSpecification" ,methodName = "testEvaluationOrder_unit_hx" ))
		end6 = begin()
		a1() + b() >= 99 or c() + d() >= 0
		self.eq(end6(), "1_2_3_4", _hx_c._hx_AnonObject(fileName = "EvaluationOrder.unit.hx" ,lineNumber = 92 ,className = "unit.TestSpecification" ,methodName = "testEvaluationOrder_unit_hx" ))
		end7 = begin()
		a1() + b() >= 0 or c() + d() >= 0 or e() + f() >= 0
		self.eq(end7(), "1_2", _hx_c._hx_AnonObject(fileName = "EvaluationOrder.unit.hx" ,lineNumber = 96 ,className = "unit.TestSpecification" ,methodName = "testEvaluationOrder_unit_hx" ))
		end8 = begin()
		a1() + b() >= 99 or c() + d() >= 0 or e() + f() >= 0
		self.eq(end8(), "1_2_3_4", _hx_c._hx_AnonObject(fileName = "EvaluationOrder.unit.hx" ,lineNumber = 100 ,className = "unit.TestSpecification" ,methodName = "testEvaluationOrder_unit_hx" ))
		end9 = begin()
		a1() + b() >= 99 or c() + d() >= 99 or e() + f() >= 0
		self.eq(end9(), "1_2_3_4_5_6", _hx_c._hx_AnonObject(fileName = "EvaluationOrder.unit.hx" ,lineNumber = 104 ,className = "unit.TestSpecification" ,methodName = "testEvaluationOrder_unit_hx" ))
		def _hx_local_36(x,y):
			return []
		arr = _hx_local_36
		def _hx_local_37(x1,y1):
			return 0
		idx = _hx_local_37
		end10 = begin()
		_hx_array_get(arr(a1(), b()),idx(c(), d()))
		self.eq(end10(), "1_2_3_4", _hx_c._hx_AnonObject(fileName = "EvaluationOrder.unit.hx" ,lineNumber = 118 ,className = "unit.TestSpecification" ,methodName = "testEvaluationOrder_unit_hx" ))
	

	def testEnumFlags_unit_hx(self):
		flags = 0
		self.f((flags & 1 << _hx_c.unit_EnumFlagTest.EA.index) != 0, _hx_c._hx_AnonObject(fileName = "EnumFlags.unit.hx" ,lineNumber = 3 ,className = "unit.TestSpecification" ,methodName = "testEnumFlags_unit_hx" ))
		flags = 1
		self.t((flags & 1 << _hx_c.unit_EnumFlagTest.EA.index) != 0, _hx_c._hx_AnonObject(fileName = "EnumFlags.unit.hx" ,lineNumber = 5 ,className = "unit.TestSpecification" ,methodName = "testEnumFlags_unit_hx" ))
		flags = flags | 1 << _hx_c.unit_EnumFlagTest.EB.index
		self.t((flags & 1 << _hx_c.unit_EnumFlagTest.EA.index) != 0, _hx_c._hx_AnonObject(fileName = "EnumFlags.unit.hx" ,lineNumber = 9 ,className = "unit.TestSpecification" ,methodName = "testEnumFlags_unit_hx" ))
		self.t((flags & 1 << _hx_c.unit_EnumFlagTest.EB.index) != 0, _hx_c._hx_AnonObject(fileName = "EnumFlags.unit.hx" ,lineNumber = 10 ,className = "unit.TestSpecification" ,methodName = "testEnumFlags_unit_hx" ))
		self.f((flags & 1 << _hx_c.unit_EnumFlagTest.EC.index) != 0, _hx_c._hx_AnonObject(fileName = "EnumFlags.unit.hx" ,lineNumber = 11 ,className = "unit.TestSpecification" ,methodName = "testEnumFlags_unit_hx" ))
		flags = flags & 268435455 - (1 << _hx_c.unit_EnumFlagTest.EC.index)
		self.t((flags & 1 << _hx_c.unit_EnumFlagTest.EA.index) != 0, _hx_c._hx_AnonObject(fileName = "EnumFlags.unit.hx" ,lineNumber = 15 ,className = "unit.TestSpecification" ,methodName = "testEnumFlags_unit_hx" ))
		self.t((flags & 1 << _hx_c.unit_EnumFlagTest.EB.index) != 0, _hx_c._hx_AnonObject(fileName = "EnumFlags.unit.hx" ,lineNumber = 16 ,className = "unit.TestSpecification" ,methodName = "testEnumFlags_unit_hx" ))
		self.f((flags & 1 << _hx_c.unit_EnumFlagTest.EC.index) != 0, _hx_c._hx_AnonObject(fileName = "EnumFlags.unit.hx" ,lineNumber = 17 ,className = "unit.TestSpecification" ,methodName = "testEnumFlags_unit_hx" ))
		flags = flags & 268435455 - (1 << _hx_c.unit_EnumFlagTest.EA.index)
		self.f((flags & 1 << _hx_c.unit_EnumFlagTest.EA.index) != 0, _hx_c._hx_AnonObject(fileName = "EnumFlags.unit.hx" ,lineNumber = 19 ,className = "unit.TestSpecification" ,methodName = "testEnumFlags_unit_hx" ))
		self.t((flags & 1 << _hx_c.unit_EnumFlagTest.EB.index) != 0, _hx_c._hx_AnonObject(fileName = "EnumFlags.unit.hx" ,lineNumber = 20 ,className = "unit.TestSpecification" ,methodName = "testEnumFlags_unit_hx" ))
		self.f((flags & 1 << _hx_c.unit_EnumFlagTest.EC.index) != 0, _hx_c._hx_AnonObject(fileName = "EnumFlags.unit.hx" ,lineNumber = 21 ,className = "unit.TestSpecification" ,methodName = "testEnumFlags_unit_hx" ))
		flags1 = 0
		self.f((flags1 & 1 << _hx_c.unit_EnumFlagTest.EA.index) != 0, _hx_c._hx_AnonObject(fileName = "EnumFlags.unit.hx" ,lineNumber = 25 ,className = "unit.TestSpecification" ,methodName = "testEnumFlags_unit_hx" ))
		flags1 = 1
		self.t((flags1 & 1 << _hx_c.unit_EnumFlagTest.EA.index) != 0, _hx_c._hx_AnonObject(fileName = "EnumFlags.unit.hx" ,lineNumber = 27 ,className = "unit.TestSpecification" ,methodName = "testEnumFlags_unit_hx" ))
		flags1 = flags1 | 1 << _hx_c.unit_EnumFlagTest.EB.index
		self.t((flags1 & 1 << _hx_c.unit_EnumFlagTest.EA.index) != 0, _hx_c._hx_AnonObject(fileName = "EnumFlags.unit.hx" ,lineNumber = 31 ,className = "unit.TestSpecification" ,methodName = "testEnumFlags_unit_hx" ))
		self.t((flags1 & 1 << _hx_c.unit_EnumFlagTest.EB.index) != 0, _hx_c._hx_AnonObject(fileName = "EnumFlags.unit.hx" ,lineNumber = 32 ,className = "unit.TestSpecification" ,methodName = "testEnumFlags_unit_hx" ))
		self.f((flags1 & 1 << _hx_c.unit_EnumFlagTest.EC.index) != 0, _hx_c._hx_AnonObject(fileName = "EnumFlags.unit.hx" ,lineNumber = 33 ,className = "unit.TestSpecification" ,methodName = "testEnumFlags_unit_hx" ))
		flags1 = flags1 & 268435455 - (1 << _hx_c.unit_EnumFlagTest.EC.index)
		self.t((flags1 & 1 << _hx_c.unit_EnumFlagTest.EA.index) != 0, _hx_c._hx_AnonObject(fileName = "EnumFlags.unit.hx" ,lineNumber = 37 ,className = "unit.TestSpecification" ,methodName = "testEnumFlags_unit_hx" ))
		self.t((flags1 & 1 << _hx_c.unit_EnumFlagTest.EB.index) != 0, _hx_c._hx_AnonObject(fileName = "EnumFlags.unit.hx" ,lineNumber = 38 ,className = "unit.TestSpecification" ,methodName = "testEnumFlags_unit_hx" ))
		self.f((flags1 & 1 << _hx_c.unit_EnumFlagTest.EC.index) != 0, _hx_c._hx_AnonObject(fileName = "EnumFlags.unit.hx" ,lineNumber = 39 ,className = "unit.TestSpecification" ,methodName = "testEnumFlags_unit_hx" ))
		flags1 = flags1 & 268435455 - (1 << _hx_c.unit_EnumFlagTest.EA.index)
		self.f((flags1 & 1 << _hx_c.unit_EnumFlagTest.EA.index) != 0, _hx_c._hx_AnonObject(fileName = "EnumFlags.unit.hx" ,lineNumber = 41 ,className = "unit.TestSpecification" ,methodName = "testEnumFlags_unit_hx" ))
		self.t((flags1 & 1 << _hx_c.unit_EnumFlagTest.EB.index) != 0, _hx_c._hx_AnonObject(fileName = "EnumFlags.unit.hx" ,lineNumber = 42 ,className = "unit.TestSpecification" ,methodName = "testEnumFlags_unit_hx" ))
		self.f((flags1 & 1 << _hx_c.unit_EnumFlagTest.EC.index) != 0, _hx_c._hx_AnonObject(fileName = "EnumFlags.unit.hx" ,lineNumber = 43 ,className = "unit.TestSpecification" ,methodName = "testEnumFlags_unit_hx" ))
	

	def testComplexTypeTools_macro_unit_hx(self):
		None

	def testExprTools_unit_hx(self):
		_g = self
		econst = _hx_c._hx_AnonObject(expr = _hx_c.haxe_macro_ExprDef.EConst(_hx_c.haxe_macro_Constant.CInt("1")) ,pos = _hx_c._hx_AnonObject(file = "unitstd/haxe/macro/ExprTools.unit.hx" ,min = 51 ,max = 52 ) )
		econtinue = _hx_c._hx_AnonObject(expr = _hx_c.haxe_macro_ExprDef.EContinue ,pos = _hx_c._hx_AnonObject(file = "unitstd/haxe/macro/ExprTools.unit.hx" ,min = 76 ,max = 84 ) )
		ebreak = _hx_c._hx_AnonObject(expr = _hx_c.haxe_macro_ExprDef.EBreak ,pos = _hx_c._hx_AnonObject(file = "unitstd/haxe/macro/ExprTools.unit.hx" ,min = 105 ,max = 110 ) )
		efield = _hx_c._hx_AnonObject(expr = _hx_c.haxe_macro_ExprDef.EField(_hx_c._hx_AnonObject(expr = _hx_c.haxe_macro_ExprDef.EConst(_hx_c.haxe_macro_Constant.CString("foo")) ,pos = _hx_c._hx_AnonObject(file = "unitstd/haxe/macro/ExprTools.unit.hx" ,min = 131 ,max = 136 ) ), "length") ,pos = _hx_c._hx_AnonObject(file = "unitstd/haxe/macro/ExprTools.unit.hx" ,min = 131 ,max = 143 ) )
		eparenthesis = _hx_c._hx_AnonObject(expr = _hx_c.haxe_macro_ExprDef.EParenthesis(_hx_c._hx_AnonObject(expr = _hx_c.haxe_macro_ExprDef.EConst(_hx_c.haxe_macro_Constant.CInt("1")) ,pos = _hx_c._hx_AnonObject(file = "unitstd/haxe/macro/ExprTools.unit.hx" ,min = 171 ,max = 172 ) )) ,pos = _hx_c._hx_AnonObject(file = "unitstd/haxe/macro/ExprTools.unit.hx" ,min = 170 ,max = 173 ) )
		euntyped = _hx_c._hx_AnonObject(expr = _hx_c.haxe_macro_ExprDef.EUntyped(_hx_c._hx_AnonObject(expr = _hx_c.haxe_macro_ExprDef.EConst(_hx_c.haxe_macro_Constant.CInt("1")) ,pos = _hx_c._hx_AnonObject(file = "unitstd/haxe/macro/ExprTools.unit.hx" ,min = 204 ,max = 205 ) )) ,pos = _hx_c._hx_AnonObject(file = "unitstd/haxe/macro/ExprTools.unit.hx" ,min = 196 ,max = 205 ) )
		ethrow = _hx_c._hx_AnonObject(expr = _hx_c.haxe_macro_ExprDef.EThrow(_hx_c._hx_AnonObject(expr = _hx_c.haxe_macro_ExprDef.EConst(_hx_c.haxe_macro_Constant.CInt("1")) ,pos = _hx_c._hx_AnonObject(file = "unitstd/haxe/macro/ExprTools.unit.hx" ,min = 232 ,max = 233 ) )) ,pos = _hx_c._hx_AnonObject(file = "unitstd/haxe/macro/ExprTools.unit.hx" ,min = 226 ,max = 231 ) )
		eunop = _hx_c._hx_AnonObject(expr = _hx_c.haxe_macro_ExprDef.EConst(_hx_c.haxe_macro_Constant.CInt("-1")) ,pos = _hx_c._hx_AnonObject(file = "unitstd/haxe/macro/ExprTools.unit.hx" ,min = 253 ,max = 255 ) )
		ecast = _hx_c._hx_AnonObject(expr = _hx_c.haxe_macro_ExprDef.ECast(_hx_c._hx_AnonObject(expr = _hx_c.haxe_macro_ExprDef.EConst(_hx_c.haxe_macro_Constant.CInt("1")) ,pos = _hx_c._hx_AnonObject(file = "unitstd/haxe/macro/ExprTools.unit.hx" ,min = 280 ,max = 281 ) ), None) ,pos = _hx_c._hx_AnonObject(file = "unitstd/haxe/macro/ExprTools.unit.hx" ,min = 275 ,max = 281 ) )
		emeta = _hx_c._hx_AnonObject(expr = _hx_c.haxe_macro_ExprDef.EMeta(_hx_c._hx_AnonObject(name = "myMeta" ,params = [] ,pos = _hx_c._hx_AnonObject(file = "unitstd/haxe/macro/ExprTools.unit.hx" ,min = 302 ,max = 308 ) ), _hx_c._hx_AnonObject(expr = _hx_c.haxe_macro_ExprDef.EConst(_hx_c.haxe_macro_Constant.CInt("1")) ,pos = _hx_c._hx_AnonObject(file = "unitstd/haxe/macro/ExprTools.unit.hx" ,min = 309 ,max = 310 ) )) ,pos = _hx_c._hx_AnonObject(file = "unitstd/haxe/macro/ExprTools.unit.hx" ,min = 302 ,max = 310 ) )
		earray = _hx_c._hx_AnonObject(expr = _hx_c.haxe_macro_ExprDef.EArray(_hx_c._hx_AnonObject(expr = _hx_c.haxe_macro_ExprDef.EConst(_hx_c.haxe_macro_Constant.CInt("1")) ,pos = _hx_c._hx_AnonObject(file = "unitstd/haxe/macro/ExprTools.unit.hx" ,min = 331 ,max = 332 ) ), _hx_c._hx_AnonObject(expr = _hx_c.haxe_macro_ExprDef.EConst(_hx_c.haxe_macro_Constant.CInt("0")) ,pos = _hx_c._hx_AnonObject(file = "unitstd/haxe/macro/ExprTools.unit.hx" ,min = 333 ,max = 334 ) )) ,pos = _hx_c._hx_AnonObject(file = "unitstd/haxe/macro/ExprTools.unit.hx" ,min = 331 ,max = 335 ) )
		ewhile1 = _hx_c._hx_AnonObject(expr = _hx_c.haxe_macro_ExprDef.EWhile(_hx_c._hx_AnonObject(expr = _hx_c.haxe_macro_ExprDef.EConst(_hx_c.haxe_macro_Constant.CInt("1")) ,pos = _hx_c._hx_AnonObject(file = "unitstd/haxe/macro/ExprTools.unit.hx" ,min = 364 ,max = 365 ) ), _hx_c._hx_AnonObject(expr = _hx_c.haxe_macro_ExprDef.EConst(_hx_c.haxe_macro_Constant.CString("foo")) ,pos = _hx_c._hx_AnonObject(file = "unitstd/haxe/macro/ExprTools.unit.hx" ,min = 367 ,max = 372 ) ), True) ,pos = _hx_c._hx_AnonObject(file = "unitstd/haxe/macro/ExprTools.unit.hx" ,min = 357 ,max = 372 ) )
		ewhile2 = _hx_c._hx_AnonObject(expr = _hx_c.haxe_macro_ExprDef.EWhile(_hx_c._hx_AnonObject(expr = _hx_c.haxe_macro_ExprDef.EConst(_hx_c.haxe_macro_Constant.CInt("1")) ,pos = _hx_c._hx_AnonObject(file = "unitstd/haxe/macro/ExprTools.unit.hx" ,min = 410 ,max = 411 ) ), _hx_c._hx_AnonObject(expr = _hx_c.haxe_macro_ExprDef.EConst(_hx_c.haxe_macro_Constant.CString("foo")) ,pos = _hx_c._hx_AnonObject(file = "unitstd/haxe/macro/ExprTools.unit.hx" ,min = 397 ,max = 402 ) ), False) ,pos = _hx_c._hx_AnonObject(file = "unitstd/haxe/macro/ExprTools.unit.hx" ,min = 394 ,max = 402 ) )
		ebinop = _hx_c._hx_AnonObject(expr = _hx_c.haxe_macro_ExprDef.EBinop(_hx_c.haxe_macro_Binop.OpAdd, _hx_c._hx_AnonObject(expr = _hx_c.haxe_macro_ExprDef.EConst(_hx_c.haxe_macro_Constant.CInt("1")) ,pos = _hx_c._hx_AnonObject(file = "unitstd/haxe/macro/ExprTools.unit.hx" ,min = 433 ,max = 434 ) ), _hx_c._hx_AnonObject(expr = _hx_c.haxe_macro_ExprDef.EConst(_hx_c.haxe_macro_Constant.CInt("1")) ,pos = _hx_c._hx_AnonObject(file = "unitstd/haxe/macro/ExprTools.unit.hx" ,min = 437 ,max = 438 ) )) ,pos = _hx_c._hx_AnonObject(file = "unitstd/haxe/macro/ExprTools.unit.hx" ,min = 433 ,max = 438 ) )
		efor = _hx_c._hx_AnonObject(expr = _hx_c.haxe_macro_ExprDef.EFor(_hx_c._hx_AnonObject(expr = _hx_c.haxe_macro_ExprDef.EConst(_hx_c.haxe_macro_Constant.CInt("1")) ,pos = _hx_c._hx_AnonObject(file = "unitstd/haxe/macro/ExprTools.unit.hx" ,min = 462 ,max = 463 ) ), _hx_c._hx_AnonObject(expr = _hx_c.haxe_macro_ExprDef.EConst(_hx_c.haxe_macro_Constant.CString("foo")) ,pos = _hx_c._hx_AnonObject(file = "unitstd/haxe/macro/ExprTools.unit.hx" ,min = 465 ,max = 470 ) )) ,pos = _hx_c._hx_AnonObject(file = "unitstd/haxe/macro/ExprTools.unit.hx" ,min = 457 ,max = 470 ) )
		ein = _hx_c._hx_AnonObject(expr = _hx_c.haxe_macro_ExprDef.EIn(_hx_c._hx_AnonObject(expr = _hx_c.haxe_macro_ExprDef.EConst(_hx_c.haxe_macro_Constant.CIdent("i")) ,pos = _hx_c._hx_AnonObject(file = "unitstd/haxe/macro/ExprTools.unit.hx" ,min = 488 ,max = 489 ) ), _hx_c._hx_AnonObject(expr = _hx_c.haxe_macro_ExprDef.EConst(_hx_c.haxe_macro_Constant.CInt("1")) ,pos = _hx_c._hx_AnonObject(file = "unitstd/haxe/macro/ExprTools.unit.hx" ,min = 493 ,max = 494 ) )) ,pos = _hx_c._hx_AnonObject(file = "unitstd/haxe/macro/ExprTools.unit.hx" ,min = 488 ,max = 494 ) )
		evars = _hx_c._hx_AnonObject(expr = _hx_c.haxe_macro_ExprDef.EVars([_hx_c._hx_AnonObject(name = "x" ,type = None ,expr = _hx_c._hx_AnonObject(expr = _hx_c.haxe_macro_ExprDef.EConst(_hx_c.haxe_macro_Constant.CInt("1")) ,pos = _hx_c._hx_AnonObject(file = "unitstd/haxe/macro/ExprTools.unit.hx" ,min = 522 ,max = 523 ) ) ), _hx_c._hx_AnonObject(name = "y" ,type = None ,expr = _hx_c._hx_AnonObject(expr = _hx_c.haxe_macro_ExprDef.EConst(_hx_c.haxe_macro_Constant.CInt("2")) ,pos = _hx_c._hx_AnonObject(file = "unitstd/haxe/macro/ExprTools.unit.hx" ,min = 529 ,max = 530 ) ) )]) ,pos = _hx_c._hx_AnonObject(file = "unitstd/haxe/macro/ExprTools.unit.hx" ,min = 514 ,max = 517 ) )
		etry = _hx_c._hx_AnonObject(expr = _hx_c.haxe_macro_ExprDef.ETry(_hx_c._hx_AnonObject(expr = _hx_c.haxe_macro_ExprDef.EConst(_hx_c.haxe_macro_Constant.CInt("1")) ,pos = _hx_c._hx_AnonObject(file = "unitstd/haxe/macro/ExprTools.unit.hx" ,min = 553 ,max = 554 ) ), [_hx_c._hx_AnonObject(name = "e" ,type = _hx_c.haxe_macro_ComplexType.TPath(_hx_c._hx_AnonObject(pack = [] ,name = "Dynamic" ,params = [] )) ,expr = _hx_c._hx_AnonObject(expr = _hx_c.haxe_macro_ExprDef.EConst(_hx_c.haxe_macro_Constant.CString("foo")) ,pos = _hx_c._hx_AnonObject(file = "unitstd/haxe/macro/ExprTools.unit.hx" ,min = 573 ,max = 578 ) ) ), _hx_c._hx_AnonObject(name = "e2" ,type = _hx_c.haxe_macro_ComplexType.TPath(_hx_c._hx_AnonObject(pack = [] ,name = "String" ,params = [] )) ,expr = _hx_c._hx_AnonObject(expr = _hx_c.haxe_macro_ExprDef.EConst(_hx_c.haxe_macro_Constant.CString("bar")) ,pos = _hx_c._hx_AnonObject(file = "unitstd/haxe/macro/ExprTools.unit.hx" ,min = 596 ,max = 601 ) ) )]) ,pos = _hx_c._hx_AnonObject(file = "unitstd/haxe/macro/ExprTools.unit.hx" ,min = 549 ,max = 552 ) )
		eternary = _hx_c._hx_AnonObject(expr = _hx_c.haxe_macro_ExprDef.ETernary(_hx_c._hx_AnonObject(expr = _hx_c.haxe_macro_ExprDef.EConst(_hx_c.haxe_macro_Constant.CInt("1")) ,pos = _hx_c._hx_AnonObject(file = "unitstd/haxe/macro/ExprTools.unit.hx" ,min = 624 ,max = 625 ) ), _hx_c._hx_AnonObject(expr = _hx_c.haxe_macro_ExprDef.EConst(_hx_c.haxe_macro_Constant.CInt("2")) ,pos = _hx_c._hx_AnonObject(file = "unitstd/haxe/macro/ExprTools.unit.hx" ,min = 628 ,max = 629 ) ), _hx_c._hx_AnonObject(expr = _hx_c.haxe_macro_ExprDef.EConst(_hx_c.haxe_macro_Constant.CInt("3")) ,pos = _hx_c._hx_AnonObject(file = "unitstd/haxe/macro/ExprTools.unit.hx" ,min = 632 ,max = 633 ) )) ,pos = _hx_c._hx_AnonObject(file = "unitstd/haxe/macro/ExprTools.unit.hx" ,min = 624 ,max = 633 ) )
		earraydecl = _hx_c._hx_AnonObject(expr = _hx_c.haxe_macro_ExprDef.EArrayDecl([_hx_c._hx_AnonObject(expr = _hx_c.haxe_macro_ExprDef.EConst(_hx_c.haxe_macro_Constant.CInt("1")) ,pos = _hx_c._hx_AnonObject(file = "unitstd/haxe/macro/ExprTools.unit.hx" ,min = 659 ,max = 660 ) ), _hx_c._hx_AnonObject(expr = _hx_c.haxe_macro_ExprDef.EConst(_hx_c.haxe_macro_Constant.CInt("2")) ,pos = _hx_c._hx_AnonObject(file = "unitstd/haxe/macro/ExprTools.unit.hx" ,min = 662 ,max = 663 ) )]) ,pos = _hx_c._hx_AnonObject(file = "unitstd/haxe/macro/ExprTools.unit.hx" ,min = 658 ,max = 664 ) )
		enew = _hx_c._hx_AnonObject(expr = _hx_c.haxe_macro_ExprDef.ENew(_hx_c._hx_AnonObject(pack = [] ,name = "String" ,params = [] ), [_hx_c._hx_AnonObject(expr = _hx_c.haxe_macro_ExprDef.EConst(_hx_c.haxe_macro_Constant.CInt("1")) ,pos = _hx_c._hx_AnonObject(file = "unitstd/haxe/macro/ExprTools.unit.hx" ,min = 694 ,max = 695 ) ), _hx_c._hx_AnonObject(expr = _hx_c.haxe_macro_ExprDef.EConst(_hx_c.haxe_macro_Constant.CInt("2")) ,pos = _hx_c._hx_AnonObject(file = "unitstd/haxe/macro/ExprTools.unit.hx" ,min = 697 ,max = 698 ) )]) ,pos = _hx_c._hx_AnonObject(file = "unitstd/haxe/macro/ExprTools.unit.hx" ,min = 683 ,max = 699 ) )
		eblock = _hx_c._hx_AnonObject(expr = _hx_c.haxe_macro_ExprDef.EBlock([_hx_c._hx_AnonObject(expr = _hx_c.haxe_macro_ExprDef.EConst(_hx_c.haxe_macro_Constant.CInt("1")) ,pos = _hx_c._hx_AnonObject(file = "unitstd/haxe/macro/ExprTools.unit.hx" ,min = 722 ,max = 723 ) ), _hx_c._hx_AnonObject(expr = _hx_c.haxe_macro_ExprDef.EConst(_hx_c.haxe_macro_Constant.CInt("2")) ,pos = _hx_c._hx_AnonObject(file = "unitstd/haxe/macro/ExprTools.unit.hx" ,min = 725 ,max = 726 ) )]) ,pos = _hx_c._hx_AnonObject(file = "unitstd/haxe/macro/ExprTools.unit.hx" ,min = 720 ,max = 729 ) )
		eobjectdecl = _hx_c._hx_AnonObject(expr = _hx_c.haxe_macro_ExprDef.EObjectDecl([_hx_c._hx_AnonObject(field = "foo" ,expr = _hx_c._hx_AnonObject(expr = _hx_c.haxe_macro_ExprDef.EConst(_hx_c.haxe_macro_Constant.CInt("1")) ,pos = _hx_c._hx_AnonObject(file = "unitstd/haxe/macro/ExprTools.unit.hx" ,min = 762 ,max = 763 ) ) ), _hx_c._hx_AnonObject(field = "bar" ,expr = _hx_c._hx_AnonObject(expr = _hx_c.haxe_macro_ExprDef.EConst(_hx_c.haxe_macro_Constant.CInt("2")) ,pos = _hx_c._hx_AnonObject(file = "unitstd/haxe/macro/ExprTools.unit.hx" ,min = 770 ,max = 771 ) ) )]) ,pos = _hx_c._hx_AnonObject(file = "unitstd/haxe/macro/ExprTools.unit.hx" ,min = 755 ,max = 773 ) )
		ecall = _hx_c._hx_AnonObject(expr = _hx_c.haxe_macro_ExprDef.ECall(_hx_c._hx_AnonObject(expr = _hx_c.haxe_macro_ExprDef.EConst(_hx_c.haxe_macro_Constant.CIdent("foo")) ,pos = _hx_c._hx_AnonObject(file = "unitstd/haxe/macro/ExprTools.unit.hx" ,min = 793 ,max = 796 ) ), [_hx_c._hx_AnonObject(expr = _hx_c.haxe_macro_ExprDef.EConst(_hx_c.haxe_macro_Constant.CInt("1")) ,pos = _hx_c._hx_AnonObject(file = "unitstd/haxe/macro/ExprTools.unit.hx" ,min = 797 ,max = 798 ) ), _hx_c._hx_AnonObject(expr = _hx_c.haxe_macro_ExprDef.EConst(_hx_c.haxe_macro_Constant.CInt("2")) ,pos = _hx_c._hx_AnonObject(file = "unitstd/haxe/macro/ExprTools.unit.hx" ,min = 800 ,max = 801 ) )]) ,pos = _hx_c._hx_AnonObject(file = "unitstd/haxe/macro/ExprTools.unit.hx" ,min = 793 ,max = 802 ) )
		ereturn = _hx_c._hx_AnonObject(expr = _hx_c.haxe_macro_ExprDef.EReturn(_hx_c._hx_AnonObject(expr = _hx_c.haxe_macro_ExprDef.EConst(_hx_c.haxe_macro_Constant.CInt("1")) ,pos = _hx_c._hx_AnonObject(file = "unitstd/haxe/macro/ExprTools.unit.hx" ,min = 831 ,max = 832 ) )) ,pos = _hx_c._hx_AnonObject(file = "unitstd/haxe/macro/ExprTools.unit.hx" ,min = 824 ,max = 832 ) )
		efunction = _hx_c._hx_AnonObject(expr = _hx_c.haxe_macro_ExprDef.EFunction("n", _hx_c._hx_AnonObject(args = [_hx_c._hx_AnonObject(name = "x" ,opt = False ,type = None ,value = _hx_c._hx_AnonObject(expr = _hx_c.haxe_macro_ExprDef.EConst(_hx_c.haxe_macro_Constant.CInt("1")) ,pos = _hx_c._hx_AnonObject(file = "unitstd/haxe/macro/ExprTools.unit.hx" ,min = 871 ,max = 872 ) ) ), _hx_c._hx_AnonObject(name = "y" ,opt = False ,type = None ,value = _hx_c._hx_AnonObject(expr = _hx_c.haxe_macro_ExprDef.EConst(_hx_c.haxe_macro_Constant.CInt("2")) ,pos = _hx_c._hx_AnonObject(file = "unitstd/haxe/macro/ExprTools.unit.hx" ,min = 878 ,max = 879 ) ) )] ,ret = None ,expr = _hx_c._hx_AnonObject(expr = _hx_c.haxe_macro_ExprDef.EConst(_hx_c.haxe_macro_Constant.CInt("3")) ,pos = _hx_c._hx_AnonObject(file = "unitstd/haxe/macro/ExprTools.unit.hx" ,min = 881 ,max = 882 ) ) ,params = [] )) ,pos = _hx_c._hx_AnonObject(file = "unitstd/haxe/macro/ExprTools.unit.hx" ,min = 856 ,max = 882 ) )
		eswitch = _hx_c._hx_AnonObject(expr = _hx_c.haxe_macro_ExprDef.ESwitch(_hx_c._hx_AnonObject(expr = _hx_c.haxe_macro_ExprDef.EConst(_hx_c.haxe_macro_Constant.CInt("1")) ,pos = _hx_c._hx_AnonObject(file = "unitstd/haxe/macro/ExprTools.unit.hx" ,min = 911 ,max = 912 ) ), [_hx_c._hx_AnonObject(values = [_hx_c._hx_AnonObject(expr = _hx_c.haxe_macro_ExprDef.EConst(_hx_c.haxe_macro_Constant.CInt("2")) ,pos = _hx_c._hx_AnonObject(file = "unitstd/haxe/macro/ExprTools.unit.hx" ,min = 920 ,max = 921 ) ), _hx_c._hx_AnonObject(expr = _hx_c.haxe_macro_ExprDef.EConst(_hx_c.haxe_macro_Constant.CInt("3")) ,pos = _hx_c._hx_AnonObject(file = "unitstd/haxe/macro/ExprTools.unit.hx" ,min = 922 ,max = 923 ) )] ,guard = None ,expr = None ), _hx_c._hx_AnonObject(values = [_hx_c._hx_AnonObject(expr = _hx_c.haxe_macro_ExprDef.EConst(_hx_c.haxe_macro_Constant.CInt("4")) ,pos = _hx_c._hx_AnonObject(file = "unitstd/haxe/macro/ExprTools.unit.hx" ,min = 930 ,max = 931 ) )] ,guard = _hx_c._hx_AnonObject(expr = _hx_c.haxe_macro_ExprDef.EConst(_hx_c.haxe_macro_Constant.CInt("5")) ,pos = _hx_c._hx_AnonObject(file = "unitstd/haxe/macro/ExprTools.unit.hx" ,min = 936 ,max = 937 ) ) ,expr = None ), _hx_c._hx_AnonObject(values = [_hx_c._hx_AnonObject(expr = _hx_c.haxe_macro_ExprDef.EConst(_hx_c.haxe_macro_Constant.CInt("6")) ,pos = _hx_c._hx_AnonObject(file = "unitstd/haxe/macro/ExprTools.unit.hx" ,min = 945 ,max = 946 ) )] ,guard = None ,expr = None )], None) ,pos = _hx_c._hx_AnonObject(file = "unitstd/haxe/macro/ExprTools.unit.hx" ,min = 904 ,max = 949 ) )
		subject = _hx_c._hx_AnonObject(expr = _hx_c.haxe_macro_ExprDef.EBlock([_hx_c._hx_AnonObject(expr = _hx_c.haxe_macro_ExprDef.EVars([_hx_c._hx_AnonObject(name = "p" ,type = None ,expr = _hx_c._hx_AnonObject(expr = _hx_c.haxe_macro_ExprDef.ENew(_hx_c._hx_AnonObject(pack = ["neko", "io"] ,name = "Process" ,params = [] ), [_hx_c._hx_AnonObject(expr = _hx_c.haxe_macro_ExprDef.EConst(_hx_c.haxe_macro_Constant.CString("java")) ,pos = _hx_c._hx_AnonObject(file = "unitstd/haxe/macro/ExprTools.unit.hx" ,min = 1012 ,max = 1018 ) ), _hx_c._hx_AnonObject(expr = _hx_c.haxe_macro_ExprDef.EArrayDecl([_hx_c._hx_AnonObject(expr = _hx_c.haxe_macro_ExprDef.EConst(_hx_c.haxe_macro_Constant.CString("-jar")) ,pos = _hx_c._hx_AnonObject(file = "unitstd/haxe/macro/ExprTools.unit.hx" ,min = 1021 ,max = 1027 ) ), _hx_c._hx_AnonObject(expr = _hx_c.haxe_macro_ExprDef.EBinop(_hx_c.haxe_macro_Binop.OpAdd, _hx_c._hx_AnonObject(expr = _hx_c.haxe_macro_ExprDef.ECall(_hx_c._hx_AnonObject(expr = _hx_c.haxe_macro_ExprDef.EField(_hx_c._hx_AnonObject(expr = _hx_c.haxe_macro_ExprDef.EField(_hx_c._hx_AnonObject(expr = _hx_c.haxe_macro_ExprDef.EConst(_hx_c.haxe_macro_Constant.CIdent("neko")) ,pos = _hx_c._hx_AnonObject(file = "unitstd/haxe/macro/ExprTools.unit.hx" ,min = 1029 ,max = 1033 ) ), "Web") ,pos = _hx_c._hx_AnonObject(file = "unitstd/haxe/macro/ExprTools.unit.hx" ,min = 1029 ,max = 1037 ) ), "getCwd") ,pos = _hx_c._hx_AnonObject(file = "unitstd/haxe/macro/ExprTools.unit.hx" ,min = 1029 ,max = 1044 ) ), []) ,pos = _hx_c._hx_AnonObject(file = "unitstd/haxe/macro/ExprTools.unit.hx" ,min = 1029 ,max = 1046 ) ), _hx_c._hx_AnonObject(expr = _hx_c.haxe_macro_ExprDef.EConst(_hx_c.haxe_macro_Constant.CString("/java/java.jar")) ,pos = _hx_c._hx_AnonObject(file = "unitstd/haxe/macro/ExprTools.unit.hx" ,min = 1049 ,max = 1065 ) )) ,pos = _hx_c._hx_AnonObject(file = "unitstd/haxe/macro/ExprTools.unit.hx" ,min = 1029 ,max = 1065 ) )]) ,pos = _hx_c._hx_AnonObject(file = "unitstd/haxe/macro/ExprTools.unit.hx" ,min = 1020 ,max = 1066 ) )]) ,pos = _hx_c._hx_AnonObject(file = "unitstd/haxe/macro/ExprTools.unit.hx" ,min = 992 ,max = 1067 ) ) )]) ,pos = _hx_c._hx_AnonObject(file = "unitstd/haxe/macro/ExprTools.unit.hx" ,min = 984 ,max = 1068 ) ), _hx_c._hx_AnonObject(expr = _hx_c.haxe_macro_ExprDef.EIf(_hx_c._hx_AnonObject(expr = _hx_c.haxe_macro_ExprDef.EField(_hx_c._hx_AnonObject(expr = _hx_c.haxe_macro_ExprDef.EField(_hx_c._hx_AnonObject(expr = _hx_c.haxe_macro_ExprDef.EConst(_hx_c.haxe_macro_Constant.CIdent("neko")) ,pos = _hx_c._hx_AnonObject(file = "unitstd/haxe/macro/ExprTools.unit.hx" ,min = 1074 ,max = 1078 ) ), "Web") ,pos = _hx_c._hx_AnonObject(file = "unitstd/haxe/macro/ExprTools.unit.hx" ,min = 1074 ,max = 1082 ) ), "isModNeko") ,pos = _hx_c._hx_AnonObject(file = "unitstd/haxe/macro/ExprTools.unit.hx" ,min = 1074 ,max = 1092 ) ), _hx_c._hx_AnonObject(expr = _hx_c.haxe_macro_ExprDef.ECall(_hx_c._hx_AnonObject(expr = _hx_c.haxe_macro_ExprDef.EField(_hx_c._hx_AnonObject(expr = _hx_c.haxe_macro_ExprDef.EField(_hx_c._hx_AnonObject(expr = _hx_c.haxe_macro_ExprDef.EConst(_hx_c.haxe_macro_Constant.CIdent("neko")) ,pos = _hx_c._hx_AnonObject(file = "unitstd/haxe/macro/ExprTools.unit.hx" ,min = 1097 ,max = 1101 ) ), "Web") ,pos = _hx_c._hx_AnonObject(file = "unitstd/haxe/macro/ExprTools.unit.hx" ,min = 1097 ,max = 1105 ) ), "setHeader") ,pos = _hx_c._hx_AnonObject(file = "unitstd/haxe/macro/ExprTools.unit.hx" ,min = 1097 ,max = 1115 ) ), [_hx_c._hx_AnonObject(expr = _hx_c.haxe_macro_ExprDef.EConst(_hx_c.haxe_macro_Constant.CString("Content-Type")) ,pos = _hx_c._hx_AnonObject(file = "unitstd/haxe/macro/ExprTools.unit.hx" ,min = 1116 ,max = 1130 ) ), _hx_c._hx_AnonObject(expr = _hx_c.haxe_macro_ExprDef.EConst(_hx_c.haxe_macro_Constant.CString("text/plain")) ,pos = _hx_c._hx_AnonObject(file = "unitstd/haxe/macro/ExprTools.unit.hx" ,min = 1131 ,max = 1143 ) )]) ,pos = _hx_c._hx_AnonObject(file = "unitstd/haxe/macro/ExprTools.unit.hx" ,min = 1097 ,max = 1144 ) ), None) ,pos = _hx_c._hx_AnonObject(file = "unitstd/haxe/macro/ExprTools.unit.hx" ,min = 1070 ,max = 1144 ) ), _hx_c._hx_AnonObject(expr = _hx_c.haxe_macro_ExprDef.ETry(_hx_c._hx_AnonObject(expr = _hx_c.haxe_macro_ExprDef.EBlock([_hx_c._hx_AnonObject(expr = _hx_c.haxe_macro_ExprDef.EWhile(_hx_c._hx_AnonObject(expr = _hx_c.haxe_macro_ExprDef.EConst(_hx_c.haxe_macro_Constant.CIdent("true")) ,pos = _hx_c._hx_AnonObject(file = "unitstd/haxe/macro/ExprTools.unit.hx" ,min = 1162 ,max = 1166 ) ), _hx_c._hx_AnonObject(expr = _hx_c.haxe_macro_ExprDef.EBlock([_hx_c._hx_AnonObject(expr = _hx_c.haxe_macro_ExprDef.EVars([_hx_c._hx_AnonObject(name = "c" ,type = None ,expr = _hx_c._hx_AnonObject(expr = _hx_c.haxe_macro_ExprDef.ECall(_hx_c._hx_AnonObject(expr = _hx_c.haxe_macro_ExprDef.EField(_hx_c._hx_AnonObject(expr = _hx_c.haxe_macro_ExprDef.EField(_hx_c._hx_AnonObject(expr = _hx_c.haxe_macro_ExprDef.EConst(_hx_c.haxe_macro_Constant.CIdent("p")) ,pos = _hx_c._hx_AnonObject(file = "unitstd/haxe/macro/ExprTools.unit.hx" ,min = 1182 ,max = 1183 ) ), "stdout") ,pos = _hx_c._hx_AnonObject(file = "unitstd/haxe/macro/ExprTools.unit.hx" ,min = 1182 ,max = 1190 ) ), "readByte") ,pos = _hx_c._hx_AnonObject(file = "unitstd/haxe/macro/ExprTools.unit.hx" ,min = 1182 ,max = 1199 ) ), []) ,pos = _hx_c._hx_AnonObject(file = "unitstd/haxe/macro/ExprTools.unit.hx" ,min = 1182 ,max = 1201 ) ) )]) ,pos = _hx_c._hx_AnonObject(file = "unitstd/haxe/macro/ExprTools.unit.hx" ,min = 1174 ,max = 1202 ) ), _hx_c._hx_AnonObject(expr = _hx_c.haxe_macro_ExprDef.ECall(_hx_c._hx_AnonObject(expr = _hx_c.haxe_macro_ExprDef.EField(_hx_c._hx_AnonObject(expr = _hx_c.haxe_macro_ExprDef.EField(_hx_c._hx_AnonObject(expr = _hx_c.haxe_macro_ExprDef.EConst(_hx_c.haxe_macro_Constant.CIdent("neko")) ,pos = _hx_c._hx_AnonObject(file = "unitstd/haxe/macro/ExprTools.unit.hx" ,min = 1206 ,max = 1210 ) ), "Lib") ,pos = _hx_c._hx_AnonObject(file = "unitstd/haxe/macro/ExprTools.unit.hx" ,min = 1206 ,max = 1214 ) ), "print") ,pos = _hx_c._hx_AnonObject(file = "unitstd/haxe/macro/ExprTools.unit.hx" ,min = 1206 ,max = 1220 ) ), [_hx_c._hx_AnonObject(expr = _hx_c.haxe_macro_ExprDef.ECall(_hx_c._hx_AnonObject(expr = _hx_c.haxe_macro_ExprDef.EField(_hx_c._hx_AnonObject(expr = _hx_c.haxe_macro_ExprDef.EConst(_hx_c.haxe_macro_Constant.CIdent("StringTools")) ,pos = _hx_c._hx_AnonObject(file = "unitstd/haxe/macro/ExprTools.unit.hx" ,min = 1221 ,max = 1232 ) ), "htmlEscape") ,pos = _hx_c._hx_AnonObject(file = "unitstd/haxe/macro/ExprTools.unit.hx" ,min = 1221 ,max = 1243 ) ), [_hx_c._hx_AnonObject(expr = _hx_c.haxe_macro_ExprDef.ECall(_hx_c._hx_AnonObject(expr = _hx_c.haxe_macro_ExprDef.EField(_hx_c._hx_AnonObject(expr = _hx_c.haxe_macro_ExprDef.EConst(_hx_c.haxe_macro_Constant.CIdent("String")) ,pos = _hx_c._hx_AnonObject(file = "unitstd/haxe/macro/ExprTools.unit.hx" ,min = 1244 ,max = 1250 ) ), "fromCharCode") ,pos = _hx_c._hx_AnonObject(file = "unitstd/haxe/macro/ExprTools.unit.hx" ,min = 1244 ,max = 1263 ) ), [_hx_c._hx_AnonObject(expr = _hx_c.haxe_macro_ExprDef.EConst(_hx_c.haxe_macro_Constant.CIdent("c")) ,pos = _hx_c._hx_AnonObject(file = "unitstd/haxe/macro/ExprTools.unit.hx" ,min = 1264 ,max = 1265 ) )]) ,pos = _hx_c._hx_AnonObject(file = "unitstd/haxe/macro/ExprTools.unit.hx" ,min = 1244 ,max = 1266 ) )]) ,pos = _hx_c._hx_AnonObject(file = "unitstd/haxe/macro/ExprTools.unit.hx" ,min = 1221 ,max = 1267 ) )]) ,pos = _hx_c._hx_AnonObject(file = "unitstd/haxe/macro/ExprTools.unit.hx" ,min = 1206 ,max = 1268 ) )]) ,pos = _hx_c._hx_AnonObject(file = "unitstd/haxe/macro/ExprTools.unit.hx" ,min = 1169 ,max = 1273 ) ), True) ,pos = _hx_c._hx_AnonObject(file = "unitstd/haxe/macro/ExprTools.unit.hx" ,min = 1155 ,max = 1273 ) )]) ,pos = _hx_c._hx_AnonObject(file = "unitstd/haxe/macro/ExprTools.unit.hx" ,min = 1151 ,max = 1276 ) ), [_hx_c._hx_AnonObject(name = "e" ,type = _hx_c.haxe_macro_ComplexType.TPath(_hx_c._hx_AnonObject(pack = ["haxe", "io"] ,name = "Eof" ,params = [] )) ,expr = _hx_c._hx_AnonObject(expr = _hx_c.haxe_macro_ExprDef.EBlock([]) ,pos = _hx_c._hx_AnonObject(file = "unitstd/haxe/macro/ExprTools.unit.hx" ,min = 1303 ,max = 1307 ) ) )]) ,pos = _hx_c._hx_AnonObject(file = "unitstd/haxe/macro/ExprTools.unit.hx" ,min = 1147 ,max = 1150 ) ), _hx_c._hx_AnonObject(expr = _hx_c.haxe_macro_ExprDef.ECall(_hx_c._hx_AnonObject(expr = _hx_c.haxe_macro_ExprDef.EField(_hx_c._hx_AnonObject(expr = _hx_c.haxe_macro_ExprDef.EField(_hx_c._hx_AnonObject(expr = _hx_c.haxe_macro_ExprDef.EConst(_hx_c.haxe_macro_Constant.CIdent("neko")) ,pos = _hx_c._hx_AnonObject(file = "unitstd/haxe/macro/ExprTools.unit.hx" ,min = 1309 ,max = 1313 ) ), "Lib") ,pos = _hx_c._hx_AnonObject(file = "unitstd/haxe/macro/ExprTools.unit.hx" ,min = 1309 ,max = 1317 ) ), "print") ,pos = _hx_c._hx_AnonObject(file = "unitstd/haxe/macro/ExprTools.unit.hx" ,min = 1309 ,max = 1323 ) ), [_hx_c._hx_AnonObject(expr = _hx_c.haxe_macro_ExprDef.ECall(_hx_c._hx_AnonObject(expr = _hx_c.haxe_macro_ExprDef.EField(_hx_c._hx_AnonObject(expr = _hx_c.haxe_macro_ExprDef.EConst(_hx_c.haxe_macro_Constant.CIdent("StringTools")) ,pos = _hx_c._hx_AnonObject(file = "unitstd/haxe/macro/ExprTools.unit.hx" ,min = 1324 ,max = 1335 ) ), "htmlEscape") ,pos = _hx_c._hx_AnonObject(file = "unitstd/haxe/macro/ExprTools.unit.hx" ,min = 1324 ,max = 1346 ) ), [_hx_c._hx_AnonObject(expr = _hx_c.haxe_macro_ExprDef.ECall(_hx_c._hx_AnonObject(expr = _hx_c.haxe_macro_ExprDef.EField(_hx_c._hx_AnonObject(expr = _hx_c.haxe_macro_ExprDef.ECall(_hx_c._hx_AnonObject(expr = _hx_c.haxe_macro_ExprDef.EField(_hx_c._hx_AnonObject(expr = _hx_c.haxe_macro_ExprDef.EField(_hx_c._hx_AnonObject(expr = _hx_c.haxe_macro_ExprDef.EConst(_hx_c.haxe_macro_Constant.CIdent("p")) ,pos = _hx_c._hx_AnonObject(file = "unitstd/haxe/macro/ExprTools.unit.hx" ,min = 1347 ,max = 1348 ) ), "stderr") ,pos = _hx_c._hx_AnonObject(file = "unitstd/haxe/macro/ExprTools.unit.hx" ,min = 1347 ,max = 1355 ) ), "readAll") ,pos = _hx_c._hx_AnonObject(file = "unitstd/haxe/macro/ExprTools.unit.hx" ,min = 1347 ,max = 1363 ) ), []) ,pos = _hx_c._hx_AnonObject(file = "unitstd/haxe/macro/ExprTools.unit.hx" ,min = 1347 ,max = 1365 ) ), "toString") ,pos = _hx_c._hx_AnonObject(file = "unitstd/haxe/macro/ExprTools.unit.hx" ,min = 1347 ,max = 1374 ) ), []) ,pos = _hx_c._hx_AnonObject(file = "unitstd/haxe/macro/ExprTools.unit.hx" ,min = 1347 ,max = 1376 ) )]) ,pos = _hx_c._hx_AnonObject(file = "unitstd/haxe/macro/ExprTools.unit.hx" ,min = 1324 ,max = 1377 ) )]) ,pos = _hx_c._hx_AnonObject(file = "unitstd/haxe/macro/ExprTools.unit.hx" ,min = 1309 ,max = 1378 ) )]) ,pos = _hx_c._hx_AnonObject(file = "unitstd/haxe/macro/ExprTools.unit.hx" ,min = 981 ,max = 1381 ) )
		strings = []
		upperIdents = []
		extract = None
		extract1 = None
		def _hx_local_0(e):
			_g1 = e.expr
			if (_g1.index) == 0:
				if (_g1.params[0].index) == 2:
					s = _g1.params[0].params[0]
					strings.append(s)
					_hx_builtin.len(strings)
					
			
				elif (_g1.params[0].index) == 3:
					s1 = _g1.params[0].params[0]
					if _hx_c.python_internal_StringImpl.charCodeAt(s1, 0) >= 65 and _hx_c.python_internal_StringImpl.charCodeAt(s1, 0) <= 90:
						upperIdents.append(s1)
						_hx_builtin.len(upperIdents)
					
					else:
						_hx_c.haxe_macro_ExprTools.iter(e, extract1)
			
				else:
					_hx_c.haxe_macro_ExprTools.iter(e, extract1)
			else:
				_hx_c.haxe_macro_ExprTools.iter(e, extract1)
		
		extract1 = _hx_local_0
		extract = extract1
		
		extract(subject)
		self.eq(_hx_array_get(strings,0), "java", _hx_c._hx_AnonObject(fileName = "ExprTools.unit.hx" ,lineNumber = 60 ,className = "unit.TestSpecification" ,methodName = "testExprTools_unit_hx" ))
		self.eq(_hx_array_get(strings,1), "-jar", _hx_c._hx_AnonObject(fileName = "ExprTools.unit.hx" ,lineNumber = 60 ,className = "unit.TestSpecification" ,methodName = "testExprTools_unit_hx" ))
		self.eq(_hx_array_get(strings,2), "/java/java.jar", _hx_c._hx_AnonObject(fileName = "ExprTools.unit.hx" ,lineNumber = 60 ,className = "unit.TestSpecification" ,methodName = "testExprTools_unit_hx" ))
		self.eq(_hx_array_get(strings,3), "Content-Type", _hx_c._hx_AnonObject(fileName = "ExprTools.unit.hx" ,lineNumber = 60 ,className = "unit.TestSpecification" ,methodName = "testExprTools_unit_hx" ))
		self.eq(_hx_array_get(strings,4), "text/plain", _hx_c._hx_AnonObject(fileName = "ExprTools.unit.hx" ,lineNumber = 60 ,className = "unit.TestSpecification" ,methodName = "testExprTools_unit_hx" ))
		
		self.eq(_hx_array_get(upperIdents,0), "StringTools", _hx_c._hx_AnonObject(fileName = "ExprTools.unit.hx" ,lineNumber = 61 ,className = "unit.TestSpecification" ,methodName = "testExprTools_unit_hx" ))
		self.eq(_hx_array_get(upperIdents,1), "String", _hx_c._hx_AnonObject(fileName = "ExprTools.unit.hx" ,lineNumber = 61 ,className = "unit.TestSpecification" ,methodName = "testExprTools_unit_hx" ))
		self.eq(_hx_array_get(upperIdents,2), "StringTools", _hx_c._hx_AnonObject(fileName = "ExprTools.unit.hx" ,lineNumber = 61 ,className = "unit.TestSpecification" ,methodName = "testExprTools_unit_hx" ))
		
		iter = _hx_c.haxe_macro_ExprTools.iter
		def _hx_local_1(e1):
			raise _HxException("I was called")
		fail = _hx_local_1
		def _hx_local_2(s2,e2):
			_g.eq(s2, _hx_c.Std.string(e2.expr), _hx_c._hx_AnonObject(fileName = "ExprTools.unit.hx" ,lineNumber = 65 ,className = "unit.TestSpecification" ,methodName = "testExprTools_unit_hx" ))
		seq = _hx_local_2
		def _hx_local_4(e3,exp,pos = None):
			if pos is None:
				pos = None
			
			def _hx_local_3(e21):
				_g.eq(_hx_c.Std.string(e21.expr), _hx_functools.partial(HxOverrides_shift, exp)(), pos)
			f = _hx_local_3
			iter(e3, f)
		
		check = _hx_local_4
		iter(econst, fail)
		iter(econtinue, fail)
		iter(ebreak, fail)
		def _hx_local_6(f1,s3):
			def _hx_local_5(e4):
				return f1(s3, e4)
			return _hx_local_5
		
		iter(efield, (_hx_local_6)(seq, "EConst(CString(foo))"))
		def _hx_local_8(f2,s4):
			def _hx_local_7(e5):
				return f2(s4, e5)
			return _hx_local_7
		
		iter(eparenthesis, (_hx_local_8)(seq, "EConst(CInt(1))"))
		def _hx_local_10(f3,s5):
			def _hx_local_9(e6):
				return f3(s5, e6)
			return _hx_local_9
		
		iter(euntyped, (_hx_local_10)(seq, "EConst(CInt(1))"))
		def _hx_local_12(f4,s6):
			def _hx_local_11(e7):
				return f4(s6, e7)
			return _hx_local_11
		
		iter(ethrow, (_hx_local_12)(seq, "EConst(CInt(1))"))
		def _hx_local_14(f5,s7):
			def _hx_local_13(e8):
				return f5(s7, e8)
			return _hx_local_13
		
		iter(eunop, (_hx_local_14)(seq, "EConst(CInt(1))"))
		def _hx_local_16(f6,s8):
			def _hx_local_15(e9):
				return f6(s8, e9)
			return _hx_local_15
		
		iter(ecast, (_hx_local_16)(seq, "EConst(CInt(1))"))
		def _hx_local_18(f7,s9):
			def _hx_local_17(e10):
				return f7(s9, e10)
			return _hx_local_17
		
		iter(emeta, (_hx_local_18)(seq, "EConst(CInt(1))"))
		check(earray, ["EConst(CInt(1))", "EConst(CInt(0))"], _hx_c._hx_AnonObject(fileName = "ExprTools.unit.hx" ,lineNumber = 83 ,className = "unit.TestSpecification" ,methodName = "testExprTools_unit_hx" ))
		check(ewhile1, ["EConst(CInt(1))", "EConst(CString(foo))"], _hx_c._hx_AnonObject(fileName = "ExprTools.unit.hx" ,lineNumber = 84 ,className = "unit.TestSpecification" ,methodName = "testExprTools_unit_hx" ))
		check(ewhile2, ["EConst(CInt(1))", "EConst(CString(foo))"], _hx_c._hx_AnonObject(fileName = "ExprTools.unit.hx" ,lineNumber = 85 ,className = "unit.TestSpecification" ,methodName = "testExprTools_unit_hx" ))
		check(ebinop, ["EConst(CInt(1))", "EConst(CInt(1))"], _hx_c._hx_AnonObject(fileName = "ExprTools.unit.hx" ,lineNumber = 86 ,className = "unit.TestSpecification" ,methodName = "testExprTools_unit_hx" ))
		check(efor, ["EConst(CInt(1))", "EConst(CString(foo))"], _hx_c._hx_AnonObject(fileName = "ExprTools.unit.hx" ,lineNumber = 87 ,className = "unit.TestSpecification" ,methodName = "testExprTools_unit_hx" ))
		check(ein, ["EConst(CIdent(i))", "EConst(CInt(1))"], _hx_c._hx_AnonObject(fileName = "ExprTools.unit.hx" ,lineNumber = 88 ,className = "unit.TestSpecification" ,methodName = "testExprTools_unit_hx" ))
		check(evars, ["EConst(CInt(1))", "EConst(CInt(2))"], _hx_c._hx_AnonObject(fileName = "ExprTools.unit.hx" ,lineNumber = 89 ,className = "unit.TestSpecification" ,methodName = "testExprTools_unit_hx" ))
		check(etry, ["EConst(CInt(1))", "EConst(CString(foo))", "EConst(CString(bar))"], _hx_c._hx_AnonObject(fileName = "ExprTools.unit.hx" ,lineNumber = 90 ,className = "unit.TestSpecification" ,methodName = "testExprTools_unit_hx" ))
		check(eternary, ["EConst(CInt(1))", "EConst(CInt(2))", "EConst(CInt(3))"], _hx_c._hx_AnonObject(fileName = "ExprTools.unit.hx" ,lineNumber = 91 ,className = "unit.TestSpecification" ,methodName = "testExprTools_unit_hx" ))
		check(earraydecl, ["EConst(CInt(1))", "EConst(CInt(2))"], _hx_c._hx_AnonObject(fileName = "ExprTools.unit.hx" ,lineNumber = 92 ,className = "unit.TestSpecification" ,methodName = "testExprTools_unit_hx" ))
		check(enew, ["EConst(CInt(1))", "EConst(CInt(2))"], _hx_c._hx_AnonObject(fileName = "ExprTools.unit.hx" ,lineNumber = 93 ,className = "unit.TestSpecification" ,methodName = "testExprTools_unit_hx" ))
		check(eblock, ["EConst(CInt(1))", "EConst(CInt(2))"], _hx_c._hx_AnonObject(fileName = "ExprTools.unit.hx" ,lineNumber = 94 ,className = "unit.TestSpecification" ,methodName = "testExprTools_unit_hx" ))
		check(eobjectdecl, ["EConst(CInt(1))", "EConst(CInt(2))"], _hx_c._hx_AnonObject(fileName = "ExprTools.unit.hx" ,lineNumber = 95 ,className = "unit.TestSpecification" ,methodName = "testExprTools_unit_hx" ))
		check(ecall, ["EConst(CIdent(foo))", "EConst(CInt(1))", "EConst(CInt(2))"], _hx_c._hx_AnonObject(fileName = "ExprTools.unit.hx" ,lineNumber = 96 ,className = "unit.TestSpecification" ,methodName = "testExprTools_unit_hx" ))
		check(ereturn, ["EConst(CInt(1))"], _hx_c._hx_AnonObject(fileName = "ExprTools.unit.hx" ,lineNumber = 97 ,className = "unit.TestSpecification" ,methodName = "testExprTools_unit_hx" ))
		check(efunction, ["EConst(CInt(1))", "EConst(CInt(2))", "EConst(CInt(3))"], _hx_c._hx_AnonObject(fileName = "ExprTools.unit.hx" ,lineNumber = 98 ,className = "unit.TestSpecification" ,methodName = "testExprTools_unit_hx" ))
		check(eswitch, ["EConst(CInt(1))", "EConst(CInt(2))", "EConst(CInt(3))", "EConst(CInt(4))", "EConst(CInt(5))", "EConst(CInt(6))"], _hx_c._hx_AnonObject(fileName = "ExprTools.unit.hx" ,lineNumber = 99 ,className = "unit.TestSpecification" ,methodName = "testExprTools_unit_hx" ))
		def _hx_local_19(e11):
			return _hx_c._hx_AnonObject(expr = _hx_c.haxe_macro_ExprDef.EParenthesis(e11) ,pos = _hx_c._hx_AnonObject(file = "unitstd/haxe/macro/ExprTools.unit.hx" ,min = 3695 ,max = 3699 ) )
		wrap = _hx_local_19
		def _hx_local_20(e12):
			_g2 = e12.expr
			if (_g2.index) == 4:
				e13 = _g2.params[0]
				return e13
			
			else:
				return e12
		
		unwrap = _hx_local_20
		map = _hx_c.haxe_macro_ExprTools.map
		def _hx_local_21(e14,pos1 = None):
			if pos1 is None:
				pos1 = None
			
			e22 = map(e14, wrap)
			e31 = map(e14, unwrap)
			_g.eq(_hx_c.Std.string(e14.expr), _hx_c.Std.string(e31.expr), pos1)
		
		check1 = _hx_local_21
		self.eq(map(econst, wrap).expr, econst.expr, _hx_c._hx_AnonObject(fileName = "ExprTools.unit.hx" ,lineNumber = 113 ,className = "unit.TestSpecification" ,methodName = "testExprTools_unit_hx" ))
		self.eq(map(econtinue, wrap).expr, econtinue.expr, _hx_c._hx_AnonObject(fileName = "ExprTools.unit.hx" ,lineNumber = 114 ,className = "unit.TestSpecification" ,methodName = "testExprTools_unit_hx" ))
		self.eq(map(ebreak, wrap).expr, ebreak.expr, _hx_c._hx_AnonObject(fileName = "ExprTools.unit.hx" ,lineNumber = 115 ,className = "unit.TestSpecification" ,methodName = "testExprTools_unit_hx" ))
		check1(efield, _hx_c._hx_AnonObject(fileName = "ExprTools.unit.hx" ,lineNumber = 116 ,className = "unit.TestSpecification" ,methodName = "testExprTools_unit_hx" ))
		check1(eparenthesis, _hx_c._hx_AnonObject(fileName = "ExprTools.unit.hx" ,lineNumber = 117 ,className = "unit.TestSpecification" ,methodName = "testExprTools_unit_hx" ))
		check1(euntyped, _hx_c._hx_AnonObject(fileName = "ExprTools.unit.hx" ,lineNumber = 118 ,className = "unit.TestSpecification" ,methodName = "testExprTools_unit_hx" ))
		check1(ethrow, _hx_c._hx_AnonObject(fileName = "ExprTools.unit.hx" ,lineNumber = 119 ,className = "unit.TestSpecification" ,methodName = "testExprTools_unit_hx" ))
		check1(eunop, _hx_c._hx_AnonObject(fileName = "ExprTools.unit.hx" ,lineNumber = 120 ,className = "unit.TestSpecification" ,methodName = "testExprTools_unit_hx" ))
		check1(ecast, _hx_c._hx_AnonObject(fileName = "ExprTools.unit.hx" ,lineNumber = 121 ,className = "unit.TestSpecification" ,methodName = "testExprTools_unit_hx" ))
		check1(emeta, _hx_c._hx_AnonObject(fileName = "ExprTools.unit.hx" ,lineNumber = 122 ,className = "unit.TestSpecification" ,methodName = "testExprTools_unit_hx" ))
		check1(earray, _hx_c._hx_AnonObject(fileName = "ExprTools.unit.hx" ,lineNumber = 123 ,className = "unit.TestSpecification" ,methodName = "testExprTools_unit_hx" ))
		check1(ewhile1, _hx_c._hx_AnonObject(fileName = "ExprTools.unit.hx" ,lineNumber = 124 ,className = "unit.TestSpecification" ,methodName = "testExprTools_unit_hx" ))
		check1(ewhile2, _hx_c._hx_AnonObject(fileName = "ExprTools.unit.hx" ,lineNumber = 125 ,className = "unit.TestSpecification" ,methodName = "testExprTools_unit_hx" ))
		check1(ebinop, _hx_c._hx_AnonObject(fileName = "ExprTools.unit.hx" ,lineNumber = 126 ,className = "unit.TestSpecification" ,methodName = "testExprTools_unit_hx" ))
		check1(efor, _hx_c._hx_AnonObject(fileName = "ExprTools.unit.hx" ,lineNumber = 127 ,className = "unit.TestSpecification" ,methodName = "testExprTools_unit_hx" ))
		check1(ein, _hx_c._hx_AnonObject(fileName = "ExprTools.unit.hx" ,lineNumber = 128 ,className = "unit.TestSpecification" ,methodName = "testExprTools_unit_hx" ))
		check1(evars, _hx_c._hx_AnonObject(fileName = "ExprTools.unit.hx" ,lineNumber = 129 ,className = "unit.TestSpecification" ,methodName = "testExprTools_unit_hx" ))
		check1(etry, _hx_c._hx_AnonObject(fileName = "ExprTools.unit.hx" ,lineNumber = 130 ,className = "unit.TestSpecification" ,methodName = "testExprTools_unit_hx" ))
		check1(eternary, _hx_c._hx_AnonObject(fileName = "ExprTools.unit.hx" ,lineNumber = 131 ,className = "unit.TestSpecification" ,methodName = "testExprTools_unit_hx" ))
		check1(earraydecl, _hx_c._hx_AnonObject(fileName = "ExprTools.unit.hx" ,lineNumber = 132 ,className = "unit.TestSpecification" ,methodName = "testExprTools_unit_hx" ))
		check1(enew, _hx_c._hx_AnonObject(fileName = "ExprTools.unit.hx" ,lineNumber = 133 ,className = "unit.TestSpecification" ,methodName = "testExprTools_unit_hx" ))
		check1(eblock, _hx_c._hx_AnonObject(fileName = "ExprTools.unit.hx" ,lineNumber = 134 ,className = "unit.TestSpecification" ,methodName = "testExprTools_unit_hx" ))
		check1(eobjectdecl, _hx_c._hx_AnonObject(fileName = "ExprTools.unit.hx" ,lineNumber = 135 ,className = "unit.TestSpecification" ,methodName = "testExprTools_unit_hx" ))
		check1(ecall, _hx_c._hx_AnonObject(fileName = "ExprTools.unit.hx" ,lineNumber = 136 ,className = "unit.TestSpecification" ,methodName = "testExprTools_unit_hx" ))
		check1(ereturn, _hx_c._hx_AnonObject(fileName = "ExprTools.unit.hx" ,lineNumber = 140 ,className = "unit.TestSpecification" ,methodName = "testExprTools_unit_hx" ))
	

	def testInt32_unit_hx(self):
		max = 2147483647
		min = -2147483648
		a = 2147483647
		def _hx_local_0():
			nonlocal a
			ret = a
			a = a + 1
			
			a = _hx_c.haxe_Int32_Int32_Impl_.clamp(a)
			return ret
			
		
		self.eq(_hx_local_0(), max, _hx_c._hx_AnonObject(fileName = "Int32.unit.hx" ,lineNumber = 6 ,className = "unit.TestSpecification" ,methodName = "testInt32_unit_hx" ))
		self.eq(a, min, _hx_c._hx_AnonObject(fileName = "Int32.unit.hx" ,lineNumber = 7 ,className = "unit.TestSpecification" ,methodName = "testInt32_unit_hx" ))
		def _hx_local_1():
			nonlocal a
			ret1 = a
			a = a - 1
			
			a = _hx_c.haxe_Int32_Int32_Impl_.clamp(a)
			return ret1
			
		
		self.eq(_hx_local_1(), min, _hx_c._hx_AnonObject(fileName = "Int32.unit.hx" ,lineNumber = 8 ,className = "unit.TestSpecification" ,methodName = "testInt32_unit_hx" ))
		self.eq(a, max, _hx_c._hx_AnonObject(fileName = "Int32.unit.hx" ,lineNumber = 9 ,className = "unit.TestSpecification" ,methodName = "testInt32_unit_hx" ))
		def _hx_local_3():
			nonlocal a
			def _hx_local_2():
				nonlocal a
				a = a + 1
				return a
				
			
			a = _hx_c.haxe_Int32_Int32_Impl_.clamp(_hx_local_2())
			return a
			
		
		self.eq(_hx_local_3(), min, _hx_c._hx_AnonObject(fileName = "Int32.unit.hx" ,lineNumber = 10 ,className = "unit.TestSpecification" ,methodName = "testInt32_unit_hx" ))
		def _hx_local_5():
			nonlocal a
			def _hx_local_4():
				nonlocal a
				a = a - 1
				return a
				
			
			a = _hx_c.haxe_Int32_Int32_Impl_.clamp(_hx_local_4())
			return a
			
		
		self.eq(_hx_local_5(), max, _hx_c._hx_AnonObject(fileName = "Int32.unit.hx" ,lineNumber = 11 ,className = "unit.TestSpecification" ,methodName = "testInt32_unit_hx" ))
		self.eq(_hx_c.haxe_Int32_Int32_Impl_.clamp(max + min), -1, _hx_c._hx_AnonObject(fileName = "Int32.unit.hx" ,lineNumber = 13 ,className = "unit.TestSpecification" ,methodName = "testInt32_unit_hx" ))
		self.eq(_hx_c.haxe_Int32_Int32_Impl_.clamp(max + 1), min, _hx_c._hx_AnonObject(fileName = "Int32.unit.hx" ,lineNumber = 14 ,className = "unit.TestSpecification" ,methodName = "testInt32_unit_hx" ))
		self.eq(_hx_c.haxe_Int32_Int32_Impl_.clamp(max - min), -1, _hx_c._hx_AnonObject(fileName = "Int32.unit.hx" ,lineNumber = 16 ,className = "unit.TestSpecification" ,methodName = "testInt32_unit_hx" ))
		self.eq(_hx_c.haxe_Int32_Int32_Impl_.subInt(min, 1), max, _hx_c._hx_AnonObject(fileName = "Int32.unit.hx" ,lineNumber = 17 ,className = "unit.TestSpecification" ,methodName = "testInt32_unit_hx" ))
		def _hx_local_6():
			b = _hx_c.haxe_Int32_Int32_Impl_.clamp(_hx_c.haxe_Int32_Int32_Impl_.shlInt(max * (_hx_rshift(max, 16)), 16))
			return _hx_c.haxe_Int32_Int32_Impl_.clamp(max * (max & 65535) + b)
		
		self.eq(_hx_c.haxe_Int32_Int32_Impl_.clamp(_hx_local_6()), 1, _hx_c._hx_AnonObject(fileName = "Int32.unit.hx" ,lineNumber = 19 ,className = "unit.TestSpecification" ,methodName = "testInt32_unit_hx" ))
		def _hx_local_7():
			b1 = _hx_c.haxe_Int32_Int32_Impl_.clamp(_hx_c.haxe_Int32_Int32_Impl_.shlInt(max * (_hx_rshift(min, 16)), 16))
			return _hx_c.haxe_Int32_Int32_Impl_.clamp(max * (min & 65535) + b1)
		
		self.eq(_hx_c.haxe_Int32_Int32_Impl_.clamp(_hx_local_7()), -2147483648, _hx_c._hx_AnonObject(fileName = "Int32.unit.hx" ,lineNumber = 20 ,className = "unit.TestSpecification" ,methodName = "testInt32_unit_hx" ))
		def _hx_local_8():
			b2 = _hx_c.haxe_Int32_Int32_Impl_.clamp(_hx_c.haxe_Int32_Int32_Impl_.shlInt(max * (_hx_rshift(2, 16)), 16))
			return _hx_c.haxe_Int32_Int32_Impl_.clamp(max * (2 & 65535) + b2)
		
		self.eq(_hx_c.haxe_Int32_Int32_Impl_.clamp(_hx_local_8()), -2, _hx_c._hx_AnonObject(fileName = "Int32.unit.hx" ,lineNumber = 21 ,className = "unit.TestSpecification" ,methodName = "testInt32_unit_hx" ))
		self.eq(_hx_c.haxe_Int32_Int32_Impl_.shlInt(min, 1), 0, _hx_c._hx_AnonObject(fileName = "Int32.unit.hx" ,lineNumber = 23 ,className = "unit.TestSpecification" ,methodName = "testInt32_unit_hx" ))
		self.eq(min >> 1, -1073741824, _hx_c._hx_AnonObject(fileName = "Int32.unit.hx" ,lineNumber = 24 ,className = "unit.TestSpecification" ,methodName = "testInt32_unit_hx" ))
		self.eq(_hx_rshift(min, 1), 1073741824, _hx_c._hx_AnonObject(fileName = "Int32.unit.hx" ,lineNumber = 25 ,className = "unit.TestSpecification" ,methodName = "testInt32_unit_hx" ))
	

	def testLog_unit_hx(self):
		s = ""
		p = None
		old = _hx_c.haxe_Log.trace
		def _hx_local_0(v,i = None):
			nonlocal s
			nonlocal p
			if i is None:
				i = None
			
			s = v
			p = i
			
		
		_hx_c.haxe_Log.trace = _hx_local_0
		_hx_c.haxe_Log.trace("test trace", _hx_c._hx_AnonObject(fileName = "Log.unit.hx" ,lineNumber = 8 ,className = "unit.TestSpecification" ,methodName = "testLog_unit_hx" ))
		self.eq(s, "test trace", _hx_c._hx_AnonObject(fileName = "Log.unit.hx" ,lineNumber = 9 ,className = "unit.TestSpecification" ,methodName = "testLog_unit_hx" ))
		self.eq(p.fileName, "Log.unit.hx", _hx_c._hx_AnonObject(fileName = "Log.unit.hx" ,lineNumber = 10 ,className = "unit.TestSpecification" ,methodName = "testLog_unit_hx" ))
		self.eq(p.lineNumber, 8, _hx_c._hx_AnonObject(fileName = "Log.unit.hx" ,lineNumber = 11 ,className = "unit.TestSpecification" ,methodName = "testLog_unit_hx" ))
		_hx_c.haxe_Log.trace = None
		def _hx_local_1():
			_hx_c.haxe_Log.trace("exc test", _hx_c._hx_AnonObject(fileName = "Log.unit.hx" ,lineNumber = 13 ,className = "unit.TestSpecification" ,methodName = "testLog_unit_hx" ))
		self.exc(_hx_local_1, _hx_c._hx_AnonObject(fileName = "Log.unit.hx" ,lineNumber = 13 ,className = "unit.TestSpecification" ,methodName = "testLog_unit_hx" ))
		_hx_c.haxe_Log.trace = old
	

	def testTemplate_unit_hx(self):
		tpl = _hx_c.haxe_Template("My name is <strong>::name::</strong> and I'm <em>::age::</em> years old.")
		output = tpl.execute(_hx_c._hx_AnonObject(name = "John" ,age = 33 ))
		self.eq(output, "My name is <strong>John</strong> and I'm <em>33</em> years old.", _hx_c._hx_AnonObject(fileName = "Template.unit.hx" ,lineNumber = 5 ,className = "unit.TestSpecification" ,methodName = "testTemplate_unit_hx" ))
		output2 = tpl.execute(_hx_c._hx_AnonObject())
		self.eq(output2, "My name is <strong>null</strong> and I'm <em>null</em> years old.", _hx_c._hx_AnonObject(fileName = "Template.unit.hx" ,lineNumber = 9 ,className = "unit.TestSpecification" ,methodName = "testTemplate_unit_hx" ))
		_hx_c.haxe_Template.globals = _hx_c._hx_AnonObject(name = "John" ,age = 33 )
		output21 = tpl.execute(_hx_c._hx_AnonObject())
		self.eq(output21, "My name is <strong>John</strong> and I'm <em>33</em> years old.", _hx_c._hx_AnonObject(fileName = "Template.unit.hx" ,lineNumber = 14 ,className = "unit.TestSpecification" ,methodName = "testTemplate_unit_hx" ))
		def _hx_local_0(resolve,title,p):
			return Std.string(Std.string(Std.string("[" + Std.string(title)) + "=") + Std.string(p * resolve("mult"))) + "]"
		myfun = _hx_local_0
		t1 = _hx_c.haxe_Template("Call macro : $$myfun(Hello,::param::)")
		str = t1.execute(_hx_c._hx_AnonObject(param = 55 ,mult = 2 ), _hx_c._hx_AnonObject(myfun = myfun ))
		self.eq(str, "Call macro : [Hello=110]", _hx_c._hx_AnonObject(fileName = "Template.unit.hx" ,lineNumber = 22 ,className = "unit.TestSpecification" ,methodName = "testTemplate_unit_hx" ))
	

	def testBalancedTree_unit_hx(self):
		test = None
		_g = _hx_c.haxe_ds_IntMap()
		_g.set(13, 1)
		_g.set(8, 2)
		_g.set(17, 3)
		_g.set(1, 4)
		_g.set(11, 5)
		_g.set(15, 6)
		_g.set(25, 7)
		_g.set(6, 8)
		_g.set(22, 9)
		_g.set(27, 10)
		test = _g
		
		otherKeys = None
		_g1 = []
		_g2 = 0
		while _g2 < 30:
			i = _g2
			_g2 = _g2 + 1
			
			if not i in test.h:
				_g1.append(i)
				_hx_builtin.len(_g1)
			
			
		
		
		otherKeys = _g1
		
		m = _hx_c.haxe_ds_BalancedTree()
		_it = test.keys()
		while _it.hasNext():
			k = _it.next()
			m.set(k, test.h.get(k, None))
		_it = test.keys()
		while _it.hasNext():
			k1 = _it.next()
			self.eq(test.h.get(k1, None), m.get(k1), _hx_c._hx_AnonObject(fileName = "BalancedTree.unit.hx" ,lineNumber = 19 ,className = "unit.TestSpecification" ,methodName = "testBalancedTree_unit_hx" ))
		_it = test.keys()
		while _it.hasNext():
			k2 = _it.next()
			self.eq(True, m.exists(k2), _hx_c._hx_AnonObject(fileName = "BalancedTree.unit.hx" ,lineNumber = 22 ,className = "unit.TestSpecification" ,methodName = "testBalancedTree_unit_hx" ))
		_g21 = 0
		while _g21 < _hx_builtin.len(otherKeys):
			k3 = _hx_array_get(otherKeys,_g21)
			_g21 = _g21 + 1
			self.eq(False, m.exists(k3), _hx_c._hx_AnonObject(fileName = "BalancedTree.unit.hx" ,lineNumber = 25 ,className = "unit.TestSpecification" ,methodName = "testBalancedTree_unit_hx" ))
		
		
		r = None
		_g22 = []
		_it = m.keys()
		while _it.hasNext():
			key = _it.next()
			_g22.append(key)
			_hx_builtin.len(_g22)
		
		r = _g22
		
		self.eq(_hx_array_get(r,0), 1, _hx_c._hx_AnonObject(fileName = "BalancedTree.unit.hx" ,lineNumber = 28 ,className = "unit.TestSpecification" ,methodName = "testBalancedTree_unit_hx" ))
		self.eq(_hx_array_get(r,1), 6, _hx_c._hx_AnonObject(fileName = "BalancedTree.unit.hx" ,lineNumber = 28 ,className = "unit.TestSpecification" ,methodName = "testBalancedTree_unit_hx" ))
		self.eq(_hx_array_get(r,2), 8, _hx_c._hx_AnonObject(fileName = "BalancedTree.unit.hx" ,lineNumber = 28 ,className = "unit.TestSpecification" ,methodName = "testBalancedTree_unit_hx" ))
		self.eq(_hx_array_get(r,3), 11, _hx_c._hx_AnonObject(fileName = "BalancedTree.unit.hx" ,lineNumber = 28 ,className = "unit.TestSpecification" ,methodName = "testBalancedTree_unit_hx" ))
		self.eq(_hx_array_get(r,4), 13, _hx_c._hx_AnonObject(fileName = "BalancedTree.unit.hx" ,lineNumber = 28 ,className = "unit.TestSpecification" ,methodName = "testBalancedTree_unit_hx" ))
		self.eq(_hx_array_get(r,5), 15, _hx_c._hx_AnonObject(fileName = "BalancedTree.unit.hx" ,lineNumber = 28 ,className = "unit.TestSpecification" ,methodName = "testBalancedTree_unit_hx" ))
		self.eq(_hx_array_get(r,6), 17, _hx_c._hx_AnonObject(fileName = "BalancedTree.unit.hx" ,lineNumber = 28 ,className = "unit.TestSpecification" ,methodName = "testBalancedTree_unit_hx" ))
		self.eq(_hx_array_get(r,7), 22, _hx_c._hx_AnonObject(fileName = "BalancedTree.unit.hx" ,lineNumber = 28 ,className = "unit.TestSpecification" ,methodName = "testBalancedTree_unit_hx" ))
		self.eq(_hx_array_get(r,8), 25, _hx_c._hx_AnonObject(fileName = "BalancedTree.unit.hx" ,lineNumber = 28 ,className = "unit.TestSpecification" ,methodName = "testBalancedTree_unit_hx" ))
		self.eq(_hx_array_get(r,9), 27, _hx_c._hx_AnonObject(fileName = "BalancedTree.unit.hx" ,lineNumber = 28 ,className = "unit.TestSpecification" ,methodName = "testBalancedTree_unit_hx" ))
		
		r1 = None
		_g3 = []
		_it = m.iterator()
		while _it.hasNext():
			val = _it.next()
			_g3.append(val)
			_hx_builtin.len(_g3)
		
		r1 = _g3
		
		self.eq(_hx_array_get(r1,0), 4, _hx_c._hx_AnonObject(fileName = "BalancedTree.unit.hx" ,lineNumber = 30 ,className = "unit.TestSpecification" ,methodName = "testBalancedTree_unit_hx" ))
		self.eq(_hx_array_get(r1,1), 8, _hx_c._hx_AnonObject(fileName = "BalancedTree.unit.hx" ,lineNumber = 30 ,className = "unit.TestSpecification" ,methodName = "testBalancedTree_unit_hx" ))
		self.eq(_hx_array_get(r1,2), 2, _hx_c._hx_AnonObject(fileName = "BalancedTree.unit.hx" ,lineNumber = 30 ,className = "unit.TestSpecification" ,methodName = "testBalancedTree_unit_hx" ))
		self.eq(_hx_array_get(r1,3), 5, _hx_c._hx_AnonObject(fileName = "BalancedTree.unit.hx" ,lineNumber = 30 ,className = "unit.TestSpecification" ,methodName = "testBalancedTree_unit_hx" ))
		self.eq(_hx_array_get(r1,4), 1, _hx_c._hx_AnonObject(fileName = "BalancedTree.unit.hx" ,lineNumber = 30 ,className = "unit.TestSpecification" ,methodName = "testBalancedTree_unit_hx" ))
		self.eq(_hx_array_get(r1,5), 6, _hx_c._hx_AnonObject(fileName = "BalancedTree.unit.hx" ,lineNumber = 30 ,className = "unit.TestSpecification" ,methodName = "testBalancedTree_unit_hx" ))
		self.eq(_hx_array_get(r1,6), 3, _hx_c._hx_AnonObject(fileName = "BalancedTree.unit.hx" ,lineNumber = 30 ,className = "unit.TestSpecification" ,methodName = "testBalancedTree_unit_hx" ))
		self.eq(_hx_array_get(r1,7), 9, _hx_c._hx_AnonObject(fileName = "BalancedTree.unit.hx" ,lineNumber = 30 ,className = "unit.TestSpecification" ,methodName = "testBalancedTree_unit_hx" ))
		self.eq(_hx_array_get(r1,8), 7, _hx_c._hx_AnonObject(fileName = "BalancedTree.unit.hx" ,lineNumber = 30 ,className = "unit.TestSpecification" ,methodName = "testBalancedTree_unit_hx" ))
		self.eq(_hx_array_get(r1,9), 10, _hx_c._hx_AnonObject(fileName = "BalancedTree.unit.hx" ,lineNumber = 30 ,className = "unit.TestSpecification" ,methodName = "testBalancedTree_unit_hx" ))
		
		_it = test.keys()
		while _it.hasNext():
			k4 = _it.next()
			self.eq(True, m.remove(k4), _hx_c._hx_AnonObject(fileName = "BalancedTree.unit.hx" ,lineNumber = 32 ,className = "unit.TestSpecification" ,methodName = "testBalancedTree_unit_hx" ))
			self.eq(False, m.exists(k4), _hx_c._hx_AnonObject(fileName = "BalancedTree.unit.hx" ,lineNumber = 33 ,className = "unit.TestSpecification" ,methodName = "testBalancedTree_unit_hx" ))
		
	

	def testEnumValueMap_unit_hx(self):
		em = _hx_c.haxe_ds_EnumValueMap()
		test = None
		_g = _hx_c.haxe_ds_IntMap()
		_g.set(1, _hx_c.haxe_macro_ExprDef.EContinue)
		_g.set(2, _hx_c.haxe_macro_ExprDef.EBreak)
		_g.set(3, _hx_c.haxe_macro_ExprDef.EConst(_hx_c.haxe_macro_Constant.CString("bar")))
		_g.set(4, _hx_c.haxe_macro_ExprDef.EConst(_hx_c.haxe_macro_Constant.CString("foo")))
		_g.set(5, _hx_c.haxe_macro_ExprDef.EArray(None, None))
		test = _g
		
		_it = test.keys()
		while _it.hasNext():
			k = _it.next()
			em.set(test.h.get(k, None), k)
		_it = test.keys()
		while _it.hasNext():
			k1 = _it.next()
			self.eq(k1, em.get(test.h.get(k1, None)), _hx_c._hx_AnonObject(fileName = "EnumValueMap.unit.hx" ,lineNumber = 13 ,className = "unit.TestSpecification" ,methodName = "testEnumValueMap_unit_hx" ))
		_it = test.keys()
		while _it.hasNext():
			k2 = _it.next()
			self.eq(True, em.exists(test.h.get(k2, None)), _hx_c._hx_AnonObject(fileName = "EnumValueMap.unit.hx" ,lineNumber = 16 ,className = "unit.TestSpecification" ,methodName = "testEnumValueMap_unit_hx" ))
		_it = test.keys()
		while _it.hasNext():
			k3 = _it.next()
			self.eq(True, em.remove(test.h.get(k3, None)), _hx_c._hx_AnonObject(fileName = "EnumValueMap.unit.hx" ,lineNumber = 19 ,className = "unit.TestSpecification" ,methodName = "testEnumValueMap_unit_hx" ))
		_it = test.keys()
		while _it.hasNext():
			k4 = _it.next()
			self.eq(False, em.exists(test.h.get(k4, None)), _hx_c._hx_AnonObject(fileName = "EnumValueMap.unit.hx" ,lineNumber = 22 ,className = "unit.TestSpecification" ,methodName = "testEnumValueMap_unit_hx" ))
		em1 = None
		_g1 = _hx_c.haxe_ds_EnumValueMap()
		_g1.set(_hx_c.haxe_macro_ExprDef.EConst(_hx_c.haxe_macro_Constant.CIdent("test")), "test")
		_g1.set(_hx_c.haxe_macro_ExprDef.EArray(None, None), "bar")
		_g1.set(_hx_c.haxe_macro_ExprDef.EBreak, "baz")
		em1 = _g1
		
		def _hx_local_0():
			key = _hx_c.haxe_macro_ExprDef.EConst(_hx_c.haxe_macro_Constant.CIdent("test"))
			return em1.exists(key)
		
		self.t(_hx_local_0(), _hx_c._hx_AnonObject(fileName = "EnumValueMap.unit.hx" ,lineNumber = 30 ,className = "unit.TestSpecification" ,methodName = "testEnumValueMap_unit_hx" ))
		def _hx_local_1():
			key1 = _hx_c.haxe_macro_ExprDef.EConst(_hx_c.haxe_macro_Constant.CIdent("test2"))
			return em1.exists(key1)
		
		self.f(_hx_local_1(), _hx_c._hx_AnonObject(fileName = "EnumValueMap.unit.hx" ,lineNumber = 31 ,className = "unit.TestSpecification" ,methodName = "testEnumValueMap_unit_hx" ))
		def _hx_local_2():
			key2 = _hx_c.haxe_macro_ExprDef.EConst(_hx_c.haxe_macro_Constant.CIdent("test"))
			return em1.get(key2)
		
		self.eq(_hx_local_2(), "test", _hx_c._hx_AnonObject(fileName = "EnumValueMap.unit.hx" ,lineNumber = 32 ,className = "unit.TestSpecification" ,methodName = "testEnumValueMap_unit_hx" ))
		def _hx_local_3():
			key3 = _hx_c.haxe_macro_ExprDef.EConst(_hx_c.haxe_macro_Constant.CIdent("test"))
			return em1.remove(key3)
		
		self.t(_hx_local_3(), _hx_c._hx_AnonObject(fileName = "EnumValueMap.unit.hx" ,lineNumber = 33 ,className = "unit.TestSpecification" ,methodName = "testEnumValueMap_unit_hx" ))
		def _hx_local_4():
			key4 = _hx_c.haxe_macro_ExprDef.EConst(_hx_c.haxe_macro_Constant.CIdent("test"))
			return em1.exists(key4)
		
		self.f(_hx_local_4(), _hx_c._hx_AnonObject(fileName = "EnumValueMap.unit.hx" ,lineNumber = 34 ,className = "unit.TestSpecification" ,methodName = "testEnumValueMap_unit_hx" ))
		def _hx_local_5():
			key5 = _hx_c.haxe_macro_ExprDef.EConst(_hx_c.haxe_macro_Constant.CIdent("test"))
			return em1.get(key5)
		
		self.eq(_hx_local_5(), None, _hx_c._hx_AnonObject(fileName = "EnumValueMap.unit.hx" ,lineNumber = 35 ,className = "unit.TestSpecification" ,methodName = "testEnumValueMap_unit_hx" ))
		def _hx_local_6():
			key6 = _hx_c.haxe_macro_ExprDef.EArray(None, None)
			return em1.exists(key6)
		
		self.t(_hx_local_6(), _hx_c._hx_AnonObject(fileName = "EnumValueMap.unit.hx" ,lineNumber = 37 ,className = "unit.TestSpecification" ,methodName = "testEnumValueMap_unit_hx" ))
		def _hx_local_7():
			key7 = _hx_c.haxe_macro_ExprDef.EArray(None, None)
			return em1.get(key7)
		
		self.eq(_hx_local_7(), "bar", _hx_c._hx_AnonObject(fileName = "EnumValueMap.unit.hx" ,lineNumber = 38 ,className = "unit.TestSpecification" ,methodName = "testEnumValueMap_unit_hx" ))
		def _hx_local_8():
			key8 = _hx_c.haxe_macro_ExprDef.EArray(None, None)
			return em1.remove(key8)
		
		self.t(_hx_local_8(), _hx_c._hx_AnonObject(fileName = "EnumValueMap.unit.hx" ,lineNumber = 39 ,className = "unit.TestSpecification" ,methodName = "testEnumValueMap_unit_hx" ))
		def _hx_local_9():
			key9 = _hx_c.haxe_macro_ExprDef.EArray(None, None)
			return em1.exists(key9)
		
		self.f(_hx_local_9(), _hx_c._hx_AnonObject(fileName = "EnumValueMap.unit.hx" ,lineNumber = 40 ,className = "unit.TestSpecification" ,methodName = "testEnumValueMap_unit_hx" ))
		def _hx_local_10():
			key10 = _hx_c.haxe_macro_ExprDef.EArray(None, None)
			return em1.get(key10)
		
		self.eq(_hx_local_10(), None, _hx_c._hx_AnonObject(fileName = "EnumValueMap.unit.hx" ,lineNumber = 41 ,className = "unit.TestSpecification" ,methodName = "testEnumValueMap_unit_hx" ))
		self.t(em1.exists(_hx_c.haxe_macro_ExprDef.EBreak), _hx_c._hx_AnonObject(fileName = "EnumValueMap.unit.hx" ,lineNumber = 43 ,className = "unit.TestSpecification" ,methodName = "testEnumValueMap_unit_hx" ))
		self.eq(em1.get(_hx_c.haxe_macro_ExprDef.EBreak), "baz", _hx_c._hx_AnonObject(fileName = "EnumValueMap.unit.hx" ,lineNumber = 44 ,className = "unit.TestSpecification" ,methodName = "testEnumValueMap_unit_hx" ))
		self.t(em1.remove(_hx_c.haxe_macro_ExprDef.EBreak), _hx_c._hx_AnonObject(fileName = "EnumValueMap.unit.hx" ,lineNumber = 45 ,className = "unit.TestSpecification" ,methodName = "testEnumValueMap_unit_hx" ))
		self.f(em1.exists(_hx_c.haxe_macro_ExprDef.EBreak), _hx_c._hx_AnonObject(fileName = "EnumValueMap.unit.hx" ,lineNumber = 46 ,className = "unit.TestSpecification" ,methodName = "testEnumValueMap_unit_hx" ))
		self.eq(em1.get(_hx_c.haxe_macro_ExprDef.EBreak), None, _hx_c._hx_AnonObject(fileName = "EnumValueMap.unit.hx" ,lineNumber = 47 ,className = "unit.TestSpecification" ,methodName = "testEnumValueMap_unit_hx" ))
		evm = _hx_c.haxe_ds_EnumValueMap()
		evm.set(_hx_c.unit_EVMTest.EVMA, 1)
		evm.set(_hx_c.unit_EVMTest.EVMA, 2)
		self.t(evm.exists(_hx_c.unit_EVMTest.EVMA), _hx_c._hx_AnonObject(fileName = "EnumValueMap.unit.hx" ,lineNumber = 52 ,className = "unit.TestSpecification" ,methodName = "testEnumValueMap_unit_hx" ))
		self.eq(evm.get(_hx_c.unit_EVMTest.EVMA), 2, _hx_c._hx_AnonObject(fileName = "EnumValueMap.unit.hx" ,lineNumber = 53 ,className = "unit.TestSpecification" ,methodName = "testEnumValueMap_unit_hx" ))
		self.t(evm.remove(_hx_c.unit_EVMTest.EVMA), _hx_c._hx_AnonObject(fileName = "EnumValueMap.unit.hx" ,lineNumber = 54 ,className = "unit.TestSpecification" ,methodName = "testEnumValueMap_unit_hx" ))
		self.f(evm.exists(_hx_c.unit_EVMTest.EVMA), _hx_c._hx_AnonObject(fileName = "EnumValueMap.unit.hx" ,lineNumber = 55 ,className = "unit.TestSpecification" ,methodName = "testEnumValueMap_unit_hx" ))
		evm.set(_hx_c.unit_EVMTest.EVMB(), 8)
		evm.set(_hx_c.unit_EVMTest.EVMB(), 9)
		evm.set(_hx_c.unit_EVMTest.EVMB(None), 10)
		self.t(evm.exists(_hx_c.unit_EVMTest.EVMB()), _hx_c._hx_AnonObject(fileName = "EnumValueMap.unit.hx" ,lineNumber = 60 ,className = "unit.TestSpecification" ,methodName = "testEnumValueMap_unit_hx" ))
		self.t(evm.exists(_hx_c.unit_EVMTest.EVMB(None)), _hx_c._hx_AnonObject(fileName = "EnumValueMap.unit.hx" ,lineNumber = 61 ,className = "unit.TestSpecification" ,methodName = "testEnumValueMap_unit_hx" ))
		self.eq(evm.get(_hx_c.unit_EVMTest.EVMB()), 10, _hx_c._hx_AnonObject(fileName = "EnumValueMap.unit.hx" ,lineNumber = 62 ,className = "unit.TestSpecification" ,methodName = "testEnumValueMap_unit_hx" ))
		self.eq(evm.get(_hx_c.unit_EVMTest.EVMB(None)), 10, _hx_c._hx_AnonObject(fileName = "EnumValueMap.unit.hx" ,lineNumber = 63 ,className = "unit.TestSpecification" ,methodName = "testEnumValueMap_unit_hx" ))
		self.t(evm.remove(_hx_c.unit_EVMTest.EVMB()), _hx_c._hx_AnonObject(fileName = "EnumValueMap.unit.hx" ,lineNumber = 64 ,className = "unit.TestSpecification" ,methodName = "testEnumValueMap_unit_hx" ))
		self.f(evm.remove(_hx_c.unit_EVMTest.EVMB()), _hx_c._hx_AnonObject(fileName = "EnumValueMap.unit.hx" ,lineNumber = 65 ,className = "unit.TestSpecification" ,methodName = "testEnumValueMap_unit_hx" ))
		self.f(evm.exists(_hx_c.unit_EVMTest.EVMB()), _hx_c._hx_AnonObject(fileName = "EnumValueMap.unit.hx" ,lineNumber = 66 ,className = "unit.TestSpecification" ,methodName = "testEnumValueMap_unit_hx" ))
		self.f(evm.exists(_hx_c.unit_EVMTest.EVMB(None)), _hx_c._hx_AnonObject(fileName = "EnumValueMap.unit.hx" ,lineNumber = 67 ,className = "unit.TestSpecification" ,methodName = "testEnumValueMap_unit_hx" ))
		evm.set(_hx_c.unit_EVMTest.EVMC("foo"), 4)
		evm.set(_hx_c.unit_EVMTest.EVMC("foo"), 5)
		self.t(evm.exists(_hx_c.unit_EVMTest.EVMC("foo")), _hx_c._hx_AnonObject(fileName = "EnumValueMap.unit.hx" ,lineNumber = 71 ,className = "unit.TestSpecification" ,methodName = "testEnumValueMap_unit_hx" ))
		self.eq(evm.get(_hx_c.unit_EVMTest.EVMC("foo")), 5, _hx_c._hx_AnonObject(fileName = "EnumValueMap.unit.hx" ,lineNumber = 72 ,className = "unit.TestSpecification" ,methodName = "testEnumValueMap_unit_hx" ))
		self.t(evm.remove(_hx_c.unit_EVMTest.EVMC("foo")), _hx_c._hx_AnonObject(fileName = "EnumValueMap.unit.hx" ,lineNumber = 73 ,className = "unit.TestSpecification" ,methodName = "testEnumValueMap_unit_hx" ))
		self.f(evm.exists(_hx_c.unit_EVMTest.EVMC("foo")), _hx_c._hx_AnonObject(fileName = "EnumValueMap.unit.hx" ,lineNumber = 74 ,className = "unit.TestSpecification" ,methodName = "testEnumValueMap_unit_hx" ))
		evm.set(_hx_c.unit_EVMTest.EVMD(None), 91)
		self.t(evm.exists(_hx_c.unit_EVMTest.EVMD(None)), _hx_c._hx_AnonObject(fileName = "EnumValueMap.unit.hx" ,lineNumber = 77 ,className = "unit.TestSpecification" ,methodName = "testEnumValueMap_unit_hx" ))
		self.eq(evm.get(_hx_c.unit_EVMTest.EVMD(None)), 91, _hx_c._hx_AnonObject(fileName = "EnumValueMap.unit.hx" ,lineNumber = 78 ,className = "unit.TestSpecification" ,methodName = "testEnumValueMap_unit_hx" ))
		self.t(evm.remove(_hx_c.unit_EVMTest.EVMD(None)), _hx_c._hx_AnonObject(fileName = "EnumValueMap.unit.hx" ,lineNumber = 79 ,className = "unit.TestSpecification" ,methodName = "testEnumValueMap_unit_hx" ))
		self.f(evm.exists(_hx_c.unit_EVMTest.EVMD(None)), _hx_c._hx_AnonObject(fileName = "EnumValueMap.unit.hx" ,lineNumber = 80 ,className = "unit.TestSpecification" ,methodName = "testEnumValueMap_unit_hx" ))
		evm.set(_hx_c.unit_EVMTest.EVMD(_hx_c.unit_EVMTest.EVMA), 12)
		self.t(evm.exists(_hx_c.unit_EVMTest.EVMD(_hx_c.unit_EVMTest.EVMA)), _hx_c._hx_AnonObject(fileName = "EnumValueMap.unit.hx" ,lineNumber = 83 ,className = "unit.TestSpecification" ,methodName = "testEnumValueMap_unit_hx" ))
		self.eq(evm.get(_hx_c.unit_EVMTest.EVMD(_hx_c.unit_EVMTest.EVMA)), 12, _hx_c._hx_AnonObject(fileName = "EnumValueMap.unit.hx" ,lineNumber = 84 ,className = "unit.TestSpecification" ,methodName = "testEnumValueMap_unit_hx" ))
		self.t(evm.remove(_hx_c.unit_EVMTest.EVMD(_hx_c.unit_EVMTest.EVMA)), _hx_c._hx_AnonObject(fileName = "EnumValueMap.unit.hx" ,lineNumber = 85 ,className = "unit.TestSpecification" ,methodName = "testEnumValueMap_unit_hx" ))
		self.f(evm.exists(_hx_c.unit_EVMTest.EVMD(_hx_c.unit_EVMTest.EVMA)), _hx_c._hx_AnonObject(fileName = "EnumValueMap.unit.hx" ,lineNumber = 86 ,className = "unit.TestSpecification" ,methodName = "testEnumValueMap_unit_hx" ))
		evm.set(_hx_c.unit_EVMTest.EVME(None), 99)
		self.t(evm.exists(_hx_c.unit_EVMTest.EVME(None)), _hx_c._hx_AnonObject(fileName = "EnumValueMap.unit.hx" ,lineNumber = 89 ,className = "unit.TestSpecification" ,methodName = "testEnumValueMap_unit_hx" ))
		self.t(evm.exists(_hx_c.unit_EVMTest.EVME()), _hx_c._hx_AnonObject(fileName = "EnumValueMap.unit.hx" ,lineNumber = 90 ,className = "unit.TestSpecification" ,methodName = "testEnumValueMap_unit_hx" ))
		self.eq(evm.get(_hx_c.unit_EVMTest.EVME(None)), 99, _hx_c._hx_AnonObject(fileName = "EnumValueMap.unit.hx" ,lineNumber = 91 ,className = "unit.TestSpecification" ,methodName = "testEnumValueMap_unit_hx" ))
		self.eq(evm.get(_hx_c.unit_EVMTest.EVME()), 99, _hx_c._hx_AnonObject(fileName = "EnumValueMap.unit.hx" ,lineNumber = 92 ,className = "unit.TestSpecification" ,methodName = "testEnumValueMap_unit_hx" ))
		evm.set(_hx_c.unit_EVMTest.EVMF([_hx_c.unit_EVMTest.EVMA, _hx_c.unit_EVMTest.EVMB()]), 12)
		self.t(evm.exists(_hx_c.unit_EVMTest.EVMF([_hx_c.unit_EVMTest.EVMA, _hx_c.unit_EVMTest.EVMB()])), _hx_c._hx_AnonObject(fileName = "EnumValueMap.unit.hx" ,lineNumber = 95 ,className = "unit.TestSpecification" ,methodName = "testEnumValueMap_unit_hx" ))
		self.t(evm.exists(_hx_c.unit_EVMTest.EVMF([_hx_c.unit_EVMTest.EVMA, _hx_c.unit_EVMTest.EVMB(None)])), _hx_c._hx_AnonObject(fileName = "EnumValueMap.unit.hx" ,lineNumber = 96 ,className = "unit.TestSpecification" ,methodName = "testEnumValueMap_unit_hx" ))
		self.eq(evm.get(_hx_c.unit_EVMTest.EVMF([_hx_c.unit_EVMTest.EVMA, _hx_c.unit_EVMTest.EVMB()])), 12, _hx_c._hx_AnonObject(fileName = "EnumValueMap.unit.hx" ,lineNumber = 97 ,className = "unit.TestSpecification" ,methodName = "testEnumValueMap_unit_hx" ))
		self.eq(evm.get(_hx_c.unit_EVMTest.EVMF([_hx_c.unit_EVMTest.EVMA, _hx_c.unit_EVMTest.EVMB(None)])), 12, _hx_c._hx_AnonObject(fileName = "EnumValueMap.unit.hx" ,lineNumber = 98 ,className = "unit.TestSpecification" ,methodName = "testEnumValueMap_unit_hx" ))
	

	def testObjectMap_unit_hx(self):
		k1 = _hx_c.unit_TestSpecification_IntWrap(1)
		k2 = _hx_c.unit_TestSpecification_IntWrap(2)
		k3 = _hx_c.unit_TestSpecification_IntWrap(3)
		o = _hx_c.haxe_ds_ObjectMap()
		self.f(k1 in o.h, _hx_c._hx_AnonObject(fileName = "ObjectMap.unit.hx" ,lineNumber = 7 ,className = "unit.TestSpecification" ,methodName = "testObjectMap_unit_hx" ))
		self.f(k2 in o.h, _hx_c._hx_AnonObject(fileName = "ObjectMap.unit.hx" ,lineNumber = 8 ,className = "unit.TestSpecification" ,methodName = "testObjectMap_unit_hx" ))
		self.f(k3 in o.h, _hx_c._hx_AnonObject(fileName = "ObjectMap.unit.hx" ,lineNumber = 9 ,className = "unit.TestSpecification" ,methodName = "testObjectMap_unit_hx" ))
		self.eq(o.h.get(k1, None), None, _hx_c._hx_AnonObject(fileName = "ObjectMap.unit.hx" ,lineNumber = 10 ,className = "unit.TestSpecification" ,methodName = "testObjectMap_unit_hx" ))
		self.eq(o.h.get(k2, None), None, _hx_c._hx_AnonObject(fileName = "ObjectMap.unit.hx" ,lineNumber = 11 ,className = "unit.TestSpecification" ,methodName = "testObjectMap_unit_hx" ))
		self.eq(o.h.get(k3, None), None, _hx_c._hx_AnonObject(fileName = "ObjectMap.unit.hx" ,lineNumber = 12 ,className = "unit.TestSpecification" ,methodName = "testObjectMap_unit_hx" ))
		o.set(k1, "9")
		o.set(k2, "8")
		o.set(k3, "7")
		self.t(k1 in o.h, _hx_c._hx_AnonObject(fileName = "ObjectMap.unit.hx" ,lineNumber = 18 ,className = "unit.TestSpecification" ,methodName = "testObjectMap_unit_hx" ))
		self.t(k2 in o.h, _hx_c._hx_AnonObject(fileName = "ObjectMap.unit.hx" ,lineNumber = 19 ,className = "unit.TestSpecification" ,methodName = "testObjectMap_unit_hx" ))
		self.t(k3 in o.h, _hx_c._hx_AnonObject(fileName = "ObjectMap.unit.hx" ,lineNumber = 20 ,className = "unit.TestSpecification" ,methodName = "testObjectMap_unit_hx" ))
		fields = _hx_c.Reflect.fields(k1)
		self.eq(_hx_array_get(fields,0), "i", _hx_c._hx_AnonObject(fileName = "ObjectMap.unit.hx" ,lineNumber = 25 ,className = "unit.TestSpecification" ,methodName = "testObjectMap_unit_hx" ))
		self.eq(o.h.get(k3, None), "7", _hx_c._hx_AnonObject(fileName = "ObjectMap.unit.hx" ,lineNumber = 29 ,className = "unit.TestSpecification" ,methodName = "testObjectMap_unit_hx" ))
		self.eq(o.h.get(k2, None), "8", _hx_c._hx_AnonObject(fileName = "ObjectMap.unit.hx" ,lineNumber = 30 ,className = "unit.TestSpecification" ,methodName = "testObjectMap_unit_hx" ))
		self.eq(o.h.get(k1, None), "9", _hx_c._hx_AnonObject(fileName = "ObjectMap.unit.hx" ,lineNumber = 31 ,className = "unit.TestSpecification" ,methodName = "testObjectMap_unit_hx" ))
		a = []
		_it = o.keys()
		while _it.hasNext():
			k = _it.next()
			a.append(k)
			_hx_builtin.len(a)
		
		self.eq(_hx_builtin.len(a), 3, _hx_c._hx_AnonObject(fileName = "ObjectMap.unit.hx" ,lineNumber = 37 ,className = "unit.TestSpecification" ,methodName = "testObjectMap_unit_hx" ))
		self.t(_hx_array_get(a,0) == k3 or (_hx_array_get(a,0) == k2 or _hx_array_get(a,0) == k1), _hx_c._hx_AnonObject(fileName = "ObjectMap.unit.hx" ,lineNumber = 38 ,className = "unit.TestSpecification" ,methodName = "testObjectMap_unit_hx" ))
		self.t(_hx_array_get(a,1) == k3 or (_hx_array_get(a,1) == k2 or _hx_array_get(a,1) == k1), _hx_c._hx_AnonObject(fileName = "ObjectMap.unit.hx" ,lineNumber = 39 ,className = "unit.TestSpecification" ,methodName = "testObjectMap_unit_hx" ))
		self.t(_hx_array_get(a,2) == k3 or (_hx_array_get(a,2) == k2 or _hx_array_get(a,2) == k1), _hx_c._hx_AnonObject(fileName = "ObjectMap.unit.hx" ,lineNumber = 40 ,className = "unit.TestSpecification" ,methodName = "testObjectMap_unit_hx" ))
		self.t(k1 in o.h, _hx_c._hx_AnonObject(fileName = "ObjectMap.unit.hx" ,lineNumber = 41 ,className = "unit.TestSpecification" ,methodName = "testObjectMap_unit_hx" ))
		self.t(k2 in o.h, _hx_c._hx_AnonObject(fileName = "ObjectMap.unit.hx" ,lineNumber = 42 ,className = "unit.TestSpecification" ,methodName = "testObjectMap_unit_hx" ))
		self.t(k3 in o.h, _hx_c._hx_AnonObject(fileName = "ObjectMap.unit.hx" ,lineNumber = 43 ,className = "unit.TestSpecification" ,methodName = "testObjectMap_unit_hx" ))
		self.eq(o.h.get(k3, None), "7", _hx_c._hx_AnonObject(fileName = "ObjectMap.unit.hx" ,lineNumber = 44 ,className = "unit.TestSpecification" ,methodName = "testObjectMap_unit_hx" ))
		self.eq(o.h.get(k2, None), "8", _hx_c._hx_AnonObject(fileName = "ObjectMap.unit.hx" ,lineNumber = 45 ,className = "unit.TestSpecification" ,methodName = "testObjectMap_unit_hx" ))
		self.eq(o.h.get(k1, None), "9", _hx_c._hx_AnonObject(fileName = "ObjectMap.unit.hx" ,lineNumber = 46 ,className = "unit.TestSpecification" ,methodName = "testObjectMap_unit_hx" ))
		a1 = []
		_it = o.iterator()
		while _it.hasNext():
			k4 = _it.next()
			a1.append(k4)
			_hx_builtin.len(a1)
		
		self.eq(_hx_builtin.len(a1), 3, _hx_c._hx_AnonObject(fileName = "ObjectMap.unit.hx" ,lineNumber = 53 ,className = "unit.TestSpecification" ,methodName = "testObjectMap_unit_hx" ))
		self.t(_hx_array_get(a1,0) == "7" or (_hx_array_get(a1,0) == "8" or _hx_array_get(a1,0) == "9"), _hx_c._hx_AnonObject(fileName = "ObjectMap.unit.hx" ,lineNumber = 54 ,className = "unit.TestSpecification" ,methodName = "testObjectMap_unit_hx" ))
		self.t(_hx_array_get(a1,1) == "7" or (_hx_array_get(a1,1) == "8" or _hx_array_get(a1,1) == "9"), _hx_c._hx_AnonObject(fileName = "ObjectMap.unit.hx" ,lineNumber = 55 ,className = "unit.TestSpecification" ,methodName = "testObjectMap_unit_hx" ))
		self.t(_hx_array_get(a1,2) == "7" or (_hx_array_get(a1,2) == "8" or _hx_array_get(a1,2) == "9"), _hx_c._hx_AnonObject(fileName = "ObjectMap.unit.hx" ,lineNumber = 56 ,className = "unit.TestSpecification" ,methodName = "testObjectMap_unit_hx" ))
		self.t(k1 in o.h, _hx_c._hx_AnonObject(fileName = "ObjectMap.unit.hx" ,lineNumber = 57 ,className = "unit.TestSpecification" ,methodName = "testObjectMap_unit_hx" ))
		self.t(k2 in o.h, _hx_c._hx_AnonObject(fileName = "ObjectMap.unit.hx" ,lineNumber = 58 ,className = "unit.TestSpecification" ,methodName = "testObjectMap_unit_hx" ))
		self.t(k3 in o.h, _hx_c._hx_AnonObject(fileName = "ObjectMap.unit.hx" ,lineNumber = 59 ,className = "unit.TestSpecification" ,methodName = "testObjectMap_unit_hx" ))
		self.eq(o.h.get(k3, None), "7", _hx_c._hx_AnonObject(fileName = "ObjectMap.unit.hx" ,lineNumber = 60 ,className = "unit.TestSpecification" ,methodName = "testObjectMap_unit_hx" ))
		self.eq(o.h.get(k2, None), "8", _hx_c._hx_AnonObject(fileName = "ObjectMap.unit.hx" ,lineNumber = 61 ,className = "unit.TestSpecification" ,methodName = "testObjectMap_unit_hx" ))
		self.eq(o.h.get(k1, None), "9", _hx_c._hx_AnonObject(fileName = "ObjectMap.unit.hx" ,lineNumber = 62 ,className = "unit.TestSpecification" ,methodName = "testObjectMap_unit_hx" ))
		self.t(o.remove(k2), _hx_c._hx_AnonObject(fileName = "ObjectMap.unit.hx" ,lineNumber = 65 ,className = "unit.TestSpecification" ,methodName = "testObjectMap_unit_hx" ))
		self.t(k1 in o.h, _hx_c._hx_AnonObject(fileName = "ObjectMap.unit.hx" ,lineNumber = 66 ,className = "unit.TestSpecification" ,methodName = "testObjectMap_unit_hx" ))
		self.f(k2 in o.h, _hx_c._hx_AnonObject(fileName = "ObjectMap.unit.hx" ,lineNumber = 67 ,className = "unit.TestSpecification" ,methodName = "testObjectMap_unit_hx" ))
		self.t(k3 in o.h, _hx_c._hx_AnonObject(fileName = "ObjectMap.unit.hx" ,lineNumber = 68 ,className = "unit.TestSpecification" ,methodName = "testObjectMap_unit_hx" ))
		self.eq(o.h.get(k1, None), "9", _hx_c._hx_AnonObject(fileName = "ObjectMap.unit.hx" ,lineNumber = 69 ,className = "unit.TestSpecification" ,methodName = "testObjectMap_unit_hx" ))
		self.eq(o.h.get(k2, None), None, _hx_c._hx_AnonObject(fileName = "ObjectMap.unit.hx" ,lineNumber = 70 ,className = "unit.TestSpecification" ,methodName = "testObjectMap_unit_hx" ))
		self.eq(o.h.get(k3, None), "7", _hx_c._hx_AnonObject(fileName = "ObjectMap.unit.hx" ,lineNumber = 71 ,className = "unit.TestSpecification" ,methodName = "testObjectMap_unit_hx" ))
		a2 = []
		_it = o.keys()
		while _it.hasNext():
			k5 = _it.next()
			a2.append(k5)
			_hx_builtin.len(a2)
		
		self.eq(_hx_builtin.len(a2), 2, _hx_c._hx_AnonObject(fileName = "ObjectMap.unit.hx" ,lineNumber = 75 ,className = "unit.TestSpecification" ,methodName = "testObjectMap_unit_hx" ))
		self.t(_hx_array_get(a2,0) == k3 or _hx_array_get(a2,0) == k1, _hx_c._hx_AnonObject(fileName = "ObjectMap.unit.hx" ,lineNumber = 76 ,className = "unit.TestSpecification" ,methodName = "testObjectMap_unit_hx" ))
		self.t(_hx_array_get(a2,1) == k3 or _hx_array_get(a2,1) == k1, _hx_c._hx_AnonObject(fileName = "ObjectMap.unit.hx" ,lineNumber = 77 ,className = "unit.TestSpecification" ,methodName = "testObjectMap_unit_hx" ))
		a3 = []
		_it = o.iterator()
		while _it.hasNext():
			k6 = _it.next()
			a3.append(k6)
			_hx_builtin.len(a3)
		
		self.eq(_hx_builtin.len(a3), 2, _hx_c._hx_AnonObject(fileName = "ObjectMap.unit.hx" ,lineNumber = 82 ,className = "unit.TestSpecification" ,methodName = "testObjectMap_unit_hx" ))
		self.t(_hx_array_get(a3,0) == "7" or _hx_array_get(a3,0) == "9", _hx_c._hx_AnonObject(fileName = "ObjectMap.unit.hx" ,lineNumber = 83 ,className = "unit.TestSpecification" ,methodName = "testObjectMap_unit_hx" ))
		self.t(_hx_array_get(a3,1) == "7" or _hx_array_get(a3,1) == "9", _hx_c._hx_AnonObject(fileName = "ObjectMap.unit.hx" ,lineNumber = 84 ,className = "unit.TestSpecification" ,methodName = "testObjectMap_unit_hx" ))
		self.f(o.remove(k2), _hx_c._hx_AnonObject(fileName = "ObjectMap.unit.hx" ,lineNumber = 85 ,className = "unit.TestSpecification" ,methodName = "testObjectMap_unit_hx" ))
	

	def testVector_unit_hx(self):
		vec = None
		this1 = None
		this1 = list()
		_g = 0
		while _g < 3:
			i = _g
			_g = _g + 1
			
			_hx_array_set(this1,i, None)
		
		
		vec = this1
		
		vNullInt = None
		vNullBool = None
		vNullFloat = None
		self.eq(_hx_builtin.len(vec), 3, _hx_c._hx_AnonObject(fileName = "Vector.unit.hx" ,lineNumber = 6 ,className = "unit.TestSpecification" ,methodName = "testVector_unit_hx" ))
		self.eq(_hx_array_get(vec,0), vNullInt, _hx_c._hx_AnonObject(fileName = "Vector.unit.hx" ,lineNumber = 7 ,className = "unit.TestSpecification" ,methodName = "testVector_unit_hx" ))
		self.eq(_hx_array_get(vec,1), vNullInt, _hx_c._hx_AnonObject(fileName = "Vector.unit.hx" ,lineNumber = 8 ,className = "unit.TestSpecification" ,methodName = "testVector_unit_hx" ))
		self.eq(_hx_array_get(vec,2), vNullInt, _hx_c._hx_AnonObject(fileName = "Vector.unit.hx" ,lineNumber = 9 ,className = "unit.TestSpecification" ,methodName = "testVector_unit_hx" ))
		_hx_array_set(vec,1, 2)
		self.eq(_hx_builtin.len(vec), 3, _hx_c._hx_AnonObject(fileName = "Vector.unit.hx" ,lineNumber = 11 ,className = "unit.TestSpecification" ,methodName = "testVector_unit_hx" ))
		self.eq(_hx_array_get(vec,0), vNullInt, _hx_c._hx_AnonObject(fileName = "Vector.unit.hx" ,lineNumber = 12 ,className = "unit.TestSpecification" ,methodName = "testVector_unit_hx" ))
		self.eq(_hx_array_get(vec,1), 2, _hx_c._hx_AnonObject(fileName = "Vector.unit.hx" ,lineNumber = 13 ,className = "unit.TestSpecification" ,methodName = "testVector_unit_hx" ))
		self.eq(_hx_array_get(vec,2), vNullInt, _hx_c._hx_AnonObject(fileName = "Vector.unit.hx" ,lineNumber = 14 ,className = "unit.TestSpecification" ,methodName = "testVector_unit_hx" ))
		vec1 = None
		this2 = None
		this2 = list()
		_g1 = 0
		while _g1 < 3:
			i1 = _g1
			_g1 = _g1 + 1
			
			_hx_array_set(this2,i1, None)
		
		
		vec1 = this2
		
		self.eq(_hx_array_get(vec1,0), vNullFloat, _hx_c._hx_AnonObject(fileName = "Vector.unit.hx" ,lineNumber = 18 ,className = "unit.TestSpecification" ,methodName = "testVector_unit_hx" ))
		self.eq(_hx_array_get(vec1,1), vNullFloat, _hx_c._hx_AnonObject(fileName = "Vector.unit.hx" ,lineNumber = 19 ,className = "unit.TestSpecification" ,methodName = "testVector_unit_hx" ))
		self.eq(_hx_array_get(vec1,2), vNullFloat, _hx_c._hx_AnonObject(fileName = "Vector.unit.hx" ,lineNumber = 20 ,className = "unit.TestSpecification" ,methodName = "testVector_unit_hx" ))
		vec2 = None
		this3 = None
		this3 = list()
		_g2 = 0
		while _g2 < 3:
			i2 = _g2
			_g2 = _g2 + 1
			
			_hx_array_set(this3,i2, None)
		
		
		vec2 = this3
		
		self.eq(_hx_array_get(vec2,0), vNullBool, _hx_c._hx_AnonObject(fileName = "Vector.unit.hx" ,lineNumber = 26 ,className = "unit.TestSpecification" ,methodName = "testVector_unit_hx" ))
		self.eq(_hx_array_get(vec2,1), vNullBool, _hx_c._hx_AnonObject(fileName = "Vector.unit.hx" ,lineNumber = 27 ,className = "unit.TestSpecification" ,methodName = "testVector_unit_hx" ))
		self.eq(_hx_array_get(vec2,2), vNullBool, _hx_c._hx_AnonObject(fileName = "Vector.unit.hx" ,lineNumber = 28 ,className = "unit.TestSpecification" ,methodName = "testVector_unit_hx" ))
		arr = ["1", "2", "3"]
		vec3 = None
		vec4 = None
		length = _hx_builtin.len(arr)
		this4 = None
		this4 = list()
		_g3 = 0
		while _g3 < length:
			i3 = _g3
			_g3 = _g3 + 1
			
			_hx_array_set(this4,i3, None)
		
		
		vec4 = this4
		
		_g11 = 0
		_g4 = _hx_builtin.len(arr)
		while _g11 < _g4:
			i4 = _g11
			_g11 = _g11 + 1
			
			_hx_array_set(vec4,i4, _hx_array_get(arr,i4))
		
		
		vec3 = vec4
		
		arr != vec3
		self.eq(_hx_builtin.len(vec3), 3, _hx_c._hx_AnonObject(fileName = "Vector.unit.hx" ,lineNumber = 37 ,className = "unit.TestSpecification" ,methodName = "testVector_unit_hx" ))
		self.eq(_hx_array_get(vec3,0), "1", _hx_c._hx_AnonObject(fileName = "Vector.unit.hx" ,lineNumber = 38 ,className = "unit.TestSpecification" ,methodName = "testVector_unit_hx" ))
		self.eq(_hx_array_get(vec3,1), "2", _hx_c._hx_AnonObject(fileName = "Vector.unit.hx" ,lineNumber = 39 ,className = "unit.TestSpecification" ,methodName = "testVector_unit_hx" ))
		self.eq(_hx_array_get(vec3,2), "3", _hx_c._hx_AnonObject(fileName = "Vector.unit.hx" ,lineNumber = 40 ,className = "unit.TestSpecification" ,methodName = "testVector_unit_hx" ))
		tpl = _hx_c.unit_C()
		vec5 = None
		array = [tpl]
		vec6 = None
		length1 = _hx_builtin.len(array)
		this5 = None
		this5 = list()
		_g5 = 0
		while _g5 < length1:
			i5 = _g5
			_g5 = _g5 + 1
			
			_hx_array_set(this5,i5, None)
		
		
		vec6 = this5
		
		_g12 = 0
		_g6 = _hx_builtin.len(array)
		while _g12 < _g6:
			i6 = _g12
			_g12 = _g12 + 1
			
			_hx_array_set(vec6,i6, _hx_array_get(array,i6))
		
		
		vec5 = vec6
		
		self.eq(tpl, _hx_array_get(vec5,0), _hx_c._hx_AnonObject(fileName = "Vector.unit.hx" ,lineNumber = 45 ,className = "unit.TestSpecification" ,methodName = "testVector_unit_hx" ))
		vec7 = None
		array1 = ["1", "2", "3"]
		vec8 = None
		length2 = _hx_builtin.len(array1)
		this6 = None
		this6 = list()
		_g7 = 0
		while _g7 < length2:
			i7 = _g7
			_g7 = _g7 + 1
			
			_hx_array_set(this6,i7, None)
		
		
		vec8 = this6
		
		_g13 = 0
		_g8 = _hx_builtin.len(array1)
		while _g13 < _g8:
			i8 = _g13
			_g13 = _g13 + 1
			
			_hx_array_set(vec8,i8, _hx_array_get(array1,i8))
		
		
		vec7 = vec8
		
		data = vec7
		vec21 = data
		self.eq(_hx_array_get(vec21,0), "1", _hx_c._hx_AnonObject(fileName = "Vector.unit.hx" ,lineNumber = 51 ,className = "unit.TestSpecification" ,methodName = "testVector_unit_hx" ))
		self.eq(_hx_array_get(vec21,1), "2", _hx_c._hx_AnonObject(fileName = "Vector.unit.hx" ,lineNumber = 52 ,className = "unit.TestSpecification" ,methodName = "testVector_unit_hx" ))
		self.eq(_hx_array_get(vec21,2), "3", _hx_c._hx_AnonObject(fileName = "Vector.unit.hx" ,lineNumber = 53 ,className = "unit.TestSpecification" ,methodName = "testVector_unit_hx" ))
		self.eq(_hx_array_get(vec21,0), "1", _hx_c._hx_AnonObject(fileName = "Vector.unit.hx" ,lineNumber = 56 ,className = "unit.TestSpecification" ,methodName = "testVector_unit_hx" ))
		self.eq(_hx_array_get(vec21,1), "2", _hx_c._hx_AnonObject(fileName = "Vector.unit.hx" ,lineNumber = 57 ,className = "unit.TestSpecification" ,methodName = "testVector_unit_hx" ))
		self.eq(_hx_array_get(vec21,2), "3", _hx_c._hx_AnonObject(fileName = "Vector.unit.hx" ,lineNumber = 58 ,className = "unit.TestSpecification" ,methodName = "testVector_unit_hx" ))
		_hx_array_set(vec21,1, "4")
		self.eq(_hx_array_get(vec21,1), "4", _hx_c._hx_AnonObject(fileName = "Vector.unit.hx" ,lineNumber = 60 ,className = "unit.TestSpecification" ,methodName = "testVector_unit_hx" ))
		_hx_local_0 = vec21
		_hx_local_1 = 0
		_hx_local_2 = _hx_array_get(_hx_local_0,_hx_local_1)
		_hx_array_set(_hx_local_0,_hx_local_1, Std.string(_hx_local_2) + "a")
		_hx_array_get(_hx_local_0,_hx_local_1)
		
		_hx_array_set(vec21,0, "1a")
		vec31 = None
		array2 = [0, 1, 2, 3, 4, 5, 6]
		vec9 = None
		length3 = _hx_builtin.len(array2)
		this7 = None
		this7 = list()
		_g9 = 0
		while _g9 < length3:
			i9 = _g9
			_g9 = _g9 + 1
			
			_hx_array_set(this7,i9, None)
		
		
		vec9 = this7
		
		_g14 = 0
		_g10 = _hx_builtin.len(array2)
		while _g14 < _g10:
			i10 = _g14
			_g14 = _g14 + 1
			
			_hx_array_set(vec9,i10, _hx_array_get(array2,i10))
		
		
		vec31 = vec9
		
		vec41 = None
		this8 = None
		this8 = list()
		_g15 = 0
		while _g15 < 5:
			i11 = _g15
			_g15 = _g15 + 1
			
			_hx_array_set(this8,i11, None)
		
		
		vec41 = this8
		
		_hx_c.haxe_ds_Vector_Vector_Impl_.blit(vec31, 0, vec41, 1, 3)
		self.eq(_hx_array_get(vec41,1), 0, _hx_c._hx_AnonObject(fileName = "Vector.unit.hx" ,lineNumber = 69 ,className = "unit.TestSpecification" ,methodName = "testVector_unit_hx" ))
		self.eq(_hx_array_get(vec41,2), 1, _hx_c._hx_AnonObject(fileName = "Vector.unit.hx" ,lineNumber = 70 ,className = "unit.TestSpecification" ,methodName = "testVector_unit_hx" ))
		self.eq(_hx_array_get(vec41,3), 2, _hx_c._hx_AnonObject(fileName = "Vector.unit.hx" ,lineNumber = 71 ,className = "unit.TestSpecification" ,methodName = "testVector_unit_hx" ))
		self.eq(_hx_array_get(vec41,4), vNullInt, _hx_c._hx_AnonObject(fileName = "Vector.unit.hx" ,lineNumber = 72 ,className = "unit.TestSpecification" ,methodName = "testVector_unit_hx" ))
		self.eq(_hx_array_get(vec41,0), vNullInt, _hx_c._hx_AnonObject(fileName = "Vector.unit.hx" ,lineNumber = 73 ,className = "unit.TestSpecification" ,methodName = "testVector_unit_hx" ))
		_hx_c.haxe_ds_Vector_Vector_Impl_.blit(vec31, 0, vec41, 0, 5)
		self.eq(_hx_array_get(vec41,0), 0, _hx_c._hx_AnonObject(fileName = "Vector.unit.hx" ,lineNumber = 76 ,className = "unit.TestSpecification" ,methodName = "testVector_unit_hx" ))
		self.eq(_hx_array_get(vec41,1), 1, _hx_c._hx_AnonObject(fileName = "Vector.unit.hx" ,lineNumber = 77 ,className = "unit.TestSpecification" ,methodName = "testVector_unit_hx" ))
		self.eq(_hx_array_get(vec41,2), 2, _hx_c._hx_AnonObject(fileName = "Vector.unit.hx" ,lineNumber = 78 ,className = "unit.TestSpecification" ,methodName = "testVector_unit_hx" ))
		self.eq(_hx_array_get(vec41,3), 3, _hx_c._hx_AnonObject(fileName = "Vector.unit.hx" ,lineNumber = 79 ,className = "unit.TestSpecification" ,methodName = "testVector_unit_hx" ))
		self.eq(_hx_array_get(vec41,4), 4, _hx_c._hx_AnonObject(fileName = "Vector.unit.hx" ,lineNumber = 80 ,className = "unit.TestSpecification" ,methodName = "testVector_unit_hx" ))
		_hx_c.haxe_ds_Vector_Vector_Impl_.blit(vec41, 1, vec31, 0, 4)
		self.eq(_hx_array_get(vec31,0), 1, _hx_c._hx_AnonObject(fileName = "Vector.unit.hx" ,lineNumber = 84 ,className = "unit.TestSpecification" ,methodName = "testVector_unit_hx" ))
		self.eq(_hx_array_get(vec31,1), 2, _hx_c._hx_AnonObject(fileName = "Vector.unit.hx" ,lineNumber = 85 ,className = "unit.TestSpecification" ,methodName = "testVector_unit_hx" ))
		self.eq(_hx_array_get(vec31,2), 3, _hx_c._hx_AnonObject(fileName = "Vector.unit.hx" ,lineNumber = 86 ,className = "unit.TestSpecification" ,methodName = "testVector_unit_hx" ))
		self.eq(_hx_array_get(vec31,3), 4, _hx_c._hx_AnonObject(fileName = "Vector.unit.hx" ,lineNumber = 87 ,className = "unit.TestSpecification" ,methodName = "testVector_unit_hx" ))
		self.eq(_hx_array_get(vec31,4), 4, _hx_c._hx_AnonObject(fileName = "Vector.unit.hx" ,lineNumber = 88 ,className = "unit.TestSpecification" ,methodName = "testVector_unit_hx" ))
		self.eq(_hx_array_get(vec31,5), 5, _hx_c._hx_AnonObject(fileName = "Vector.unit.hx" ,lineNumber = 89 ,className = "unit.TestSpecification" ,methodName = "testVector_unit_hx" ))
		self.eq(_hx_array_get(vec31,6), 6, _hx_c._hx_AnonObject(fileName = "Vector.unit.hx" ,lineNumber = 90 ,className = "unit.TestSpecification" ,methodName = "testVector_unit_hx" ))
	

	def testGenericStack_unit_hx(self):
		gs = _hx_c.haxe_ds_GenericStack()
		self.t(gs.head is None, _hx_c._hx_AnonObject(fileName = "GenericStack.unit.hx" ,lineNumber = 2 ,className = "unit.TestSpecification" ,methodName = "testGenericStack_unit_hx" ))
		self.eq(None if (gs.head is None) else gs.head.elt, None, _hx_c._hx_AnonObject(fileName = "GenericStack.unit.hx" ,lineNumber = 3 ,className = "unit.TestSpecification" ,methodName = "testGenericStack_unit_hx" ))
		def _hx_local_0():
			k = gs.head
			def _hx_local_3():
				def _hx_local_2():
					def _hx_local_1():
						gs.head = k.next
						return k.elt
					
					return None if k is None else _hx_local_1()
				
				return _hx_local_2()
			
			return _hx_local_3()
		
		self.eq(_hx_local_0(), None, _hx_c._hx_AnonObject(fileName = "GenericStack.unit.hx" ,lineNumber = 4 ,className = "unit.TestSpecification" ,methodName = "testGenericStack_unit_hx" ))
		self.f(gs.remove(None), _hx_c._hx_AnonObject(fileName = "GenericStack.unit.hx" ,lineNumber = 5 ,className = "unit.TestSpecification" ,methodName = "testGenericStack_unit_hx" ))
		gs.head = _hx_c.haxe_ds_GenericCell("foo", gs.head)
		self.f(gs.head is None, _hx_c._hx_AnonObject(fileName = "GenericStack.unit.hx" ,lineNumber = 7 ,className = "unit.TestSpecification" ,methodName = "testGenericStack_unit_hx" ))
		self.eq(None if (gs.head is None) else gs.head.elt, "foo", _hx_c._hx_AnonObject(fileName = "GenericStack.unit.hx" ,lineNumber = 8 ,className = "unit.TestSpecification" ,methodName = "testGenericStack_unit_hx" ))
		def _hx_local_4():
			k1 = gs.head
			def _hx_local_7():
				def _hx_local_6():
					def _hx_local_5():
						gs.head = k1.next
						return k1.elt
					
					return None if k1 is None else _hx_local_5()
				
				return _hx_local_6()
			
			return _hx_local_7()
		
		self.eq(_hx_local_4(), "foo", _hx_c._hx_AnonObject(fileName = "GenericStack.unit.hx" ,lineNumber = 9 ,className = "unit.TestSpecification" ,methodName = "testGenericStack_unit_hx" ))
		self.t(gs.head is None, _hx_c._hx_AnonObject(fileName = "GenericStack.unit.hx" ,lineNumber = 10 ,className = "unit.TestSpecification" ,methodName = "testGenericStack_unit_hx" ))
		self.eq(None if (gs.head is None) else gs.head.elt, None, _hx_c._hx_AnonObject(fileName = "GenericStack.unit.hx" ,lineNumber = 11 ,className = "unit.TestSpecification" ,methodName = "testGenericStack_unit_hx" ))
		def _hx_local_8():
			k2 = gs.head
			def _hx_local_11():
				def _hx_local_10():
					def _hx_local_9():
						gs.head = k2.next
						return k2.elt
					
					return None if k2 is None else _hx_local_9()
				
				return _hx_local_10()
			
			return _hx_local_11()
		
		self.eq(_hx_local_8(), None, _hx_c._hx_AnonObject(fileName = "GenericStack.unit.hx" ,lineNumber = 12 ,className = "unit.TestSpecification" ,methodName = "testGenericStack_unit_hx" ))
		gs.head = _hx_c.haxe_ds_GenericCell("foo", gs.head)
		self.eq(None if (gs.head is None) else gs.head.elt, "foo", _hx_c._hx_AnonObject(fileName = "GenericStack.unit.hx" ,lineNumber = 14 ,className = "unit.TestSpecification" ,methodName = "testGenericStack_unit_hx" ))
		self.t(gs.remove("foo"), _hx_c._hx_AnonObject(fileName = "GenericStack.unit.hx" ,lineNumber = 15 ,className = "unit.TestSpecification" ,methodName = "testGenericStack_unit_hx" ))
		self.t(gs.head is None, _hx_c._hx_AnonObject(fileName = "GenericStack.unit.hx" ,lineNumber = 16 ,className = "unit.TestSpecification" ,methodName = "testGenericStack_unit_hx" ))
		gs.head = _hx_c.haxe_ds_GenericCell("foo", gs.head)
		gs.head = _hx_c.haxe_ds_GenericCell("bar", gs.head)
		def _hx_local_12():
			k3 = gs.head
			def _hx_local_15():
				def _hx_local_14():
					def _hx_local_13():
						gs.head = k3.next
						return k3.elt
					
					return None if k3 is None else _hx_local_13()
				
				return _hx_local_14()
			
			return _hx_local_15()
		
		self.eq(_hx_local_12(), "bar", _hx_c._hx_AnonObject(fileName = "GenericStack.unit.hx" ,lineNumber = 19 ,className = "unit.TestSpecification" ,methodName = "testGenericStack_unit_hx" ))
		self.eq(None if (gs.head is None) else gs.head.elt, "foo", _hx_c._hx_AnonObject(fileName = "GenericStack.unit.hx" ,lineNumber = 20 ,className = "unit.TestSpecification" ,methodName = "testGenericStack_unit_hx" ))
		def _hx_local_16():
			k4 = gs.head
			def _hx_local_19():
				def _hx_local_18():
					def _hx_local_17():
						gs.head = k4.next
						return k4.elt
					
					return None if k4 is None else _hx_local_17()
				
				return _hx_local_18()
			
			return _hx_local_19()
		
		self.eq(_hx_local_16(), "foo", _hx_c._hx_AnonObject(fileName = "GenericStack.unit.hx" ,lineNumber = 21 ,className = "unit.TestSpecification" ,methodName = "testGenericStack_unit_hx" ))
		gs.head = _hx_c.haxe_ds_GenericCell(None, gs.head)
		gs.head = _hx_c.haxe_ds_GenericCell(None, gs.head)
		self.f(gs.head is None, _hx_c._hx_AnonObject(fileName = "GenericStack.unit.hx" ,lineNumber = 24 ,className = "unit.TestSpecification" ,methodName = "testGenericStack_unit_hx" ))
		self.eq(None if (gs.head is None) else gs.head.elt, None, _hx_c._hx_AnonObject(fileName = "GenericStack.unit.hx" ,lineNumber = 25 ,className = "unit.TestSpecification" ,methodName = "testGenericStack_unit_hx" ))
		def _hx_local_20():
			k5 = gs.head
			def _hx_local_23():
				def _hx_local_22():
					def _hx_local_21():
						gs.head = k5.next
						return k5.elt
					
					return None if k5 is None else _hx_local_21()
				
				return _hx_local_22()
			
			return _hx_local_23()
		
		self.eq(_hx_local_20(), None, _hx_c._hx_AnonObject(fileName = "GenericStack.unit.hx" ,lineNumber = 26 ,className = "unit.TestSpecification" ,methodName = "testGenericStack_unit_hx" ))
		self.t(gs.remove(None), _hx_c._hx_AnonObject(fileName = "GenericStack.unit.hx" ,lineNumber = 27 ,className = "unit.TestSpecification" ,methodName = "testGenericStack_unit_hx" ))
		self.t(gs.head is None, _hx_c._hx_AnonObject(fileName = "GenericStack.unit.hx" ,lineNumber = 28 ,className = "unit.TestSpecification" ,methodName = "testGenericStack_unit_hx" ))
		self.eq(None if (gs.head is None) else gs.head.elt, None, _hx_c._hx_AnonObject(fileName = "GenericStack.unit.hx" ,lineNumber = 29 ,className = "unit.TestSpecification" ,methodName = "testGenericStack_unit_hx" ))
		def _hx_local_24():
			k6 = gs.head
			def _hx_local_27():
				def _hx_local_26():
					def _hx_local_25():
						gs.head = k6.next
						return k6.elt
					
					return None if k6 is None else _hx_local_25()
				
				return _hx_local_26()
			
			return _hx_local_27()
		
		self.eq(_hx_local_24(), None, _hx_c._hx_AnonObject(fileName = "GenericStack.unit.hx" ,lineNumber = 30 ,className = "unit.TestSpecification" ,methodName = "testGenericStack_unit_hx" ))
	

	def testPath_unit_hx(self):
		path = "/dir1/dir2/file.ext"
		path2 = "/dir1/dir.with.dots\\file"
		path3 = ".htaccess"
		path4 = "/dir/"
		p1 = _hx_c.haxe_io_Path(path)
		p2 = _hx_c.haxe_io_Path(path2)
		p3 = _hx_c.haxe_io_Path(path3)
		p4 = _hx_c.haxe_io_Path(path4)
		self.eq(p1.ext, "ext", _hx_c._hx_AnonObject(fileName = "Path.unit.hx" ,lineNumber = 11 ,className = "unit.TestSpecification" ,methodName = "testPath_unit_hx" ))
		self.eq(p1.dir, "/dir1/dir2", _hx_c._hx_AnonObject(fileName = "Path.unit.hx" ,lineNumber = 12 ,className = "unit.TestSpecification" ,methodName = "testPath_unit_hx" ))
		self.eq(p1.file, "file", _hx_c._hx_AnonObject(fileName = "Path.unit.hx" ,lineNumber = 13 ,className = "unit.TestSpecification" ,methodName = "testPath_unit_hx" ))
		self.eq(p2.ext, None, _hx_c._hx_AnonObject(fileName = "Path.unit.hx" ,lineNumber = 15 ,className = "unit.TestSpecification" ,methodName = "testPath_unit_hx" ))
		self.eq(p2.dir, "/dir1/dir.with.dots", _hx_c._hx_AnonObject(fileName = "Path.unit.hx" ,lineNumber = 16 ,className = "unit.TestSpecification" ,methodName = "testPath_unit_hx" ))
		self.eq(p2.file, "file", _hx_c._hx_AnonObject(fileName = "Path.unit.hx" ,lineNumber = 17 ,className = "unit.TestSpecification" ,methodName = "testPath_unit_hx" ))
		self.eq(p3.ext, "htaccess", _hx_c._hx_AnonObject(fileName = "Path.unit.hx" ,lineNumber = 19 ,className = "unit.TestSpecification" ,methodName = "testPath_unit_hx" ))
		self.eq(p3.dir, None, _hx_c._hx_AnonObject(fileName = "Path.unit.hx" ,lineNumber = 20 ,className = "unit.TestSpecification" ,methodName = "testPath_unit_hx" ))
		self.eq(p3.file, "", _hx_c._hx_AnonObject(fileName = "Path.unit.hx" ,lineNumber = 21 ,className = "unit.TestSpecification" ,methodName = "testPath_unit_hx" ))
		self.eq(p4.ext, None, _hx_c._hx_AnonObject(fileName = "Path.unit.hx" ,lineNumber = 23 ,className = "unit.TestSpecification" ,methodName = "testPath_unit_hx" ))
		self.eq(p4.dir, "/dir", _hx_c._hx_AnonObject(fileName = "Path.unit.hx" ,lineNumber = 24 ,className = "unit.TestSpecification" ,methodName = "testPath_unit_hx" ))
		self.eq(p4.file, "", _hx_c._hx_AnonObject(fileName = "Path.unit.hx" ,lineNumber = 25 ,className = "unit.TestSpecification" ,methodName = "testPath_unit_hx" ))
		self.eq(p1.toString(), path, _hx_c._hx_AnonObject(fileName = "Path.unit.hx" ,lineNumber = 28 ,className = "unit.TestSpecification" ,methodName = "testPath_unit_hx" ))
		self.eq(p2.toString(), path2, _hx_c._hx_AnonObject(fileName = "Path.unit.hx" ,lineNumber = 29 ,className = "unit.TestSpecification" ,methodName = "testPath_unit_hx" ))
		self.eq(p3.toString(), path3, _hx_c._hx_AnonObject(fileName = "Path.unit.hx" ,lineNumber = 30 ,className = "unit.TestSpecification" ,methodName = "testPath_unit_hx" ))
		self.eq(p4.toString(), path4, _hx_c._hx_AnonObject(fileName = "Path.unit.hx" ,lineNumber = 31 ,className = "unit.TestSpecification" ,methodName = "testPath_unit_hx" ))
		self.eq(_hx_c.haxe_io_Path.withoutExtension(path), "/dir1/dir2/file", _hx_c._hx_AnonObject(fileName = "Path.unit.hx" ,lineNumber = 34 ,className = "unit.TestSpecification" ,methodName = "testPath_unit_hx" ))
		self.eq(_hx_c.haxe_io_Path.withoutExtension(path2), path2, _hx_c._hx_AnonObject(fileName = "Path.unit.hx" ,lineNumber = 35 ,className = "unit.TestSpecification" ,methodName = "testPath_unit_hx" ))
		self.eq(_hx_c.haxe_io_Path.withoutExtension(path3), "", _hx_c._hx_AnonObject(fileName = "Path.unit.hx" ,lineNumber = 36 ,className = "unit.TestSpecification" ,methodName = "testPath_unit_hx" ))
		self.eq(_hx_c.haxe_io_Path.withoutExtension(path4), "/dir/", _hx_c._hx_AnonObject(fileName = "Path.unit.hx" ,lineNumber = 37 ,className = "unit.TestSpecification" ,methodName = "testPath_unit_hx" ))
		self.eq(_hx_c.haxe_io_Path.withoutDirectory(path), "file.ext", _hx_c._hx_AnonObject(fileName = "Path.unit.hx" ,lineNumber = 40 ,className = "unit.TestSpecification" ,methodName = "testPath_unit_hx" ))
		self.eq(_hx_c.haxe_io_Path.withoutDirectory(path2), "file", _hx_c._hx_AnonObject(fileName = "Path.unit.hx" ,lineNumber = 41 ,className = "unit.TestSpecification" ,methodName = "testPath_unit_hx" ))
		self.eq(_hx_c.haxe_io_Path.withoutDirectory(path3), ".htaccess", _hx_c._hx_AnonObject(fileName = "Path.unit.hx" ,lineNumber = 42 ,className = "unit.TestSpecification" ,methodName = "testPath_unit_hx" ))
		self.eq(_hx_c.haxe_io_Path.withoutDirectory(path4), "", _hx_c._hx_AnonObject(fileName = "Path.unit.hx" ,lineNumber = 43 ,className = "unit.TestSpecification" ,methodName = "testPath_unit_hx" ))
		self.eq(_hx_c.haxe_io_Path.directory(path), "/dir1/dir2", _hx_c._hx_AnonObject(fileName = "Path.unit.hx" ,lineNumber = 46 ,className = "unit.TestSpecification" ,methodName = "testPath_unit_hx" ))
		self.eq(_hx_c.haxe_io_Path.directory(path2), "/dir1/dir.with.dots", _hx_c._hx_AnonObject(fileName = "Path.unit.hx" ,lineNumber = 47 ,className = "unit.TestSpecification" ,methodName = "testPath_unit_hx" ))
		self.eq(_hx_c.haxe_io_Path.directory(path3), "", _hx_c._hx_AnonObject(fileName = "Path.unit.hx" ,lineNumber = 48 ,className = "unit.TestSpecification" ,methodName = "testPath_unit_hx" ))
		self.eq(_hx_c.haxe_io_Path.directory(path4), "/dir", _hx_c._hx_AnonObject(fileName = "Path.unit.hx" ,lineNumber = 49 ,className = "unit.TestSpecification" ,methodName = "testPath_unit_hx" ))
		self.eq(_hx_c.haxe_io_Path.extension(path), "ext", _hx_c._hx_AnonObject(fileName = "Path.unit.hx" ,lineNumber = 52 ,className = "unit.TestSpecification" ,methodName = "testPath_unit_hx" ))
		self.eq(_hx_c.haxe_io_Path.extension(path2), "", _hx_c._hx_AnonObject(fileName = "Path.unit.hx" ,lineNumber = 53 ,className = "unit.TestSpecification" ,methodName = "testPath_unit_hx" ))
		self.eq(_hx_c.haxe_io_Path.extension(path3), "htaccess", _hx_c._hx_AnonObject(fileName = "Path.unit.hx" ,lineNumber = 54 ,className = "unit.TestSpecification" ,methodName = "testPath_unit_hx" ))
		self.eq(_hx_c.haxe_io_Path.extension(path4), "", _hx_c._hx_AnonObject(fileName = "Path.unit.hx" ,lineNumber = 55 ,className = "unit.TestSpecification" ,methodName = "testPath_unit_hx" ))
		self.eq(_hx_c.haxe_io_Path.withExtension(path, "foo"), "/dir1/dir2/file.foo", _hx_c._hx_AnonObject(fileName = "Path.unit.hx" ,lineNumber = 58 ,className = "unit.TestSpecification" ,methodName = "testPath_unit_hx" ))
		self.eq(_hx_c.haxe_io_Path.withExtension(path2, "foo"), "/dir1/dir.with.dots\\file.foo", _hx_c._hx_AnonObject(fileName = "Path.unit.hx" ,lineNumber = 59 ,className = "unit.TestSpecification" ,methodName = "testPath_unit_hx" ))
		self.eq(_hx_c.haxe_io_Path.withExtension(path3, "foo"), ".foo", _hx_c._hx_AnonObject(fileName = "Path.unit.hx" ,lineNumber = 60 ,className = "unit.TestSpecification" ,methodName = "testPath_unit_hx" ))
		self.eq(_hx_c.haxe_io_Path.withExtension(path4, "foo"), "/dir/.foo", _hx_c._hx_AnonObject(fileName = "Path.unit.hx" ,lineNumber = 61 ,className = "unit.TestSpecification" ,methodName = "testPath_unit_hx" ))
		self.eq(_hx_c.haxe_io_Path.addTrailingSlash(""), "/", _hx_c._hx_AnonObject(fileName = "Path.unit.hx" ,lineNumber = 64 ,className = "unit.TestSpecification" ,methodName = "testPath_unit_hx" ))
		self.eq(_hx_c.haxe_io_Path.addTrailingSlash("a"), "a/", _hx_c._hx_AnonObject(fileName = "Path.unit.hx" ,lineNumber = 65 ,className = "unit.TestSpecification" ,methodName = "testPath_unit_hx" ))
		self.eq(_hx_c.haxe_io_Path.addTrailingSlash("a/"), "a/", _hx_c._hx_AnonObject(fileName = "Path.unit.hx" ,lineNumber = 66 ,className = "unit.TestSpecification" ,methodName = "testPath_unit_hx" ))
		self.eq(_hx_c.haxe_io_Path.addTrailingSlash("a/b"), "a/b/", _hx_c._hx_AnonObject(fileName = "Path.unit.hx" ,lineNumber = 67 ,className = "unit.TestSpecification" ,methodName = "testPath_unit_hx" ))
		self.eq(_hx_c.haxe_io_Path.addTrailingSlash("a/b/"), "a/b/", _hx_c._hx_AnonObject(fileName = "Path.unit.hx" ,lineNumber = 68 ,className = "unit.TestSpecification" ,methodName = "testPath_unit_hx" ))
		self.eq(_hx_c.haxe_io_Path.addTrailingSlash("a\\"), "a\\", _hx_c._hx_AnonObject(fileName = "Path.unit.hx" ,lineNumber = 69 ,className = "unit.TestSpecification" ,methodName = "testPath_unit_hx" ))
		self.eq(_hx_c.haxe_io_Path.addTrailingSlash("a\\b"), "a\\b\\", _hx_c._hx_AnonObject(fileName = "Path.unit.hx" ,lineNumber = 70 ,className = "unit.TestSpecification" ,methodName = "testPath_unit_hx" ))
		self.eq(_hx_c.haxe_io_Path.addTrailingSlash("a\\b\\"), "a\\b\\", _hx_c._hx_AnonObject(fileName = "Path.unit.hx" ,lineNumber = 71 ,className = "unit.TestSpecification" ,methodName = "testPath_unit_hx" ))
	

	def testUtf8_unit_hx(self):
		None

	def testEReg_unit_hx(self):
		r = _hx_c.EReg("a", "")
		rg = _hx_c.EReg("a", "g")
		rg2 = _hx_c.EReg("aa", "g")
		self.f(r.match(""), _hx_c._hx_AnonObject(fileName = "EReg.unit.hx" ,lineNumber = 5 ,className = "unit.TestSpecification" ,methodName = "testEReg_unit_hx" ))
		self.f(r.match("b"), _hx_c._hx_AnonObject(fileName = "EReg.unit.hx" ,lineNumber = 6 ,className = "unit.TestSpecification" ,methodName = "testEReg_unit_hx" ))
		self.t(r.match("a"), _hx_c._hx_AnonObject(fileName = "EReg.unit.hx" ,lineNumber = 7 ,className = "unit.TestSpecification" ,methodName = "testEReg_unit_hx" ))
		self.eq(r.matched(0), "a", _hx_c._hx_AnonObject(fileName = "EReg.unit.hx" ,lineNumber = 8 ,className = "unit.TestSpecification" ,methodName = "testEReg_unit_hx" ))
		self.eq(r.matchedLeft(), "", _hx_c._hx_AnonObject(fileName = "EReg.unit.hx" ,lineNumber = 9 ,className = "unit.TestSpecification" ,methodName = "testEReg_unit_hx" ))
		self.eq(r.matchedRight(), "", _hx_c._hx_AnonObject(fileName = "EReg.unit.hx" ,lineNumber = 10 ,className = "unit.TestSpecification" ,methodName = "testEReg_unit_hx" ))
		pos = r.matchedPos()
		self.eq(pos.pos, 0, _hx_c._hx_AnonObject(fileName = "EReg.unit.hx" ,lineNumber = 12 ,className = "unit.TestSpecification" ,methodName = "testEReg_unit_hx" ))
		self.eq(pos.len, 1, _hx_c._hx_AnonObject(fileName = "EReg.unit.hx" ,lineNumber = 13 ,className = "unit.TestSpecification" ,methodName = "testEReg_unit_hx" ))
		self.t(r.match("aa"), _hx_c._hx_AnonObject(fileName = "EReg.unit.hx" ,lineNumber = 15 ,className = "unit.TestSpecification" ,methodName = "testEReg_unit_hx" ))
		self.eq(r.matched(0), "a", _hx_c._hx_AnonObject(fileName = "EReg.unit.hx" ,lineNumber = 16 ,className = "unit.TestSpecification" ,methodName = "testEReg_unit_hx" ))
		self.eq(r.matchedLeft(), "", _hx_c._hx_AnonObject(fileName = "EReg.unit.hx" ,lineNumber = 17 ,className = "unit.TestSpecification" ,methodName = "testEReg_unit_hx" ))
		self.eq(r.matchedRight(), "a", _hx_c._hx_AnonObject(fileName = "EReg.unit.hx" ,lineNumber = 18 ,className = "unit.TestSpecification" ,methodName = "testEReg_unit_hx" ))
		pos1 = r.matchedPos()
		self.eq(pos1.pos, 0, _hx_c._hx_AnonObject(fileName = "EReg.unit.hx" ,lineNumber = 20 ,className = "unit.TestSpecification" ,methodName = "testEReg_unit_hx" ))
		self.eq(pos1.len, 1, _hx_c._hx_AnonObject(fileName = "EReg.unit.hx" ,lineNumber = 21 ,className = "unit.TestSpecification" ,methodName = "testEReg_unit_hx" ))
		self.t(rg.match("aa"), _hx_c._hx_AnonObject(fileName = "EReg.unit.hx" ,lineNumber = 23 ,className = "unit.TestSpecification" ,methodName = "testEReg_unit_hx" ))
		self.eq(rg.matched(0), "a", _hx_c._hx_AnonObject(fileName = "EReg.unit.hx" ,lineNumber = 24 ,className = "unit.TestSpecification" ,methodName = "testEReg_unit_hx" ))
		self.eq(rg.matchedLeft(), "", _hx_c._hx_AnonObject(fileName = "EReg.unit.hx" ,lineNumber = 25 ,className = "unit.TestSpecification" ,methodName = "testEReg_unit_hx" ))
		self.eq(rg.matchedRight(), "a", _hx_c._hx_AnonObject(fileName = "EReg.unit.hx" ,lineNumber = 26 ,className = "unit.TestSpecification" ,methodName = "testEReg_unit_hx" ))
		pos2 = rg.matchedPos()
		self.eq(pos2.pos, 0, _hx_c._hx_AnonObject(fileName = "EReg.unit.hx" ,lineNumber = 28 ,className = "unit.TestSpecification" ,methodName = "testEReg_unit_hx" ))
		self.eq(pos2.len, 1, _hx_c._hx_AnonObject(fileName = "EReg.unit.hx" ,lineNumber = 29 ,className = "unit.TestSpecification" ,methodName = "testEReg_unit_hx" ))
		self.t(rg2.match("aa"), _hx_c._hx_AnonObject(fileName = "EReg.unit.hx" ,lineNumber = 31 ,className = "unit.TestSpecification" ,methodName = "testEReg_unit_hx" ))
		self.eq(rg2.matched(0), "aa", _hx_c._hx_AnonObject(fileName = "EReg.unit.hx" ,lineNumber = 32 ,className = "unit.TestSpecification" ,methodName = "testEReg_unit_hx" ))
		self.eq(rg2.matchedLeft(), "", _hx_c._hx_AnonObject(fileName = "EReg.unit.hx" ,lineNumber = 33 ,className = "unit.TestSpecification" ,methodName = "testEReg_unit_hx" ))
		self.eq(rg2.matchedRight(), "", _hx_c._hx_AnonObject(fileName = "EReg.unit.hx" ,lineNumber = 34 ,className = "unit.TestSpecification" ,methodName = "testEReg_unit_hx" ))
		pos3 = rg2.matchedPos()
		self.eq(pos3.pos, 0, _hx_c._hx_AnonObject(fileName = "EReg.unit.hx" ,lineNumber = 36 ,className = "unit.TestSpecification" ,methodName = "testEReg_unit_hx" ))
		self.eq(pos3.len, 2, _hx_c._hx_AnonObject(fileName = "EReg.unit.hx" ,lineNumber = 37 ,className = "unit.TestSpecification" ,methodName = "testEReg_unit_hx" ))
		self.t(rg2.match("AaaBaaC"), _hx_c._hx_AnonObject(fileName = "EReg.unit.hx" ,lineNumber = 39 ,className = "unit.TestSpecification" ,methodName = "testEReg_unit_hx" ))
		self.eq(rg2.matched(0), "aa", _hx_c._hx_AnonObject(fileName = "EReg.unit.hx" ,lineNumber = 40 ,className = "unit.TestSpecification" ,methodName = "testEReg_unit_hx" ))
		self.eq(rg2.matchedLeft(), "A", _hx_c._hx_AnonObject(fileName = "EReg.unit.hx" ,lineNumber = 41 ,className = "unit.TestSpecification" ,methodName = "testEReg_unit_hx" ))
		self.eq(rg2.matchedRight(), "BaaC", _hx_c._hx_AnonObject(fileName = "EReg.unit.hx" ,lineNumber = 42 ,className = "unit.TestSpecification" ,methodName = "testEReg_unit_hx" ))
		pos4 = rg2.matchedPos()
		self.eq(pos4.pos, 1, _hx_c._hx_AnonObject(fileName = "EReg.unit.hx" ,lineNumber = 44 ,className = "unit.TestSpecification" ,methodName = "testEReg_unit_hx" ))
		self.eq(pos4.len, 2, _hx_c._hx_AnonObject(fileName = "EReg.unit.hx" ,lineNumber = 45 ,className = "unit.TestSpecification" ,methodName = "testEReg_unit_hx" ))
		self.eq(_hx_array_get(_hx_c.EReg("a", "").split(""),0), "", _hx_c._hx_AnonObject(fileName = "EReg.unit.hx" ,lineNumber = 48 ,className = "unit.TestSpecification" ,methodName = "testEReg_unit_hx" ))
		self.eq(_hx_array_get(_hx_c.EReg("a", "").split("a"),0), "", _hx_c._hx_AnonObject(fileName = "EReg.unit.hx" ,lineNumber = 49 ,className = "unit.TestSpecification" ,methodName = "testEReg_unit_hx" ))
		self.eq(_hx_array_get(_hx_c.EReg("a", "").split("a"),1), "", _hx_c._hx_AnonObject(fileName = "EReg.unit.hx" ,lineNumber = 49 ,className = "unit.TestSpecification" ,methodName = "testEReg_unit_hx" ))
		
		self.eq(_hx_array_get(_hx_c.EReg("a", "").split("aa"),0), "", _hx_c._hx_AnonObject(fileName = "EReg.unit.hx" ,lineNumber = 50 ,className = "unit.TestSpecification" ,methodName = "testEReg_unit_hx" ))
		self.eq(_hx_array_get(_hx_c.EReg("a", "").split("aa"),1), "a", _hx_c._hx_AnonObject(fileName = "EReg.unit.hx" ,lineNumber = 50 ,className = "unit.TestSpecification" ,methodName = "testEReg_unit_hx" ))
		
		self.eq(_hx_array_get(_hx_c.EReg("a", "").split("b"),0), "b", _hx_c._hx_AnonObject(fileName = "EReg.unit.hx" ,lineNumber = 51 ,className = "unit.TestSpecification" ,methodName = "testEReg_unit_hx" ))
		self.eq(_hx_array_get(_hx_c.EReg("a", "").split("ab"),0), "", _hx_c._hx_AnonObject(fileName = "EReg.unit.hx" ,lineNumber = 52 ,className = "unit.TestSpecification" ,methodName = "testEReg_unit_hx" ))
		self.eq(_hx_array_get(_hx_c.EReg("a", "").split("ab"),1), "b", _hx_c._hx_AnonObject(fileName = "EReg.unit.hx" ,lineNumber = 52 ,className = "unit.TestSpecification" ,methodName = "testEReg_unit_hx" ))
		
		self.eq(_hx_array_get(_hx_c.EReg("a", "").split("ba"),0), "b", _hx_c._hx_AnonObject(fileName = "EReg.unit.hx" ,lineNumber = 53 ,className = "unit.TestSpecification" ,methodName = "testEReg_unit_hx" ))
		self.eq(_hx_array_get(_hx_c.EReg("a", "").split("ba"),1), "", _hx_c._hx_AnonObject(fileName = "EReg.unit.hx" ,lineNumber = 53 ,className = "unit.TestSpecification" ,methodName = "testEReg_unit_hx" ))
		
		self.eq(_hx_array_get(_hx_c.EReg("a", "").split("aba"),0), "", _hx_c._hx_AnonObject(fileName = "EReg.unit.hx" ,lineNumber = 54 ,className = "unit.TestSpecification" ,methodName = "testEReg_unit_hx" ))
		self.eq(_hx_array_get(_hx_c.EReg("a", "").split("aba"),1), "ba", _hx_c._hx_AnonObject(fileName = "EReg.unit.hx" ,lineNumber = 54 ,className = "unit.TestSpecification" ,methodName = "testEReg_unit_hx" ))
		
		self.eq(_hx_array_get(_hx_c.EReg("a", "").split("bab"),0), "b", _hx_c._hx_AnonObject(fileName = "EReg.unit.hx" ,lineNumber = 55 ,className = "unit.TestSpecification" ,methodName = "testEReg_unit_hx" ))
		self.eq(_hx_array_get(_hx_c.EReg("a", "").split("bab"),1), "b", _hx_c._hx_AnonObject(fileName = "EReg.unit.hx" ,lineNumber = 55 ,className = "unit.TestSpecification" ,methodName = "testEReg_unit_hx" ))
		
		self.eq(_hx_array_get(_hx_c.EReg("a", "").split("baba"),0), "b", _hx_c._hx_AnonObject(fileName = "EReg.unit.hx" ,lineNumber = 56 ,className = "unit.TestSpecification" ,methodName = "testEReg_unit_hx" ))
		self.eq(_hx_array_get(_hx_c.EReg("a", "").split("baba"),1), "ba", _hx_c._hx_AnonObject(fileName = "EReg.unit.hx" ,lineNumber = 56 ,className = "unit.TestSpecification" ,methodName = "testEReg_unit_hx" ))
		
		self.eq(_hx_array_get(_hx_c.EReg("a", "g").split(""),0), "", _hx_c._hx_AnonObject(fileName = "EReg.unit.hx" ,lineNumber = 59 ,className = "unit.TestSpecification" ,methodName = "testEReg_unit_hx" ))
		self.eq(_hx_array_get(_hx_c.EReg("a", "g").split("a"),0), "", _hx_c._hx_AnonObject(fileName = "EReg.unit.hx" ,lineNumber = 60 ,className = "unit.TestSpecification" ,methodName = "testEReg_unit_hx" ))
		self.eq(_hx_array_get(_hx_c.EReg("a", "g").split("a"),1), "", _hx_c._hx_AnonObject(fileName = "EReg.unit.hx" ,lineNumber = 60 ,className = "unit.TestSpecification" ,methodName = "testEReg_unit_hx" ))
		
		self.eq(_hx_array_get(_hx_c.EReg("a", "g").split("aa"),0), "", _hx_c._hx_AnonObject(fileName = "EReg.unit.hx" ,lineNumber = 61 ,className = "unit.TestSpecification" ,methodName = "testEReg_unit_hx" ))
		self.eq(_hx_array_get(_hx_c.EReg("a", "g").split("aa"),1), "", _hx_c._hx_AnonObject(fileName = "EReg.unit.hx" ,lineNumber = 61 ,className = "unit.TestSpecification" ,methodName = "testEReg_unit_hx" ))
		self.eq(_hx_array_get(_hx_c.EReg("a", "g").split("aa"),2), "", _hx_c._hx_AnonObject(fileName = "EReg.unit.hx" ,lineNumber = 61 ,className = "unit.TestSpecification" ,methodName = "testEReg_unit_hx" ))
		
		self.eq(_hx_array_get(_hx_c.EReg("a", "g").split("b"),0), "b", _hx_c._hx_AnonObject(fileName = "EReg.unit.hx" ,lineNumber = 62 ,className = "unit.TestSpecification" ,methodName = "testEReg_unit_hx" ))
		self.eq(_hx_array_get(_hx_c.EReg("a", "g").split("ab"),0), "", _hx_c._hx_AnonObject(fileName = "EReg.unit.hx" ,lineNumber = 63 ,className = "unit.TestSpecification" ,methodName = "testEReg_unit_hx" ))
		self.eq(_hx_array_get(_hx_c.EReg("a", "g").split("ab"),1), "b", _hx_c._hx_AnonObject(fileName = "EReg.unit.hx" ,lineNumber = 63 ,className = "unit.TestSpecification" ,methodName = "testEReg_unit_hx" ))
		
		self.eq(_hx_array_get(_hx_c.EReg("a", "g").split("ba"),0), "b", _hx_c._hx_AnonObject(fileName = "EReg.unit.hx" ,lineNumber = 64 ,className = "unit.TestSpecification" ,methodName = "testEReg_unit_hx" ))
		self.eq(_hx_array_get(_hx_c.EReg("a", "g").split("ba"),1), "", _hx_c._hx_AnonObject(fileName = "EReg.unit.hx" ,lineNumber = 64 ,className = "unit.TestSpecification" ,methodName = "testEReg_unit_hx" ))
		
		self.eq(_hx_array_get(_hx_c.EReg("a", "g").split("aba"),0), "", _hx_c._hx_AnonObject(fileName = "EReg.unit.hx" ,lineNumber = 65 ,className = "unit.TestSpecification" ,methodName = "testEReg_unit_hx" ))
		self.eq(_hx_array_get(_hx_c.EReg("a", "g").split("aba"),1), "b", _hx_c._hx_AnonObject(fileName = "EReg.unit.hx" ,lineNumber = 65 ,className = "unit.TestSpecification" ,methodName = "testEReg_unit_hx" ))
		self.eq(_hx_array_get(_hx_c.EReg("a", "g").split("aba"),2), "", _hx_c._hx_AnonObject(fileName = "EReg.unit.hx" ,lineNumber = 65 ,className = "unit.TestSpecification" ,methodName = "testEReg_unit_hx" ))
		
		self.eq(_hx_array_get(_hx_c.EReg("a", "g").split("bab"),0), "b", _hx_c._hx_AnonObject(fileName = "EReg.unit.hx" ,lineNumber = 66 ,className = "unit.TestSpecification" ,methodName = "testEReg_unit_hx" ))
		self.eq(_hx_array_get(_hx_c.EReg("a", "g").split("bab"),1), "b", _hx_c._hx_AnonObject(fileName = "EReg.unit.hx" ,lineNumber = 66 ,className = "unit.TestSpecification" ,methodName = "testEReg_unit_hx" ))
		
		self.eq(_hx_array_get(_hx_c.EReg("a", "g").split("baba"),0), "b", _hx_c._hx_AnonObject(fileName = "EReg.unit.hx" ,lineNumber = 67 ,className = "unit.TestSpecification" ,methodName = "testEReg_unit_hx" ))
		self.eq(_hx_array_get(_hx_c.EReg("a", "g").split("baba"),1), "b", _hx_c._hx_AnonObject(fileName = "EReg.unit.hx" ,lineNumber = 67 ,className = "unit.TestSpecification" ,methodName = "testEReg_unit_hx" ))
		self.eq(_hx_array_get(_hx_c.EReg("a", "g").split("baba"),2), "", _hx_c._hx_AnonObject(fileName = "EReg.unit.hx" ,lineNumber = 67 ,className = "unit.TestSpecification" ,methodName = "testEReg_unit_hx" ))
		
		self.eq(_hx_c.EReg("a", "").replace("", "z"), "", _hx_c._hx_AnonObject(fileName = "EReg.unit.hx" ,lineNumber = 70 ,className = "unit.TestSpecification" ,methodName = "testEReg_unit_hx" ))
		self.eq(_hx_c.EReg("a", "").replace("a", "z"), "z", _hx_c._hx_AnonObject(fileName = "EReg.unit.hx" ,lineNumber = 71 ,className = "unit.TestSpecification" ,methodName = "testEReg_unit_hx" ))
		self.eq(_hx_c.EReg("a", "").replace("aa", "z"), "za", _hx_c._hx_AnonObject(fileName = "EReg.unit.hx" ,lineNumber = 72 ,className = "unit.TestSpecification" ,methodName = "testEReg_unit_hx" ))
		self.eq(_hx_c.EReg("a", "").replace("b", "z"), "b", _hx_c._hx_AnonObject(fileName = "EReg.unit.hx" ,lineNumber = 73 ,className = "unit.TestSpecification" ,methodName = "testEReg_unit_hx" ))
		self.eq(_hx_c.EReg("a", "").replace("ab", "z"), "zb", _hx_c._hx_AnonObject(fileName = "EReg.unit.hx" ,lineNumber = 74 ,className = "unit.TestSpecification" ,methodName = "testEReg_unit_hx" ))
		self.eq(_hx_c.EReg("a", "").replace("ba", "z"), "bz", _hx_c._hx_AnonObject(fileName = "EReg.unit.hx" ,lineNumber = 75 ,className = "unit.TestSpecification" ,methodName = "testEReg_unit_hx" ))
		self.eq(_hx_c.EReg("a", "").replace("aba", "z"), "zba", _hx_c._hx_AnonObject(fileName = "EReg.unit.hx" ,lineNumber = 76 ,className = "unit.TestSpecification" ,methodName = "testEReg_unit_hx" ))
		self.eq(_hx_c.EReg("a", "").replace("bab", "z"), "bzb", _hx_c._hx_AnonObject(fileName = "EReg.unit.hx" ,lineNumber = 77 ,className = "unit.TestSpecification" ,methodName = "testEReg_unit_hx" ))
		self.eq(_hx_c.EReg("a", "").replace("baba", "z"), "bzba", _hx_c._hx_AnonObject(fileName = "EReg.unit.hx" ,lineNumber = 78 ,className = "unit.TestSpecification" ,methodName = "testEReg_unit_hx" ))
		self.eq(_hx_c.EReg("a", "g").replace("", "z"), "", _hx_c._hx_AnonObject(fileName = "EReg.unit.hx" ,lineNumber = 81 ,className = "unit.TestSpecification" ,methodName = "testEReg_unit_hx" ))
		self.eq(_hx_c.EReg("a", "g").replace("a", "z"), "z", _hx_c._hx_AnonObject(fileName = "EReg.unit.hx" ,lineNumber = 82 ,className = "unit.TestSpecification" ,methodName = "testEReg_unit_hx" ))
		self.eq(_hx_c.EReg("a", "g").replace("aa", "z"), "zz", _hx_c._hx_AnonObject(fileName = "EReg.unit.hx" ,lineNumber = 83 ,className = "unit.TestSpecification" ,methodName = "testEReg_unit_hx" ))
		self.eq(_hx_c.EReg("a", "g").replace("b", "z"), "b", _hx_c._hx_AnonObject(fileName = "EReg.unit.hx" ,lineNumber = 84 ,className = "unit.TestSpecification" ,methodName = "testEReg_unit_hx" ))
		self.eq(_hx_c.EReg("a", "g").replace("ab", "z"), "zb", _hx_c._hx_AnonObject(fileName = "EReg.unit.hx" ,lineNumber = 85 ,className = "unit.TestSpecification" ,methodName = "testEReg_unit_hx" ))
		self.eq(_hx_c.EReg("a", "g").replace("ba", "z"), "bz", _hx_c._hx_AnonObject(fileName = "EReg.unit.hx" ,lineNumber = 86 ,className = "unit.TestSpecification" ,methodName = "testEReg_unit_hx" ))
		self.eq(_hx_c.EReg("a", "g").replace("aba", "z"), "zbz", _hx_c._hx_AnonObject(fileName = "EReg.unit.hx" ,lineNumber = 87 ,className = "unit.TestSpecification" ,methodName = "testEReg_unit_hx" ))
		self.eq(_hx_c.EReg("a", "g").replace("bab", "z"), "bzb", _hx_c._hx_AnonObject(fileName = "EReg.unit.hx" ,lineNumber = 88 ,className = "unit.TestSpecification" ,methodName = "testEReg_unit_hx" ))
		self.eq(_hx_c.EReg("a", "g").replace("baba", "z"), "bzbz", _hx_c._hx_AnonObject(fileName = "EReg.unit.hx" ,lineNumber = 89 ,className = "unit.TestSpecification" ,methodName = "testEReg_unit_hx" ))
		self.eq(_hx_c.EReg("href=\"(.*?)\"", "").replace("lead href=\"foo\" trail", "$1"), "lead foo trail", _hx_c._hx_AnonObject(fileName = "EReg.unit.hx" ,lineNumber = 92 ,className = "unit.TestSpecification" ,methodName = "testEReg_unit_hx" ))
		self.eq(_hx_c.EReg("href=\"(.*?)\"", "").replace("href=\"foo\"", "$1"), "foo", _hx_c._hx_AnonObject(fileName = "EReg.unit.hx" ,lineNumber = 94 ,className = "unit.TestSpecification" ,methodName = "testEReg_unit_hx" ))
		self.eq(_hx_c.EReg("href=\"(.*?)\"", "g").replace("lead href=\"foo\" href=\"bar\" trail", "$1"), "lead foo bar trail", _hx_c._hx_AnonObject(fileName = "EReg.unit.hx" ,lineNumber = 96 ,className = "unit.TestSpecification" ,methodName = "testEReg_unit_hx" ))
		self.eq(_hx_c.EReg("href=\"(.*?)\"", "g").replace("lead href=\"foo\" href=\"bar\" trail", "$$$1$$"), "lead $foo$ $bar$ trail", _hx_c._hx_AnonObject(fileName = "EReg.unit.hx" ,lineNumber = 97 ,className = "unit.TestSpecification" ,methodName = "testEReg_unit_hx" ))
		def _hx_local_0(e):
			return "Hallo"
		self.eq(_hx_c.EReg("(Hello)", "").map("Hello World", _hx_local_0), "Hallo World", _hx_c._hx_AnonObject(fileName = "EReg.unit.hx" ,lineNumber = 101 ,className = "unit.TestSpecification" ,methodName = "testEReg_unit_hx" ))
		def _hx_local_1(e1):
			return "Hallo"
		self.eq(_hx_c.EReg("(Hello)", "").map("Hello", _hx_local_1), "Hallo", _hx_c._hx_AnonObject(fileName = "EReg.unit.hx" ,lineNumber = 102 ,className = "unit.TestSpecification" ,methodName = "testEReg_unit_hx" ))
		def _hx_local_2(e2):
			return "Hallo"
		self.eq(_hx_c.EReg("(World)", "").map("Hello World", _hx_local_2), "Hello Hallo", _hx_c._hx_AnonObject(fileName = "EReg.unit.hx" ,lineNumber = 103 ,className = "unit.TestSpecification" ,methodName = "testEReg_unit_hx" ))
		def _hx_local_3(e3):
			raise _HxException("not called")
		self.eq(_hx_c.EReg("(Hola)", "").map("Hello World", _hx_local_3), "Hello World", _hx_c._hx_AnonObject(fileName = "EReg.unit.hx" ,lineNumber = 104 ,className = "unit.TestSpecification" ,methodName = "testEReg_unit_hx" ))
	

	def testType_unit_hx(self):
		self.eq(_hx_c.Type.getClass("foo"), _hx_c.String, _hx_c._hx_AnonObject(fileName = "Type.unit.hx" ,lineNumber = 2 ,className = "unit.TestSpecification" ,methodName = "testType_unit_hx" ))
		self.eq(_hx_c.Type.getClass(_hx_c.unit_C()), _hx_c.unit_C, _hx_c._hx_AnonObject(fileName = "Type.unit.hx" ,lineNumber = 3 ,className = "unit.TestSpecification" ,methodName = "testType_unit_hx" ))
		self.eq(_hx_c.Type.getClass([]), list, _hx_c._hx_AnonObject(fileName = "Type.unit.hx" ,lineNumber = 7 ,className = "unit.TestSpecification" ,methodName = "testType_unit_hx" ))
		self.eq(_hx_c.Type.getClass(_hx_c.Float), None, _hx_c._hx_AnonObject(fileName = "Type.unit.hx" ,lineNumber = 9 ,className = "unit.TestSpecification" ,methodName = "testType_unit_hx" ))
		self.eq(_hx_c.Type.getClass(None), None, _hx_c._hx_AnonObject(fileName = "Type.unit.hx" ,lineNumber = 10 ,className = "unit.TestSpecification" ,methodName = "testType_unit_hx" ))
		self.eq(_hx_c.Type.getClass(_hx_c.Int), None, _hx_c._hx_AnonObject(fileName = "Type.unit.hx" ,lineNumber = 11 ,className = "unit.TestSpecification" ,methodName = "testType_unit_hx" ))
		self.eq(_hx_c.Type.getClass(_hx_c.Bool), None, _hx_c._hx_AnonObject(fileName = "Type.unit.hx" ,lineNumber = 12 ,className = "unit.TestSpecification" ,methodName = "testType_unit_hx" ))
		self.eq(_hx_c.Type.getClass(_hx_c._hx_AnonObject()), None, _hx_c._hx_AnonObject(fileName = "Type.unit.hx" ,lineNumber = 14 ,className = "unit.TestSpecification" ,methodName = "testType_unit_hx" ))
		self.eq(_hx_c.Type.getEnum(_hx_c.haxe_macro_ExprDef.EBreak), _hx_c.haxe_macro_ExprDef, _hx_c._hx_AnonObject(fileName = "Type.unit.hx" ,lineNumber = 17 ,className = "unit.TestSpecification" ,methodName = "testType_unit_hx" ))
		self.eq(_hx_c.Type.getEnum(None), None, _hx_c._hx_AnonObject(fileName = "Type.unit.hx" ,lineNumber = 18 ,className = "unit.TestSpecification" ,methodName = "testType_unit_hx" ))
		self.eq(_hx_c.Type.getSuperClass(_hx_c.String), None, _hx_c._hx_AnonObject(fileName = "Type.unit.hx" ,lineNumber = 21 ,className = "unit.TestSpecification" ,methodName = "testType_unit_hx" ))
		self.eq(_hx_c.Type.getSuperClass(_hx_c.unit_TestSpecification_ClassWithToStringChild), _hx_c.unit_TestSpecification_ClassWithToString, _hx_c._hx_AnonObject(fileName = "Type.unit.hx" ,lineNumber = 22 ,className = "unit.TestSpecification" ,methodName = "testType_unit_hx" ))
		self.eq(_hx_c.Type.getClassName(_hx_c.String), "String", _hx_c._hx_AnonObject(fileName = "Type.unit.hx" ,lineNumber = 26 ,className = "unit.TestSpecification" ,methodName = "testType_unit_hx" ))
		self.eq(_hx_c.Type.getClassName(_hx_c.unit_C), "unit.C", _hx_c._hx_AnonObject(fileName = "Type.unit.hx" ,lineNumber = 27 ,className = "unit.TestSpecification" ,methodName = "testType_unit_hx" ))
		self.eq(_hx_c.Type.getClassName(_hx_c.Type.getClass([])), "Array", _hx_c._hx_AnonObject(fileName = "Type.unit.hx" ,lineNumber = 29 ,className = "unit.TestSpecification" ,methodName = "testType_unit_hx" ))
		self.eq(_hx_c.Type.getEnumName(_hx_c.haxe_macro_ExprDef), "haxe.macro.ExprDef", _hx_c._hx_AnonObject(fileName = "Type.unit.hx" ,lineNumber = 33 ,className = "unit.TestSpecification" ,methodName = "testType_unit_hx" ))
		self.eq(_hx_c.Type.resolveClass("String"), _hx_c.String, _hx_c._hx_AnonObject(fileName = "Type.unit.hx" ,lineNumber = 36 ,className = "unit.TestSpecification" ,methodName = "testType_unit_hx" ))
		self.eq(_hx_c.Type.resolveClass("unit.C"), _hx_c.unit_C, _hx_c._hx_AnonObject(fileName = "Type.unit.hx" ,lineNumber = 37 ,className = "unit.TestSpecification" ,methodName = "testType_unit_hx" ))
		self.eq(_hx_c.Type.resolveClass("MyNonExistingClass"), None, _hx_c._hx_AnonObject(fileName = "Type.unit.hx" ,lineNumber = 40 ,className = "unit.TestSpecification" ,methodName = "testType_unit_hx" ))
		self.eq(_hx_c.Type.resolveEnum("haxe.macro.ExprDef"), _hx_c.haxe_macro_ExprDef, _hx_c._hx_AnonObject(fileName = "Type.unit.hx" ,lineNumber = 44 ,className = "unit.TestSpecification" ,methodName = "testType_unit_hx" ))
		self.eq(_hx_c.Type.resolveEnum("String"), None, _hx_c._hx_AnonObject(fileName = "Type.unit.hx" ,lineNumber = 45 ,className = "unit.TestSpecification" ,methodName = "testType_unit_hx" ))
		self.eq(_hx_c.Type.createInstance(_hx_c.String, ["foo"]), "foo", _hx_c._hx_AnonObject(fileName = "Type.unit.hx" ,lineNumber = 48 ,className = "unit.TestSpecification" ,methodName = "testType_unit_hx" ))
		self.eq(_hx_c.Type.createInstance(_hx_c.unit_C, []).v, "var", _hx_c._hx_AnonObject(fileName = "Type.unit.hx" ,lineNumber = 50 ,className = "unit.TestSpecification" ,methodName = "testType_unit_hx" ))
		c = _hx_c.Type.createInstance(_hx_c.unit_TestSpecification_ClassWithCtorDefaultValues, [2, "bar"])
		self.eq(c.a, 2, _hx_c._hx_AnonObject(fileName = "Type.unit.hx" ,lineNumber = 58 ,className = "unit.TestSpecification" ,methodName = "testType_unit_hx" ))
		self.eq(c.b, "bar", _hx_c._hx_AnonObject(fileName = "Type.unit.hx" ,lineNumber = 59 ,className = "unit.TestSpecification" ,methodName = "testType_unit_hx" ))
		c1 = _hx_c.Type.createEmptyInstance(_hx_c.unit_TestSpecification_ClassWithCtorDefaultValues)
		self.eq(c1.a, None, _hx_c._hx_AnonObject(fileName = "Type.unit.hx" ,lineNumber = 68 ,className = "unit.TestSpecification" ,methodName = "testType_unit_hx" ))
		self.eq(c1.b, None, _hx_c._hx_AnonObject(fileName = "Type.unit.hx" ,lineNumber = 69 ,className = "unit.TestSpecification" ,methodName = "testType_unit_hx" ))
		c2 = _hx_c.Type.createEmptyInstance(_hx_c.unit_TestSpecification_ClassWithCtorDefaultValuesChild)
		self.eq(c2.a, None, _hx_c._hx_AnonObject(fileName = "Type.unit.hx" ,lineNumber = 71 ,className = "unit.TestSpecification" ,methodName = "testType_unit_hx" ))
		self.eq(c2.b, None, _hx_c._hx_AnonObject(fileName = "Type.unit.hx" ,lineNumber = 72 ,className = "unit.TestSpecification" ,methodName = "testType_unit_hx" ))
		e = _hx_c.Type.createEnum(_hx_c.unit_TestSpecification_E, "NoArgs")
		self.eq(e, _hx_c.unit_TestSpecification_E.NoArgs, _hx_c._hx_AnonObject(fileName = "Type.unit.hx" ,lineNumber = 76 ,className = "unit.TestSpecification" ,methodName = "testType_unit_hx" ))
		self.eq(_hx_c.Type.createEnum(_hx_c.unit_TestSpecification_E, "NoArgs", []), _hx_c.unit_TestSpecification_E.NoArgs, _hx_c._hx_AnonObject(fileName = "Type.unit.hx" ,lineNumber = 77 ,className = "unit.TestSpecification" ,methodName = "testType_unit_hx" ))
		self.t(_hx_c.Type.enumEq(_hx_c.Type.createEnum(_hx_c.unit_TestSpecification_E, "OneArg", [1]), _hx_c.unit_TestSpecification_E.OneArg(1)), _hx_c._hx_AnonObject(fileName = "Type.unit.hx" ,lineNumber = 78 ,className = "unit.TestSpecification" ,methodName = "testType_unit_hx" ))
		self.t(_hx_c.Type.enumEq(_hx_c.Type.createEnum(_hx_c.unit_TestSpecification_E, "RecArg", [e]), _hx_c.unit_TestSpecification_E.RecArg(e)), _hx_c._hx_AnonObject(fileName = "Type.unit.hx" ,lineNumber = 79 ,className = "unit.TestSpecification" ,methodName = "testType_unit_hx" ))
		self.t(_hx_c.Type.enumEq(_hx_c.Type.createEnum(_hx_c.unit_TestSpecification_E, "MultipleArgs", [1, "foo"]), _hx_c.unit_TestSpecification_E.MultipleArgs(1, "foo")), _hx_c._hx_AnonObject(fileName = "Type.unit.hx" ,lineNumber = 80 ,className = "unit.TestSpecification" ,methodName = "testType_unit_hx" ))
		e1 = _hx_c.Type.createEnumIndex(_hx_c.unit_TestSpecification_E, 0)
		self.eq(e1, _hx_c.unit_TestSpecification_E.NoArgs, _hx_c._hx_AnonObject(fileName = "Type.unit.hx" ,lineNumber = 84 ,className = "unit.TestSpecification" ,methodName = "testType_unit_hx" ))
		self.eq(_hx_c.Type.createEnumIndex(_hx_c.unit_TestSpecification_E, 0, []), _hx_c.unit_TestSpecification_E.NoArgs, _hx_c._hx_AnonObject(fileName = "Type.unit.hx" ,lineNumber = 85 ,className = "unit.TestSpecification" ,methodName = "testType_unit_hx" ))
		self.eq(_hx_c.Type.createEnumIndex(_hx_c.unit_TestSpecification_E, 0, None), _hx_c.unit_TestSpecification_E.NoArgs, _hx_c._hx_AnonObject(fileName = "Type.unit.hx" ,lineNumber = 86 ,className = "unit.TestSpecification" ,methodName = "testType_unit_hx" ))
		self.t(_hx_c.Type.enumEq(_hx_c.Type.createEnumIndex(_hx_c.unit_TestSpecification_E, 1, [1]), _hx_c.unit_TestSpecification_E.OneArg(1)), _hx_c._hx_AnonObject(fileName = "Type.unit.hx" ,lineNumber = 87 ,className = "unit.TestSpecification" ,methodName = "testType_unit_hx" ))
		self.t(_hx_c.Type.enumEq(_hx_c.Type.createEnumIndex(_hx_c.unit_TestSpecification_E, 2, [e1]), _hx_c.unit_TestSpecification_E.RecArg(e1)), _hx_c._hx_AnonObject(fileName = "Type.unit.hx" ,lineNumber = 88 ,className = "unit.TestSpecification" ,methodName = "testType_unit_hx" ))
		self.t(_hx_c.Type.enumEq(_hx_c.Type.createEnumIndex(_hx_c.unit_TestSpecification_E, 3, [1, "foo"]), _hx_c.unit_TestSpecification_E.MultipleArgs(1, "foo")), _hx_c._hx_AnonObject(fileName = "Type.unit.hx" ,lineNumber = 89 ,className = "unit.TestSpecification" ,methodName = "testType_unit_hx" ))
		fields = _hx_c.Type.getInstanceFields(_hx_c.unit_C)
		requiredFields = ["func", "v", "prop"]
		_g = 0
		while _g < _hx_builtin.len(fields):
			f = _hx_array_get(fields,_g)
			_g = _g + 1
			self.t(_hx_c.python_internal_ArrayImpl.remove(requiredFields, f), _hx_c._hx_AnonObject(fileName = "Type.unit.hx" ,lineNumber = 95 ,className = "unit.TestSpecification" ,methodName = "testType_unit_hx" ))
		
		
		self.eq(_hx_builtin.len(requiredFields), 0, _hx_c._hx_AnonObject(fileName = "Type.unit.hx" ,lineNumber = 96 ,className = "unit.TestSpecification" ,methodName = "testType_unit_hx" ))
		fields1 = _hx_c.Type.getInstanceFields(_hx_c.unit_CChild)
		requiredFields1 = ["func", "v", "prop"]
		_g1 = 0
		while _g1 < _hx_builtin.len(fields1):
			f1 = _hx_array_get(fields1,_g1)
			_g1 = _g1 + 1
			self.t(_hx_c.python_internal_ArrayImpl.remove(requiredFields1, f1), _hx_c._hx_AnonObject(fileName = "Type.unit.hx" ,lineNumber = 100 ,className = "unit.TestSpecification" ,methodName = "testType_unit_hx" ))
		
		
		self.eq(_hx_builtin.len(requiredFields1), 0, _hx_c._hx_AnonObject(fileName = "Type.unit.hx" ,lineNumber = 101 ,className = "unit.TestSpecification" ,methodName = "testType_unit_hx" ))
		cdyn = _hx_c.unit_CDyn()
		cdyn.foo = "1"
		field = None
		if _hx_c.python_internal_KeywordHandler.keywords.exists("bar"):
			field = "_hx_" + "bar"
		else:
			field = "bar"
		_hx_builtin.setattr(cdyn, field, 1)
		
		fields2 = _hx_c.Type.getInstanceFields(_hx_c.Type.getClass(cdyn))
		requiredFields2 = ["func", "v", "prop"]
		_g2 = 0
		while _g2 < _hx_builtin.len(fields2):
			f2 = _hx_array_get(fields2,_g2)
			_g2 = _g2 + 1
			self.t(_hx_c.python_internal_ArrayImpl.remove(requiredFields2, f2), _hx_c._hx_AnonObject(fileName = "Type.unit.hx" ,lineNumber = 108 ,className = "unit.TestSpecification" ,methodName = "testType_unit_hx" ))
		
		
		self.eq(_hx_builtin.len(requiredFields2), 0, _hx_c._hx_AnonObject(fileName = "Type.unit.hx" ,lineNumber = 109 ,className = "unit.TestSpecification" ,methodName = "testType_unit_hx" ))
		fields3 = _hx_c.Type.getClassFields(_hx_c.unit_C)
		requiredFields3 = ["staticFunc", "staticVar", "staticProp"]
		_g3 = 0
		while _g3 < _hx_builtin.len(fields3):
			f3 = _hx_array_get(fields3,_g3)
			_g3 = _g3 + 1
			self.t(_hx_c.python_internal_ArrayImpl.remove(requiredFields3, f3), _hx_c._hx_AnonObject(fileName = "Type.unit.hx" ,lineNumber = 113 ,className = "unit.TestSpecification" ,methodName = "testType_unit_hx" ))
		
		
		self.eq(_hx_builtin.len(requiredFields3), 0, _hx_c._hx_AnonObject(fileName = "Type.unit.hx" ,lineNumber = 114 ,className = "unit.TestSpecification" ,methodName = "testType_unit_hx" ))
		fields4 = _hx_c.Type.getClassFields(_hx_c.unit_CChild)
		requiredFields4 = []
		_g4 = 0
		while _g4 < _hx_builtin.len(fields4):
			f4 = _hx_array_get(fields4,_g4)
			_g4 = _g4 + 1
			self.t(_hx_c.python_internal_ArrayImpl.remove(requiredFields4, f4), _hx_c._hx_AnonObject(fileName = "Type.unit.hx" ,lineNumber = 118 ,className = "unit.TestSpecification" ,methodName = "testType_unit_hx" ))
		
		
		self.eq(_hx_builtin.len(requiredFields4), 0, _hx_c._hx_AnonObject(fileName = "Type.unit.hx" ,lineNumber = 119 ,className = "unit.TestSpecification" ,methodName = "testType_unit_hx" ))
		self.eq(_hx_array_get(_hx_c.Type.getEnumConstructs(_hx_c.unit_TestSpecification_E),0), "NoArgs", _hx_c._hx_AnonObject(fileName = "Type.unit.hx" ,lineNumber = 122 ,className = "unit.TestSpecification" ,methodName = "testType_unit_hx" ))
		self.eq(_hx_array_get(_hx_c.Type.getEnumConstructs(_hx_c.unit_TestSpecification_E),1), "OneArg", _hx_c._hx_AnonObject(fileName = "Type.unit.hx" ,lineNumber = 122 ,className = "unit.TestSpecification" ,methodName = "testType_unit_hx" ))
		self.eq(_hx_array_get(_hx_c.Type.getEnumConstructs(_hx_c.unit_TestSpecification_E),2), "RecArg", _hx_c._hx_AnonObject(fileName = "Type.unit.hx" ,lineNumber = 122 ,className = "unit.TestSpecification" ,methodName = "testType_unit_hx" ))
		self.eq(_hx_array_get(_hx_c.Type.getEnumConstructs(_hx_c.unit_TestSpecification_E),3), "MultipleArgs", _hx_c._hx_AnonObject(fileName = "Type.unit.hx" ,lineNumber = 122 ,className = "unit.TestSpecification" ,methodName = "testType_unit_hx" ))
		
		self.t(_hx_c.Type.enumEq(_hx_c.unit_TestSpecification_E.NoArgs, _hx_c.unit_TestSpecification_E.NoArgs), _hx_c._hx_AnonObject(fileName = "Type.unit.hx" ,lineNumber = 128 ,className = "unit.TestSpecification" ,methodName = "testType_unit_hx" ))
		self.t(_hx_c.Type.enumEq(_hx_c.unit_TestSpecification_E.OneArg(1), _hx_c.unit_TestSpecification_E.OneArg(1)), _hx_c._hx_AnonObject(fileName = "Type.unit.hx" ,lineNumber = 129 ,className = "unit.TestSpecification" ,methodName = "testType_unit_hx" ))
		self.t(_hx_c.Type.enumEq(_hx_c.unit_TestSpecification_E.RecArg(_hx_c.unit_TestSpecification_E.OneArg(1)), _hx_c.unit_TestSpecification_E.RecArg(_hx_c.unit_TestSpecification_E.OneArg(1))), _hx_c._hx_AnonObject(fileName = "Type.unit.hx" ,lineNumber = 130 ,className = "unit.TestSpecification" ,methodName = "testType_unit_hx" ))
		self.t(_hx_c.Type.enumEq(_hx_c.unit_TestSpecification_E.MultipleArgs(1, "foo"), _hx_c.unit_TestSpecification_E.MultipleArgs(1, "foo")), _hx_c._hx_AnonObject(fileName = "Type.unit.hx" ,lineNumber = 131 ,className = "unit.TestSpecification" ,methodName = "testType_unit_hx" ))
		self.f(_hx_c.Type.enumEq(_hx_c.unit_TestSpecification_E.NoArgs, _hx_c.unit_TestSpecification_E.OneArg(1)), _hx_c._hx_AnonObject(fileName = "Type.unit.hx" ,lineNumber = 132 ,className = "unit.TestSpecification" ,methodName = "testType_unit_hx" ))
		self.f(_hx_c.Type.enumEq(_hx_c.unit_TestSpecification_E.NoArgs, _hx_c.unit_TestSpecification_E.RecArg(_hx_c.unit_TestSpecification_E.NoArgs)), _hx_c._hx_AnonObject(fileName = "Type.unit.hx" ,lineNumber = 133 ,className = "unit.TestSpecification" ,methodName = "testType_unit_hx" ))
		self.f(_hx_c.Type.enumEq(_hx_c.unit_TestSpecification_E.NoArgs, _hx_c.unit_TestSpecification_E.MultipleArgs(1, "foo")), _hx_c._hx_AnonObject(fileName = "Type.unit.hx" ,lineNumber = 134 ,className = "unit.TestSpecification" ,methodName = "testType_unit_hx" ))
		self.f(_hx_c.Type.enumEq(_hx_c.unit_TestSpecification_E.OneArg(1), _hx_c.unit_TestSpecification_E.OneArg(2)), _hx_c._hx_AnonObject(fileName = "Type.unit.hx" ,lineNumber = 135 ,className = "unit.TestSpecification" ,methodName = "testType_unit_hx" ))
		self.f(_hx_c.Type.enumEq(_hx_c.unit_TestSpecification_E.RecArg(_hx_c.unit_TestSpecification_E.OneArg(1)), _hx_c.unit_TestSpecification_E.RecArg(_hx_c.unit_TestSpecification_E.OneArg(2))), _hx_c._hx_AnonObject(fileName = "Type.unit.hx" ,lineNumber = 136 ,className = "unit.TestSpecification" ,methodName = "testType_unit_hx" ))
		self.eq(_hx_c.unit_TestSpecification_E.NoArgs.tag, "NoArgs", _hx_c._hx_AnonObject(fileName = "Type.unit.hx" ,lineNumber = 139 ,className = "unit.TestSpecification" ,methodName = "testType_unit_hx" ))
		def _hx_local_0():
			e2 = _hx_c.unit_TestSpecification_E.OneArg(1)
			return e2.tag
		
		self.eq(_hx_local_0(), "OneArg", _hx_c._hx_AnonObject(fileName = "Type.unit.hx" ,lineNumber = 140 ,className = "unit.TestSpecification" ,methodName = "testType_unit_hx" ))
		def _hx_local_1():
			e3 = _hx_c.unit_TestSpecification_E.RecArg(_hx_c.unit_TestSpecification_E.OneArg(1))
			return e3.tag
		
		self.eq(_hx_local_1(), "RecArg", _hx_c._hx_AnonObject(fileName = "Type.unit.hx" ,lineNumber = 141 ,className = "unit.TestSpecification" ,methodName = "testType_unit_hx" ))
		def _hx_local_2():
			e4 = _hx_c.unit_TestSpecification_E.MultipleArgs(1, "foo")
			return e4.tag
		
		self.eq(_hx_local_2(), "MultipleArgs", _hx_c._hx_AnonObject(fileName = "Type.unit.hx" ,lineNumber = 142 ,className = "unit.TestSpecification" ,methodName = "testType_unit_hx" ))
		self.eq(_hx_builtin.len(_hx_c.unit_TestSpecification_E.NoArgs.params), 0, _hx_c._hx_AnonObject(fileName = "Type.unit.hx" ,lineNumber = 145 ,className = "unit.TestSpecification" ,methodName = "testType_unit_hx" ))
		def _hx_local_3():
			e5 = _hx_c.unit_TestSpecification_E.OneArg(1)
			return e5.params
		
		self.eq(_hx_array_get((_hx_local_3()),0), 1, _hx_c._hx_AnonObject(fileName = "Type.unit.hx" ,lineNumber = 146 ,className = "unit.TestSpecification" ,methodName = "testType_unit_hx" ))
		def _hx_local_4():
			e6 = _hx_c.unit_TestSpecification_E.RecArg(_hx_c.unit_TestSpecification_E.NoArgs)
			return e6.params
		
		self.eq(_hx_array_get((_hx_local_4()),0), _hx_c.unit_TestSpecification_E.NoArgs, _hx_c._hx_AnonObject(fileName = "Type.unit.hx" ,lineNumber = 147 ,className = "unit.TestSpecification" ,methodName = "testType_unit_hx" ))
		def _hx_local_5():
			e7 = _hx_c.unit_TestSpecification_E.MultipleArgs(1, "foo")
			return e7.params
		
		self.eq(_hx_array_get((_hx_local_5()),0), 1, _hx_c._hx_AnonObject(fileName = "Type.unit.hx" ,lineNumber = 148 ,className = "unit.TestSpecification" ,methodName = "testType_unit_hx" ))
		def _hx_local_6():
			e8 = _hx_c.unit_TestSpecification_E.MultipleArgs(1, "foo")
			return e8.params
		
		self.eq(_hx_array_get((_hx_local_6()),1), "foo", _hx_c._hx_AnonObject(fileName = "Type.unit.hx" ,lineNumber = 148 ,className = "unit.TestSpecification" ,methodName = "testType_unit_hx" ))
		
		self.eq(0, 0, _hx_c._hx_AnonObject(fileName = "Type.unit.hx" ,lineNumber = 151 ,className = "unit.TestSpecification" ,methodName = "testType_unit_hx" ))
		self.eq(1, 1, _hx_c._hx_AnonObject(fileName = "Type.unit.hx" ,lineNumber = 152 ,className = "unit.TestSpecification" ,methodName = "testType_unit_hx" ))
		def _hx_local_7():
			e9 = _hx_c.unit_TestSpecification_E.RecArg(_hx_c.unit_TestSpecification_E.OneArg(1))
			return e9.index
		
		self.eq(_hx_local_7(), 2, _hx_c._hx_AnonObject(fileName = "Type.unit.hx" ,lineNumber = 153 ,className = "unit.TestSpecification" ,methodName = "testType_unit_hx" ))
		self.eq(3, 3, _hx_c._hx_AnonObject(fileName = "Type.unit.hx" ,lineNumber = 154 ,className = "unit.TestSpecification" ,methodName = "testType_unit_hx" ))
		self.eq(_hx_array_get(_hx_c.Type.allEnums(_hx_c.unit_TestSpecification_E),0), _hx_c.unit_TestSpecification_E.NoArgs, _hx_c._hx_AnonObject(fileName = "Type.unit.hx" ,lineNumber = 157 ,className = "unit.TestSpecification" ,methodName = "testType_unit_hx" ))
		self.eq(_hx_array_get(_hx_c.Type.allEnums(_hx_c.haxe_macro_ExprDef),0), _hx_c.haxe_macro_ExprDef.EBreak, _hx_c._hx_AnonObject(fileName = "Type.unit.hx" ,lineNumber = 158 ,className = "unit.TestSpecification" ,methodName = "testType_unit_hx" ))
		self.eq(_hx_array_get(_hx_c.Type.allEnums(_hx_c.haxe_macro_ExprDef),1), _hx_c.haxe_macro_ExprDef.EContinue, _hx_c._hx_AnonObject(fileName = "Type.unit.hx" ,lineNumber = 158 ,className = "unit.TestSpecification" ,methodName = "testType_unit_hx" ))
		
	

	def testReflect_unit_hx(self):
		x = _hx_c._hx_AnonObject(a = 1 ,b = None )
		self.t(_hx_c.Reflect.hasField(x, "a"), _hx_c._hx_AnonObject(fileName = "Reflect.unit.hx" ,lineNumber = 4 ,className = "unit.TestSpecification" ,methodName = "testReflect_unit_hx" ))
		self.t(_hx_c.Reflect.hasField(x, "b"), _hx_c._hx_AnonObject(fileName = "Reflect.unit.hx" ,lineNumber = 5 ,className = "unit.TestSpecification" ,methodName = "testReflect_unit_hx" ))
		self.f(_hx_c.Reflect.hasField(x, "c"), _hx_c._hx_AnonObject(fileName = "Reflect.unit.hx" ,lineNumber = 6 ,className = "unit.TestSpecification" ,methodName = "testReflect_unit_hx" ))
		self.eq(_hx_c.Reflect.field(x, "a"), 1, _hx_c._hx_AnonObject(fileName = "Reflect.unit.hx" ,lineNumber = 9 ,className = "unit.TestSpecification" ,methodName = "testReflect_unit_hx" ))
		self.eq(_hx_c.Reflect.field(x, "b"), None, _hx_c._hx_AnonObject(fileName = "Reflect.unit.hx" ,lineNumber = 10 ,className = "unit.TestSpecification" ,methodName = "testReflect_unit_hx" ))
		self.eq(_hx_c.Reflect.field(x, "c"), None, _hx_c._hx_AnonObject(fileName = "Reflect.unit.hx" ,lineNumber = 11 ,className = "unit.TestSpecification" ,methodName = "testReflect_unit_hx" ))
		c = _hx_c.unit_C2()
		self.eq(_hx_c.Reflect.field(c, "v"), "var", _hx_c._hx_AnonObject(fileName = "Reflect.unit.hx" ,lineNumber = 13 ,className = "unit.TestSpecification" ,methodName = "testReflect_unit_hx" ))
		self.eq(_hx_c.Reflect.field(c, "prop"), "prop", _hx_c._hx_AnonObject(fileName = "Reflect.unit.hx" ,lineNumber = 14 ,className = "unit.TestSpecification" ,methodName = "testReflect_unit_hx" ))
		self.eq(_hx_c.Reflect.field(c, "func")(), "foo", _hx_c._hx_AnonObject(fileName = "Reflect.unit.hx" ,lineNumber = 15 ,className = "unit.TestSpecification" ,methodName = "testReflect_unit_hx" ))
		self.eq(_hx_c.Reflect.field(c, "propAcc"), "0", _hx_c._hx_AnonObject(fileName = "Reflect.unit.hx" ,lineNumber = 17 ,className = "unit.TestSpecification" ,methodName = "testReflect_unit_hx" ))
		self.eq(_hx_c.Reflect.field(None, None), None, _hx_c._hx_AnonObject(fileName = "Reflect.unit.hx" ,lineNumber = 18 ,className = "unit.TestSpecification" ,methodName = "testReflect_unit_hx" ))
		self.eq(_hx_c.Reflect.field(1, "foo"), None, _hx_c._hx_AnonObject(fileName = "Reflect.unit.hx" ,lineNumber = 19 ,className = "unit.TestSpecification" ,methodName = "testReflect_unit_hx" ))
		field = None
		if _hx_c.python_internal_KeywordHandler.keywords.exists("a"):
			field = "_hx_" + "a"
		else:
			field = "a"
		_hx_builtin.setattr(x, field, 2)
		
		self.eq(x.a, 2, _hx_c._hx_AnonObject(fileName = "Reflect.unit.hx" ,lineNumber = 23 ,className = "unit.TestSpecification" ,methodName = "testReflect_unit_hx" ))
		field1 = None
		if _hx_c.python_internal_KeywordHandler.keywords.exists("c"):
			field1 = "_hx_" + "c"
		else:
			field1 = "c"
		_hx_builtin.setattr(x, field1, "foo")
		
		self.eq(_hx_c.Reflect.field(x, "c"), "foo", _hx_c._hx_AnonObject(fileName = "Reflect.unit.hx" ,lineNumber = 25 ,className = "unit.TestSpecification" ,methodName = "testReflect_unit_hx" ))
		c1 = _hx_c.unit_C2()
		field2 = None
		if _hx_c.python_internal_KeywordHandler.keywords.exists("v"):
			field2 = "_hx_" + "v"
		else:
			field2 = "v"
		_hx_builtin.setattr(c1, field2, "bar")
		
		self.eq(c1.v, "bar", _hx_c._hx_AnonObject(fileName = "Reflect.unit.hx" ,lineNumber = 28 ,className = "unit.TestSpecification" ,methodName = "testReflect_unit_hx" ))
		c2 = _hx_c.unit_C2()
		self.eq(_hx_c.Reflect.getProperty(c2, "v"), "var", _hx_c._hx_AnonObject(fileName = "Reflect.unit.hx" ,lineNumber = 36 ,className = "unit.TestSpecification" ,methodName = "testReflect_unit_hx" ))
		self.eq(_hx_c.Reflect.getProperty(c2, "prop"), "prop", _hx_c._hx_AnonObject(fileName = "Reflect.unit.hx" ,lineNumber = 37 ,className = "unit.TestSpecification" ,methodName = "testReflect_unit_hx" ))
		self.eq(_hx_c.Reflect.getProperty(c2, "propAcc"), "1", _hx_c._hx_AnonObject(fileName = "Reflect.unit.hx" ,lineNumber = 39 ,className = "unit.TestSpecification" ,methodName = "testReflect_unit_hx" ))
		field3 = None
		if _hx_c.python_internal_KeywordHandler.keywords.exists("a"):
			field3 = "_hx_" + "a"
		else:
			field3 = "a"
		if _hx_builtin.hasattr(x, "set_" + Std.string(field3)):
			tmp = _hx_builtin.getattr(x, "set_" + Std.string(field3))
			tmp(2)
		
		else:
			_hx_builtin.setattr(x, field3, 2)
		
		self.eq(x.a, 2, _hx_c._hx_AnonObject(fileName = "Reflect.unit.hx" ,lineNumber = 45 ,className = "unit.TestSpecification" ,methodName = "testReflect_unit_hx" ))
		field4 = None
		if _hx_c.python_internal_KeywordHandler.keywords.exists("c"):
			field4 = "_hx_" + "c"
		else:
			field4 = "c"
		if _hx_builtin.hasattr(x, "set_" + Std.string(field4)):
			tmp1 = _hx_builtin.getattr(x, "set_" + Std.string(field4))
			tmp1("foo")
		
		else:
			_hx_builtin.setattr(x, field4, "foo")
		
		self.eq(_hx_c.Reflect.field(x, "c"), "foo", _hx_c._hx_AnonObject(fileName = "Reflect.unit.hx" ,lineNumber = 47 ,className = "unit.TestSpecification" ,methodName = "testReflect_unit_hx" ))
		c3 = _hx_c.unit_C2()
		field5 = None
		if _hx_c.python_internal_KeywordHandler.keywords.exists("v"):
			field5 = "_hx_" + "v"
		else:
			field5 = "v"
		if _hx_builtin.hasattr(c3, "set_" + Std.string(field5)):
			tmp2 = _hx_builtin.getattr(c3, "set_" + Std.string(field5))
			tmp2("bar")
		
		else:
			_hx_builtin.setattr(c3, field5, "bar")
		
		self.eq(c3.v, "bar", _hx_c._hx_AnonObject(fileName = "Reflect.unit.hx" ,lineNumber = 50 ,className = "unit.TestSpecification" ,methodName = "testReflect_unit_hx" ))
		field6 = None
		if _hx_c.python_internal_KeywordHandler.keywords.exists("propAcc"):
			field6 = "_hx_" + "propAcc"
		else:
			field6 = "propAcc"
		if _hx_builtin.hasattr(c3, "set_" + Std.string(field6)):
			tmp3 = _hx_builtin.getattr(c3, "set_" + Std.string(field6))
			tmp3("abc")
		
		else:
			_hx_builtin.setattr(c3, field6, "abc")
		
		self.eq(_hx_c.Reflect.field(c3, "propAcc"), "ABC", _hx_c._hx_AnonObject(fileName = "Reflect.unit.hx" ,lineNumber = 58 ,className = "unit.TestSpecification" ,methodName = "testReflect_unit_hx" ))
		names = ["a", "b", "c"]
		_g = 0
		_g1 = _hx_c.Reflect.fields(x)
		while _g < _hx_builtin.len(_g1):
			name = _hx_array_get(_g1,_g)
			_g = _g + 1
			_hx_c.python_internal_ArrayImpl.remove(names, name)
		
		
		self.eq(_hx_builtin.len(names), 0, _hx_c._hx_AnonObject(fileName = "Reflect.unit.hx" ,lineNumber = 66 ,className = "unit.TestSpecification" ,methodName = "testReflect_unit_hx" ))
		c4 = _hx_c.unit_C2()
		def _hx_local_0():
			return 1
		self.t(_hx_c.Reflect.isFunction(_hx_local_0), _hx_c._hx_AnonObject(fileName = "Reflect.unit.hx" ,lineNumber = 70 ,className = "unit.TestSpecification" ,methodName = "testReflect_unit_hx" ))
		self.f(_hx_c.Reflect.isFunction(1), _hx_c._hx_AnonObject(fileName = "Reflect.unit.hx" ,lineNumber = 71 ,className = "unit.TestSpecification" ,methodName = "testReflect_unit_hx" ))
		self.f(_hx_c.Reflect.isFunction(None), _hx_c._hx_AnonObject(fileName = "Reflect.unit.hx" ,lineNumber = 72 ,className = "unit.TestSpecification" ,methodName = "testReflect_unit_hx" ))
		self.t(_hx_c.Reflect.isFunction(_hx_c.Reflect.field(c4, "func")), _hx_c._hx_AnonObject(fileName = "Reflect.unit.hx" ,lineNumber = 73 ,className = "unit.TestSpecification" ,methodName = "testReflect_unit_hx" ))
		self.t(_hx_c.Reflect.hasField(x, "c"), _hx_c._hx_AnonObject(fileName = "Reflect.unit.hx" ,lineNumber = 76 ,className = "unit.TestSpecification" ,methodName = "testReflect_unit_hx" ))
		_hx_c.Reflect.deleteField(x, "c")
		self.f(_hx_c.Reflect.hasField(x, "c"), _hx_c._hx_AnonObject(fileName = "Reflect.unit.hx" ,lineNumber = 78 ,className = "unit.TestSpecification" ,methodName = "testReflect_unit_hx" ))
		_hx_c.Reflect.deleteField(x, "c")
		self.f(_hx_c.Reflect.hasField(x, "c"), _hx_c._hx_AnonObject(fileName = "Reflect.unit.hx" ,lineNumber = 80 ,className = "unit.TestSpecification" ,methodName = "testReflect_unit_hx" ))
		y = _hx_c.Reflect.copy(x)
		self.eq(_hx_c.Reflect.field(y, "a"), 2, _hx_c._hx_AnonObject(fileName = "Reflect.unit.hx" ,lineNumber = 84 ,className = "unit.TestSpecification" ,methodName = "testReflect_unit_hx" ))
		self.eq(_hx_c.Reflect.field(y, "b"), None, _hx_c._hx_AnonObject(fileName = "Reflect.unit.hx" ,lineNumber = 85 ,className = "unit.TestSpecification" ,methodName = "testReflect_unit_hx" ))
		self.eq(_hx_c.Reflect.field(y, "c"), None, _hx_c._hx_AnonObject(fileName = "Reflect.unit.hx" ,lineNumber = 86 ,className = "unit.TestSpecification" ,methodName = "testReflect_unit_hx" ))
		self.t(_hx_c.Reflect.compare(1, 2) < 0, _hx_c._hx_AnonObject(fileName = "Reflect.unit.hx" ,lineNumber = 89 ,className = "unit.TestSpecification" ,methodName = "testReflect_unit_hx" ))
		self.t(_hx_c.Reflect.compare(2, 1) > 0, _hx_c._hx_AnonObject(fileName = "Reflect.unit.hx" ,lineNumber = 90 ,className = "unit.TestSpecification" ,methodName = "testReflect_unit_hx" ))
		self.eq(_hx_c.Reflect.compare(1, 1), 0, _hx_c._hx_AnonObject(fileName = "Reflect.unit.hx" ,lineNumber = 91 ,className = "unit.TestSpecification" ,methodName = "testReflect_unit_hx" ))
		self.t(_hx_c.Reflect.compare("abcd", "e") < 0, _hx_c._hx_AnonObject(fileName = "Reflect.unit.hx" ,lineNumber = 92 ,className = "unit.TestSpecification" ,methodName = "testReflect_unit_hx" ))
		self.eq(_hx_c.Reflect.compare("abcd", "abcd"), 0, _hx_c._hx_AnonObject(fileName = "Reflect.unit.hx" ,lineNumber = 93 ,className = "unit.TestSpecification" ,methodName = "testReflect_unit_hx" ))
		self.t(_hx_c.Reflect.compare("e", "abcd") > 0, _hx_c._hx_AnonObject(fileName = "Reflect.unit.hx" ,lineNumber = 94 ,className = "unit.TestSpecification" ,methodName = "testReflect_unit_hx" ))
		self.eq(_hx_c.Reflect.compare(None, None), 0, _hx_c._hx_AnonObject(fileName = "Reflect.unit.hx" ,lineNumber = 95 ,className = "unit.TestSpecification" ,methodName = "testReflect_unit_hx" ))
		_hx_c.Reflect.compare("abcd", None) != 0
		_hx_c.Reflect.compare(None, "abcd") != 0
		def _hx_local_1(t):
			return 1
		x1 = _hx_local_1
		def _hx_local_2(t1):
			return -1
		y1 = _hx_local_2
		def _hx_local_3(t2):
			return 1
		z = _hx_local_3
		self.f(_hx_c.Reflect.compareMethods(x1, y1), _hx_c._hx_AnonObject(fileName = "Reflect.unit.hx" ,lineNumber = 103 ,className = "unit.TestSpecification" ,methodName = "testReflect_unit_hx" ))
		self.f(_hx_c.Reflect.compareMethods(x1, z), _hx_c._hx_AnonObject(fileName = "Reflect.unit.hx" ,lineNumber = 104 ,className = "unit.TestSpecification" ,methodName = "testReflect_unit_hx" ))
		self.f(_hx_c.Reflect.compareMethods(y1, z), _hx_c._hx_AnonObject(fileName = "Reflect.unit.hx" ,lineNumber = 105 ,className = "unit.TestSpecification" ,methodName = "testReflect_unit_hx" ))
		self.t(_hx_c.Reflect.compareMethods(x1, x1), _hx_c._hx_AnonObject(fileName = "Reflect.unit.hx" ,lineNumber = 106 ,className = "unit.TestSpecification" ,methodName = "testReflect_unit_hx" ))
		self.t(_hx_c.Reflect.compareMethods(y1, y1), _hx_c._hx_AnonObject(fileName = "Reflect.unit.hx" ,lineNumber = 107 ,className = "unit.TestSpecification" ,methodName = "testReflect_unit_hx" ))
		self.t(_hx_c.Reflect.compareMethods(z, z), _hx_c._hx_AnonObject(fileName = "Reflect.unit.hx" ,lineNumber = 108 ,className = "unit.TestSpecification" ,methodName = "testReflect_unit_hx" ))
		self.t(_hx_c.Reflect.isObject(_hx_c._hx_AnonObject()), _hx_c._hx_AnonObject(fileName = "Reflect.unit.hx" ,lineNumber = 114 ,className = "unit.TestSpecification" ,methodName = "testReflect_unit_hx" ))
		self.t(_hx_c.Reflect.isObject(_hx_c._hx_AnonObject(v = "f" )), _hx_c._hx_AnonObject(fileName = "Reflect.unit.hx" ,lineNumber = 115 ,className = "unit.TestSpecification" ,methodName = "testReflect_unit_hx" ))
		self.t(_hx_c.Reflect.isObject(_hx_c.unit_C()), _hx_c._hx_AnonObject(fileName = "Reflect.unit.hx" ,lineNumber = 116 ,className = "unit.TestSpecification" ,methodName = "testReflect_unit_hx" ))
		self.t(_hx_c.Reflect.isObject(_hx_c.unit_C2()), _hx_c._hx_AnonObject(fileName = "Reflect.unit.hx" ,lineNumber = 117 ,className = "unit.TestSpecification" ,methodName = "testReflect_unit_hx" ))
		self.t(_hx_c.Reflect.isObject(_hx_c.unit_CChild()), _hx_c._hx_AnonObject(fileName = "Reflect.unit.hx" ,lineNumber = 118 ,className = "unit.TestSpecification" ,methodName = "testReflect_unit_hx" ))
		self.t(_hx_c.Reflect.isObject(_hx_c.unit_CDyn()), _hx_c._hx_AnonObject(fileName = "Reflect.unit.hx" ,lineNumber = 119 ,className = "unit.TestSpecification" ,methodName = "testReflect_unit_hx" ))
		self.t(_hx_c.Reflect.isObject(_hx_c.unit_TestSpecification_EmptyClass()), _hx_c._hx_AnonObject(fileName = "Reflect.unit.hx" ,lineNumber = 120 ,className = "unit.TestSpecification" ,methodName = "testReflect_unit_hx" ))
		self.t(_hx_c.Reflect.isObject(_hx_c.Type.createEmptyInstance(_hx_c.unit_TestSpecification_ReallyEmptyClass)), _hx_c._hx_AnonObject(fileName = "Reflect.unit.hx" ,lineNumber = 121 ,className = "unit.TestSpecification" ,methodName = "testReflect_unit_hx" ))
		self.t(_hx_c.Reflect.isObject("foo"), _hx_c._hx_AnonObject(fileName = "Reflect.unit.hx" ,lineNumber = 122 ,className = "unit.TestSpecification" ,methodName = "testReflect_unit_hx" ))
		self.t(_hx_c.Reflect.isObject(_hx_c.unit_TestSpecification_E), _hx_c._hx_AnonObject(fileName = "Reflect.unit.hx" ,lineNumber = 123 ,className = "unit.TestSpecification" ,methodName = "testReflect_unit_hx" ))
		self.t(_hx_c.Reflect.isObject(_hx_c.unit_C), _hx_c._hx_AnonObject(fileName = "Reflect.unit.hx" ,lineNumber = 124 ,className = "unit.TestSpecification" ,methodName = "testReflect_unit_hx" ))
		self.f(_hx_c.Reflect.isObject(1), _hx_c._hx_AnonObject(fileName = "Reflect.unit.hx" ,lineNumber = 126 ,className = "unit.TestSpecification" ,methodName = "testReflect_unit_hx" ))
		self.f(_hx_c.Reflect.isObject(1.1), _hx_c._hx_AnonObject(fileName = "Reflect.unit.hx" ,lineNumber = 127 ,className = "unit.TestSpecification" ,methodName = "testReflect_unit_hx" ))
		self.f(_hx_c.Reflect.isObject(True), _hx_c._hx_AnonObject(fileName = "Reflect.unit.hx" ,lineNumber = 128 ,className = "unit.TestSpecification" ,methodName = "testReflect_unit_hx" ))
		self.f(_hx_c.Reflect.isObject(_hx_c.unit_EnumFlagTest.EA), _hx_c._hx_AnonObject(fileName = "Reflect.unit.hx" ,lineNumber = 129 ,className = "unit.TestSpecification" ,methodName = "testReflect_unit_hx" ))
		self.f(_hx_c.Reflect.isObject(_hx_c.unit_EVMTest.EVMB()), _hx_c._hx_AnonObject(fileName = "Reflect.unit.hx" ,lineNumber = 130 ,className = "unit.TestSpecification" ,methodName = "testReflect_unit_hx" ))
		self.f(_hx_c.Reflect.isObject(None), _hx_c._hx_AnonObject(fileName = "Reflect.unit.hx" ,lineNumber = 131 ,className = "unit.TestSpecification" ,methodName = "testReflect_unit_hx" ))
		x2 = None
		self.f(_hx_c.Reflect.isObject(x2), _hx_c._hx_AnonObject(fileName = "Reflect.unit.hx" ,lineNumber = 133 ,className = "unit.TestSpecification" ,methodName = "testReflect_unit_hx" ))
		self.t(_hx_c.Reflect.isEnumValue(_hx_c.unit_EnumFlagTest.EA), _hx_c._hx_AnonObject(fileName = "Reflect.unit.hx" ,lineNumber = 136 ,className = "unit.TestSpecification" ,methodName = "testReflect_unit_hx" ))
		self.t(_hx_c.Reflect.isEnumValue(_hx_c.unit_EVMTest.EVMB()), _hx_c._hx_AnonObject(fileName = "Reflect.unit.hx" ,lineNumber = 137 ,className = "unit.TestSpecification" ,methodName = "testReflect_unit_hx" ))
		self.f(_hx_c.Reflect.isEnumValue(_hx_c._hx_AnonObject()), _hx_c._hx_AnonObject(fileName = "Reflect.unit.hx" ,lineNumber = 139 ,className = "unit.TestSpecification" ,methodName = "testReflect_unit_hx" ))
		self.f(_hx_c.Reflect.isEnumValue(_hx_c._hx_AnonObject(v = "f" )), _hx_c._hx_AnonObject(fileName = "Reflect.unit.hx" ,lineNumber = 140 ,className = "unit.TestSpecification" ,methodName = "testReflect_unit_hx" ))
		self.f(_hx_c.Reflect.isEnumValue(_hx_c.unit_C()), _hx_c._hx_AnonObject(fileName = "Reflect.unit.hx" ,lineNumber = 141 ,className = "unit.TestSpecification" ,methodName = "testReflect_unit_hx" ))
		self.f(_hx_c.Reflect.isEnumValue(_hx_c.unit_C2()), _hx_c._hx_AnonObject(fileName = "Reflect.unit.hx" ,lineNumber = 142 ,className = "unit.TestSpecification" ,methodName = "testReflect_unit_hx" ))
		self.f(_hx_c.Reflect.isEnumValue(_hx_c.unit_CChild()), _hx_c._hx_AnonObject(fileName = "Reflect.unit.hx" ,lineNumber = 143 ,className = "unit.TestSpecification" ,methodName = "testReflect_unit_hx" ))
		self.f(_hx_c.Reflect.isEnumValue(_hx_c.unit_CDyn()), _hx_c._hx_AnonObject(fileName = "Reflect.unit.hx" ,lineNumber = 144 ,className = "unit.TestSpecification" ,methodName = "testReflect_unit_hx" ))
		self.f(_hx_c.Reflect.isEnumValue(_hx_c.unit_TestSpecification_EmptyClass()), _hx_c._hx_AnonObject(fileName = "Reflect.unit.hx" ,lineNumber = 145 ,className = "unit.TestSpecification" ,methodName = "testReflect_unit_hx" ))
		self.f(_hx_c.Reflect.isEnumValue(_hx_c.Type.createEmptyInstance(_hx_c.unit_TestSpecification_ReallyEmptyClass)), _hx_c._hx_AnonObject(fileName = "Reflect.unit.hx" ,lineNumber = 146 ,className = "unit.TestSpecification" ,methodName = "testReflect_unit_hx" ))
		self.f(_hx_c.Reflect.isEnumValue("foo"), _hx_c._hx_AnonObject(fileName = "Reflect.unit.hx" ,lineNumber = 147 ,className = "unit.TestSpecification" ,methodName = "testReflect_unit_hx" ))
		self.f(_hx_c.Reflect.isEnumValue(_hx_c.unit_TestSpecification_E), _hx_c._hx_AnonObject(fileName = "Reflect.unit.hx" ,lineNumber = 148 ,className = "unit.TestSpecification" ,methodName = "testReflect_unit_hx" ))
		self.f(_hx_c.Reflect.isEnumValue(_hx_c.unit_C), _hx_c._hx_AnonObject(fileName = "Reflect.unit.hx" ,lineNumber = 149 ,className = "unit.TestSpecification" ,methodName = "testReflect_unit_hx" ))
		self.f(_hx_c.Reflect.isEnumValue(1), _hx_c._hx_AnonObject(fileName = "Reflect.unit.hx" ,lineNumber = 150 ,className = "unit.TestSpecification" ,methodName = "testReflect_unit_hx" ))
		self.f(_hx_c.Reflect.isEnumValue(1.1), _hx_c._hx_AnonObject(fileName = "Reflect.unit.hx" ,lineNumber = 151 ,className = "unit.TestSpecification" ,methodName = "testReflect_unit_hx" ))
		self.f(_hx_c.Reflect.isEnumValue(True), _hx_c._hx_AnonObject(fileName = "Reflect.unit.hx" ,lineNumber = 152 ,className = "unit.TestSpecification" ,methodName = "testReflect_unit_hx" ))
		self.f(_hx_c.Reflect.isEnumValue(None), _hx_c._hx_AnonObject(fileName = "Reflect.unit.hx" ,lineNumber = 153 ,className = "unit.TestSpecification" ,methodName = "testReflect_unit_hx" ))
		x3 = None
		self.f(_hx_c.Reflect.isEnumValue(x3), _hx_c._hx_AnonObject(fileName = "Reflect.unit.hx" ,lineNumber = 155 ,className = "unit.TestSpecification" ,methodName = "testReflect_unit_hx" ))
	





unit_TestSpecification._hx_class = unit_TestSpecification
unit_TestSpecification._hx_class_name = "unit.TestSpecification"
_hx_classes["unit.TestSpecification"] = unit_TestSpecification
_hx_c.unit_TestSpecification = unit_TestSpecification
unit_TestSpecification._hx_fields = []
unit_TestSpecification._hx_props = []
unit_TestSpecification._hx_methods = ["testMath_unit_hx","testDateTools_unit_hx","testString_unit_hx","testStringBuf_unit_hx","testArray_unit_hx","testList_unit_hx","testLambda_unit_hx","testMap_unit_hx","testStd_unit_hx","testDate_unit_hx","testStringTools_unit_hx","testEvaluationOrder_unit_hx","testEnumFlags_unit_hx","testComplexTypeTools_macro_unit_hx","testExprTools_unit_hx","testInt32_unit_hx","testLog_unit_hx","testTemplate_unit_hx","testBalancedTree_unit_hx","testEnumValueMap_unit_hx","testObjectMap_unit_hx","testVector_unit_hx","testGenericStack_unit_hx","testPath_unit_hx","testUtf8_unit_hx","testEReg_unit_hx","testType_unit_hx","testReflect_unit_hx"]
unit_TestSpecification._hx_statics = []
unit_TestSpecification._hx_interfaces = []
unit_TestSpecification._hx_super = unit_Test
unit_TestSpecification._hx_meta = _hx_c._hx_AnonObject(obj=_hx_c._hx_AnonObject(),statics=_hx_c._hx_AnonObject(),fields=_hx_c._hx_AnonObject())
def unit_TestSpecification_hx_empty_init (_hx_o):
	pass
unit_TestSpecification._hx_empty_init = unit_TestSpecification_hx_empty_init
# print unit.TestType.TestType
class unit_TestType(unit_Test):


	def __init__(self):
		super().__init__()
	def testType(self):
		name = Std.string("unit" + ".") + "MyClass"
		self.eq(_hx_c.Type.resolveClass(name), _hx_c.unit_MyClass, _hx_c._hx_AnonObject(fileName = "TestType.hx" ,lineNumber = 40 ,className = "unit.TestType" ,methodName = "testType" ))
		self.eq(_hx_c.Type.getClassName(_hx_c.unit_MyClass), name, _hx_c._hx_AnonObject(fileName = "TestType.hx" ,lineNumber = 41 ,className = "unit.TestType" ,methodName = "testType" ))
		def _hx_local_0():
			_this = _hx_c.Type.getClassFields(_hx_c.unit_MyClass)
			return _hx_builtin.len(_this)
		
		self.eq(_hx_local_0(), 0, _hx_c._hx_AnonObject(fileName = "TestType.hx" ,lineNumber = 42 ,className = "unit.TestType" ,methodName = "testType" ))
	

	def testFields(self):
		sfields = _hx_c.Type.getClassFields(_hx_c.unit_MySubClass)
		self.eq(_hx_builtin.len(sfields), 1, _hx_c._hx_AnonObject(fileName = "TestType.hx" ,lineNumber = 47 ,className = "unit.TestType" ,methodName = "testFields" ))
		self.eq(_hx_array_get(sfields,0), "XXX", _hx_c._hx_AnonObject(fileName = "TestType.hx" ,lineNumber = 48 ,className = "unit.TestType" ,methodName = "testFields" ))
		fields = ["add", "get", "intValue", "ref", "set", "stringValue", "val"]
		fl = _hx_c.Type.getInstanceFields(_hx_c.unit_MyClass)
		fl.sort(key=_hx_functools.cmp_to_key(_hx_c.Reflect.compare))
		self.eq("|".join(_hx_builtin.list(_hx_builtin.map(_hx_c.Std.string, fl))), "|".join(_hx_builtin.list(_hx_builtin.map(_hx_c.Std.string, fields))), _hx_c._hx_AnonObject(fileName = "TestType.hx" ,lineNumber = 53 ,className = "unit.TestType" ,methodName = "testFields" ))
		fl1 = _hx_c.Type.getInstanceFields(_hx_c.unit_MySubClass)
		fl1.sort(key=_hx_functools.cmp_to_key(_hx_c.Reflect.compare))
		self.eq("|".join(_hx_builtin.list(_hx_builtin.map(_hx_c.Std.string, fl1))), "|".join(_hx_builtin.list(_hx_builtin.map(_hx_c.Std.string, fields))), _hx_c._hx_AnonObject(fileName = "TestType.hx" ,lineNumber = 57 ,className = "unit.TestType" ,methodName = "testFields" ))
		fl2 = _hx_c.Type.getInstanceFields(_hx_c.unit_VarProps)
		fields1 = ["get_x", "get_y", "set_x", "set_y", "set_z", "y", "z"]
		fl2.sort(key=_hx_functools.cmp_to_key(_hx_c.Reflect.compare))
		self.eq("|".join(_hx_builtin.list(_hx_builtin.map(_hx_c.Std.string, fl2))), "|".join(_hx_builtin.list(_hx_builtin.map(_hx_c.Std.string, fields1))), _hx_c._hx_AnonObject(fileName = "TestType.hx" ,lineNumber = 74 ,className = "unit.TestType" ,methodName = "testFields" ))
		fl3 = _hx_c.Type.getClassFields(_hx_c.unit_VarProps)
		fields2 = ["SY", "get_SX", "get_SY", "set_SX", "set_SY"]
		fl3.sort(key=_hx_functools.cmp_to_key(_hx_c.Reflect.compare))
		self.eq("|".join(_hx_builtin.list(_hx_builtin.map(_hx_c.Std.string, fl3))), "|".join(_hx_builtin.list(_hx_builtin.map(_hx_c.Std.string, fields2))), _hx_c._hx_AnonObject(fileName = "TestType.hx" ,lineNumber = 81 ,className = "unit.TestType" ,methodName = "testFields" ))
	

	def testEnumEq(self):
		self.t(_hx_c.Type.enumEq(None, None), _hx_c._hx_AnonObject(fileName = "TestType.hx" ,lineNumber = 87 ,className = "unit.TestType" ,methodName = "testEnumEq" ))
		self.f(_hx_c.Type.enumEq(_hx_c.unit_MyEnum.A, None), _hx_c._hx_AnonObject(fileName = "TestType.hx" ,lineNumber = 88 ,className = "unit.TestType" ,methodName = "testEnumEq" ))
		self.f(_hx_c.Type.enumEq(None, _hx_c.unit_MyEnum.D(_hx_c.unit_MyEnum.A)), _hx_c._hx_AnonObject(fileName = "TestType.hx" ,lineNumber = 89 ,className = "unit.TestType" ,methodName = "testEnumEq" ))
		self.t(_hx_c.Type.enumEq(_hx_c.unit_MyEnum.A, _hx_c.unit_MyEnum.A), _hx_c._hx_AnonObject(fileName = "TestType.hx" ,lineNumber = 91 ,className = "unit.TestType" ,methodName = "testEnumEq" ))
		self.t(_hx_c.Type.enumEq(_hx_c.unit_MyEnum.B, _hx_c.unit_MyEnum.B), _hx_c._hx_AnonObject(fileName = "TestType.hx" ,lineNumber = 92 ,className = "unit.TestType" ,methodName = "testEnumEq" ))
		self.f(_hx_c.Type.enumEq(_hx_c.unit_MyEnum.A, _hx_c.unit_MyEnum.B), _hx_c._hx_AnonObject(fileName = "TestType.hx" ,lineNumber = 93 ,className = "unit.TestType" ,methodName = "testEnumEq" ))
		self.t(_hx_c.Type.enumEq(_hx_c.unit_MyEnum.C(1, "hello"), _hx_c.unit_MyEnum.C(1, "hello")), _hx_c._hx_AnonObject(fileName = "TestType.hx" ,lineNumber = 95 ,className = "unit.TestType" ,methodName = "testEnumEq" ))
		self.f(_hx_c.Type.enumEq(_hx_c.unit_MyEnum.C(1, "hello"), _hx_c.unit_MyEnum.C(1, "hellox")), _hx_c._hx_AnonObject(fileName = "TestType.hx" ,lineNumber = 96 ,className = "unit.TestType" ,methodName = "testEnumEq" ))
		self.t(_hx_c.Type.enumEq(_hx_c.unit_MyEnum.D(_hx_c.unit_MyEnum.A), _hx_c.unit_MyEnum.D(_hx_c.unit_MyEnum.A)), _hx_c._hx_AnonObject(fileName = "TestType.hx" ,lineNumber = 98 ,className = "unit.TestType" ,methodName = "testEnumEq" ))
		self.f(_hx_c.Type.enumEq(_hx_c.unit_MyEnum.D(_hx_c.unit_MyEnum.A), _hx_c.unit_MyEnum.D(_hx_c.unit_MyEnum.B)), _hx_c._hx_AnonObject(fileName = "TestType.hx" ,lineNumber = 99 ,className = "unit.TestType" ,methodName = "testEnumEq" ))
	

	def testPossibleBug(self):
		c = _hx_c.Type.getEnumConstructs(_hx_c.unit_MyEnum)
		old = _hx_array_get(c,0)
		_hx_array_set(c,0, "modified")
		self.eq(_hx_array_get(_hx_c.Type.getEnumConstructs(_hx_c.unit_MyEnum),0), old, _hx_c._hx_AnonObject(fileName = "TestType.hx" ,lineNumber = 107 ,className = "unit.TestType" ,methodName = "testPossibleBug" ))
		i = _hx_c.Type.getInstanceFields(_hx_c.unit_TestType)
		old1 = _hx_array_get(i,0)
		_hx_array_set(i,0, "modified")
		self.eq(_hx_array_get(_hx_c.Type.getInstanceFields(_hx_c.unit_TestType),0), old1, _hx_c._hx_AnonObject(fileName = "TestType.hx" ,lineNumber = 112 ,className = "unit.TestType" ,methodName = "testPossibleBug" ))
		i1 = _hx_c.Type.getClassFields(_hx_c.unit_TestType)
		old2 = _hx_array_get(i1,0)
		_hx_array_set(i1,0, "modified")
		self.eq(_hx_array_get(_hx_c.Type.getClassFields(_hx_c.unit_TestType),0), old2, _hx_c._hx_AnonObject(fileName = "TestType.hx" ,lineNumber = 117 ,className = "unit.TestType" ,methodName = "testPossibleBug" ))
	

	def testAllField(self):
		def _hx_local_0():
			_this = _hx_c.Type.allEnums(_hx_c.unit_MyEnum)
			return "#".join(_hx_builtin.list(_hx_builtin.map(_hx_c.Std.string, _this)))
		
		self.eq(_hx_local_0(), "A#B", _hx_c._hx_AnonObject(fileName = "TestType.hx" ,lineNumber = 125 ,className = "unit.TestType" ,methodName = "testAllField" ))
	

	def testWiderVisibility(self):
		c = _hx_c.unit_MyChild1()
		self.eq(12, c.a(), _hx_c._hx_AnonObject(fileName = "TestType.hx" ,lineNumber = 130 ,className = "unit.TestType" ,methodName = "testWiderVisibility" ))
		mc2 = _hx_c.unit_MyChild2()
		self.eq(21, mc2.test1(_hx_c.unit_MyChild1()), _hx_c._hx_AnonObject(fileName = "TestType.hx" ,lineNumber = 135 ,className = "unit.TestType" ,methodName = "testWiderVisibility" ))
	

	def testUnifyMin(self):
		ti1 = None
		tbase = None
		tpbase = None
		tnullbool = None
		tnullbase = None
		tchild1 = None
		ts = None
		_hx_local_0 = _hx_c.unit_Test
		_hx_local_1 = _hx_local_0.count
		_hx_local_0.count = _hx_local_1 + 1
		_hx_local_1
		
		self.eq("TInst(Array,[TInst(unit.Base,[])])", "TInst(Array,[TInst(unit.Base,[])])", _hx_c._hx_AnonObject(fileName = "TestType.hx" ,lineNumber = 155 ,className = "unit.TestType" ,methodName = "testUnifyMin" ))
		
		_hx_local_2 = _hx_c.unit_Test
		_hx_local_3 = _hx_local_2.count
		_hx_local_2.count = _hx_local_3 + 1
		_hx_local_3
		
		self.eq("TInst(Array,[TInst(unit.Base,[])])", "TInst(Array,[TInst(unit.Base,[])])", _hx_c._hx_AnonObject(fileName = "TestType.hx" ,lineNumber = 156 ,className = "unit.TestType" ,methodName = "testUnifyMin" ))
		
		_hx_local_4 = _hx_c.unit_Test
		_hx_local_5 = _hx_local_4.count
		_hx_local_4.count = _hx_local_5 + 1
		_hx_local_5
		
		self.eq("TInst(Array,[TInst(unit.Base,[])])", "TInst(Array,[TInst(unit.Base,[])])", _hx_c._hx_AnonObject(fileName = "TestType.hx" ,lineNumber = 157 ,className = "unit.TestType" ,methodName = "testUnifyMin" ))
		
		_hx_local_6 = _hx_c.unit_Test
		_hx_local_7 = _hx_local_6.count
		_hx_local_6.count = _hx_local_7 + 1
		_hx_local_7
		
		self.eq("TInst(Array,[TInst(unit.I1,[])])", "TInst(Array,[TInst(unit.I1,[])])", _hx_c._hx_AnonObject(fileName = "TestType.hx" ,lineNumber = 158 ,className = "unit.TestType" ,methodName = "testUnifyMin" ))
		
		_hx_local_8 = _hx_c.unit_Test
		_hx_local_9 = _hx_local_8.count
		_hx_local_8.count = _hx_local_9 + 1
		_hx_local_9
		
		self.eq("TInst(Array,[TInst(unit.I1,[])])", "TInst(Array,[TInst(unit.I1,[])])", _hx_c._hx_AnonObject(fileName = "TestType.hx" ,lineNumber = 159 ,className = "unit.TestType" ,methodName = "testUnifyMin" ))
		
		_hx_local_10 = _hx_c.unit_Test
		_hx_local_11 = _hx_local_10.count
		_hx_local_10.count = _hx_local_11 + 1
		_hx_local_11
		
		self.eq("TInst(Array,[TInst(unit.I1,[])])", "TInst(Array,[TInst(unit.I1,[])])", _hx_c._hx_AnonObject(fileName = "TestType.hx" ,lineNumber = 161 ,className = "unit.TestType" ,methodName = "testUnifyMin" ))
		
		_hx_local_12 = _hx_c.unit_Test
		_hx_local_13 = _hx_local_12.count
		_hx_local_12.count = _hx_local_13 + 1
		_hx_local_13
		
		self.eq("TInst(Array,[TInst(unit.Base,[])])", "TInst(Array,[TInst(unit.Base,[])])", _hx_c._hx_AnonObject(fileName = "TestType.hx" ,lineNumber = 162 ,className = "unit.TestType" ,methodName = "testUnifyMin" ))
		
		_hx_local_14 = _hx_c.unit_Test
		_hx_local_15 = _hx_local_14.count
		_hx_local_14.count = _hx_local_15 + 1
		_hx_local_15
		
		self.eq("TInst(Array,[TInst(unit.Base,[])])", "TInst(Array,[TInst(unit.Base,[])])", _hx_c._hx_AnonObject(fileName = "TestType.hx" ,lineNumber = 163 ,className = "unit.TestType" ,methodName = "testUnifyMin" ))
		
		_hx_local_16 = _hx_c.unit_Test
		_hx_local_17 = _hx_local_16.count
		_hx_local_16.count = _hx_local_17 + 1
		_hx_local_17
		
		self.eq("TInst(Array,[TInst(unit.PClassBase,[TAbstract(Float,[])])])", "TInst(Array,[TInst(unit.PClassBase,[TAbstract(Float,[])])])", _hx_c._hx_AnonObject(fileName = "TestType.hx" ,lineNumber = 165 ,className = "unit.TestType" ,methodName = "testUnifyMin" ))
		
		_hx_local_18 = _hx_c.unit_Test
		_hx_local_19 = _hx_local_18.count
		_hx_local_18.count = _hx_local_19 + 1
		_hx_local_19
		
		self.eq("TInst(Array,[TAbstract(Bool,[])])", "TInst(Array,[TAbstract(Bool,[])])", _hx_c._hx_AnonObject(fileName = "TestType.hx" ,lineNumber = 167 ,className = "unit.TestType" ,methodName = "testUnifyMin" ))
		
		_hx_local_20 = _hx_c.unit_Test
		_hx_local_21 = _hx_local_20.count
		_hx_local_20.count = _hx_local_21 + 1
		_hx_local_21
		
		self.eq("TInst(Array,[TAbstract(Bool,[])])", "TInst(Array,[TAbstract(Bool,[])])", _hx_c._hx_AnonObject(fileName = "TestType.hx" ,lineNumber = 168 ,className = "unit.TestType" ,methodName = "testUnifyMin" ))
		
		_hx_local_22 = _hx_c.unit_Test
		_hx_local_23 = _hx_local_22.count
		_hx_local_22.count = _hx_local_23 + 1
		_hx_local_23
		
		self.eq("TInst(Array,[TInst(unit.Base,[])])", "TInst(Array,[TInst(unit.Base,[])])", _hx_c._hx_AnonObject(fileName = "TestType.hx" ,lineNumber = 169 ,className = "unit.TestType" ,methodName = "testUnifyMin" ))
		
		_hx_local_24 = _hx_c.unit_Test
		_hx_local_25 = _hx_local_24.count
		_hx_local_24.count = _hx_local_25 + 1
		_hx_local_25
		
		self.eq("TInst(Array,[TInst(unit.Base,[])])", "TInst(Array,[TInst(unit.Base,[])])", _hx_c._hx_AnonObject(fileName = "TestType.hx" ,lineNumber = 171 ,className = "unit.TestType" ,methodName = "testUnifyMin" ))
		
		_hx_local_26 = _hx_c.unit_Test
		_hx_local_27 = _hx_local_26.count
		_hx_local_26.count = _hx_local_27 + 1
		_hx_local_27
		
		self.eq("TInst(Array,[TInst(unit.Base,[])])", "TInst(Array,[TInst(unit.Base,[])])", _hx_c._hx_AnonObject(fileName = "TestType.hx" ,lineNumber = 172 ,className = "unit.TestType" ,methodName = "testUnifyMin" ))
		
		_hx_local_28 = _hx_c.unit_Test
		_hx_local_29 = _hx_local_28.count
		_hx_local_28.count = _hx_local_29 + 1
		_hx_local_29
		
		self.eq("TInst(Array,[TInst(unit.Base,[])])", "TInst(Array,[TInst(unit.Base,[])])", _hx_c._hx_AnonObject(fileName = "TestType.hx" ,lineNumber = 173 ,className = "unit.TestType" ,methodName = "testUnifyMin" ))
		
		_hx_local_30 = _hx_c.unit_Test
		_hx_local_31 = _hx_local_30.count
		_hx_local_30.count = _hx_local_31 + 1
		_hx_local_31
		
		self.eq("TInst(Array,[TInst(unit.Child1,[])])", "TInst(Array,[TInst(unit.Child1,[])])", _hx_c._hx_AnonObject(fileName = "TestType.hx" ,lineNumber = 174 ,className = "unit.TestType" ,methodName = "testUnifyMin" ))
		
		_hx_local_32 = _hx_c.unit_Test
		_hx_local_33 = _hx_local_32.count
		_hx_local_32.count = _hx_local_33 + 1
		_hx_local_33
		
		self.eq("TInst(Array,[TAnonymous(<anonymous>)])", "TInst(Array,[TAnonymous(<anonymous>)])", _hx_c._hx_AnonObject(fileName = "TestType.hx" ,lineNumber = 175 ,className = "unit.TestType" ,methodName = "testUnifyMin" ))
		
		_hx_local_34 = _hx_c.unit_Test
		_hx_local_35 = _hx_local_34.count
		_hx_local_34.count = _hx_local_35 + 1
		_hx_local_35
		
		self.eq("TInst(Array,[TAnonymous(<anonymous>)])", "TInst(Array,[TAnonymous(<anonymous>)])", _hx_c._hx_AnonObject(fileName = "TestType.hx" ,lineNumber = 176 ,className = "unit.TestType" ,methodName = "testUnifyMin" ))
		
		tbase1 = None
		ti11 = None
		tnullbool1 = None
		ts1 = None
		_hx_local_36 = _hx_c.unit_Test
		_hx_local_37 = _hx_local_36.count
		_hx_local_36.count = _hx_local_37 + 1
		_hx_local_37
		
		self.eq("TInst(unit.Base,[])", "TInst(unit.Base,[])", _hx_c._hx_AnonObject(fileName = "TestType.hx" ,lineNumber = 189 ,className = "unit.TestType" ,methodName = "testUnifyMin" ))
		
		_hx_local_38 = _hx_c.unit_Test
		_hx_local_39 = _hx_local_38.count
		_hx_local_38.count = _hx_local_39 + 1
		_hx_local_39
		
		self.eq("TInst(unit.Base,[])", "TInst(unit.Base,[])", _hx_c._hx_AnonObject(fileName = "TestType.hx" ,lineNumber = 190 ,className = "unit.TestType" ,methodName = "testUnifyMin" ))
		
		_hx_local_40 = _hx_c.unit_Test
		_hx_local_41 = _hx_local_40.count
		_hx_local_40.count = _hx_local_41 + 1
		_hx_local_41
		
		self.eq("TInst(unit.Base,[])", "TInst(unit.Base,[])", _hx_c._hx_AnonObject(fileName = "TestType.hx" ,lineNumber = 194 ,className = "unit.TestType" ,methodName = "testUnifyMin" ))
		
		_hx_local_42 = _hx_c.unit_Test
		_hx_local_43 = _hx_local_42.count
		_hx_local_42.count = _hx_local_43 + 1
		_hx_local_43
		
		self.eq("TInst(unit.I1,[])", "TInst(unit.I1,[])", _hx_c._hx_AnonObject(fileName = "TestType.hx" ,lineNumber = 198 ,className = "unit.TestType" ,methodName = "testUnifyMin" ))
		
		_hx_local_44 = _hx_c.unit_Test
		_hx_local_45 = _hx_local_44.count
		_hx_local_44.count = _hx_local_45 + 1
		_hx_local_45
		
		self.eq("TInst(unit.I1,[])", "TInst(unit.I1,[])", _hx_c._hx_AnonObject(fileName = "TestType.hx" ,lineNumber = 199 ,className = "unit.TestType" ,methodName = "testUnifyMin" ))
		
		_hx_local_46 = _hx_c.unit_Test
		_hx_local_47 = _hx_local_46.count
		_hx_local_46.count = _hx_local_47 + 1
		_hx_local_47
		
		self.eq("TAbstract(Bool,[])", "TAbstract(Bool,[])", _hx_c._hx_AnonObject(fileName = "TestType.hx" ,lineNumber = 201 ,className = "unit.TestType" ,methodName = "testUnifyMin" ))
		
		_hx_local_48 = _hx_c.unit_Test
		_hx_local_49 = _hx_local_48.count
		_hx_local_48.count = _hx_local_49 + 1
		_hx_local_49
		
		self.eq("TAbstract(Bool,[])", "TAbstract(Bool,[])", _hx_c._hx_AnonObject(fileName = "TestType.hx" ,lineNumber = 202 ,className = "unit.TestType" ,methodName = "testUnifyMin" ))
		
		_hx_local_50 = _hx_c.unit_Test
		_hx_local_51 = _hx_local_50.count
		_hx_local_50.count = _hx_local_51 + 1
		_hx_local_51
		
		self.eq("TAnonymous(<anonymous>)", "TAnonymous(<anonymous>)", _hx_c._hx_AnonObject(fileName = "TestType.hx" ,lineNumber = 203 ,className = "unit.TestType" ,methodName = "testUnifyMin" ))
		
		_hx_local_52 = _hx_c.unit_Test
		_hx_local_53 = _hx_local_52.count
		_hx_local_52.count = _hx_local_53 + 1
		_hx_local_53
		
		self.eq("TAnonymous(<anonymous>)", "TAnonymous(<anonymous>)", _hx_c._hx_AnonObject(fileName = "TestType.hx" ,lineNumber = 204 ,className = "unit.TestType" ,methodName = "testUnifyMin" ))
		
		_hx_local_54 = _hx_c.unit_Test
		_hx_local_55 = _hx_local_54.count
		_hx_local_54.count = _hx_local_55 + 1
		_hx_local_55
		
		self.eq("TInst(unit.Base,[])", "TInst(unit.Base,[])", _hx_c._hx_AnonObject(fileName = "TestType.hx" ,lineNumber = 208 ,className = "unit.TestType" ,methodName = "testUnifyMin" ))
		
		_hx_local_56 = _hx_c.unit_Test
		_hx_local_57 = _hx_local_56.count
		_hx_local_56.count = _hx_local_57 + 1
		_hx_local_57
		
		self.eq("TInst(unit.Base,[])", "TInst(unit.Base,[])", _hx_c._hx_AnonObject(fileName = "TestType.hx" ,lineNumber = 209 ,className = "unit.TestType" ,methodName = "testUnifyMin" ))
		
		_hx_local_58 = _hx_c.unit_Test
		_hx_local_59 = _hx_local_58.count
		_hx_local_58.count = _hx_local_59 + 1
		_hx_local_59
		
		self.eq("TInst(unit.I1,[])", "TInst(unit.I1,[])", _hx_c._hx_AnonObject(fileName = "TestType.hx" ,lineNumber = 210 ,className = "unit.TestType" ,methodName = "testUnifyMin" ))
		
		_hx_local_60 = _hx_c.unit_Test
		_hx_local_61 = _hx_local_60.count
		_hx_local_60.count = _hx_local_61 + 1
		_hx_local_61
		
		self.eq("TInst(unit.I1,[])", "TInst(unit.I1,[])", _hx_c._hx_AnonObject(fileName = "TestType.hx" ,lineNumber = 211 ,className = "unit.TestType" ,methodName = "testUnifyMin" ))
		
		_hx_local_62 = _hx_c.unit_Test
		_hx_local_63 = _hx_local_62.count
		_hx_local_62.count = _hx_local_63 + 1
		_hx_local_63
		
		self.eq("TAbstract(Bool,[])", "TAbstract(Bool,[])", _hx_c._hx_AnonObject(fileName = "TestType.hx" ,lineNumber = 213 ,className = "unit.TestType" ,methodName = "testUnifyMin" ))
		
		_hx_local_64 = _hx_c.unit_Test
		_hx_local_65 = _hx_local_64.count
		_hx_local_64.count = _hx_local_65 + 1
		_hx_local_65
		
		self.eq("TAbstract(Bool,[])", "TAbstract(Bool,[])", _hx_c._hx_AnonObject(fileName = "TestType.hx" ,lineNumber = 214 ,className = "unit.TestType" ,methodName = "testUnifyMin" ))
		
		_hx_local_66 = _hx_c.unit_Test
		_hx_local_67 = _hx_local_66.count
		_hx_local_66.count = _hx_local_67 + 1
		_hx_local_67
		
		self.eq("TAnonymous(<anonymous>)", "TAnonymous(<anonymous>)", _hx_c._hx_AnonObject(fileName = "TestType.hx" ,lineNumber = 215 ,className = "unit.TestType" ,methodName = "testUnifyMin" ))
		
		_hx_local_68 = _hx_c.unit_Test
		_hx_local_69 = _hx_local_68.count
		_hx_local_68.count = _hx_local_69 + 1
		_hx_local_69
		
		self.eq("TAnonymous(<anonymous>)", "TAnonymous(<anonymous>)", _hx_c._hx_AnonObject(fileName = "TestType.hx" ,lineNumber = 216 ,className = "unit.TestType" ,methodName = "testUnifyMin" ))
		
		_hx_local_70 = _hx_c.unit_Test
		_hx_local_71 = _hx_local_70.count
		_hx_local_70.count = _hx_local_71 + 1
		_hx_local_71
		
		self.eq("TInst(Array,[TAnonymous(<anonymous>)])", "TInst(Array,[TAnonymous(<anonymous>)])", _hx_c._hx_AnonObject(fileName = "TestType.hx" ,lineNumber = 218 ,className = "unit.TestType" ,methodName = "testUnifyMin" ))
		
	

	def testCallback(self):
		def _hx_local_0(a,b,c):
			return a
		func = _hx_local_0
		def _hx_local_1(b1,c1):
			return 0
		tstringfloat = _hx_local_1
		def _hx_local_2(c2):
			return 0
		tfloat = _hx_local_2
		def _hx_local_3():
			return 0
		tvoid = _hx_local_3
		def _hx_local_4(a1,b2):
			return 0
		tintstring = _hx_local_4
		def _hx_local_5(a2,c3):
			return 0
		tintfloat = _hx_local_5
		def _hx_local_6(a3):
			return 0
		tint = _hx_local_6
		def _hx_local_7(b3):
			return 0
		tstring = _hx_local_7
		_hx_local_8 = _hx_c.unit_Test
		_hx_local_9 = _hx_local_8.count
		_hx_local_8.count = _hx_local_9 + 1
		_hx_local_9
		
		self.eq("TFun([{ name => a, t => TAbstract(Int,[]), opt => false },{ name => b, t => TInst(String,[]), opt => false },{ name => c, t => TAbstract(Float,[]), opt => false }],TAbstract(Int,[]))", "TFun([{ name => a, t => TAbstract(Int,[]), opt => false },{ name => b, t => TInst(String,[]), opt => false },{ name => c, t => TAbstract(Float,[]), opt => false }],TAbstract(Int,[]))", _hx_c._hx_AnonObject(fileName = "TestType.hx" ,lineNumber = 239 ,className = "unit.TestType" ,methodName = "testCallback" ))
		
		_hx_local_10 = _hx_c.unit_Test
		_hx_local_11 = _hx_local_10.count
		_hx_local_10.count = _hx_local_11 + 1
		_hx_local_11
		
		self.eq("TFun([{ name => a, t => TAbstract(Int,[]), opt => false },{ name => b, t => TInst(String,[]), opt => false },{ name => c, t => TAbstract(Float,[]), opt => false }],TAbstract(Int,[]))", "TFun([{ name => a, t => TAbstract(Int,[]), opt => false },{ name => b, t => TInst(String,[]), opt => false },{ name => c, t => TAbstract(Float,[]), opt => false }],TAbstract(Int,[]))", _hx_c._hx_AnonObject(fileName = "TestType.hx" ,lineNumber = 240 ,className = "unit.TestType" ,methodName = "testCallback" ))
		
		_hx_local_12 = _hx_c.unit_Test
		_hx_local_13 = _hx_local_12.count
		_hx_local_12.count = _hx_local_13 + 1
		_hx_local_13
		
		self.eq("TFun([{ name => a, t => TAbstract(Int,[]), opt => false },{ name => b, t => TInst(String,[]), opt => false },{ name => c, t => TAbstract(Float,[]), opt => false }],TAbstract(Int,[]))", "TFun([{ name => a, t => TAbstract(Int,[]), opt => false },{ name => b, t => TInst(String,[]), opt => false },{ name => c, t => TAbstract(Float,[]), opt => false }],TAbstract(Int,[]))", _hx_c._hx_AnonObject(fileName = "TestType.hx" ,lineNumber = 241 ,className = "unit.TestType" ,methodName = "testCallback" ))
		
		_hx_local_14 = _hx_c.unit_Test
		_hx_local_15 = _hx_local_14.count
		_hx_local_14.count = _hx_local_15 + 1
		_hx_local_15
		
		self.eq("TFun([{ name => a, t => TAbstract(Int,[]), opt => false },{ name => b, t => TInst(String,[]), opt => false },{ name => c, t => TAbstract(Float,[]), opt => false }],TAbstract(Int,[]))", "TFun([{ name => a, t => TAbstract(Int,[]), opt => false },{ name => b, t => TInst(String,[]), opt => false },{ name => c, t => TAbstract(Float,[]), opt => false }],TAbstract(Int,[]))", _hx_c._hx_AnonObject(fileName = "TestType.hx" ,lineNumber = 242 ,className = "unit.TestType" ,methodName = "testCallback" ))
		
		_hx_local_16 = _hx_c.unit_Test
		_hx_local_17 = _hx_local_16.count
		_hx_local_16.count = _hx_local_17 + 1
		_hx_local_17
		
		self.eq("TFun([],TAbstract(Int,[]))", "TFun([],TAbstract(Int,[]))", _hx_c._hx_AnonObject(fileName = "TestType.hx" ,lineNumber = 246 ,className = "unit.TestType" ,methodName = "testCallback" ))
		
		_hx_local_18 = _hx_c.unit_Test
		_hx_local_19 = _hx_local_18.count
		_hx_local_18.count = _hx_local_19 + 1
		_hx_local_19
		
		self.eq("TFun([{ name => c, t => TAbstract(Float,[]), opt => false }],TAbstract(Int,[]))", "TFun([{ name => c, t => TAbstract(Float,[]), opt => false }],TAbstract(Int,[]))", _hx_c._hx_AnonObject(fileName = "TestType.hx" ,lineNumber = 250 ,className = "unit.TestType" ,methodName = "testCallback" ))
		
		_hx_local_20 = _hx_c.unit_Test
		_hx_local_21 = _hx_local_20.count
		_hx_local_20.count = _hx_local_21 + 1
		_hx_local_21
		
		self.eq("TFun([{ name => c, t => TAbstract(Float,[]), opt => false }],TAbstract(Int,[]))", "TFun([{ name => c, t => TAbstract(Float,[]), opt => false }],TAbstract(Int,[]))", _hx_c._hx_AnonObject(fileName = "TestType.hx" ,lineNumber = 251 ,className = "unit.TestType" ,methodName = "testCallback" ))
		
		_hx_local_22 = _hx_c.unit_Test
		_hx_local_23 = _hx_local_22.count
		_hx_local_22.count = _hx_local_23 + 1
		_hx_local_23
		
		self.eq("TFun([{ name => b, t => TInst(String,[]), opt => false },{ name => c, t => TAbstract(Float,[]), opt => false }],TAbstract(Int,[]))", "TFun([{ name => b, t => TInst(String,[]), opt => false },{ name => c, t => TAbstract(Float,[]), opt => false }],TAbstract(Int,[]))", _hx_c._hx_AnonObject(fileName = "TestType.hx" ,lineNumber = 255 ,className = "unit.TestType" ,methodName = "testCallback" ))
		
		_hx_local_24 = _hx_c.unit_Test
		_hx_local_25 = _hx_local_24.count
		_hx_local_24.count = _hx_local_25 + 1
		_hx_local_25
		
		self.eq("TFun([{ name => b, t => TInst(String,[]), opt => false },{ name => c, t => TAbstract(Float,[]), opt => false }],TAbstract(Int,[]))", "TFun([{ name => b, t => TInst(String,[]), opt => false },{ name => c, t => TAbstract(Float,[]), opt => false }],TAbstract(Int,[]))", _hx_c._hx_AnonObject(fileName = "TestType.hx" ,lineNumber = 256 ,className = "unit.TestType" ,methodName = "testCallback" ))
		
		_hx_local_26 = _hx_c.unit_Test
		_hx_local_27 = _hx_local_26.count
		_hx_local_26.count = _hx_local_27 + 1
		_hx_local_27
		
		self.eq("TFun([{ name => b, t => TInst(String,[]), opt => false },{ name => c, t => TAbstract(Float,[]), opt => false }],TAbstract(Int,[]))", "TFun([{ name => b, t => TInst(String,[]), opt => false },{ name => c, t => TAbstract(Float,[]), opt => false }],TAbstract(Int,[]))", _hx_c._hx_AnonObject(fileName = "TestType.hx" ,lineNumber = 257 ,className = "unit.TestType" ,methodName = "testCallback" ))
		
		_hx_local_28 = _hx_c.unit_Test
		_hx_local_29 = _hx_local_28.count
		_hx_local_28.count = _hx_local_29 + 1
		_hx_local_29
		
		self.eq("TFun([{ name => a, t => TAbstract(Int,[]), opt => false },{ name => b, t => TInst(String,[]), opt => false }],TAbstract(Int,[]))", "TFun([{ name => a, t => TAbstract(Int,[]), opt => false },{ name => b, t => TInst(String,[]), opt => false }],TAbstract(Int,[]))", _hx_c._hx_AnonObject(fileName = "TestType.hx" ,lineNumber = 261 ,className = "unit.TestType" ,methodName = "testCallback" ))
		
		_hx_local_30 = _hx_c.unit_Test
		_hx_local_31 = _hx_local_30.count
		_hx_local_30.count = _hx_local_31 + 1
		_hx_local_31
		
		self.eq("TFun([{ name => a, t => TAbstract(Int,[]), opt => false },{ name => c, t => TAbstract(Float,[]), opt => false }],TAbstract(Int,[]))", "TFun([{ name => a, t => TAbstract(Int,[]), opt => false },{ name => c, t => TAbstract(Float,[]), opt => false }],TAbstract(Int,[]))", _hx_c._hx_AnonObject(fileName = "TestType.hx" ,lineNumber = 262 ,className = "unit.TestType" ,methodName = "testCallback" ))
		
		_hx_local_32 = _hx_c.unit_Test
		_hx_local_33 = _hx_local_32.count
		_hx_local_32.count = _hx_local_33 + 1
		_hx_local_33
		
		self.eq("TFun([{ name => a, t => TAbstract(Int,[]), opt => false }],TAbstract(Int,[]))", "TFun([{ name => a, t => TAbstract(Int,[]), opt => false }],TAbstract(Int,[]))", _hx_c._hx_AnonObject(fileName = "TestType.hx" ,lineNumber = 263 ,className = "unit.TestType" ,methodName = "testCallback" ))
		
		_hx_local_34 = _hx_c.unit_Test
		_hx_local_35 = _hx_local_34.count
		_hx_local_34.count = _hx_local_35 + 1
		_hx_local_35
		
		self.eq("TFun([{ name => b, t => TInst(String,[]), opt => false }],TAbstract(Int,[]))", "TFun([{ name => b, t => TInst(String,[]), opt => false }],TAbstract(Int,[]))", _hx_c._hx_AnonObject(fileName = "TestType.hx" ,lineNumber = 264 ,className = "unit.TestType" ,methodName = "testCallback" ))
		
		def _hx_local_37(f):
			def _hx_local_36(a4,b4,c4):
				return f(a4, b4, c4)
			return _hx_local_36
		
		self.eq(1, (_hx_local_37)(func)(1, "2", 3), _hx_c._hx_AnonObject(fileName = "TestType.hx" ,lineNumber = 268 ,className = "unit.TestType" ,methodName = "testCallback" ))
		def _hx_local_39(f1,a5):
			def _hx_local_38(b5,c5):
				return f1(a5, b5, c5)
			return _hx_local_38
		
		self.eq(2, (_hx_local_39)(func, 2)("2", 3), _hx_c._hx_AnonObject(fileName = "TestType.hx" ,lineNumber = 269 ,className = "unit.TestType" ,methodName = "testCallback" ))
		def _hx_local_41(f2,a6,b6):
			def _hx_local_40(c6):
				return f2(a6, b6, c6)
			return _hx_local_40
		
		self.eq(2, (_hx_local_41)(func, 2, "3")(3), _hx_c._hx_AnonObject(fileName = "TestType.hx" ,lineNumber = 270 ,className = "unit.TestType" ,methodName = "testCallback" ))
		def _hx_local_43(f3,a7,b7,c7):
			def _hx_local_42():
				return f3(a7, b7, c7)
			return _hx_local_42
		
		self.eq(2, (_hx_local_43)(func, 2, "3", 4)(), _hx_c._hx_AnonObject(fileName = "TestType.hx" ,lineNumber = 271 ,className = "unit.TestType" ,methodName = "testCallback" ))
		def _hx_local_45(f4,b8,c8):
			def _hx_local_44(a8):
				return f4(a8, b8, c8)
			return _hx_local_44
		
		self.eq(1, (_hx_local_45)(func, "2", 3)(1), _hx_c._hx_AnonObject(fileName = "TestType.hx" ,lineNumber = 273 ,className = "unit.TestType" ,methodName = "testCallback" ))
		def _hx_local_47(f5,b9):
			def _hx_local_46(a9,c9):
				return f5(a9, b9, c9)
			return _hx_local_46
		
		self.eq(1, (_hx_local_47)(func, "2")(1, 3), _hx_c._hx_AnonObject(fileName = "TestType.hx" ,lineNumber = 274 ,className = "unit.TestType" ,methodName = "testCallback" ))
		def _hx_local_49(f6):
			def _hx_local_48(a10,b10,c10):
				return f6(a10, b10, c10)
			return _hx_local_48
		
		self.eq(1, (_hx_local_49)(func)(1, "2", 3), _hx_c._hx_AnonObject(fileName = "TestType.hx" ,lineNumber = 275 ,className = "unit.TestType" ,methodName = "testCallback" ))
		def _hx_local_51(f7,b11):
			def _hx_local_50(a11,c11):
				return f7(a11, b11, c11)
			return _hx_local_50
		
		self.eq(1, (_hx_local_51)(func, "2")(1, 2), _hx_c._hx_AnonObject(fileName = "TestType.hx" ,lineNumber = 277 ,className = "unit.TestType" ,methodName = "testCallback" ))
		def _hx_local_53(f8,b12,c12):
			def _hx_local_52(a12):
				return f8(a12, b12, c12)
			return _hx_local_52
		
		def _hx_local_55(f9):
			def _hx_local_54(a13,b13,c13):
				return f9(a13, b13, c13)
			return _hx_local_54
		
		self.eq(1, (_hx_local_53)((_hx_local_55)(func), "2", 3)(1), _hx_c._hx_AnonObject(fileName = "TestType.hx" ,lineNumber = 279 ,className = "unit.TestType" ,methodName = "testCallback" ))
		def _hx_local_57(f10,b14,c14):
			def _hx_local_56():
				return f10(b14, c14)
			return _hx_local_56
		
		def _hx_local_59(f11,a14):
			def _hx_local_58(b15,c15):
				return f11(a14, b15, c15)
			return _hx_local_58
		
		self.eq(1, (_hx_local_57)((_hx_local_59)(func, 1), "2", 3)(), _hx_c._hx_AnonObject(fileName = "TestType.hx" ,lineNumber = 280 ,className = "unit.TestType" ,methodName = "testCallback" ))
		def _hx_local_61(f12,b16):
			def _hx_local_60(c16):
				return f12(b16, c16)
			return _hx_local_60
		
		def _hx_local_63(f13,a15):
			def _hx_local_62(b17,c17):
				return f13(a15, b17, c17)
			return _hx_local_62
		
		self.eq(1, (_hx_local_61)((_hx_local_63)(func, 1), "2")(3), _hx_c._hx_AnonObject(fileName = "TestType.hx" ,lineNumber = 281 ,className = "unit.TestType" ,methodName = "testCallback" ))
		def _hx_local_65(f14,a16):
			def _hx_local_64(c18):
				return f14(a16, c18)
			return _hx_local_64
		
		def _hx_local_67(f15,b18):
			def _hx_local_66(a17,c19):
				return f15(a17, b18, c19)
			return _hx_local_66
		
		self.eq(1, (_hx_local_65)((_hx_local_67)(func, "2"), 1)(3), _hx_c._hx_AnonObject(fileName = "TestType.hx" ,lineNumber = 282 ,className = "unit.TestType" ,methodName = "testCallback" ))
		a18 = 5
		b19 = "foo"
		def _hx_local_69(f16,a19):
			def _hx_local_68(b20,c20):
				return f16(a19, b20, c20)
			return _hx_local_68
		
		cb = (_hx_local_69)(func, a18)
		a18 = 6
		def _hx_local_70(a20,b21,c21):
			raise _HxException("error")
		func = _hx_local_70
		self.eq(5, cb(b19, 0), _hx_c._hx_AnonObject(fileName = "TestType.hx" ,lineNumber = 289 ,className = "unit.TestType" ,methodName = "testCallback" ))
		def _hx_local_71(a21,b22,c22 = 2):
			if c22 is None:
				c22 = 2
			
			return a21 + b22 + c22
		
		optfunc = _hx_local_71
		def _hx_local_73(f17,a22):
			def _hx_local_72(b23):
				return f17(a22, b23)
			return _hx_local_72
		
		self.eq(6, (_hx_local_73)(optfunc, 1)(3), _hx_c._hx_AnonObject(fileName = "TestType.hx" ,lineNumber = 292 ,className = "unit.TestType" ,methodName = "testCallback" ))
		def _hx_local_75(f18,a23,b24):
			def _hx_local_74():
				return f18(a23, b24)
			return _hx_local_74
		
		self.eq(6, (_hx_local_75)(optfunc, 1, 3)(), _hx_c._hx_AnonObject(fileName = "TestType.hx" ,lineNumber = 293 ,className = "unit.TestType" ,methodName = "testCallback" ))
		def _hx_local_77(f19):
			def _hx_local_76(a24,b25,c23 = None):
				return f19(a24, b25, c23)
			return _hx_local_76
		
		self.eq(7, (_hx_local_77)(optfunc)(1, 2, 4), _hx_c._hx_AnonObject(fileName = "TestType.hx" ,lineNumber = 295 ,className = "unit.TestType" ,methodName = "testCallback" ))
		def _hx_local_79(f20,b26):
			def _hx_local_78(a25,c24 = None):
				return f20(a25, b26, c24)
			return _hx_local_78
		
		self.eq(7, (_hx_local_79)(optfunc, 2)(1, 4), _hx_c._hx_AnonObject(fileName = "TestType.hx" ,lineNumber = 296 ,className = "unit.TestType" ,methodName = "testCallback" ))
		def _hx_local_80(x,p = None):
			if p is None:
				p = None
			
			return "foo" + Std.string(x)
		
		foo = _hx_local_80
		def _hx_local_82(f22,x1):
			def _hx_local_81():
				return f22(x1, _hx_c._hx_AnonObject(fileName = "TestType.hx" ,lineNumber = 299 ,className = "unit.TestType" ,methodName = "testCallback" ))
			return _hx_local_81
		
		f21 = (_hx_local_82)(foo, 0)
		self.eq("foo0", f21(), _hx_c._hx_AnonObject(fileName = "TestType.hx" ,lineNumber = 300 ,className = "unit.TestType" ,methodName = "testCallback" ))
		def _hx_local_83(bar = 2):
			if bar is None:
				bar = 2
			
			return bar
		
		foo1 = _hx_local_83
		def _hx_local_85(f23):
			def _hx_local_84(a110 = None):
				return f23(a110)
			return _hx_local_84
		
		l = (_hx_local_85)(foo1)
		self.eq(2, l(), _hx_c._hx_AnonObject(fileName = "TestType.hx" ,lineNumber = 308 ,className = "unit.TestType" ,methodName = "testCallback" ))
		def _hx_local_86(bar1 = 2):
			if bar1 is None:
				bar1 = 2
			
			return bar1
		
		foo2 = _hx_local_86
		def _hx_local_88(f24):
			def _hx_local_87(a111 = None):
				return f24(a111)
			return _hx_local_87
		
		l1 = (_hx_local_88)(foo2)
		self.eq(2, l1(), _hx_c._hx_AnonObject(fileName = "TestType.hx" ,lineNumber = 314 ,className = "unit.TestType" ,methodName = "testCallback" ))
	

	def testConstantAnonCovariance(self):
		def _hx_local_0(str,str1 = None,str2 = None):
			if str1 is None:
				str1 = None
			
			if str2 is None:
				str2 = None
			
		
		func = _hx_local_0
		a = None
		b = "bar"
		self.f(False, _hx_c._hx_AnonObject(fileName = "TestType.hx" ,lineNumber = 322 ,className = "unit.TestType" ,methodName = "testConstantAnonCovariance" ))
		self.f(False, _hx_c._hx_AnonObject(fileName = "TestType.hx" ,lineNumber = 323 ,className = "unit.TestType" ,methodName = "testConstantAnonCovariance" ))
		_hx_local_1 = _hx_c.unit_Test
		_hx_local_2 = _hx_local_1.count
		_hx_local_1.count = _hx_local_2 + 1
		_hx_local_2
		
		self.eq("TAnonymous(<anonymous>)", "TAnonymous(<anonymous>)", _hx_c._hx_AnonObject(fileName = "TestType.hx" ,lineNumber = 324 ,className = "unit.TestType" ,methodName = "testConstantAnonCovariance" ))
		
		_hx_local_3 = _hx_c.unit_Test
		_hx_local_4 = _hx_local_3.count
		_hx_local_3.count = _hx_local_4 + 1
		_hx_local_4
		
		self.eq("TAnonymous(<anonymous>)", "TAnonymous(<anonymous>)", _hx_c._hx_AnonObject(fileName = "TestType.hx" ,lineNumber = 325 ,className = "unit.TestType" ,methodName = "testConstantAnonCovariance" ))
		
		self.t(True, _hx_c._hx_AnonObject(fileName = "TestType.hx" ,lineNumber = 326 ,className = "unit.TestType" ,methodName = "testConstantAnonCovariance" ))
		self.f(False, _hx_c._hx_AnonObject(fileName = "TestType.hx" ,lineNumber = 327 ,className = "unit.TestType" ,methodName = "testConstantAnonCovariance" ))
		self.f(False, _hx_c._hx_AnonObject(fileName = "TestType.hx" ,lineNumber = 328 ,className = "unit.TestType" ,methodName = "testConstantAnonCovariance" ))
		self.f(False, _hx_c._hx_AnonObject(fileName = "TestType.hx" ,lineNumber = 329 ,className = "unit.TestType" ,methodName = "testConstantAnonCovariance" ))
		self.t(True, _hx_c._hx_AnonObject(fileName = "TestType.hx" ,lineNumber = 330 ,className = "unit.TestType" ,methodName = "testConstantAnonCovariance" ))
		self.t(True, _hx_c._hx_AnonObject(fileName = "TestType.hx" ,lineNumber = 331 ,className = "unit.TestType" ,methodName = "testConstantAnonCovariance" ))
		self.t(True, _hx_c._hx_AnonObject(fileName = "TestType.hx" ,lineNumber = 332 ,className = "unit.TestType" ,methodName = "testConstantAnonCovariance" ))
		self.t(True, _hx_c._hx_AnonObject(fileName = "TestType.hx" ,lineNumber = 333 ,className = "unit.TestType" ,methodName = "testConstantAnonCovariance" ))
		_hx_local_5 = _hx_c.unit_Test
		_hx_local_6 = _hx_local_5.count
		_hx_local_5.count = _hx_local_6 + 1
		_hx_local_6
		
		self.eq("TAnonymous(<anonymous>)", "TAnonymous(<anonymous>)", _hx_c._hx_AnonObject(fileName = "TestType.hx" ,lineNumber = 334 ,className = "unit.TestType" ,methodName = "testConstantAnonCovariance" ))
		
		self.t(True, _hx_c._hx_AnonObject(fileName = "TestType.hx" ,lineNumber = 335 ,className = "unit.TestType" ,methodName = "testConstantAnonCovariance" ))
		self.f(False, _hx_c._hx_AnonObject(fileName = "TestType.hx" ,lineNumber = 336 ,className = "unit.TestType" ,methodName = "testConstantAnonCovariance" ))
		self.f(False, _hx_c._hx_AnonObject(fileName = "TestType.hx" ,lineNumber = 337 ,className = "unit.TestType" ,methodName = "testConstantAnonCovariance" ))
	

	def testCovariantReturn(self):
		b = None
		c1 = None
		c2_1 = None
		c = _hx_c.unit_Cov2()
		_hx_local_0 = _hx_c.unit_Test
		_hx_local_1 = _hx_local_0.count
		_hx_local_0.count = _hx_local_1 + 1
		_hx_local_1
		
		self.eq("TInst(unit.Child1,[])", "TInst(unit.Child1,[])", _hx_c._hx_AnonObject(fileName = "TestType.hx" ,lineNumber = 347 ,className = "unit.TestType" ,methodName = "testCovariantReturn" ))
		
		self.t(_hx_c.Std._hx_is(c.covariant(), _hx_c.unit_Child1), _hx_c._hx_AnonObject(fileName = "TestType.hx" ,lineNumber = 348 ,className = "unit.TestType" ,methodName = "testCovariantReturn" ))
		self.t(_hx_c.Std._hx_is((c).covariant(), _hx_c.unit_Child1), _hx_c._hx_AnonObject(fileName = "TestType.hx" ,lineNumber = 349 ,className = "unit.TestType" ,methodName = "testCovariantReturn" ))
		br = c
		_hx_local_2 = _hx_c.unit_Test
		_hx_local_3 = _hx_local_2.count
		_hx_local_2.count = _hx_local_3 + 1
		_hx_local_3
		
		self.eq("TInst(unit.Base,[])", "TInst(unit.Base,[])", _hx_c._hx_AnonObject(fileName = "TestType.hx" ,lineNumber = 353 ,className = "unit.TestType" ,methodName = "testCovariantReturn" ))
		
		self.t(_hx_c.Std._hx_is(br.covariant(), _hx_c.unit_Child1), _hx_c._hx_AnonObject(fileName = "TestType.hx" ,lineNumber = 354 ,className = "unit.TestType" ,methodName = "testCovariantReturn" ))
		ir = c
		_hx_local_4 = _hx_c.unit_Test
		_hx_local_5 = _hx_local_4.count
		_hx_local_4.count = _hx_local_5 + 1
		_hx_local_5
		
		self.eq("TInst(unit.Base,[])", "TInst(unit.Base,[])", _hx_c._hx_AnonObject(fileName = "TestType.hx" ,lineNumber = 358 ,className = "unit.TestType" ,methodName = "testCovariantReturn" ))
		
		self.t(_hx_c.Std._hx_is(ir.covariant(), _hx_c.unit_Child1), _hx_c._hx_AnonObject(fileName = "TestType.hx" ,lineNumber = 359 ,className = "unit.TestType" ,methodName = "testCovariantReturn" ))
		dr = c
		self.t(_hx_c.Std._hx_is(dr.covariant(), _hx_c.unit_Child1), _hx_c._hx_AnonObject(fileName = "TestType.hx" ,lineNumber = 363 ,className = "unit.TestType" ,methodName = "testCovariantReturn" ))
		c3 = _hx_c.unit_Cov3()
		_hx_local_6 = _hx_c.unit_Test
		_hx_local_7 = _hx_local_6.count
		_hx_local_6.count = _hx_local_7 + 1
		_hx_local_7
		
		self.eq("TInst(unit.Child2_1,[])", "TInst(unit.Child2_1,[])", _hx_c._hx_AnonObject(fileName = "TestType.hx" ,lineNumber = 367 ,className = "unit.TestType" ,methodName = "testCovariantReturn" ))
		
		self.t(_hx_c.Std._hx_is(c3.covariant(), _hx_c.unit_Child2_1), _hx_c._hx_AnonObject(fileName = "TestType.hx" ,lineNumber = 368 ,className = "unit.TestType" ,methodName = "testCovariantReturn" ))
	

	def testContravariantArgs(self):
		def _hx_local_0(arg):
			None
		b = _hx_local_0
		def _hx_local_1(arg1):
			None
		c1 = _hx_local_1
		c = _hx_c.unit_Ctrv2()
		_hx_local_2 = _hx_c.unit_Test
		_hx_local_3 = _hx_local_2.count
		_hx_local_2.count = _hx_local_3 + 1
		_hx_local_3
		
		self.eq("TFun([{ name => arg, t => TInst(unit.Base,[]), opt => false }],TAbstract(Void,[]))", "TFun([{ name => arg, t => TInst(unit.Base,[]), opt => false }],TAbstract(Void,[]))", _hx_c._hx_AnonObject(fileName = "TestType.hx" ,lineNumber = 377 ,className = "unit.TestType" ,methodName = "testContravariantArgs" ))
		
		_hx_local_4 = _hx_c.unit_Test
		_hx_local_5 = _hx_local_4.count
		_hx_local_4.count = _hx_local_5 + 1
		_hx_local_5
		
		self.eq("TFun([{ name => arg, t => TInst(unit.Child1,[]), opt => false }],TAbstract(Void,[]))", "TFun([{ name => arg, t => TInst(unit.Child1,[]), opt => false }],TAbstract(Void,[]))", _hx_c._hx_AnonObject(fileName = "TestType.hx" ,lineNumber = 378 ,className = "unit.TestType" ,methodName = "testContravariantArgs" ))
		
	

	def testInlineCast(self):
		def _hx_local_0():
			_this = _hx_c.unit_InlineCastB()
			return _this.self()
		
		s = (_hx_local_0()).quote()
		self.eq(s, "I am the greatest.", _hx_c._hx_AnonObject(fileName = "TestType.hx" ,lineNumber = 383 ,className = "unit.TestType" ,methodName = "testInlineCast" ))
	

	def testInitFields(self):
		c = _hx_c.unit_InitBase()
		self.eq(c.i, 2, _hx_c._hx_AnonObject(fileName = "TestType.hx" ,lineNumber = 389 ,className = "unit.TestType" ,methodName = "testInitFields" ))
		self.eq(c.s, "foo", _hx_c._hx_AnonObject(fileName = "TestType.hx" ,lineNumber = 390 ,className = "unit.TestType" ,methodName = "testInitFields" ))
		self.eq(c.b, True, _hx_c._hx_AnonObject(fileName = "TestType.hx" ,lineNumber = 391 ,className = "unit.TestType" ,methodName = "testInitFields" ))
		self.eq(c.t, _hx_c.String, _hx_c._hx_AnonObject(fileName = "TestType.hx" ,lineNumber = 392 ,className = "unit.TestType" ,methodName = "testInitFields" ))
		c1 = _hx_c.unit_InitChild()
		self.eq(c1.i, 2, _hx_c._hx_AnonObject(fileName = "TestType.hx" ,lineNumber = 395 ,className = "unit.TestType" ,methodName = "testInitFields" ))
		self.eq(c1.s, "foo", _hx_c._hx_AnonObject(fileName = "TestType.hx" ,lineNumber = 396 ,className = "unit.TestType" ,methodName = "testInitFields" ))
		self.eq(c1.b, True, _hx_c._hx_AnonObject(fileName = "TestType.hx" ,lineNumber = 397 ,className = "unit.TestType" ,methodName = "testInitFields" ))
		self.eq(c1.t, _hx_c.String, _hx_c._hx_AnonObject(fileName = "TestType.hx" ,lineNumber = 398 ,className = "unit.TestType" ,methodName = "testInitFields" ))
		c2 = _hx_c.unit_InitChildWithCtor(None)
		self.eq(c2.i, 2, _hx_c._hx_AnonObject(fileName = "TestType.hx" ,lineNumber = 401 ,className = "unit.TestType" ,methodName = "testInitFields" ))
		self.eq(c2.s, "foo", _hx_c._hx_AnonObject(fileName = "TestType.hx" ,lineNumber = 402 ,className = "unit.TestType" ,methodName = "testInitFields" ))
		self.eq(c2.b, True, _hx_c._hx_AnonObject(fileName = "TestType.hx" ,lineNumber = 403 ,className = "unit.TestType" ,methodName = "testInitFields" ))
		self.eq(c2.t, _hx_c.String, _hx_c._hx_AnonObject(fileName = "TestType.hx" ,lineNumber = 404 ,className = "unit.TestType" ,methodName = "testInitFields" ))
		c3 = _hx_c.Type.createInstance(_hx_c.unit_InitWithoutCtor, [])
		self.eq(c3.i, 2, _hx_c._hx_AnonObject(fileName = "TestType.hx" ,lineNumber = 407 ,className = "unit.TestType" ,methodName = "testInitFields" ))
		c4 = _hx_c.unit_InitProperties()
		self.eq(c4.accNull, 3, _hx_c._hx_AnonObject(fileName = "TestType.hx" ,lineNumber = 410 ,className = "unit.TestType" ,methodName = "testInitFields" ))
		self.eq(c4.accDefault, 3, _hx_c._hx_AnonObject(fileName = "TestType.hx" ,lineNumber = 411 ,className = "unit.TestType" ,methodName = "testInitFields" ))
		self.eq(c4.accFunc, 3, _hx_c._hx_AnonObject(fileName = "TestType.hx" ,lineNumber = 412 ,className = "unit.TestType" ,methodName = "testInitFields" ))
		self.eq(c4.accNever, 3, _hx_c._hx_AnonObject(fileName = "TestType.hx" ,lineNumber = 413 ,className = "unit.TestType" ,methodName = "testInitFields" ))
		self.eq(c4.accDynamic, 3, _hx_c._hx_AnonObject(fileName = "TestType.hx" ,lineNumber = 414 ,className = "unit.TestType" ,methodName = "testInitFields" ))
		def _hx_local_0():
			c4.set_accFunc(4)
		self.exc(_hx_local_0, _hx_c._hx_AnonObject(fileName = "TestType.hx" ,lineNumber = 415 ,className = "unit.TestType" ,methodName = "testInitFields" ))
	

	def testReturnFlow(self):
		def _hx_local_0():
			while True:
				return "foo"
		l = _hx_local_0
		self.eq(l(), "foo", _hx_c._hx_AnonObject(fileName = "TestType.hx" ,lineNumber = 428 ,className = "unit.TestType" ,methodName = "testReturnFlow" ))
	

	def testOptionalParamsSkip(self):
		def _hx_local_0(a,b = None,c = None):
			if b is None:
				b = None
			
			if c is None:
				c = None
			
			return ""
		
		foo = _hx_local_0
		_hx_local_1 = _hx_c.unit_Test
		_hx_local_2 = _hx_local_1.count
		_hx_local_1.count = _hx_local_2 + 1
		_hx_local_2
		
		self.eq("TInst(String,[])", "TInst(String,[])", _hx_c._hx_AnonObject(fileName = "TestType.hx" ,lineNumber = 435 ,className = "unit.TestType" ,methodName = "testOptionalParamsSkip" ))
		
		_hx_local_3 = _hx_c.unit_Test
		_hx_local_4 = _hx_local_3.count
		_hx_local_3.count = _hx_local_4 + 1
		_hx_local_4
		
		self.eq("TInst(String,[])", "TInst(String,[])", _hx_c._hx_AnonObject(fileName = "TestType.hx" ,lineNumber = 436 ,className = "unit.TestType" ,methodName = "testOptionalParamsSkip" ))
		
		_hx_local_5 = _hx_c.unit_Test
		_hx_local_6 = _hx_local_5.count
		_hx_local_5.count = _hx_local_6 + 1
		_hx_local_6
		
		self.eq("TInst(String,[])", "TInst(String,[])", _hx_c._hx_AnonObject(fileName = "TestType.hx" ,lineNumber = 437 ,className = "unit.TestType" ,methodName = "testOptionalParamsSkip" ))
		
		True
	

	def testParamConstraints(self):
		pcc = _hx_c.unit_ParamConstraintsClass()
		b = _hx_c.unit_Base()
		c1 = _hx_c.unit_Child1()
		u = _hx_c.unit_Unrelated()
		ci1 = _hx_c.unit_CI1()
		self.eq(_hx_c.unit_ParamConstraintsClass.staticSingle(b), b, _hx_c._hx_AnonObject(fileName = "TestType.hx" ,lineNumber = 449 ,className = "unit.TestType" ,methodName = "testParamConstraints" ))
		self.eq(_hx_c.unit_ParamConstraintsClass.staticSingle(c1), c1, _hx_c._hx_AnonObject(fileName = "TestType.hx" ,lineNumber = 450 ,className = "unit.TestType" ,methodName = "testParamConstraints" ))
		self.eq(pcc.memberSingle(b), b, _hx_c._hx_AnonObject(fileName = "TestType.hx" ,lineNumber = 456 ,className = "unit.TestType" ,methodName = "testParamConstraints" ))
		self.eq(pcc.memberSingle(c1), c1, _hx_c._hx_AnonObject(fileName = "TestType.hx" ,lineNumber = 457 ,className = "unit.TestType" ,methodName = "testParamConstraints" ))
		self.eq(pcc.memberMultiple(ci1), ci1, _hx_c._hx_AnonObject(fileName = "TestType.hx" ,lineNumber = 460 ,className = "unit.TestType" ,methodName = "testParamConstraints" ))
		l = _hx_c.List()
		l.push(ci1)
		lmono = _hx_c.List()
		self.eq(pcc.memberComplex(ci1, l), l, _hx_c._hx_AnonObject(fileName = "TestType.hx" ,lineNumber = 467 ,className = "unit.TestType" ,methodName = "testParamConstraints" ))
		self.eq(pcc.memberBasic("foo", ["bar"]), "bar", _hx_c._hx_AnonObject(fileName = "TestType.hx" ,lineNumber = 471 ,className = "unit.TestType" ,methodName = "testParamConstraints" ))
		self.eq(pcc.memberAnon(_hx_c._hx_AnonObject(x = 1 ,y = 3. )), 4, _hx_c._hx_AnonObject(fileName = "TestType.hx" ,lineNumber = 473 ,className = "unit.TestType" ,methodName = "testParamConstraints" ))
		pcc2 = _hx_c.unit_ParamConstraintsClass2()
		pcc2.check([1])
		pcc21 = _hx_c.unit_ParamConstraintsClass2()
		pcc21.bind("foo")
		pcc21.check(["foo"])
		pcc22 = _hx_c.unit_ParamConstraintsClass2()
		pcc22.check(["foo"])
	

	def testUsing(self):
		self.eq(_hx_c.unit_UsingChild1.test(), "FOOFOOFOO", _hx_c._hx_AnonObject(fileName = "TestType.hx" ,lineNumber = 500 ,className = "unit.TestType" ,methodName = "testUsing" ))
		self.eq(_hx_c.unit_UsingChild2.test(), "FOO", _hx_c._hx_AnonObject(fileName = "TestType.hx" ,lineNumber = 501 ,className = "unit.TestType" ,methodName = "testUsing" ))
		self.eq(_hx_c.unit_UsingUnrelated.test(), "FOOFOO", _hx_c._hx_AnonObject(fileName = "TestType.hx" ,lineNumber = 502 ,className = "unit.TestType" ,methodName = "testUsing" ))
	

	def testInlineInit(self):
		self.eq(2, 2, _hx_c._hx_AnonObject(fileName = "TestType.hx" ,lineNumber = 507 ,className = "unit.TestType" ,methodName = "testInlineInit" ))
		self.eq(27, 27, _hx_c._hx_AnonObject(fileName = "TestType.hx" ,lineNumber = 508 ,className = "unit.TestType" ,methodName = "testInlineInit" ))
		self.eq(6, 6, _hx_c._hx_AnonObject(fileName = "TestType.hx" ,lineNumber = 509 ,className = "unit.TestType" ,methodName = "testInlineInit" ))
		self.eq(_hx_c.String, _hx_c.String, _hx_c._hx_AnonObject(fileName = "TestType.hx" ,lineNumber = 510 ,className = "unit.TestType" ,methodName = "testInlineInit" ))
		self.eq(60000., 60000., _hx_c._hx_AnonObject(fileName = "TestType.hx" ,lineNumber = 511 ,className = "unit.TestType" ,methodName = "testInlineInit" ))
	

	def testInline(self):
		_hx_local_0 = _hx_c.unit_Test
		_hx_local_1 = _hx_local_0.count
		_hx_local_0.count = _hx_local_1 + 1
		_hx_local_1
		
		self.eq("TAbstract(Void,[])", "TAbstract(Void,[])", _hx_c._hx_AnonObject(fileName = "TestType.hx" ,lineNumber = 516 ,className = "unit.TestType" ,methodName = "testInline" ))
		
		_hx_local_2 = _hx_c.unit_Test
		_hx_local_3 = _hx_local_2.count
		_hx_local_2.count = _hx_local_3 + 1
		_hx_local_3
		
		self.eq("TAbstract(Void,[])", "TAbstract(Void,[])", _hx_c._hx_AnonObject(fileName = "TestType.hx" ,lineNumber = 517 ,className = "unit.TestType" ,methodName = "testInline" ))
		
	

	def inlineTest1(self,map):
		_hx_array_get(map,0)

	def inlineTest2(self,map):
		_hx_array_get(map,0)

	def testMacroRest(self):
		r = [1, 2, 3]
		self.eq(_hx_builtin.len(r), 3, _hx_c._hx_AnonObject(fileName = "TestType.hx" ,lineNumber = 531 ,className = "unit.TestType" ,methodName = "testMacroRest" ))
		self.eq(_hx_array_get(r,0), 1, _hx_c._hx_AnonObject(fileName = "TestType.hx" ,lineNumber = 532 ,className = "unit.TestType" ,methodName = "testMacroRest" ))
		self.eq(_hx_array_get(r,1), 2, _hx_c._hx_AnonObject(fileName = "TestType.hx" ,lineNumber = 533 ,className = "unit.TestType" ,methodName = "testMacroRest" ))
		self.eq(_hx_array_get(r,2), 3, _hx_c._hx_AnonObject(fileName = "TestType.hx" ,lineNumber = 534 ,className = "unit.TestType" ,methodName = "testMacroRest" ))
		r1 = [1, [2, 3]]
		self.eq(_hx_builtin.len(r1), 2, _hx_c._hx_AnonObject(fileName = "TestType.hx" ,lineNumber = 537 ,className = "unit.TestType" ,methodName = "testMacroRest" ))
		self.eq(_hx_array_get(r1,0), 1, _hx_c._hx_AnonObject(fileName = "TestType.hx" ,lineNumber = 538 ,className = "unit.TestType" ,methodName = "testMacroRest" ))
		self.eq(_hx_array_get(_hx_array_get(r1,1),0), 2, _hx_c._hx_AnonObject(fileName = "TestType.hx" ,lineNumber = 539 ,className = "unit.TestType" ,methodName = "testMacroRest" ))
		self.eq(_hx_array_get(_hx_array_get(r1,1),1), 3, _hx_c._hx_AnonObject(fileName = "TestType.hx" ,lineNumber = 540 ,className = "unit.TestType" ,methodName = "testMacroRest" ))
		r2 = [1]
		self.eq(_hx_builtin.len(r2), 1, _hx_c._hx_AnonObject(fileName = "TestType.hx" ,lineNumber = 543 ,className = "unit.TestType" ,methodName = "testMacroRest" ))
		self.eq(_hx_array_get(r2,0), 1, _hx_c._hx_AnonObject(fileName = "TestType.hx" ,lineNumber = 544 ,className = "unit.TestType" ,methodName = "testMacroRest" ))
		r3 = [1, 2, 3, 4]
		self.eq(_hx_builtin.len(r3), 4, _hx_c._hx_AnonObject(fileName = "TestType.hx" ,lineNumber = 547 ,className = "unit.TestType" ,methodName = "testMacroRest" ))
		self.eq(_hx_array_get(r3,0), 1, _hx_c._hx_AnonObject(fileName = "TestType.hx" ,lineNumber = 548 ,className = "unit.TestType" ,methodName = "testMacroRest" ))
		self.eq(_hx_array_get(r3,1), 2, _hx_c._hx_AnonObject(fileName = "TestType.hx" ,lineNumber = 549 ,className = "unit.TestType" ,methodName = "testMacroRest" ))
		self.eq(_hx_array_get(r3,2), 3, _hx_c._hx_AnonObject(fileName = "TestType.hx" ,lineNumber = 550 ,className = "unit.TestType" ,methodName = "testMacroRest" ))
		self.eq(_hx_array_get(r3,3), 4, _hx_c._hx_AnonObject(fileName = "TestType.hx" ,lineNumber = 551 ,className = "unit.TestType" ,methodName = "testMacroRest" ))
		r4 = [1, 2]
		self.eq(_hx_builtin.len(r4), 2, _hx_c._hx_AnonObject(fileName = "TestType.hx" ,lineNumber = 554 ,className = "unit.TestType" ,methodName = "testMacroRest" ))
		self.eq(_hx_array_get(r4,0), 1, _hx_c._hx_AnonObject(fileName = "TestType.hx" ,lineNumber = 555 ,className = "unit.TestType" ,methodName = "testMacroRest" ))
		self.eq(_hx_array_get(r4,1), 2, _hx_c._hx_AnonObject(fileName = "TestType.hx" ,lineNumber = 556 ,className = "unit.TestType" ,methodName = "testMacroRest" ))
		r5 = [1, 2, [3]]
		self.eq(_hx_builtin.len(r5), 3, _hx_c._hx_AnonObject(fileName = "TestType.hx" ,lineNumber = 559 ,className = "unit.TestType" ,methodName = "testMacroRest" ))
		self.eq(_hx_array_get(r5,0), 1, _hx_c._hx_AnonObject(fileName = "TestType.hx" ,lineNumber = 560 ,className = "unit.TestType" ,methodName = "testMacroRest" ))
		self.eq(_hx_array_get(r5,1), 2, _hx_c._hx_AnonObject(fileName = "TestType.hx" ,lineNumber = 561 ,className = "unit.TestType" ,methodName = "testMacroRest" ))
		self.eq(_hx_array_get(_hx_array_get(r5,2),0), 3, _hx_c._hx_AnonObject(fileName = "TestType.hx" ,lineNumber = 562 ,className = "unit.TestType" ,methodName = "testMacroRest" ))
	

	def testGenericFunction(self):
		_hx_c.unit_TestType.gf1_Int(2)
		_hx_c.unit_TestType.gf1_String("foo")
		_hx_c.unit_TestType.gf1_Bool(True)
		_hx_c.unit_TestType.gf1_haxe_Template(_hx_c.haxe_Template("foo"))
		_hx_c.unit_TestType.gf1_haxe_ds_GenericStack(_hx_c.haxe_ds_GenericStack())
		self.hsf(_hx_c.unit_TestType, "gf1_Int", _hx_c._hx_AnonObject(fileName = "TestType.hx" ,lineNumber = 577 ,className = "unit.TestType" ,methodName = "testGenericFunction" ))
		self.hsf(_hx_c.unit_TestType, "gf1_String", _hx_c._hx_AnonObject(fileName = "TestType.hx" ,lineNumber = 578 ,className = "unit.TestType" ,methodName = "testGenericFunction" ))
		self.hsf(_hx_c.unit_TestType, "gf1_Bool", _hx_c._hx_AnonObject(fileName = "TestType.hx" ,lineNumber = 579 ,className = "unit.TestType" ,methodName = "testGenericFunction" ))
		self.hsf(_hx_c.unit_TestType, "gf1_haxe_Template", _hx_c._hx_AnonObject(fileName = "TestType.hx" ,lineNumber = 582 ,className = "unit.TestType" ,methodName = "testGenericFunction" ))
		self.hsf(_hx_c.unit_TestType, "gf1_haxe_ds_GenericStack", _hx_c._hx_AnonObject(fileName = "TestType.hx" ,lineNumber = 585 ,className = "unit.TestType" ,methodName = "testGenericFunction" ))
		self.t(True, _hx_c._hx_AnonObject(fileName = "TestType.hx" ,lineNumber = 586 ,className = "unit.TestType" ,methodName = "testGenericFunction" ))
		self.t(True, _hx_c._hx_AnonObject(fileName = "TestType.hx" ,lineNumber = 587 ,className = "unit.TestType" ,methodName = "testGenericFunction" ))
		self.eq("foo[1,2]", _hx_c.unit_TestType.gf2_String_Int("foo", [1, 2]), _hx_c._hx_AnonObject(fileName = "TestType.hx" ,lineNumber = 589 ,className = "unit.TestType" ,methodName = "testGenericFunction" ))
		self.eq("foo[[1,2]]", _hx_c.unit_TestType.gf2_String_Array("foo", [[1, 2]]), _hx_c._hx_AnonObject(fileName = "TestType.hx" ,lineNumber = 590 ,className = "unit.TestType" ,methodName = "testGenericFunction" ))
		self.hsf(_hx_c.unit_TestType, "gf2_String_Int", _hx_c._hx_AnonObject(fileName = "TestType.hx" ,lineNumber = 591 ,className = "unit.TestType" ,methodName = "testGenericFunction" ))
		self.hsf(_hx_c.unit_TestType, "gf2_String_Array", _hx_c._hx_AnonObject(fileName = "TestType.hx" ,lineNumber = 592 ,className = "unit.TestType" ,methodName = "testGenericFunction" ))
		a = _hx_c.unit_TestType.gf3_String_Array("foo", ["bar", "baz"])
		self.eq(_hx_array_get(a,0), "bar", _hx_c._hx_AnonObject(fileName = "TestType.hx" ,lineNumber = 595 ,className = "unit.TestType" ,methodName = "testGenericFunction" ))
		self.eq(_hx_array_get(a,1), "baz", _hx_c._hx_AnonObject(fileName = "TestType.hx" ,lineNumber = 596 ,className = "unit.TestType" ,methodName = "testGenericFunction" ))
		self.eq(_hx_array_get(a,2), "foo", _hx_c._hx_AnonObject(fileName = "TestType.hx" ,lineNumber = 597 ,className = "unit.TestType" ,methodName = "testGenericFunction" ))
		self.hsf(_hx_c.unit_TestType, "gf3_String_Array", _hx_c._hx_AnonObject(fileName = "TestType.hx" ,lineNumber = 598 ,className = "unit.TestType" ,methodName = "testGenericFunction" ))
		t = _hx_c.haxe_Template("foo")
		ta = _hx_array_get(_hx_c.unit_TestType.gf3_haxe_Template_Array(t, []),0)
		self.f(t == ta, _hx_c._hx_AnonObject(fileName = "TestType.hx" ,lineNumber = 603 ,className = "unit.TestType" ,methodName = "testGenericFunction" ))
		self.hsf(_hx_c.unit_TestType, "gf3_haxe_Template_Array", _hx_c._hx_AnonObject(fileName = "TestType.hx" ,lineNumber = 604 ,className = "unit.TestType" ,methodName = "testGenericFunction" ))
		self.eq(_hx_c.unit_TestType.overloadFake_Int(1), 1, _hx_c._hx_AnonObject(fileName = "TestType.hx" ,lineNumber = 607 ,className = "unit.TestType" ,methodName = "testGenericFunction" ))
		self.eq(_hx_c.unit_TestType.overloadFake_String("bar"), "barfoo", _hx_c._hx_AnonObject(fileName = "TestType.hx" ,lineNumber = 608 ,className = "unit.TestType" ,methodName = "testGenericFunction" ))
	

	def testCompletion(self):
		s = _hx_c._hx_AnonObject(foo = 1 )
		self.eq("foo:Int", "foo:Int", _hx_c._hx_AnonObject(fileName = "TestType.hx" ,lineNumber = 636 ,className = "unit.TestType" ,methodName = "testCompletion" ))
		self.eq("path(haxe)", "path(haxe)", _hx_c._hx_AnonObject(fileName = "TestType.hx" ,lineNumber = 637 ,className = "unit.TestType" ,methodName = "testCompletion" ))
		self.eq("path(haxe.macro:Expr)", "path(haxe.macro:Expr)", _hx_c._hx_AnonObject(fileName = "TestType.hx" ,lineNumber = 638 ,className = "unit.TestType" ,methodName = "testCompletion" ))
		self.eq("error(haxe.macro.Expr is not a value)", "error(haxe.macro.Expr is not a value)", _hx_c._hx_AnonObject(fileName = "TestType.hx" ,lineNumber = 641 ,className = "unit.TestType" ,methodName = "testCompletion" ))
		self.eq("path(unknownVar)", "path(unknownVar)", _hx_c._hx_AnonObject(fileName = "TestType.hx" ,lineNumber = 653 ,className = "unit.TestType" ,methodName = "testCompletion" ))
		def _hx_local_0():
			it = [s].__iter__()
			return _hx_c.python_HaxeIterator(it)
		
		_it = _hx_local_0()
		while _it.hasNext():
			k = _it.next()
			self.eq("foo:Int", "foo:Int", _hx_c._hx_AnonObject(fileName = "TestType.hx" ,lineNumber = 660 ,className = "unit.TestType" ,methodName = "testCompletion" ))
		def _hx_local_1():
			it1 = [s].__iter__()
			return _hx_c.python_HaxeIterator(it1)
		
		f = _hx_local_1
		self.eq("foo:Int", "foo:Int", _hx_c._hx_AnonObject(fileName = "TestType.hx" ,lineNumber = 666 ,className = "unit.TestType" ,methodName = "testCompletion" ))
	

	def testSuperPropAccess(self):
		c = _hx_c.unit_ChildSuperProp()
		self.eq(c.get_prop(), 2, _hx_c._hx_AnonObject(fileName = "TestType.hx" ,lineNumber = 672 ,className = "unit.TestType" ,methodName = "testSuperPropAccess" ))
		self.eq(c.set_prop(4), 5, _hx_c._hx_AnonObject(fileName = "TestType.hx" ,lineNumber = 673 ,className = "unit.TestType" ,methodName = "testSuperPropAccess" ))
		self.eq(c.test(), "test2", _hx_c._hx_AnonObject(fileName = "TestType.hx" ,lineNumber = 674 ,className = "unit.TestType" ,methodName = "testSuperPropAccess" ))
		self.eq(c.get_fProp()(9), "test09", _hx_c._hx_AnonObject(fileName = "TestType.hx" ,lineNumber = 675 ,className = "unit.TestType" ,methodName = "testSuperPropAccess" ))
	

	def testVoidFunc(self):
		def _hx_local_0():
			raise _HxException(None)
			return 1
		
		self.exc(_hx_local_0, _hx_c._hx_AnonObject(fileName = "TestType.hx" ,lineNumber = 679 ,className = "unit.TestType" ,methodName = "testVoidFunc" ))
		def _hx_local_1():
			raise _HxException(None)
			return "foo"
		
		self.exc(_hx_local_1, _hx_c._hx_AnonObject(fileName = "TestType.hx" ,lineNumber = 680 ,className = "unit.TestType" ,methodName = "testVoidFunc" ))
		def _hx_local_2():
			raise _HxException(None)
			return _hx_c.unit_MyEnum.A
		
		self.exc(_hx_local_2, _hx_c._hx_AnonObject(fileName = "TestType.hx" ,lineNumber = 681 ,className = "unit.TestType" ,methodName = "testVoidFunc" ))
		def _hx_local_3():
			raise _HxException(None)
			return _hx_c.haxe_Template("foo")
		
		self.exc(_hx_local_3, _hx_c._hx_AnonObject(fileName = "TestType.hx" ,lineNumber = 683 ,className = "unit.TestType" ,methodName = "testVoidFunc" ))
		def _hx_local_4():
			raise _HxException(None)
			return None
		
		self.exc(_hx_local_4, _hx_c._hx_AnonObject(fileName = "TestType.hx" ,lineNumber = 685 ,className = "unit.TestType" ,methodName = "testVoidFunc" ))
		def _hx_local_5():
			raise _HxException(None)
			return _hx_c._hx_AnonObject(foo = 1 )
		
		self.exc(_hx_local_5, _hx_c._hx_AnonObject(fileName = "TestType.hx" ,lineNumber = 686 ,className = "unit.TestType" ,methodName = "testVoidFunc" ))
	

	def testAbstractCastConstraints(self):
		z = _hx_c.unit_AbstractBase("foo")
		s = _hx_c.unit_MyAbstract_AbstractZ_Impl_.toString(z)
		self.t(True, _hx_c._hx_AnonObject(fileName = "TestType.hx" ,lineNumber = 692 ,className = "unit.TestType" ,methodName = "testAbstractCastConstraints" ))
		self.eq("foo", s, _hx_c._hx_AnonObject(fileName = "TestType.hx" ,lineNumber = 695 ,className = "unit.TestType" ,methodName = "testAbstractCastConstraints" ))
		z1 = _hx_c.unit_AbstractBase(12)
		i = _hx_c.unit_MyAbstract_AbstractZ_Impl_.toFoo(z1)
		self.eq(12, i, _hx_c._hx_AnonObject(fileName = "TestType.hx" ,lineNumber = 699 ,className = "unit.TestType" ,methodName = "testAbstractCastConstraints" ))
		self.t(True, _hx_c._hx_AnonObject(fileName = "TestType.hx" ,lineNumber = 700 ,className = "unit.TestType" ,methodName = "testAbstractCastConstraints" ))
	

	def testOpArrow(self):
		m = _hx_c.haxe_ds_IntMap()
		map = None
		_g = _hx_c.haxe_ds_IntMap()
		_g.set(1, 2)
		_g.set(3, 4)
		map = _g
		
		_hx_local_0 = _hx_c.unit_Test
		_hx_local_1 = _hx_local_0.count
		_hx_local_0.count = _hx_local_1 + 1
		_hx_local_1
		
		self.eq("TAbstract(Map,[TAbstract(Int,[]),TAbstract(Int,[])])", "TAbstract(Map,[TAbstract(Int,[]),TAbstract(Int,[])])", _hx_c._hx_AnonObject(fileName = "TestType.hx" ,lineNumber = 708 ,className = "unit.TestType" ,methodName = "testOpArrow" ))
		
		self.t(_hx_c.Std._hx_is(map, _hx_c.haxe_ds_IntMap), _hx_c._hx_AnonObject(fileName = "TestType.hx" ,lineNumber = 709 ,className = "unit.TestType" ,methodName = "testOpArrow" ))
		self.eq(map.h.get(1, None), 2, _hx_c._hx_AnonObject(fileName = "TestType.hx" ,lineNumber = 710 ,className = "unit.TestType" ,methodName = "testOpArrow" ))
		self.eq(map.h.get(3, None), 4, _hx_c._hx_AnonObject(fileName = "TestType.hx" ,lineNumber = 711 ,className = "unit.TestType" ,methodName = "testOpArrow" ))
		m1 = _hx_c.haxe_ds_StringMap()
		map1 = None
		_g1 = _hx_c.haxe_ds_StringMap()
		_g1.set("1", 2)
		_g1.set("3", 4)
		map1 = _g1
		
		_hx_local_2 = _hx_c.unit_Test
		_hx_local_3 = _hx_local_2.count
		_hx_local_2.count = _hx_local_3 + 1
		_hx_local_3
		
		self.eq("TAbstract(Map,[TInst(String,[]),TAbstract(Int,[])])", "TAbstract(Map,[TInst(String,[]),TAbstract(Int,[])])", _hx_c._hx_AnonObject(fileName = "TestType.hx" ,lineNumber = 715 ,className = "unit.TestType" ,methodName = "testOpArrow" ))
		
		self.t(_hx_c.Std._hx_is(map1, _hx_c.haxe_ds_StringMap), _hx_c._hx_AnonObject(fileName = "TestType.hx" ,lineNumber = 716 ,className = "unit.TestType" ,methodName = "testOpArrow" ))
		self.eq(map1.get("1"), 2, _hx_c._hx_AnonObject(fileName = "TestType.hx" ,lineNumber = 717 ,className = "unit.TestType" ,methodName = "testOpArrow" ))
		self.eq(map1.get("3"), 4, _hx_c._hx_AnonObject(fileName = "TestType.hx" ,lineNumber = 718 ,className = "unit.TestType" ,methodName = "testOpArrow" ))
		a = _hx_c.unit_ClassWithHashCode(1)
		b = _hx_c.unit_ClassWithHashCode(2)
		m2 = _hx_c.haxe_ds_ObjectMap()
		map2 = None
		_g2 = _hx_c.haxe_ds_ObjectMap()
		_g2.set(a, 2)
		_g2.set(b, 4)
		map2 = _g2
		
		_hx_local_4 = _hx_c.unit_Test
		_hx_local_5 = _hx_local_4.count
		_hx_local_4.count = _hx_local_5 + 1
		_hx_local_5
		
		self.eq("TAbstract(Map,[TInst(unit.ClassWithHashCode,[]),TAbstract(Int,[])])", "TAbstract(Map,[TInst(unit.ClassWithHashCode,[]),TAbstract(Int,[])])", _hx_c._hx_AnonObject(fileName = "TestType.hx" ,lineNumber = 724 ,className = "unit.TestType" ,methodName = "testOpArrow" ))
		
		self.eq(map2.h.get(a, None), 2, _hx_c._hx_AnonObject(fileName = "TestType.hx" ,lineNumber = 726 ,className = "unit.TestType" ,methodName = "testOpArrow" ))
		self.eq(map2.h.get(b, None), 4, _hx_c._hx_AnonObject(fileName = "TestType.hx" ,lineNumber = 727 ,className = "unit.TestType" ,methodName = "testOpArrow" ))
		self.t(True, _hx_c._hx_AnonObject(fileName = "TestType.hx" ,lineNumber = 730 ,className = "unit.TestType" ,methodName = "testOpArrow" ))
		self.t(True, _hx_c._hx_AnonObject(fileName = "TestType.hx" ,lineNumber = 732 ,className = "unit.TestType" ,methodName = "testOpArrow" ))
		self.t(True, _hx_c._hx_AnonObject(fileName = "TestType.hx" ,lineNumber = 734 ,className = "unit.TestType" ,methodName = "testOpArrow" ))
	

	def testAbstractGeneric(self):
		map = _hx_c.haxe_ds_StringMap()
		map.set("foo", 1)
		self.t(_hx_c.Std._hx_is(map, _hx_c.haxe_ds_StringMap), _hx_c._hx_AnonObject(fileName = "TestType.hx" ,lineNumber = 740 ,className = "unit.TestType" ,methodName = "testAbstractGeneric" ))
		map1 = _hx_c.haxe_ds_IntMap()
		_hx_c.unit_TestType._mapMe(map1)
		self.t(_hx_c.Std._hx_is(map1, _hx_c.haxe_ds_IntMap), _hx_c._hx_AnonObject(fileName = "TestType.hx" ,lineNumber = 744 ,className = "unit.TestType" ,methodName = "testAbstractGeneric" ))
		map2 = _hx_c.haxe_ds_ObjectMap()
		a = _hx_c.unit_ClassWithHashCode(1)
		b = _hx_c.unit_ClassWithHashCode(2)
		map2.set(a, "foo")
		map2.set(b, "bar")
		self.eq(map2.h.get(a, None), "foo", _hx_c._hx_AnonObject(fileName = "TestType.hx" ,lineNumber = 751 ,className = "unit.TestType" ,methodName = "testAbstractGeneric" ))
		self.eq(map2.h.get(b, None), "bar", _hx_c._hx_AnonObject(fileName = "TestType.hx" ,lineNumber = 752 ,className = "unit.TestType" ,methodName = "testAbstractGeneric" ))
		map3 = _hx_c.haxe_ds_ObjectMap()
		a1 = _hx_c.unit_ClassWithoutHashCode(1)
		b1 = _hx_c.unit_ClassWithoutHashCode(2)
		map3.set(a1, "foo")
		map3.set(b1, "bar")
		self.eq(map3.h.get(a1, None), "foo", _hx_c._hx_AnonObject(fileName = "TestType.hx" ,lineNumber = 760 ,className = "unit.TestType" ,methodName = "testAbstractGeneric" ))
		self.eq(map3.h.get(b1, None), "bar", _hx_c._hx_AnonObject(fileName = "TestType.hx" ,lineNumber = 761 ,className = "unit.TestType" ,methodName = "testAbstractGeneric" ))
	

	def testAbstractOverload(self):
		ms1 = "foo"
		ms2 = "bar"
		msum = Std.string(_hx_c.Std.string(ms1)) + Std.string(_hx_c.Std.string(ms2))
		self.eq(msum, "foobar", _hx_c._hx_AnonObject(fileName = "TestType.hx" ,lineNumber = 786 ,className = "unit.TestType" ,methodName = "testAbstractOverload" ))
		_hx_local_0 = _hx_c.unit_Test
		_hx_local_1 = _hx_local_0.count
		_hx_local_0.count = _hx_local_1 + 1
		_hx_local_1
		
		self.eq("TAbstract(unit.MyString,[])", "TAbstract(unit.MyString,[])", _hx_c._hx_AnonObject(fileName = "TestType.hx" ,lineNumber = 787 ,className = "unit.TestType" ,methodName = "testAbstractOverload" ))
		
		self.t(_hx_c.Std._hx_is(msum, _hx_c.String), _hx_c._hx_AnonObject(fileName = "TestType.hx" ,lineNumber = 788 ,className = "unit.TestType" ,methodName = "testAbstractOverload" ))
		msum2 = Std.string(_hx_c.Std.string(ms1)) + Std.string(1)
		self.eq(msum2, "foo1", _hx_c._hx_AnonObject(fileName = "TestType.hx" ,lineNumber = 791 ,className = "unit.TestType" ,methodName = "testAbstractOverload" ))
		_hx_local_2 = _hx_c.unit_Test
		_hx_local_3 = _hx_local_2.count
		_hx_local_2.count = _hx_local_3 + 1
		_hx_local_3
		
		self.eq("TAbstract(unit.MyString,[])", "TAbstract(unit.MyString,[])", _hx_c._hx_AnonObject(fileName = "TestType.hx" ,lineNumber = 792 ,className = "unit.TestType" ,methodName = "testAbstractOverload" ))
		
		self.t(_hx_c.Std._hx_is(msum2, _hx_c.String), _hx_c._hx_AnonObject(fileName = "TestType.hx" ,lineNumber = 793 ,className = "unit.TestType" ,methodName = "testAbstractOverload" ))
		self.t(True, _hx_c._hx_AnonObject(fileName = "TestType.hx" ,lineNumber = 796 ,className = "unit.TestType" ,methodName = "testAbstractOverload" ))
		self.t(True, _hx_c._hx_AnonObject(fileName = "TestType.hx" ,lineNumber = 798 ,className = "unit.TestType" ,methodName = "testAbstractOverload" ))
	

	def testAbstractUnop(self):
		vec = _hx_c.unit_MyPoint3(1, 2, 3)
		vec2 = _hx_c.unit_MyPoint3(-_hx_c.unit_MyAbstract_MyVector_Impl_.get_x(vec), -_hx_c.unit_MyAbstract_MyVector_Impl_.get_y(vec), -_hx_c.unit_MyAbstract_MyVector_Impl_.get_z(vec))
		self.t(vec2 != vec, _hx_c._hx_AnonObject(fileName = "TestType.hx" ,lineNumber = 804 ,className = "unit.TestType" ,methodName = "testAbstractUnop" ))
		self.eq(Std.string(Std.string(Std.string(Std.string(Std.string("(" + Std.string(vec.x)) + ",") + Std.string(vec.y)) + ",") + Std.string(vec.z)) + ")", "(1,2,3)", _hx_c._hx_AnonObject(fileName = "TestType.hx" ,lineNumber = 805 ,className = "unit.TestType" ,methodName = "testAbstractUnop" ))
		self.eq(Std.string(Std.string(Std.string(Std.string(Std.string("(" + Std.string(vec2.x)) + ",") + Std.string(vec2.y)) + ",") + Std.string(vec2.z)) + ")", "(-1,-2,-3)", _hx_c._hx_AnonObject(fileName = "TestType.hx" ,lineNumber = 806 ,className = "unit.TestType" ,methodName = "testAbstractUnop" ))
		my = 12
		self.eq(_hx_c.unit_MyAbstract_MyInt2_Impl_.get(-my), -12, _hx_c._hx_AnonObject(fileName = "TestType.hx" ,lineNumber = 809 ,className = "unit.TestType" ,methodName = "testAbstractUnop" ))
		_hx_local_0 = _hx_c.unit_Test
		_hx_local_1 = _hx_local_0.count
		_hx_local_0.count = _hx_local_1 + 1
		_hx_local_1
		
		self.eq("TAbstract(unit.MyInt2,[])", "TAbstract(unit.MyInt2,[])", _hx_c._hx_AnonObject(fileName = "TestType.hx" ,lineNumber = 810 ,className = "unit.TestType" ,methodName = "testAbstractUnop" ))
		
		my = my + 1
		self.eq(_hx_c.unit_MyAbstract_MyInt2_Impl_.get(my), 13, _hx_c._hx_AnonObject(fileName = "TestType.hx" ,lineNumber = 812 ,className = "unit.TestType" ,methodName = "testAbstractUnop" ))
		self.t(True, _hx_c._hx_AnonObject(fileName = "TestType.hx" ,lineNumber = 814 ,className = "unit.TestType" ,methodName = "testAbstractUnop" ))
		self.t(True, _hx_c._hx_AnonObject(fileName = "TestType.hx" ,lineNumber = 816 ,className = "unit.TestType" ,methodName = "testAbstractUnop" ))
	

	def testMapComprehension(self):
		map = None
		_g = _hx_c.haxe_ds_StringMap()
		_g1 = 0
		_g2 = ["a", "b"]
		while _g1 < _hx_builtin.len(_g2):
			x = _hx_array_get(_g2,_g1)
			_g1 = _g1 + 1
			value = x.upper()
			_g.set(x, value)
		
		
		map = _g
		
		self.t(map.exists("a"), _hx_c._hx_AnonObject(fileName = "TestType.hx" ,lineNumber = 821 ,className = "unit.TestType" ,methodName = "testMapComprehension" ))
		self.t(map.exists("b"), _hx_c._hx_AnonObject(fileName = "TestType.hx" ,lineNumber = 822 ,className = "unit.TestType" ,methodName = "testMapComprehension" ))
		self.eq(map.get("a"), "A", _hx_c._hx_AnonObject(fileName = "TestType.hx" ,lineNumber = 823 ,className = "unit.TestType" ,methodName = "testMapComprehension" ))
		self.eq(map.get("b"), "B", _hx_c._hx_AnonObject(fileName = "TestType.hx" ,lineNumber = 824 ,className = "unit.TestType" ,methodName = "testMapComprehension" ))
	

	def testCustomArrayAccess(self):
		obj = _hx_c._hx_AnonObject(foo = 12 ,bar = "test" )
		mr = obj
		self.eq(_hx_c.Reflect.field(mr, "foo"), 12, _hx_c._hx_AnonObject(fileName = "TestType.hx" ,lineNumber = 833 ,className = "unit.TestType" ,methodName = "testCustomArrayAccess" ))
		self.eq(_hx_c.Reflect.field(mr, "bar"), "test", _hx_c._hx_AnonObject(fileName = "TestType.hx" ,lineNumber = 834 ,className = "unit.TestType" ,methodName = "testCustomArrayAccess" ))
		field = None
		if _hx_c.python_internal_KeywordHandler.keywords.exists("foo"):
			field = "_hx_" + "foo"
		else:
			field = "foo"
		_hx_builtin.setattr(mr, field, 11)
		
		11
		
		self.eq(_hx_c.Reflect.field(mr, "foo"), 11, _hx_c._hx_AnonObject(fileName = "TestType.hx" ,lineNumber = 836 ,className = "unit.TestType" ,methodName = "testCustomArrayAccess" ))
		value = python_Boot._add_dynamic(_hx_c.Reflect.field(mr, "foo"),99)
		field1 = None
		if _hx_c.python_internal_KeywordHandler.keywords.exists("foo"):
			field1 = "_hx_" + "foo"
		else:
			field1 = "foo"
		_hx_builtin.setattr(mr, field1, value)
		
		value
		
		self.eq(_hx_c.Reflect.field(mr, "foo"), 110, _hx_c._hx_AnonObject(fileName = "TestType.hx" ,lineNumber = 838 ,className = "unit.TestType" ,methodName = "testCustomArrayAccess" ))
		value1 = None
		value2 = python_Boot._add_dynamic(_hx_c.Reflect.field(mr, "bar"),_hx_c.Reflect.field(mr, "foo"))
		field2 = None
		if _hx_c.python_internal_KeywordHandler.keywords.exists("bar"):
			field2 = "_hx_" + "bar"
		else:
			field2 = "bar"
		_hx_builtin.setattr(mr, field2, value2)
		
		value1 = value2
		
		field3 = None
		if _hx_c.python_internal_KeywordHandler.keywords.exists("baz"):
			field3 = "_hx_" + "baz"
		else:
			field3 = "baz"
		_hx_builtin.setattr(mr, field3, value1)
		
		value1
		
		self.eq(_hx_c.Reflect.field(mr, "baz"), "test110", _hx_c._hx_AnonObject(fileName = "TestType.hx" ,lineNumber = 840 ,className = "unit.TestType" ,methodName = "testCustomArrayAccess" ))
		self.eq(_hx_c.Reflect.field(mr, "bar"), "test110", _hx_c._hx_AnonObject(fileName = "TestType.hx" ,lineNumber = 841 ,className = "unit.TestType" ,methodName = "testCustomArrayAccess" ))
		v = "hh"
		field4 = None
		if _hx_c.python_internal_KeywordHandler.keywords.exists(v):
			field4 = "_hx_" + Std.string(v)
		else:
			field4 = v
		_hx_builtin.setattr(mr, field4, 1)
		
		1
		
		def _hx_local_1():
			nonlocal v
			v = Std.string(v) + "h"
			return v
			
		
		key = _hx_local_1()
		field5 = None
		if _hx_c.python_internal_KeywordHandler.keywords.exists(key):
			field5 = "_hx_" + Std.string(key)
		else:
			field5 = key
		_hx_builtin.setattr(mr, field5, 2)
		
		2
		
		self.eq(_hx_c.Reflect.field(mr, "hhh"), 2, _hx_c._hx_AnonObject(fileName = "TestType.hx" ,lineNumber = 846 ,className = "unit.TestType" ,methodName = "testCustomArrayAccess" ))
		self.eq(v, "hhh", _hx_c._hx_AnonObject(fileName = "TestType.hx" ,lineNumber = 847 ,className = "unit.TestType" ,methodName = "testCustomArrayAccess" ))
		field6 = None
		if _hx_c.python_internal_KeywordHandler.keywords.exists("hhhh"):
			field6 = "_hx_" + "hhhh"
		else:
			field6 = "hhhh"
		_hx_builtin.setattr(mr, field6, 0)
		
		0
		
		def _hx_local_3():
			nonlocal v
			v = Std.string(v) + "h"
			return v
			
		
		_g = _hx_local_3()
		value3 = python_Boot._add_dynamic(_hx_c.Reflect.field(mr, _g),4)
		field7 = None
		if _hx_c.python_internal_KeywordHandler.keywords.exists(_g):
			field7 = "_hx_" + Std.string(_g)
		else:
			field7 = _g
		_hx_builtin.setattr(mr, field7, value3)
		
		value3
		
		
		self.eq(_hx_c.Reflect.field(mr, "hhhh"), 4, _hx_c._hx_AnonObject(fileName = "TestType.hx" ,lineNumber = 851 ,className = "unit.TestType" ,methodName = "testCustomArrayAccess" ))
		self.eq(_hx_c.Reflect.field(mr, "hhh"), 2, _hx_c._hx_AnonObject(fileName = "TestType.hx" ,lineNumber = 852 ,className = "unit.TestType" ,methodName = "testCustomArrayAccess" ))
		self.eq(v, "hhhh", _hx_c._hx_AnonObject(fileName = "TestType.hx" ,lineNumber = 853 ,className = "unit.TestType" ,methodName = "testCustomArrayAccess" ))
		value4 = None
		def _hx_local_4(x):
			return 9 + x
		n = _hx_local_4
		value4 = n
		
		field8 = None
		if _hx_c.python_internal_KeywordHandler.keywords.exists("101"):
			field8 = "_hx_" + "101"
		else:
			field8 = "101"
		_hx_builtin.setattr(mr, field8, value4)
		
		value4
		
		self.eq(_hx_c.Reflect.field(mr, "101")(1), 10, _hx_c._hx_AnonObject(fileName = "TestType.hx" ,lineNumber = 857 ,className = "unit.TestType" ,methodName = "testCustomArrayAccess" ))
	

	def testAbstractClosure(self):
		s = _hx_c.unit_MyAbstract_MyAbstractClosure_Impl_._new("foo")
		func1 = _hx_c.unit_MyAbstract_MyAbstractClosure_Impl_.test(s)
		self.eq(func1(), "foo", _hx_c._hx_AnonObject(fileName = "TestType.hx" ,lineNumber = 863 ,className = "unit.TestType" ,methodName = "testAbstractClosure" ))
		s = "bar"
		self.eq(func1(), "foo", _hx_c._hx_AnonObject(fileName = "TestType.hx" ,lineNumber = 865 ,className = "unit.TestType" ,methodName = "testAbstractClosure" ))
		self.eq(_hx_c.unit_MyAbstract_MyAbstractClosure_Impl_.test(s)(), "bar", _hx_c._hx_AnonObject(fileName = "TestType.hx" ,lineNumber = 866 ,className = "unit.TestType" ,methodName = "testAbstractClosure" ))
	

	def testAbstractTypeParameterVariance(self):
		a = [1, 2, 3]
		b = a
	

	def testExposingAbstract(self):
		ea = []
		ea.append(12)
		_hx_builtin.len(ea)
		
		self.eq(12, None if (_hx_builtin.len(ea) == 0) else ea.pop(), _hx_c._hx_AnonObject(fileName = "TestType.hx" ,lineNumber = 878 ,className = "unit.TestType" ,methodName = "testExposingAbstract" ))
	





unit_TestType._hx_class = unit_TestType
unit_TestType._hx_class_name = "unit.TestType"
_hx_classes["unit.TestType"] = unit_TestType
_hx_c.unit_TestType = unit_TestType
unit_TestType._hx_fields = []
unit_TestType._hx_props = []
unit_TestType._hx_methods = ["testType","testFields","testEnumEq","testPossibleBug","testAllField","testWiderVisibility","testUnifyMin","testCallback","testConstantAnonCovariance","testCovariantReturn","testContravariantArgs","testInlineCast","testInitFields","testReturnFlow","testOptionalParamsSkip","testParamConstraints","testUsing","testInlineInit","testInline","inlineTest1","inlineTest2","testMacroRest","testGenericFunction","testCompletion","testSuperPropAccess","testVoidFunc","testAbstractCastConstraints","testOpArrow","testAbstractGeneric","testAbstractOverload","testAbstractUnop","testMapComprehension","testCustomArrayAccess","testAbstractClosure","testAbstractTypeParameterVariance","testExposingAbstract"]
unit_TestType._hx_statics = ["overloadFake_Int","gf3_haxe_Template_Array","gf3_String_Array","gf2_String_Array","gf2_String_Int","gf1_haxe_ds_GenericStack","gf1_haxe_Template","gf1_Bool","gf1_String","gf1_Int","u","overloadFake_String","_mapMe"]
unit_TestType._hx_interfaces = []
unit_TestType._hx_super = unit_Test
unit_TestType._hx_meta = _hx_c._hx_AnonObject(obj=_hx_c._hx_AnonObject(),statics=_hx_c._hx_AnonObject(),fields=_hx_c._hx_AnonObject())
def unit_TestType_hx_empty_init (_hx_o):
	pass
unit_TestType._hx_empty_init = unit_TestType_hx_empty_init
# print unit.TestXML.TestXML
class unit_TestXML(unit_Test):


	def __init__(self):
		super().__init__()
	def checkExc(self,x,pos = None):
		if pos is None:
			pos = None
		
		def _hx_local_0():
			x.get_nodeName()
		self.exc(_hx_local_0, pos)
		def _hx_local_1():
			x.get_nodeValue()
		self.exc(_hx_local_1, pos)
		def _hx_local_2():
			x.attributes()
		self.exc(_hx_local_2, pos)
		def _hx_local_3():
			x.get("att")
		self.exc(_hx_local_3, pos)
		def _hx_local_4():
			x.exists("att")
		self.exc(_hx_local_4, pos)
	

	def testBasic(self):
		x = _hx_c.Xml.parse("<a href=\"hello\">World<b/></a>")
		self.t(x.firstChild() == x.firstChild(), _hx_c._hx_AnonObject(fileName = "TestXML.hx" ,lineNumber = 16 ,className = "unit.TestXML" ,methodName = "testBasic" ))
		self.eq(x.nodeType, _hx_c.Xml.Document, _hx_c._hx_AnonObject(fileName = "TestXML.hx" ,lineNumber = 18 ,className = "unit.TestXML" ,methodName = "testBasic" ))
		self.checkExc(x, _hx_c._hx_AnonObject(fileName = "TestXML.hx" ,lineNumber = 19 ,className = "unit.TestXML" ,methodName = "testBasic" ))
		x = x.firstChild()
		self.eq(x.nodeType, _hx_c.Xml.Element, _hx_c._hx_AnonObject(fileName = "TestXML.hx" ,lineNumber = 22 ,className = "unit.TestXML" ,methodName = "testBasic" ))
		self.eq(x.get_nodeName(), "a", _hx_c._hx_AnonObject(fileName = "TestXML.hx" ,lineNumber = 26 ,className = "unit.TestXML" ,methodName = "testBasic" ))
		x.set_nodeName("b")
		self.eq(x.get_nodeName(), "b", _hx_c._hx_AnonObject(fileName = "TestXML.hx" ,lineNumber = 28 ,className = "unit.TestXML" ,methodName = "testBasic" ))
		self.eq(x.toString(), "<b href=\"hello\">World<b/></b>", _hx_c._hx_AnonObject(fileName = "TestXML.hx" ,lineNumber = 29 ,className = "unit.TestXML" ,methodName = "testBasic" ))
		self.eq(x.get("href"), "hello", _hx_c._hx_AnonObject(fileName = "TestXML.hx" ,lineNumber = 32 ,className = "unit.TestXML" ,methodName = "testBasic" ))
		self.eq(x.get("other"), None, _hx_c._hx_AnonObject(fileName = "TestXML.hx" ,lineNumber = 33 ,className = "unit.TestXML" ,methodName = "testBasic" ))
		self.eq(x.exists("href"), True, _hx_c._hx_AnonObject(fileName = "TestXML.hx" ,lineNumber = 34 ,className = "unit.TestXML" ,methodName = "testBasic" ))
		self.eq(x.exists("other"), False, _hx_c._hx_AnonObject(fileName = "TestXML.hx" ,lineNumber = 35 ,className = "unit.TestXML" ,methodName = "testBasic" ))
		def _hx_local_0():
			_this = _hx_c.Lambda.array(_hx_c._hx_AnonObject(iterator = x.attributes ))
			return "#".join(_hx_builtin.list(_hx_builtin.map(_hx_c.Std.string, _this)))
		
		self.eq(_hx_local_0(), "href", _hx_c._hx_AnonObject(fileName = "TestXML.hx" ,lineNumber = 36 ,className = "unit.TestXML" ,methodName = "testBasic" ))
		x.remove("href")
		def _hx_local_1():
			_this1 = _hx_c.Lambda.array(_hx_c._hx_AnonObject(iterator = x.attributes ))
			return "#".join(_hx_builtin.list(_hx_builtin.map(_hx_c.Std.string, _this1)))
		
		self.eq(_hx_local_1(), "", _hx_c._hx_AnonObject(fileName = "TestXML.hx" ,lineNumber = 38 ,className = "unit.TestXML" ,methodName = "testBasic" ))
		self.eq(x.toString(), "<b>World<b/></b>", _hx_c._hx_AnonObject(fileName = "TestXML.hx" ,lineNumber = 39 ,className = "unit.TestXML" ,methodName = "testBasic" ))
		self.eq(x.firstChild().get_nodeValue(), "World", _hx_c._hx_AnonObject(fileName = "TestXML.hx" ,lineNumber = 42 ,className = "unit.TestXML" ,methodName = "testBasic" ))
		self.eq(x.firstElement().get_nodeName(), "b", _hx_c._hx_AnonObject(fileName = "TestXML.hx" ,lineNumber = 43 ,className = "unit.TestXML" ,methodName = "testBasic" ))
		def _hx_local_2():
			_hx_c.Xml.parse("<node>")
		self.exc(_hx_local_2, _hx_c._hx_AnonObject(fileName = "TestXML.hx" ,lineNumber = 46 ,className = "unit.TestXML" ,methodName = "testBasic" ))
	

	def testFormat(self):
		self.eq(_hx_c.Xml.parse("<a><b><c/> <d/> \n <e/><![CDATA[<x>]]></b></a>").toString(), "<a><b><c/> <d/> \n <e/><![CDATA[<x>]]></b></a>", _hx_c._hx_AnonObject(fileName = "TestXML.hx" ,lineNumber = 54 ,className = "unit.TestXML" ,methodName = "testFormat" ))
		self.eq(_hx_c.Xml.parse("\"").toString(), "\"", _hx_c._hx_AnonObject(fileName = "TestXML.hx" ,lineNumber = 59 ,className = "unit.TestXML" ,methodName = "testFormat" ))
	

	def testComplex(self):
		header = "<?some header?>"
		doctype = "<!DOCTYPE root SYSTEM \"\">"
		comment = "<!--Comment-->"
		xml = "<html><body><![CDATA[<a href=\"CDATA\"/>&lt;]]></body></html>"
		x = _hx_c.Xml.parse(Std.string(Std.string(Std.string(header) + Std.string(doctype)) + Std.string(comment)) + Std.string(xml))
		self.eq(x.toString(), Std.string(Std.string(Std.string(header) + Std.string(doctype)) + Std.string(comment)) + Std.string(xml), _hx_c._hx_AnonObject(fileName = "TestXML.hx" ,lineNumber = 87 ,className = "unit.TestXML" ,methodName = "testComplex" ))
	

	def testWhitespaces(self):
		x = _hx_c.Xml.parse("<a> </a><b></b> \n <c/>")
		childs = _hx_c.Lambda.array(x)
		self.eq(_hx_builtin.len(childs), 4, _hx_c._hx_AnonObject(fileName = "TestXML.hx" ,lineNumber = 96 ,className = "unit.TestXML" ,methodName = "testWhitespaces" ))
		d = _hx_array_get(childs,2)
		self.eq(d.nodeType, _hx_c.Xml.PCData, _hx_c._hx_AnonObject(fileName = "TestXML.hx" ,lineNumber = 99 ,className = "unit.TestXML" ,methodName = "testWhitespaces" ))
		self.eq(d.get_nodeValue(), " \n ", _hx_c._hx_AnonObject(fileName = "TestXML.hx" ,lineNumber = 100 ,className = "unit.TestXML" ,methodName = "testWhitespaces" ))
		el = x.elements()
		a = el.next()
		self.eq(a.firstChild().get_nodeValue(), " ", _hx_c._hx_AnonObject(fileName = "TestXML.hx" ,lineNumber = 104 ,className = "unit.TestXML" ,methodName = "testWhitespaces" ))
		b = el.next()
		self.eq(b.firstChild().get_nodeValue(), "", _hx_c._hx_AnonObject(fileName = "TestXML.hx" ,lineNumber = 110 ,className = "unit.TestXML" ,methodName = "testWhitespaces" ))
		def _hx_local_0():
			_this = None
			_this1 = x.toString()
			_this = _hx_c.python_internal_StringImpl.split(_this1, "\n")
			
			return "\\n".join(_hx_builtin.list(_hx_builtin.map(_hx_c.Std.string, _this)))
		
		self.eq(_hx_local_0(), "<a> </a><b></b> \\n <c/>", _hx_c._hx_AnonObject(fileName = "TestXML.hx" ,lineNumber = 111 ,className = "unit.TestXML" ,methodName = "testWhitespaces" ))
		c = el.next()
		self.eq(c.firstChild(), None, _hx_c._hx_AnonObject(fileName = "TestXML.hx" ,lineNumber = 114 ,className = "unit.TestXML" ,methodName = "testWhitespaces" ))
	

	def testCreate(self):
		self.eq(_hx_c.Xml.createDocument().toString(), "", _hx_c._hx_AnonObject(fileName = "TestXML.hx" ,lineNumber = 118 ,className = "unit.TestXML" ,methodName = "testCreate" ))
		self.eq(_hx_c.Xml.createPCData("Hello").toString(), "Hello", _hx_c._hx_AnonObject(fileName = "TestXML.hx" ,lineNumber = 119 ,className = "unit.TestXML" ,methodName = "testCreate" ))
		self.eq(_hx_c.Xml.createCData("<x>").toString(), "<![CDATA[<x>]]>", _hx_c._hx_AnonObject(fileName = "TestXML.hx" ,lineNumber = 125 ,className = "unit.TestXML" ,methodName = "testCreate" ))
		self.eq(_hx_c.Xml.createComment("Hello").toString(), "<!--Hello-->", _hx_c._hx_AnonObject(fileName = "TestXML.hx" ,lineNumber = 126 ,className = "unit.TestXML" ,methodName = "testCreate" ))
		self.eq(_hx_c.Xml.createProcessingInstruction("XHTML").toString(), "<?XHTML?>", _hx_c._hx_AnonObject(fileName = "TestXML.hx" ,lineNumber = 133 ,className = "unit.TestXML" ,methodName = "testCreate" ))
		self.eq(_hx_c.Xml.createDocType("XHTML").toString(), "<!DOCTYPE XHTML>", _hx_c._hx_AnonObject(fileName = "TestXML.hx" ,lineNumber = 134 ,className = "unit.TestXML" ,methodName = "testCreate" ))
		self.eq(_hx_c.Xml.parse("<!--Hello-->").firstChild().get_nodeValue(), "Hello", _hx_c._hx_AnonObject(fileName = "TestXML.hx" ,lineNumber = 137 ,className = "unit.TestXML" ,methodName = "testCreate" ))
		c = _hx_c.Xml.createComment("Hello")
		self.eq(c.get_nodeValue(), "Hello", _hx_c._hx_AnonObject(fileName = "TestXML.hx" ,lineNumber = 139 ,className = "unit.TestXML" ,methodName = "testCreate" ))
		c.set_nodeValue("Blabla")
		self.eq(c.get_nodeValue(), "Blabla", _hx_c._hx_AnonObject(fileName = "TestXML.hx" ,lineNumber = 141 ,className = "unit.TestXML" ,methodName = "testCreate" ))
		self.eq(c.toString(), "<!--Blabla-->", _hx_c._hx_AnonObject(fileName = "TestXML.hx" ,lineNumber = 142 ,className = "unit.TestXML" ,methodName = "testCreate" ))
		self.eq(_hx_c.Xml.parse("<![CDATA[Hello]]>").firstChild().get_nodeValue(), "Hello", _hx_c._hx_AnonObject(fileName = "TestXML.hx" ,lineNumber = 143 ,className = "unit.TestXML" ,methodName = "testCreate" ))
		c1 = _hx_c.Xml.createCData("Hello")
		self.eq(c1.get_nodeValue(), "Hello", _hx_c._hx_AnonObject(fileName = "TestXML.hx" ,lineNumber = 145 ,className = "unit.TestXML" ,methodName = "testCreate" ))
		c1.set_nodeValue("Blabla")
		self.eq(c1.get_nodeValue(), "Blabla", _hx_c._hx_AnonObject(fileName = "TestXML.hx" ,lineNumber = 147 ,className = "unit.TestXML" ,methodName = "testCreate" ))
		self.eq(c1.toString(), "<![CDATA[Blabla]]>", _hx_c._hx_AnonObject(fileName = "TestXML.hx" ,lineNumber = 148 ,className = "unit.TestXML" ,methodName = "testCreate" ))
		self.eq(_hx_c.Xml.createPCData("Hello").get_nodeValue(), "Hello", _hx_c._hx_AnonObject(fileName = "TestXML.hx" ,lineNumber = 149 ,className = "unit.TestXML" ,methodName = "testCreate" ))
	

	def testNS(self):
		x = _hx_c.Xml.parse("<xhtml:br xmlns:xhtml=\"http://www.w3.org/1999/xhtml\" xhtml:alt=\"test\"><hello/></xhtml:br>").firstChild()
		self.eq(x.nodeType, _hx_c.Xml.Element, _hx_c._hx_AnonObject(fileName = "TestXML.hx" ,lineNumber = 154 ,className = "unit.TestXML" ,methodName = "testNS" ))
		self.eq(x.get_nodeName(), "xhtml:br", _hx_c._hx_AnonObject(fileName = "TestXML.hx" ,lineNumber = 155 ,className = "unit.TestXML" ,methodName = "testNS" ))
		self.t(x.exists("xhtml:alt"), _hx_c._hx_AnonObject(fileName = "TestXML.hx" ,lineNumber = 156 ,className = "unit.TestXML" ,methodName = "testNS" ))
		self.eq(x.get("xhtml:alt"), "test", _hx_c._hx_AnonObject(fileName = "TestXML.hx" ,lineNumber = 157 ,className = "unit.TestXML" ,methodName = "testNS" ))
		self.eq(x.get("xhtml:other"), None, _hx_c._hx_AnonObject(fileName = "TestXML.hx" ,lineNumber = 158 ,className = "unit.TestXML" ,methodName = "testNS" ))
		x.set("xhtml:alt", "bye")
		self.eq(x.get("xhtml:alt"), "bye", _hx_c._hx_AnonObject(fileName = "TestXML.hx" ,lineNumber = 160 ,className = "unit.TestXML" ,methodName = "testNS" ))
		h = x.firstElement()
		self.eq(h.get_nodeName(), "hello", _hx_c._hx_AnonObject(fileName = "TestXML.hx" ,lineNumber = 163 ,className = "unit.TestXML" ,methodName = "testNS" ))
		h.set_nodeName("em")
		self.eq(h.get_nodeName(), "em", _hx_c._hx_AnonObject(fileName = "TestXML.hx" ,lineNumber = 165 ,className = "unit.TestXML" ,methodName = "testNS" ))
		def _hx_local_1(f,a1):
			def _hx_local_0():
				return f(a1)
			return _hx_local_0
		
		self.eq(_hx_c.Lambda.count(_hx_c._hx_AnonObject(iterator = (_hx_local_1)(x.elementsNamed, "em") )), 1, _hx_c._hx_AnonObject(fileName = "TestXML.hx" ,lineNumber = 167 ,className = "unit.TestXML" ,methodName = "testNS" ))
		h.set_nodeName("xhtml:em")
		def _hx_local_3(f1,a11):
			def _hx_local_2():
				return f1(a11)
			return _hx_local_2
		
		self.eq(_hx_c.Lambda.count(_hx_c._hx_AnonObject(iterator = (_hx_local_3)(x.elementsNamed, "xhtml:em") )), 1, _hx_c._hx_AnonObject(fileName = "TestXML.hx" ,lineNumber = 171 ,className = "unit.TestXML" ,methodName = "testNS" ))
		def _hx_local_5(f2,a12):
			def _hx_local_4():
				return f2(a12)
			return _hx_local_4
		
		self.eq(_hx_c.Lambda.count(_hx_c._hx_AnonObject(iterator = (_hx_local_5)(x.elementsNamed, "em") )), 0, _hx_c._hx_AnonObject(fileName = "TestXML.hx" ,lineNumber = 172 ,className = "unit.TestXML" ,methodName = "testNS" ))
		self.eq(h.get_nodeName(), "xhtml:em", _hx_c._hx_AnonObject(fileName = "TestXML.hx" ,lineNumber = 174 ,className = "unit.TestXML" ,methodName = "testNS" ))
	

	def testNodetype(self):
		element = _hx_c.Xml.createElement("x")
		l = [_hx_c.Xml.createPCData("x"), _hx_c.Xml.createCData("x"), _hx_c.Xml.createDocType("x"), _hx_c.Xml.createProcessingInstruction("x"), _hx_c.Xml.createComment("x")]
		_g = 0
		while _g < _hx_builtin.len(l):
			xml = [_hx_array_get(l,_g)]
			_g = _g + 1
			def _hx_local_1(xml):
				def _hx_local_0():
					_hx_array_get(xml,0).firstChild()
				return _hx_local_0
			
			self.exc((_hx_local_1)(xml), _hx_c._hx_AnonObject(fileName = "TestXML.hx" ,lineNumber = 183 ,className = "unit.TestXML" ,methodName = "testNodetype" ))
			def _hx_local_3(xml):
				def _hx_local_2():
					_hx_array_get(xml,0).firstElement()
				return _hx_local_2
			
			self.exc((_hx_local_3)(xml), _hx_c._hx_AnonObject(fileName = "TestXML.hx" ,lineNumber = 184 ,className = "unit.TestXML" ,methodName = "testNodetype" ))
			def _hx_local_5(xml):
				def _hx_local_4():
					_hx_array_get(xml,0).elements()
				return _hx_local_4
			
			self.exc((_hx_local_5)(xml), _hx_c._hx_AnonObject(fileName = "TestXML.hx" ,lineNumber = 185 ,className = "unit.TestXML" ,methodName = "testNodetype" ))
			def _hx_local_7(xml):
				def _hx_local_6():
					_hx_array_get(xml,0).elementsNamed("x")
				return _hx_local_6
			
			self.exc((_hx_local_7)(xml), _hx_c._hx_AnonObject(fileName = "TestXML.hx" ,lineNumber = 186 ,className = "unit.TestXML" ,methodName = "testNodetype" ))
			def _hx_local_9(xml):
				def _hx_local_8():
					_hx_array_get(xml,0).addChild(element)
				return _hx_local_8
			
			self.exc((_hx_local_9)(xml), _hx_c._hx_AnonObject(fileName = "TestXML.hx" ,lineNumber = 187 ,className = "unit.TestXML" ,methodName = "testNodetype" ))
			def _hx_local_11(xml):
				def _hx_local_10():
					_hx_array_get(xml,0).removeChild(element)
				return _hx_local_10
			
			self.exc((_hx_local_11)(xml), _hx_c._hx_AnonObject(fileName = "TestXML.hx" ,lineNumber = 188 ,className = "unit.TestXML" ,methodName = "testNodetype" ))
			def _hx_local_13(xml):
				def _hx_local_12():
					_hx_array_get(xml,0).insertChild(element, 0)
				return _hx_local_12
			
			self.exc((_hx_local_13)(xml), _hx_c._hx_AnonObject(fileName = "TestXML.hx" ,lineNumber = 189 ,className = "unit.TestXML" ,methodName = "testNodetype" ))
			def _hx_local_15(xml):
				def _hx_local_14():
					_it = _hx_array_get(xml,0).iterator()
					while _it.hasNext():
						x = _it.next()
						None
				return _hx_local_14
			
			self.exc((_hx_local_15)(xml), _hx_c._hx_AnonObject(fileName = "TestXML.hx" ,lineNumber = 190 ,className = "unit.TestXML" ,methodName = "testNodetype" ))
		
		
	

	def testEntities(self):
		entities = ["&lt;", "&gt;", "&quot;", "&amp;", "&apos;", "&nbsp;", "&euro;", "&#64;", "&#244;", "&#x3F;", "&#xFF;"]
		values = _hx_builtin.list(entities)
		def _hx_local_0():
			c = 160
			return "".join(_hx_builtin.map(_hx_builtin.chr, [c]))
		
		values = ["<", ">", "\"", "&", "'", _hx_local_0(), "&euro;", "@", "ô", "?", "ÿ"]
		_g1 = 0
		_g = _hx_builtin.len(entities)
		while _g1 < _g:
			i = _g1
			_g1 = _g1 + 1
			
			self.infos(_hx_array_get(entities,i))
			self.eq(_hx_c.Xml.parse(_hx_array_get(entities,i)).firstChild().get_nodeValue(), _hx_array_get(values,i), _hx_c._hx_AnonObject(fileName = "TestXML.hx" ,lineNumber = 217 ,className = "unit.TestXML" ,methodName = "testEntities" ))
		
		
	

	def testCustomXmlParser(self):
		entities = ["&lt;", "&gt;", "&quot;", "&amp;", "&apos;", "&euro;", "&#64;", "&#244;", "&#x3F;", "&#xFF;"]
		def _hx_local_0():
			c = 244
			return "".join(_hx_builtin.map(_hx_builtin.chr, [c]))
		
		def _hx_local_1():
			c1 = 255
			return "".join(_hx_builtin.map(_hx_builtin.chr, [c1]))
		
		values = ["<", ">", "\"", "&", "'", "&euro;", "@", _hx_local_0(), "?", _hx_local_1()]
		_g1 = 0
		_g = _hx_builtin.len(entities)
		while _g1 < _g:
			i = _g1
			_g1 = _g1 + 1
			
			self.infos(_hx_array_get(entities,i))
			self.eq(_hx_c.haxe_xml_Parser.parse(_hx_array_get(entities,i)).firstChild().get_nodeValue(), _hx_array_get(values,i), _hx_c._hx_AnonObject(fileName = "TestXML.hx" ,lineNumber = 227 ,className = "unit.TestXML" ,methodName = "testCustomXmlParser" ))
		
		
		s = "<a>&gt;<b>&lt;</b>&lt;&gt;<b>&gt;&lt;</b>\"</a>"
		xml = _hx_c.haxe_xml_Parser.parse(s)
		self.eq(s, xml.toString(), _hx_c._hx_AnonObject(fileName = "TestXML.hx" ,lineNumber = 232 ,className = "unit.TestXML" ,methodName = "testCustomXmlParser" ))
	

	def testMore(self):
		doc = _hx_c.Xml.parse("<a>A</a><i>I</i>")
		aElement = doc.elementsNamed("a").next()
		iElement = doc.elementsNamed("i").next()
		iElement.addChild(aElement)
		self.eq(doc.toString(), "<i>I<a>A</a></i>", _hx_c._hx_AnonObject(fileName = "TestXML.hx" ,lineNumber = 241 ,className = "unit.TestXML" ,methodName = "testMore" ))
	





unit_TestXML._hx_class = unit_TestXML
unit_TestXML._hx_class_name = "unit.TestXML"
_hx_classes["unit.TestXML"] = unit_TestXML
_hx_c.unit_TestXML = unit_TestXML
unit_TestXML._hx_fields = []
unit_TestXML._hx_props = []
unit_TestXML._hx_methods = ["checkExc","testBasic","testFormat","testComplex","testWhitespaces","testCreate","testNS","testNodetype","testEntities","testCustomXmlParser","testMore"]
unit_TestXML._hx_statics = []
unit_TestXML._hx_interfaces = []
unit_TestXML._hx_super = unit_Test
unit_TestXML._hx_meta = _hx_c._hx_AnonObject(obj=_hx_c._hx_AnonObject(),statics=_hx_c._hx_AnonObject(),fields=_hx_c._hx_AnonObject())
def unit_TestXML_hx_empty_init (_hx_o):
	pass
unit_TestXML._hx_empty_init = unit_TestXML_hx_empty_init
python_Boot.inspect = None;
python_Boot.builtin = None;
def Boot_statics_isClass(o):
	return o is not None and (o == _hx_c.String or _hx_c.python_lib_Inspect.isclass(o))
python_Boot.isClass = Boot_statics_isClass
def Boot_statics_isAnonObject(o):
	return _hx_builtin.isinstance(o, _hx_c._hx_AnonObject)
python_Boot.isAnonObject = Boot_statics_isAnonObject
def Boot_statics__add_dynamic(a,b):
	if _hx_c.python_Boot.builtin.isinstance(a, str) or _hx_c.python_Boot.builtin.isinstance(b, str):
		return Std.string(_hx_c.python_Boot.__string_rec(a, "")) + Std.string(_hx_c.python_Boot.__string_rec(b, ""))
	
	return a+b
	
python_Boot._add_dynamic = Boot_statics__add_dynamic
def Boot_statics___string_rec(o,s):
	if s is None:
		s = ""
	
	if o is None:
		return "null"
	
	if _hx_builtin.len(s) >= 5:
		return "<...>"
	
	if _hx_c.python_Boot.builtin.isinstance(o, str):
		return o
	
	if _hx_c.python_Boot.builtin.isinstance(o, bool):
		if o:
			return "true"
		else:
			return "false"
	
	if _hx_c.python_Boot.builtin.isinstance(o, int):
		return _hx_c.python_Boot.builtin.str(o)
	
	if _hx_c.python_Boot.builtin.isinstance(o, float):
		try:
			if o == _hx_builtin.int(o):
				def _hx_local_1():
					def _hx_local_0():
						v = o
						return _hx_math.floor(v + 0.5)
					
					return _hx_c.python_Boot.builtin.str(_hx_local_0())
				
				return _hx_local_1()
	
			else:
				return _hx_c.python_Boot.builtin.str(o)
		except Exception as _hx_e:
			_hx_e1 = _hx_e.val if isinstance(_hx_e, _HxException) else _hx_e
			if True:
				e = _hx_e1
				return _hx_c.python_Boot.builtin.str(o)
			else:
				raise _hx_e
	
	if _hx_c.python_Boot.inspect.isfunction(o) or _hx_c.python_Boot.inspect.ismethod(o):
		return "<function>"
	
	if _hx_c.python_Boot.builtin.isinstance(o, list):
		o1 = o
		l = _hx_builtin.len(o1)
		st = "["
		s = Std.string(s) + "\t"
		_g = 0
		while _g < l:
			i = _g
			_g = _g + 1
			
			prefix = ""
			if i > 0:
				prefix = ","
			
			st = Std.string(st) + Std.string(Std.string(prefix) + Std.string(_hx_c.python_Boot.__string_rec(_hx_array_get(o1,i), s)))
		
		
		st = Std.string(st) + "]"
		return st
	
	
	try:
		if _hx_c.python_Boot.builtin.hasattr(o, "toString"):
			return o.toString()
		
	except Exception as _hx_e:
		_hx_e1 = _hx_e.val if isinstance(_hx_e, _HxException) else _hx_e
		if True:
			e1 = _hx_e1
			None
		else:
			raise _hx_e
	if _hx_c.python_Boot.builtin.hasattr(o, "__class__"):
		if _hx_c.python_Boot.builtin.isinstance(o, _hx_c._hx_AnonObject):
			toStr = None
			try:
				fields = _hx_c.Reflect.fields(o)
				fieldsStr = None
				_g1 = []
				_g11 = 0
				while _g11 < _hx_builtin.len(fields):
					f = _hx_array_get(fields,_g11)
					_g11 = _g11 + 1
					x = Std.string(Std.string("" + Std.string(f)) + " : ") + Std.string(_hx_c.python_Boot.__string_rec(_hx_c.Reflect.field(o, f), Std.string(s) + "\t"))
					_g1.append(x)
					_hx_builtin.len(_g1)
					
				
				
				fieldsStr = _g1
				
				toStr = Std.string("{ " + Std.string(", ".join(_hx_builtin.list(_hx_builtin.map(_hx_c.Std.string, fieldsStr))))) + " }"
			
			except Exception as _hx_e:
				_hx_e1 = _hx_e.val if isinstance(_hx_e, _HxException) else _hx_e
				if True:
					e2 = _hx_e1
					_hx_c.haxe_Log.trace(e2, _hx_c._hx_AnonObject(fileName = "Boot.hx" ,lineNumber = 115 ,className = "python.Boot" ,methodName = "__string_rec" ))
				else:
					raise _hx_e
			if toStr is None:
				return "{ ... }"
			else:
				return toStr
		
		
		if _hx_c.python_Boot.builtin.isinstance(o, _hx_c.Enum):
			l1 = _hx_c.python_Boot.builtin.len(o.params)
			hasParams = l1 > 0
			if hasParams:
				paramsStr = ""
				_g2 = 0
				while _g2 < l1:
					i1 = _g2
					_g2 = _g2 + 1
					
					prefix1 = ""
					if i1 > 0:
						prefix1 = ","
					
					paramsStr = Std.string(paramsStr) + Std.string(Std.string(prefix1) + Std.string(_hx_c.python_Boot.__string_rec(_hx_array_get(o.params,i1), s)))
				
				
				return Std.string(Std.string(Std.string(_hx_c.Std.string(o.tag)) + "(") + Std.string(paramsStr)) + ")"
			
			else:
				return o.tag
		
		
		if _hx_c.python_Boot.builtin.hasattr(o, "_hx_class_name") and o.__class__.__name__ != "type":
			fields1 = _hx_c.Type.getInstanceFields(o)
			fieldsStr1 = None
			_g3 = []
			_g12 = 0
			while _g12 < _hx_builtin.len(fields1):
				f1 = _hx_array_get(fields1,_g12)
				_g12 = _g12 + 1
				x1 = Std.string(Std.string("" + Std.string(f1)) + " : ") + Std.string(_hx_c.python_Boot.__string_rec(_hx_c.Reflect.field(o, f1), Std.string(s) + "\t"))
				_g3.append(x1)
				_hx_builtin.len(_g3)
				
			
			
			fieldsStr1 = _g3
			
			toStr1 = Std.string(Std.string(Std.string(_hx_c.Std.string(o._hx_class_name)) + "( ") + Std.string(", ".join(_hx_builtin.list(_hx_builtin.map(_hx_c.Std.string, fieldsStr1))))) + " )"
			return toStr1
		
		
		if _hx_c.python_Boot.builtin.hasattr(o, "_hx_class_name") and o.__class__.__name__ == "type":
			fields2 = _hx_c.Type.getClassFields(o)
			fieldsStr2 = None
			_g4 = []
			_g13 = 0
			while _g13 < _hx_builtin.len(fields2):
				f2 = _hx_array_get(fields2,_g13)
				_g13 = _g13 + 1
				x2 = Std.string(Std.string("" + Std.string(f2)) + " : ") + Std.string(_hx_c.python_Boot.__string_rec(_hx_c.Reflect.field(o, f2), Std.string(s) + "\t"))
				_g4.append(x2)
				_hx_builtin.len(_g4)
				
			
			
			fieldsStr2 = _g4
			
			toStr2 = Std.string(Std.string(Std.string("#" + Std.string(_hx_c.Std.string(o._hx_class_name))) + "( ") + Std.string(", ".join(_hx_builtin.list(_hx_builtin.map(_hx_c.Std.string, fieldsStr2))))) + " )"
			return toStr2
		
		
		if o == _hx_c.String:
			return "#String"
		
		if o == list:
			return "#Array"
		
		if _hx_c.python_Boot.builtin.callable(o):
			return "function"
		
		try:
			if _hx_c.python_Boot.builtin.hasattr(o, "__repr__"):
				return o.__repr__()
			
		except Exception as _hx_e:
			_hx_e1 = _hx_e.val if isinstance(_hx_e, _HxException) else _hx_e
			if True:
				e3 = _hx_e1
				None
			else:
				raise _hx_e
		if _hx_c.python_Boot.builtin.hasattr(o, "__str__"):
			return o.__str__()
		
		if _hx_c.python_Boot.builtin.hasattr(o, "__name__"):
			return o.__name__
		
		return "???"
	
	else:
		try:
			def _hx_local_6(_):
				return True
			_hx_c.python_Boot.inspect.getmembers(o, _hx_local_6)
			return _hx_c.python_Boot.builtin.str(o)
	
		except Exception as _hx_e:
			_hx_e1 = _hx_e.val if isinstance(_hx_e, _HxException) else _hx_e
			if True:
				e4 = _hx_e1
				return "???"
			else:
				raise _hx_e
	
python_Boot.__string_rec = Boot_statics___string_rec

import inspect as inspect
_hx_c.inspect = inspect

_hx_c.python_Boot.inspect = inspect
_hx_c.python_Boot.builtin = _hx_builtin
	
def ArrayImpl_statics_get_length(x):
	return _hx_builtin.len(x)
python_internal_ArrayImpl.get_length = ArrayImpl_statics_get_length
def ArrayImpl_statics_concat(a1,a2):
	return a1 + a2
python_internal_ArrayImpl.concat = ArrayImpl_statics_concat
def ArrayImpl_statics_copy(x):
	return _hx_builtin.list(x)
python_internal_ArrayImpl.copy = ArrayImpl_statics_copy
def ArrayImpl_statics_iterator(x):
	it = x.__iter__()
	return _hx_c.python_HaxeIterator(it)
	
python_internal_ArrayImpl.iterator = ArrayImpl_statics_iterator
def ArrayImpl_statics_indexOf(a,x,fromIndex = None):
	if fromIndex is None:
		fromIndex = None
	
	l = None
	if fromIndex is None:
		l = 0
	elif fromIndex < 0:
		l = _hx_builtin.len(a) + fromIndex
	else:
		l = fromIndex
	if l < 0:
		l = 0
	
	_g1 = l
	_g = _hx_builtin.len(a)
	while _g1 < _g:
		i = _g1
		_g1 = _g1 + 1
		
		if _hx_array_get(a,i) == x:
			return i
		
	
	
	return -1
	
python_internal_ArrayImpl.indexOf = ArrayImpl_statics_indexOf
def ArrayImpl_statics_lastIndexOf(a,x,fromIndex = None):
	if fromIndex is None:
		fromIndex = None
	
	l = None
	if fromIndex is None:
		l = _hx_builtin.len(a)
	elif fromIndex < 0:
		l = _hx_builtin.len(a) + fromIndex + 1
	else:
		l = fromIndex + 1
	if l > _hx_builtin.len(a):
		l = _hx_builtin.len(a)
	
	def _hx_local_0():
		nonlocal l
		l = l - 1
		return l
		
	
	while _hx_local_0() > -1:
		if _hx_array_get(a,l) == x:
			return l
		
	return -1
	
python_internal_ArrayImpl.lastIndexOf = ArrayImpl_statics_lastIndexOf
def ArrayImpl_statics_join(x,sep):
	return sep.join(_hx_builtin.list(_hx_builtin.map(_hx_c.Std.string, x)))
python_internal_ArrayImpl.join = ArrayImpl_statics_join
def ArrayImpl_statics_toString(x):
	return Std.string("[" + Std.string(",".join(_hx_builtin.list(_hx_builtin.map(_hx_c.Std.string, x))))) + "]"
python_internal_ArrayImpl.toString = ArrayImpl_statics_toString
def ArrayImpl_statics_pop(x):
	if _hx_builtin.len(x) == 0:
		return None
	else:
		return x.pop()
python_internal_ArrayImpl.pop = ArrayImpl_statics_pop
def ArrayImpl_statics_push(x,e):
	x.append(e)
	return _hx_builtin.len(x)
	
python_internal_ArrayImpl.push = ArrayImpl_statics_push
def ArrayImpl_statics_unshift(x,e):
	return x.insert(0, e)
python_internal_ArrayImpl.unshift = ArrayImpl_statics_unshift
def ArrayImpl_statics_remove(x,e):
	try:
		x.remove(e)
		return True
	
	except Exception as _hx_e:
		_hx_e1 = _hx_e.val if isinstance(_hx_e, _HxException) else _hx_e
		if True:
			e1 = _hx_e1
			return False
		else:
			raise _hx_e
python_internal_ArrayImpl.remove = ArrayImpl_statics_remove
def ArrayImpl_statics_shift(x):
	if _hx_builtin.len(x) == 0:
		return None
	
	return x.pop(0)
	
python_internal_ArrayImpl.shift = ArrayImpl_statics_shift
def ArrayImpl_statics_slice(x,pos,end = None):
	if end is None:
		end = None
	
	return x[pos:end]
	
python_internal_ArrayImpl.slice = ArrayImpl_statics_slice
def ArrayImpl_statics_sort(x,f):
	return x.sort(key=_hx_functools.cmp_to_key(f))
python_internal_ArrayImpl.sort = ArrayImpl_statics_sort
def ArrayImpl_statics_splice(x,pos,len):
	if pos < 0:
		pos = _hx_builtin.len(x) + pos
	
	if pos < 0:
		pos = 0
	
	res = x[pos:pos + len]
	del x[pos:pos + len]
	return res
	
python_internal_ArrayImpl.splice = ArrayImpl_statics_splice
def ArrayImpl_statics_map(x,f):
	return _hx_builtin.list(_hx_builtin.map(f, x))
python_internal_ArrayImpl.map = ArrayImpl_statics_map
def ArrayImpl_statics_filter(x,f):
	return _hx_builtin.list(_hx_builtin.filter(f, x))
python_internal_ArrayImpl.filter = ArrayImpl_statics_filter
def ArrayImpl_statics___get(x,idx):
	_hx_a = x
	if idx >= _hx_builtin.len(_hx_a) or idx < 0:
		return None
	else:
		return _hx_array_get(x,idx)
	
python_internal_ArrayImpl.__get = ArrayImpl_statics___get
def ArrayImpl_statics___set(x,idx,v):
	_hx_a = x
	_hx_array_set(_hx_a,idx, v)
	return v
	
python_internal_ArrayImpl.__set = ArrayImpl_statics___set
def ArrayImpl_statics___unsafe_get(x,idx):
	return _hx_array_get(x,idx)
python_internal_ArrayImpl.__unsafe_get = ArrayImpl_statics___unsafe_get
def ArrayImpl_statics___unsafe_set(x,idx,val):
	_hx_array_set(x,idx, val)
	return val
	
python_internal_ArrayImpl.__unsafe_set = ArrayImpl_statics___unsafe_set

def Date_statics_now():
	d = _hx_c.Date(1970, 0, 1, 0, 0, 0)
	d.date = _hx_c.python_lib_datetime_DateTime.now()
	return d
	
Date.now = Date_statics_now
def Date_statics_fromTime(t):
	d = _hx_c.Date(1970, 0, 1, 0, 0, 0)
	d.date = _hx_c.python_lib_datetime_DateTime.fromtimestamp(t / 1000.0)
	return d
	
Date.fromTime = Date_statics_fromTime
def Date_statics_UTC(year,month,day,hour,min,sec):
	return _hx_c.python_lib_datetime_DateTime(year, month + 1, day, hour, min, sec, 0, _hx_c.python_lib_datetime_Timezone.utc).timestamp() * 1000.0
Date.UTC = Date_statics_UTC
def Date_statics_fromString(s):
	_g = _hx_builtin.len(s)
	if (_g) == 8:
		k = _hx_c.python_internal_StringImpl.split(s, ":")
		d = _hx_c.Date(0, 0, 0, _hx_c.Std.parseInt(_hx_array_get(k,0)), _hx_c.Std.parseInt(_hx_array_get(k,1)), _hx_c.Std.parseInt(_hx_array_get(k,2)))
		return d
	
	elif (_g) == 10:
		k1 = _hx_c.python_internal_StringImpl.split(s, "-")
		return _hx_c.Date(_hx_c.Std.parseInt(_hx_array_get(k1,0)), _hx_c.Std.parseInt(_hx_array_get(k1,1)) - 1, _hx_c.Std.parseInt(_hx_array_get(k1,2)), 0, 0, 0)
	
	elif (_g) == 19:
		k2 = _hx_c.python_internal_StringImpl.split(s, " ")
		y = _hx_c.python_internal_StringImpl.split(_hx_array_get(k2,0), "-")
		t = _hx_c.python_internal_StringImpl.split(_hx_array_get(k2,1), ":")
		return _hx_c.Date(_hx_c.Std.parseInt(_hx_array_get(y,0)), _hx_c.Std.parseInt(_hx_array_get(y,1)) - 1, _hx_c.Std.parseInt(_hx_array_get(y,2)), _hx_c.Std.parseInt(_hx_array_get(t,0)), _hx_c.Std.parseInt(_hx_array_get(t,1)), _hx_c.Std.parseInt(_hx_array_get(t,2)))
	
	else:
		raise _HxException("Invalid date format : " + Std.string(s))
	
Date.fromString = Date_statics_fromString

def DateTools_statics___format_get(d,e):
	if (e) == "%":
		return "%"
	elif (e) == "C":
		def _hx_local_2():
			def _hx_local_1():
				_hx_local_0 = None
				try:
					_hx_local_0 = int(d.date.year / 100)
				except Exception as _hx_e:
					_hx_e1 = _hx_e.val if isinstance(_hx_e, _HxException) else _hx_e
					if True:
						e1 = _hx_e1
						_hx_local_0 = None
					else:
						raise _hx_e
				return _hx_local_0
			
			return _hx_c.StringTools.lpad(_hx_c.Std.string(_hx_local_1()), "0", 2)
		
		return _hx_local_2()
	
	elif (e) == "d":
		return _hx_c.StringTools.lpad(_hx_c.Std.string(d.date.day), "0", 2)
	elif (e) == "D":
		return _hx_c.DateTools.__format(d, "%m/%d/%y")
	elif (e) == "e":
		return _hx_c.Std.string(d.date.day)
	elif (e) == "k" or (e) == "H":
		return _hx_c.StringTools.lpad(_hx_c.Std.string(d.date.hour), "0" if (e == "H") else " ", 2)
	elif (e) == "l" or (e) == "I":
		hour = d.date.hour % 12
		return _hx_c.StringTools.lpad(_hx_c.Std.string(12 if (hour == 0) else hour), "0" if (e == "I") else " ", 2)
	
	elif (e) == "m":
		return _hx_c.StringTools.lpad(_hx_c.Std.string(d.date.month - 1 + 1), "0", 2)
	elif (e) == "M":
		return _hx_c.StringTools.lpad(_hx_c.Std.string(d.date.minute), "0", 2)
	elif (e) == "n":
		return "\n"
	elif (e) == "p":
		if d.date.hour > 11:
			return "PM"
		else:
			return "AM"
	elif (e) == "r":
		return _hx_c.DateTools.__format(d, "%I:%M:%S %p")
	elif (e) == "R":
		return _hx_c.DateTools.__format(d, "%H:%M")
	elif (e) == "s":
		def _hx_local_7():
			def _hx_local_3():
				x = d.date.timestamp() * 1000.0 / 1000
				def _hx_local_6():
					def _hx_local_5():
						_hx_local_4 = None
						try:
							_hx_local_4 = int(x)
						except Exception as _hx_e:
							_hx_e1 = _hx_e.val if isinstance(_hx_e, _HxException) else _hx_e
							if True:
								e2 = _hx_e1
								_hx_local_4 = None
							else:
								raise _hx_e
						return _hx_local_4
					
					return _hx_local_5()
				
				return _hx_local_6()
			
			return _hx_c.Std.string(_hx_local_3())
		
		return _hx_local_7()
	
	elif (e) == "S":
		return _hx_c.StringTools.lpad(_hx_c.Std.string(d.date.second), "0", 2)
	elif (e) == "t":
		return "\t"
	elif (e) == "T":
		return _hx_c.DateTools.__format(d, "%H:%M:%S")
	elif (e) == "u":
		t = d.date.isoweekday()
		if t == 0:
			return "7"
		else:
			return _hx_c.Std.string(t)
	
	elif (e) == "w":
		return _hx_c.Std.string(d.date.isoweekday())
	elif (e) == "y":
		return _hx_c.StringTools.lpad(_hx_c.Std.string(d.date.year % 100), "0", 2)
	elif (e) == "Y":
		return _hx_c.Std.string(d.date.year)
	else:
		raise _HxException(Std.string("Date.format %" + Std.string(e)) + "- not implemented yet.")
DateTools.__format_get = DateTools_statics___format_get
def DateTools_statics___format(d,f):
	r = _hx_c.StringBuf()
	p = 0
	while True:
		np = None
		if p is None:
			np = f.find("%")
		else:
			np = f.find("%", p)
		if np < 0:
			break
		
		len = np - p
		s = None
		if len is None:
			s = _hx_c.python_Tools.substr(f, p, None)
		else:
			s = _hx_c.python_Tools.substr(f, p, len)
		r.b.write(s)
		
		
		x = _hx_c.DateTools.__format_get(d, _hx_c.python_Tools.substr(f, np + 1, 1))
		s1 = _hx_c.Std.string(x)
		r.b.write(s1)
		
		
		p = np + 2
	
	len1 = _hx_builtin.len(f) - p
	s2 = None
	if len1 is None:
		s2 = _hx_c.python_Tools.substr(f, p, None)
	else:
		s2 = _hx_c.python_Tools.substr(f, p, len1)
	r.b.write(s2)
	
	
	return r.b.getvalue()
	
DateTools.__format = DateTools_statics___format
def DateTools_statics_format(d,f):
	return _hx_c.DateTools.__format(d, f)
DateTools.format = DateTools_statics_format
def DateTools_statics_delta(d,t):
	return _hx_c.Date.fromTime(d.date.timestamp() * 1000.0 + t)
DateTools.delta = DateTools_statics_delta
DateTools.DAYS_OF_MONTH = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]
def DateTools_statics_getMonthDays(d):
	month = d.date.month - 1
	year = d.date.year
	if month != 1:
		return _hx_array_get(_hx_c.DateTools.DAYS_OF_MONTH,month)
	
	isB = year % 4 == 0 and year % 100 != 0 or year % 400 == 0
	if isB:
		return 29
	else:
		return 28
	
DateTools.getMonthDays = DateTools_statics_getMonthDays
def DateTools_statics_seconds(n):
	return n * 1000.0
DateTools.seconds = DateTools_statics_seconds
def DateTools_statics_minutes(n):
	return n * 60.0 * 1000.0
DateTools.minutes = DateTools_statics_minutes
def DateTools_statics_hours(n):
	return n * 60.0 * 60.0 * 1000.0
DateTools.hours = DateTools_statics_hours
def DateTools_statics_days(n):
	return n * 24.0 * 60.0 * 60.0 * 1000.0
DateTools.days = DateTools_statics_days
def DateTools_statics_parse(t):
	s = t / 1000
	m = s / 60
	h = m / 60
	def _hx_local_8():
		def _hx_local_1():
			_hx_local_0 = None
			try:
				_hx_local_0 = int(_hx_modf(s, 60))
			except Exception as _hx_e:
				_hx_e1 = _hx_e.val if isinstance(_hx_e, _HxException) else _hx_e
				if True:
					e = _hx_e1
					_hx_local_0 = None
				else:
					raise _hx_e
			return _hx_local_0
		
		def _hx_local_3():
			_hx_local_2 = None
			try:
				_hx_local_2 = int(_hx_modf(m, 60))
			except Exception as _hx_e:
				_hx_e1 = _hx_e.val if isinstance(_hx_e, _HxException) else _hx_e
				if True:
					e1 = _hx_e1
					_hx_local_2 = None
				else:
					raise _hx_e
			return _hx_local_2
		
		def _hx_local_5():
			_hx_local_4 = None
			try:
				_hx_local_4 = int(_hx_modf(h, 24))
			except Exception as _hx_e:
				_hx_e1 = _hx_e.val if isinstance(_hx_e, _HxException) else _hx_e
				if True:
					e2 = _hx_e1
					_hx_local_4 = None
				else:
					raise _hx_e
			return _hx_local_4
		
		def _hx_local_7():
			_hx_local_6 = None
			try:
				_hx_local_6 = int(h / 24)
			except Exception as _hx_e:
				_hx_e1 = _hx_e.val if isinstance(_hx_e, _HxException) else _hx_e
				if True:
					e3 = _hx_e1
					_hx_local_6 = None
				else:
					raise _hx_e
			return _hx_local_6
		
		return _hx_c._hx_AnonObject(ms = _hx_modf(t, 1000) ,seconds = _hx_local_1() ,minutes = _hx_local_3() ,hours = _hx_local_5() ,days = _hx_local_7() )
	
	return _hx_local_8()
	
DateTools.parse = DateTools_statics_parse
def DateTools_statics_make(o):
	return o.ms + 1000.0 * (o.seconds + 60.0 * (o.minutes + 60.0 * (o.hours + 24.0 * o.days)))
DateTools.make = DateTools_statics_make
def DateTools_statics_makeUtc(year,month,day,hour,min,sec):
	return _hx_c.Date.UTC(year, month, day, hour, min, sec)
DateTools.makeUtc = DateTools_statics_makeUtc



def Lambda_statics_array(it):
	a = list()
	_it = _hx_functools.partial(HxOverrides_iterator, it)()
	while _it.hasNext():
		i = _it.next()
		a.append(i)
		_hx_builtin.len(a)
	
	return a
	
Lambda.array = Lambda_statics_array
def Lambda_statics_list(it):
	l = _hx_c.List()
	_it = _hx_functools.partial(HxOverrides_iterator, it)()
	while _it.hasNext():
		i = _it.next()
		l.add(i)
	return l
	
Lambda.list = Lambda_statics_list
def Lambda_statics_map(it,f):
	l = _hx_c.List()
	_it = _hx_functools.partial(HxOverrides_iterator, it)()
	while _it.hasNext():
		x = _it.next()
		l.add(f(x))
	return l
	
Lambda.map = Lambda_statics_map
def Lambda_statics_mapi(it,f):
	l = _hx_c.List()
	i = 0
	_it = _hx_functools.partial(HxOverrides_iterator, it)()
	while _it.hasNext():
		x = _it.next()
		def _hx_local_1():
			nonlocal i
			_hx_local_0 = i
			i = i + 1
			return _hx_local_0
			
		
		l.add(f(_hx_local_1(), x))
	
	return l
	
Lambda.mapi = Lambda_statics_mapi
def Lambda_statics_has(it,elt):
	_it = _hx_functools.partial(HxOverrides_iterator, it)()
	while _it.hasNext():
		x = _it.next()
		if x == elt:
			return True
		
	return False
	
Lambda.has = Lambda_statics_has
def Lambda_statics_exists(it,f):
	_it = _hx_functools.partial(HxOverrides_iterator, it)()
	while _it.hasNext():
		x = _it.next()
		if f(x):
			return True
		
	return False
	
Lambda.exists = Lambda_statics_exists
def Lambda_statics_foreach(it,f):
	_it = _hx_functools.partial(HxOverrides_iterator, it)()
	while _it.hasNext():
		x = _it.next()
		if not f(x):
			return False
		
	return True
	
Lambda.foreach = Lambda_statics_foreach
def Lambda_statics_iter(it,f):
	_it = _hx_functools.partial(HxOverrides_iterator, it)()
	while _it.hasNext():
		x = _it.next()
		f(x)
Lambda.iter = Lambda_statics_iter
def Lambda_statics_filter(it,f):
	l = _hx_c.List()
	_it = _hx_functools.partial(HxOverrides_iterator, it)()
	while _it.hasNext():
		x = _it.next()
		if f(x):
			l.add(x)
		
	return l
	
Lambda.filter = Lambda_statics_filter
def Lambda_statics_fold(it,f,first):
	_it = _hx_functools.partial(HxOverrides_iterator, it)()
	while _it.hasNext():
		x = _it.next()
		first = f(x, first)
	return first
	
Lambda.fold = Lambda_statics_fold
def Lambda_statics_count(it,pred = None):
	if pred is None:
		pred = None
	
	n = 0
	if pred is None:
		_it = _hx_functools.partial(HxOverrides_iterator, it)()
		while _it.hasNext():
			_ = _it.next()
			n = n + 1
	else:
		_it = _hx_functools.partial(HxOverrides_iterator, it)()
		while _it.hasNext():
			x = _it.next()
			if pred(x):
				n = n + 1
			
	return n
	
Lambda.count = Lambda_statics_count
def Lambda_statics_empty(it):
	return not _hx_functools.partial(HxOverrides_iterator, it)().hasNext()
Lambda.empty = Lambda_statics_empty
def Lambda_statics_indexOf(it,v):
	i = 0
	_it = _hx_functools.partial(HxOverrides_iterator, it)()
	while _it.hasNext():
		v2 = _it.next()
		if v == v2:
			return i
		
		i = i + 1
	
	return -1
	
Lambda.indexOf = Lambda_statics_indexOf
def Lambda_statics_find(it,f):
	_it = _hx_functools.partial(HxOverrides_iterator, it)()
	while _it.hasNext():
		v = _it.next()
		if f(v):
			return v
		
	return None
	
Lambda.find = Lambda_statics_find
def Lambda_statics_concat(a,b):
	l = _hx_c.List()
	_it = _hx_functools.partial(HxOverrides_iterator, a)()
	while _it.hasNext():
		x = _it.next()
		l.add(x)
	_it = _hx_functools.partial(HxOverrides_iterator, b)()
	while _it.hasNext():
		x1 = _it.next()
		l.add(x1)
	return l
	
Lambda.concat = Lambda_statics_concat


Map_Map_Impl_._new = None;
def Map_Impl__statics_set(this1,key,value):
	this1.set(key, value)
Map_Map_Impl_.set = Map_Impl__statics_set
def Map_Impl__statics_get(this1,key):
	return this1.get(key)
Map_Map_Impl_.get = Map_Impl__statics_get
def Map_Impl__statics_exists(this1,key):
	return this1.exists(key)
Map_Map_Impl_.exists = Map_Impl__statics_exists
def Map_Impl__statics_remove(this1,key):
	return this1.remove(key)
Map_Map_Impl_.remove = Map_Impl__statics_remove
def Map_Impl__statics_keys(this1):
	return this1.keys()
Map_Map_Impl_.keys = Map_Impl__statics_keys
def Map_Impl__statics_iterator(this1):
	return this1.iterator()
Map_Map_Impl_.iterator = Map_Impl__statics_iterator
def Map_Impl__statics_toString(this1):
	return this1.toString()
Map_Map_Impl_.toString = Map_Impl__statics_toString
def Map_Impl__statics_arrayWrite(this1,k,v):
	this1.set(k, v)
	return v
	
Map_Map_Impl_.arrayWrite = Map_Impl__statics_arrayWrite
def Map_Impl__statics_toStringMap(t):
	return _hx_c.haxe_ds_StringMap()
Map_Map_Impl_.toStringMap = Map_Impl__statics_toStringMap
def Map_Impl__statics_toIntMap(t):
	return _hx_c.haxe_ds_IntMap()
Map_Map_Impl_.toIntMap = Map_Impl__statics_toIntMap
def Map_Impl__statics_toEnumValueMapMap(t):
	return _hx_c.haxe_ds_EnumValueMap()
Map_Map_Impl_.toEnumValueMapMap = Map_Impl__statics_toEnumValueMapMap
def Map_Impl__statics_toObjectMap(t):
	return _hx_c.haxe_ds_ObjectMap()
Map_Map_Impl_.toObjectMap = Map_Impl__statics_toObjectMap
def Map_Impl__statics_fromStringMap(map):
	return map
Map_Map_Impl_.fromStringMap = Map_Impl__statics_fromStringMap
def Map_Impl__statics_fromIntMap(map):
	return map
Map_Map_Impl_.fromIntMap = Map_Impl__statics_fromIntMap
def Map_Impl__statics_fromObjectMap(map):
	return map
Map_Map_Impl_.fromObjectMap = Map_Impl__statics_fromObjectMap


import math as _hx_math
_hx_c._hx_math = _hx_math
	
def Reflect_statics_hasField(o,field):
	field1 = None
	if _hx_c.python_internal_KeywordHandler.keywords.exists(field):
		field1 = "_hx_" + Std.string(field)
	else:
		field1 = field
	return _hx_builtin.hasattr(o, field1)
	
Reflect.hasField = Reflect_statics_hasField
def Reflect_statics_field(o,field):
	if field is None:
		return None
	
	field1 = None
	if _hx_c.python_internal_KeywordHandler.keywords.exists(field):
		field1 = "_hx_" + Std.string(field)
	else:
		field1 = field
	if _hx_builtin.hasattr(o, field1):
		return _hx_builtin.getattr(o, field1)
	else:
		return None
	
Reflect.field = Reflect_statics_field
def Reflect_statics_setField(o,field,value):
	field1 = None
	if _hx_c.python_internal_KeywordHandler.keywords.exists(field):
		field1 = "_hx_" + Std.string(field)
	else:
		field1 = field
	return _hx_builtin.setattr(o, field1, value)
	
Reflect.setField = Reflect_statics_setField
def Reflect_statics_getProperty(o,field):
	field1 = None
	if _hx_c.python_internal_KeywordHandler.keywords.exists(field):
		field1 = "_hx_" + Std.string(field)
	else:
		field1 = field
	tmp = None
	if o is None:
		return None
	else:
		tmp = _hx_c.Reflect.field(o, "get_" + Std.string(field1))
		if tmp is not None and _hx_builtin.callable(tmp):
			return tmp()
		else:
			return _hx_c.Reflect.field(o, field1)
	
	
Reflect.getProperty = Reflect_statics_getProperty
def Reflect_statics_setProperty(o,field,value):
	field1 = None
	if _hx_c.python_internal_KeywordHandler.keywords.exists(field):
		field1 = "_hx_" + Std.string(field)
	else:
		field1 = field
	if _hx_builtin.hasattr(o, "set_" + Std.string(field1)):
		tmp = _hx_builtin.getattr(o, "set_" + Std.string(field1))
		return tmp(value)
	
	else:
		return _hx_builtin.setattr(o, field1, value)
	
Reflect.setProperty = Reflect_statics_setProperty
def Reflect_statics_callMethod(o,func,args):
	args1 = args
	if _hx_builtin.callable(func):
		return func(*args1)
	else:
		return None
	
Reflect.callMethod = Reflect_statics_callMethod
def Reflect_statics_fields(o):
	a = []
	if o is not None:
		if _hx_builtin.hasattr(o, "_hx_fields"):
			fields = o._hx_fields
			return _hx_builtin.list(fields)
		
		
		if _hx_builtin.isinstance(o, _hx_c._hx_AnonObject):
			d = _hx_builtin.getattr(o, "__dict__")
			keys = d.keys()
			handler = _hx_c.python_internal_KeywordHandler.unhandleKeywords
			for k in keys:
				a.append(handler(k))
		
		elif _hx_builtin.hasattr(o, "__dict__"):
			a1 = []
			d1 = _hx_builtin.getattr(o, "__dict__")
			keys1 = d1.keys()
			for k in keys:
				a.append(k)
		
		
	
	
	return a
	
Reflect.fields = Reflect_statics_fields
def Reflect_statics_isFunction(f):
	return _hx_c.python_lib_Inspect.isfunction(f) or _hx_c.python_lib_Inspect.ismethod(f)
Reflect.isFunction = Reflect_statics_isFunction
def Reflect_statics_compare(a,b):
	if a is None and b is None:
		return 0
	
	if a is None:
		return 1
	elif b is None:
		return -1
	elif a == b:
		return 0
	elif a > b:
		return 1
	else:
		return -1
	
Reflect.compare = Reflect_statics_compare
def Reflect_statics_compareMethods(f1,f2):
	if f1 == f2:
		return True
	
	if not _hx_c.Reflect.isFunction(f1) or not _hx_c.Reflect.isFunction(f2):
		return False
	
	return False
	
Reflect.compareMethods = Reflect_statics_compareMethods
def Reflect_statics_isObject(v):
	_g = _hx_c.Type.typeof(v)
	if (_g.index) == 6 or (_g.index) == 4:
		return True
	else:
		return False
	
Reflect.isObject = Reflect_statics_isObject
def Reflect_statics_isEnumValue(v):
	return v != _hx_c.Enum and _hx_builtin.isinstance(v, _hx_c.Enum)
Reflect.isEnumValue = Reflect_statics_isEnumValue
def Reflect_statics_deleteField(o,field):
	if not _hx_c.Reflect.hasField(o, field):
		return False
	
	o.__delattr__(field)
	return True
	
Reflect.deleteField = Reflect_statics_deleteField
def Reflect_statics_copy(o):
	o2 = _hx_c._hx_AnonObject()
	_g = 0
	_g1 = _hx_c.Reflect.fields(o)
	while _g < _hx_builtin.len(_g1):
		f = _hx_array_get(_g1,_g)
		_g = _g + 1
		value = _hx_c.Reflect.field(o, f)
		field = None
		if _hx_c.python_internal_KeywordHandler.keywords.exists(f):
			field = "_hx_" + Std.string(f)
		else:
			field = f
		_hx_builtin.setattr(o2, field, value)
	
	
	return o2
	
Reflect.copy = Reflect_statics_copy
def Reflect_statics_makeVarArgs(f):
	raise _HxException("not implemented")
Reflect.makeVarArgs = Reflect_statics_makeVarArgs

def Std_statics_instance(v,c):
	try:
		if _hx_builtin.isinstance(v, c):
			return v
		else:
			return None
	except Exception as _hx_e:
		_hx_e1 = _hx_e.val if isinstance(_hx_e, _HxException) else _hx_e
		if True:
			e = _hx_e1
			return None
		else:
			raise _hx_e
Std.instance = Std_statics_instance
def Std_statics__hx_is(v,t):
	if v is None and t is None:
		return False
	
	if t is None:
		return False
	
	if t == Dynamic:
		return True
	
	isBool = _hx_builtin.isinstance(v, bool)
	if t == Bool and isBool:
		return True
	
	if not isBool and t != Bool and t == Int and _hx_builtin.isinstance(v, int):
		return True
	
	vIsFloat = _hx_builtin.isinstance(v, float)
	def _hx_local_4():
		f = v
		return f != float("inf") and f != float("-inf") and not _hx_math.isnan(f)
	
	def _hx_local_0():
		x = v
		def _hx_local_3():
			def _hx_local_2():
				_hx_local_1 = None
				try:
					_hx_local_1 = int(x)
				except Exception as _hx_e:
					_hx_e1 = _hx_e.val if isinstance(_hx_e, _HxException) else _hx_e
					if True:
						e = _hx_e1
						_hx_local_1 = None
					else:
						raise _hx_e
				return _hx_local_1
			
			return _hx_local_2()
		
		return _hx_local_3()
	
	if not isBool and vIsFloat and t == Int and _hx_local_4() and v == _hx_local_0():
		return True
	
	if not isBool and t == Float and _hx_builtin.isinstance(v, (float,int)):
		return True
	
	if t == str:
		return _hx_builtin.isinstance(v, _hx_c.String)
	
	if t == _hx_c.Enum and _hx_c.python_lib_Inspect.isclass(v) and _hx_builtin.hasattr(v, "_hx_constructs"):
		return True
	
	if t == _hx_c.Enum:
		return False
	
	if t == _hx_c.Date and _hx_builtin.isinstance(v, _hx_c.Date):
		return True
	
	if t == _hx_c.Date:
		return False
	
	if _hx_builtin.isinstance(v, _hx_c.Date):
		return False
	
	if t == _hx_c.Class and not _hx_builtin.isinstance(v, _hx_c.Enum) and _hx_c.python_lib_Inspect.isclass(v) and _hx_builtin.hasattr(v, "_hx_class_name") and not _hx_builtin.hasattr(v, "_hx_constructs"):
		return True
	
	if t == _hx_c.Class:
		return False
	
	def _hx_local_6():
		_hx_local_5 = None
		try:
			_hx_local_5 = _hx_builtin.isinstance(v, t)
		except Exception as _hx_e:
			_hx_e1 = _hx_e.val if isinstance(_hx_e, _HxException) else _hx_e
			if True:
				e1 = _hx_e1
				_hx_local_5 = False
			else:
				raise _hx_e
		return _hx_local_5
	
	if _hx_local_6():
		return True
	
	if _hx_c.python_lib_Inspect.isclass(t):
		loop = None
		loop1 = None
		def _hx_local_7(intf):
			f1 = _hx_c.Reflect.field(intf, "_hx_interfaces")
			if f1 is not None:
				_g = 0
				while _g < _hx_builtin.len(f1):
					i = _hx_array_get(f1,_g)
					_g = _g + 1
					if i == t:
						return True
					else:
						l = loop1(i)
						if l:
							return True
						
					
				
				
				return False
			
			else:
				return False
		
		loop1 = _hx_local_7
		loop = loop1
		
		return loop(v.__class__)
	
	else:
		return False
	
Std._hx_is = Std_statics__hx_is
def Std_statics_string(s):
	return _hx_c.python_Boot.__string_rec(s, "")
Std.string = Std_statics_string
def Std_statics_int(x):
	try:
		return int(x)
	except Exception as _hx_e:
		_hx_e1 = _hx_e.val if isinstance(_hx_e, _HxException) else _hx_e
		if True:
			e = _hx_e1
			return None
		else:
			raise _hx_e
Std.int = Std_statics_int
def Std_statics_parseInt(x):
	if x is None:
		return None
	
	try:
		return int(x)
	except Exception as _hx_e:
		_hx_e1 = _hx_e.val if isinstance(_hx_e, _HxException) else _hx_e
		if True:
			e = _hx_e1
			try:
				prefix = None
				_this = _hx_c.python_Tools.substr(x, 0, 2)
				prefix = _this.lower()
				
				if prefix == "0x":
					return int(x, 16)
				
				raise _HxException("fail")
	
			except Exception as _hx_e:
				_hx_e1 = _hx_e.val if isinstance(_hx_e, _HxException) else _hx_e
				if True:
					e1 = _hx_e1
					r = None
					x1 = _hx_c.Std.parseFloat(x)
					try:
						r = int(x1)
					except Exception as _hx_e:
						_hx_e1 = _hx_e.val if isinstance(_hx_e, _HxException) else _hx_e
						if True:
							e2 = _hx_e1
							r = None
						else:
							raise _hx_e
					
					if r is None:
						r1 = _hx_c.Std.shortenPossibleNumber(x)
						if r1 != x:
							return _hx_c.Std.parseInt(r1)
						else:
							return None
					
					
					return r
	
				else:
					raise _hx_e
		else:
			raise _hx_e
	
Std.parseInt = Std_statics_parseInt
def Std_statics_shortenPossibleNumber(x):
	r = ""
	_g1 = 0
	_g = _hx_builtin.len(x)
	while _g1 < _g:
		i = _g1
		_g1 = _g1 + 1
		
		c = None
		if i < 0 or i >= _hx_builtin.len(x):
			c = ""
		else:
			c = x[i]
		_g2 = _hx_c.python_internal_StringImpl.charCodeAt(c, 0)
		if (_g2) == 46 or (_g2) == 57 or (_g2) == 56 or (_g2) == 55 or (_g2) == 54 or (_g2) == 53 or (_g2) == 52 or (_g2) == 51 or (_g2) == 50 or (_g2) == 49 or (_g2) == 48:
			r = Std.string(r) + Std.string(c)
		else:
			break
		
	
	
	return r
	
Std.shortenPossibleNumber = Std_statics_shortenPossibleNumber
def Std_statics_parseFloat(x):
	try:
		return float(x)
	except Exception as _hx_e:
		_hx_e1 = _hx_e.val if isinstance(_hx_e, _HxException) else _hx_e
		if True:
			e = _hx_e1
			if x is not None:
				r1 = _hx_c.Std.shortenPossibleNumber(x)
				if r1 != x:
					return _hx_c.Std.parseFloat(r1)
				
			
			
			return float("nan")
	
		else:
			raise _hx_e
Std.parseFloat = Std_statics_parseFloat
def Std_statics_random(x):
	if x <= 0:
		return 0
	else:
		x1 = _hx_c.python_lib_Random.random() * x
		try:
			return int(x1)
		except Exception as _hx_e:
			_hx_e1 = _hx_e.val if isinstance(_hx_e, _HxException) else _hx_e
			if True:
				e = _hx_e1
				return None
			else:
				raise _hx_e
	
Std.random = Std_statics_random

def StringImpl_statics_split(s,d):
	if d == "":
		return _hx_builtin.list(s)
	else:
		return s.split(d)
python_internal_StringImpl.split = StringImpl_statics_split
def StringImpl_statics_charCodeAt(s,index):
	if s is None or _hx_builtin.len(s) == 0 or index < 0 or index >= _hx_builtin.len(s):
		return None
	else:
		return ord(s[index])
python_internal_StringImpl.charCodeAt = StringImpl_statics_charCodeAt
def StringImpl_statics_charAt(s,index):
	if index < 0 or index >= _hx_builtin.len(s):
		return ""
	else:
		return s[index]
python_internal_StringImpl.charAt = StringImpl_statics_charAt
def StringImpl_statics_lastIndexOf(s,str,startIndex = None):
	if startIndex is None:
		startIndex = None
	
	if startIndex is None:
		return s.rfind(str, 0, _hx_builtin.len(s))
	else:
		i = s.rfind(str, 0, startIndex + 1)
		startLeft = None
		if i == -1:
			b = startIndex + 1 - _hx_builtin.len(str)
			if _hx_math.isnan(0):
				startLeft = 0
			elif _hx_math.isnan(b):
				startLeft = b
			else:
				startLeft = _hx_builtin.max(0, b)
		
		else:
			startLeft = i + 1
		check = s.find(str, startLeft, _hx_builtin.len(s))
		if check > i and check <= startIndex:
			return check
		else:
			return i
	
	
python_internal_StringImpl.lastIndexOf = StringImpl_statics_lastIndexOf
def StringImpl_statics_fromCharCode(code):
	c = code
	return "".join(_hx_builtin.map(_hx_builtin.chr, [c]))
	
python_internal_StringImpl.fromCharCode = StringImpl_statics_fromCharCode

from builtins import str as String
_hx_c.String = String
	

def StringTools_statics_urlEncode(s):
	from urllib.parse import quote
	return quote(s)
	
StringTools.urlEncode = StringTools_statics_urlEncode
def StringTools_statics_urlDecode(s):
	from urllib.parse import unquote
	return unquote(s)
	
StringTools.urlDecode = StringTools_statics_urlDecode
def StringTools_statics_htmlEscape(s,quotes = None):
	if quotes is None:
		quotes = None
	
	_this = None
	_this1 = None
	_this2 = None
	_this3 = None
	_this4 = _hx_c.python_internal_StringImpl.split(s, "&")
	_this3 = "&amp;".join(_hx_builtin.list(_hx_builtin.map(_hx_c.Std.string, _this4)))
	
	_this2 = _hx_c.python_internal_StringImpl.split(_this3, "<")
	
	_this1 = "&lt;".join(_hx_builtin.list(_hx_builtin.map(_hx_c.Std.string, _this2)))
	
	_this = _hx_c.python_internal_StringImpl.split(_this1, ">")
	
	s = "&gt;".join(_hx_builtin.list(_hx_builtin.map(_hx_c.Std.string, _this)))
	
	if quotes:
		_this5 = None
		_this6 = None
		_this7 = _hx_c.python_internal_StringImpl.split(s, "\"")
		_this6 = "&quot;".join(_hx_builtin.list(_hx_builtin.map(_hx_c.Std.string, _this7)))
		
		_this5 = _hx_c.python_internal_StringImpl.split(_this6, "'")
		
		return "&#039;".join(_hx_builtin.list(_hx_builtin.map(_hx_c.Std.string, _this5)))
	
	else:
		return s
	
StringTools.htmlEscape = StringTools_statics_htmlEscape
def StringTools_statics_htmlUnescape(s):
	_this = None
	_this1 = None
	_this2 = None
	_this3 = None
	_this4 = None
	_this5 = None
	_this6 = None
	_this7 = None
	_this8 = _hx_c.python_internal_StringImpl.split(s, "&gt;")
	_this7 = ">".join(_hx_builtin.list(_hx_builtin.map(_hx_c.Std.string, _this8)))
	
	_this6 = _hx_c.python_internal_StringImpl.split(_this7, "&lt;")
	
	_this5 = "<".join(_hx_builtin.list(_hx_builtin.map(_hx_c.Std.string, _this6)))
	
	_this4 = _hx_c.python_internal_StringImpl.split(_this5, "&quot;")
	
	_this3 = "\"".join(_hx_builtin.list(_hx_builtin.map(_hx_c.Std.string, _this4)))
	
	_this2 = _hx_c.python_internal_StringImpl.split(_this3, "&#039;")
	
	_this1 = "'".join(_hx_builtin.list(_hx_builtin.map(_hx_c.Std.string, _this2)))
	
	_this = _hx_c.python_internal_StringImpl.split(_this1, "&amp;")
	
	return "&".join(_hx_builtin.list(_hx_builtin.map(_hx_c.Std.string, _this)))
	
StringTools.htmlUnescape = StringTools_statics_htmlUnescape
def StringTools_statics_startsWith(s,start):
	def _hx_local_1():
		def _hx_local_0():
			len = _hx_builtin.len(start)
			return _hx_c.python_Tools.substr(s, 0, len)
		
		return _hx_builtin.len(s) >= _hx_builtin.len(start) and _hx_local_0() == start
	
	return _hx_local_1()
	
StringTools.startsWith = StringTools_statics_startsWith
def StringTools_statics_endsWith(s,end):
	elen = _hx_builtin.len(end)
	slen = _hx_builtin.len(s)
	return slen >= elen and _hx_c.python_Tools.substr(s, slen - elen, elen) == end
	
StringTools.endsWith = StringTools_statics_endsWith
def StringTools_statics_isSpace(s,pos):
	if _hx_builtin.len(s) == 0 or pos < 0 or pos >= _hx_builtin.len(s):
		return False
	
	c = _hx_c.python_internal_StringImpl.charCodeAt(s, pos)
	return c > 8 and c < 14 or c == 32
	
StringTools.isSpace = StringTools_statics_isSpace
def StringTools_statics_ltrim(s):
	l = _hx_builtin.len(s)
	r = 0
	while r < l and _hx_c.StringTools.isSpace(s, r):
		r = r + 1
	if r > 0:
		return _hx_c.python_Tools.substr(s, r, l - r)
	else:
		return s
	
StringTools.ltrim = StringTools_statics_ltrim
def StringTools_statics_rtrim(s):
	l = _hx_builtin.len(s)
	r = 0
	while r < l and _hx_c.StringTools.isSpace(s, l - r - 1):
		r = r + 1
	if r > 0:
		return _hx_c.python_Tools.substr(s, 0, l - r)
	else:
		return s
	
StringTools.rtrim = StringTools_statics_rtrim
def StringTools_statics_trim(s):
	return _hx_c.StringTools.ltrim(_hx_c.StringTools.rtrim(s))
StringTools.trim = StringTools_statics_trim
def StringTools_statics_lpad(s,c,l):
	if _hx_builtin.len(c) <= 0:
		return s
	
	while _hx_builtin.len(s) < l:
		s = Std.string(c) + Std.string(s)
	return s
	
StringTools.lpad = StringTools_statics_lpad
def StringTools_statics_rpad(s,c,l):
	if _hx_builtin.len(c) <= 0:
		return s
	
	while _hx_builtin.len(s) < l:
		s = Std.string(s) + Std.string(c)
	return s
	
StringTools.rpad = StringTools_statics_rpad
def StringTools_statics_replace(s,sub,by):
	_this = _hx_c.python_internal_StringImpl.split(s, sub)
	return by.join(_hx_builtin.list(_hx_builtin.map(_hx_c.Std.string, _this)))
	
StringTools.replace = StringTools_statics_replace
def StringTools_statics_hex(n,digits = None):
	if digits is None:
		digits = None
	
	s = ""
	hexChars = "0123456789ABCDEF"
	while True:
		def _hx_local_0():
			index = n & 15
			return "" if (index < 0 or index >= _hx_builtin.len(hexChars)) else hexChars[index]
		
		s = Std.string(_hx_local_0()) + Std.string(s)
		n = _hx_rshift(n, 4)
		if not n > 0:
			break
		
	
	if digits is not None and _hx_builtin.len(s) < digits:
		diff = digits - _hx_builtin.len(s)
		_g = 0
		while _g < diff:
			_ = _g
			_g = _g + 1
			
			s = "0" + Std.string(s)
		
		
	
	
	return s
	
StringTools.hex = StringTools_statics_hex
def StringTools_statics_fastCodeAt(s,index):
	if index >= _hx_builtin.len(s):
		return -1
	else:
		return ord(_hx_array_get(s,index))
StringTools.fastCodeAt = StringTools_statics_fastCodeAt
def StringTools_statics_isEof(c):
	return c == -1
StringTools.isEof = StringTools_statics_isEof

def Type_statics_getClass(o):
	if o is None:
		return None
	
	if o is not None and (o == _hx_c.String or _hx_c.python_lib_Inspect.isclass(o)):
		return None
	
	if _hx_c.python_Boot.isAnonObject(o):
		return None
	
	if _hx_builtin.hasattr(o, "_hx_class"):
		return o._hx_class
	
	if _hx_builtin.hasattr(o, "__class__"):
		return o.__class__
	else:
		return None
	
Type.getClass = Type_statics_getClass
def Type_statics_getEnum(o):
	if o is None:
		return None
	
	return o.__class__
	
Type.getEnum = Type_statics_getEnum
def Type_statics_getSuperClass(c):
	if c is None:
		return None
	
	try:
		if _hx_builtin.hasattr(c, "_hx_super"):
			return c._hx_super
		
		return __python_array_get(c.__bases__, 0)
	
	except Exception as _hx_e:
		_hx_e1 = _hx_e.val if isinstance(_hx_e, _HxException) else _hx_e
		if True:
			e = _hx_e1
			None
		else:
			raise _hx_e
	return None
	
Type.getSuperClass = Type_statics_getSuperClass
def Type_statics_getClassName(c):
	if _hx_builtin.hasattr(c, "_hx_class_name"):
		return c._hx_class_name
	else:
		if c == list:
			return "Array"
		
		if c == _hx_math:
			return "Math"
		
		if c == _hx_c.String:
			return "String"
		
		try:
			s = c.__name__
		except Exception as _hx_e:
			_hx_e1 = _hx_e.val if isinstance(_hx_e, _HxException) else _hx_e
			if True:
				e = _hx_e1
				None
			else:
				raise _hx_e
	
	res = None
	return res
	
Type.getClassName = Type_statics_getClassName
def Type_statics_getEnumName(e):
	return e._hx_class_name
Type.getEnumName = Type_statics_getEnumName
def Type_statics_resolveClass(name):
	if name == "Array":
		return list
	
	if name == "Math":
		return _hx_math
	
	if name == "String":
		return _hx_c.String
	
	cl = _hx_classes.get(name, None)
	if cl is None or not (cl is not None and (cl == _hx_c.String or _hx_c.python_lib_Inspect.isclass(cl))):
		return None
	
	return cl
	
Type.resolveClass = Type_statics_resolveClass
def Type_statics_resolveEnum(name):
	if name == "Bool":
		return _hx_c.Bool
	
	o = _hx_c.Type.resolveClass(name)
	if _hx_builtin.hasattr(o, "_hx_constructs"):
		return o
	else:
		return None
	
Type.resolveEnum = Type_statics_resolveEnum
def Type_statics_createInstance(cl,args):
	l = _hx_builtin.len(args)
	if (l) == 0:
		return cl()
	elif (l) == 1:
		return cl(_hx_array_get(args,0))
	elif (l) == 2:
		return cl(_hx_array_get(args,0), _hx_array_get(args,1))
	elif (l) == 3:
		return cl(_hx_array_get(args,0), _hx_array_get(args,1), _hx_array_get(args,2))
	elif (l) == 4:
		return cl(_hx_array_get(args,0), _hx_array_get(args,1), _hx_array_get(args,2), _hx_array_get(args,3))
	elif (l) == 5:
		return cl(_hx_array_get(args,0), _hx_array_get(args,1), _hx_array_get(args,2), _hx_array_get(args,3), _hx_array_get(args,4))
	elif (l) == 6:
		return cl(_hx_array_get(args,0), _hx_array_get(args,1), _hx_array_get(args,2), _hx_array_get(args,3), _hx_array_get(args,4), _hx_array_get(args,5))
	elif (l) == 7:
		return cl(_hx_array_get(args,0), _hx_array_get(args,1), _hx_array_get(args,2), _hx_array_get(args,3), _hx_array_get(args,4), _hx_array_get(args,5), _hx_array_get(args,6))
	elif (l) == 8:
		return cl(_hx_array_get(args,0), _hx_array_get(args,1), _hx_array_get(args,2), _hx_array_get(args,3), _hx_array_get(args,4), _hx_array_get(args,5), _hx_array_get(args,6), _hx_array_get(args,7))
	else:
		raise _HxException("Too many arguments")
	return None
	
Type.createInstance = Type_statics_createInstance
def Type_statics_createEmptyInstance(cl):
	i = cl.__new__(cl)
	callInit = None
	callInit1 = None
	def _hx_local_0(cl1):
		sc = _hx_c.Type.getSuperClass(cl1)
		if sc is not None:
			callInit1(sc)
		
		if _hx_builtin.hasattr(cl1, "_hx_empty_init"):
			cl1._hx_empty_init(i)
		
	
	callInit1 = _hx_local_0
	callInit = callInit1
	
	callInit(cl)
	return i
	
Type.createEmptyInstance = Type_statics_createEmptyInstance
def Type_statics_createEnum(e,constr,params = None):
	if params is None:
		params = None
	
	f = _hx_c.Reflect.field(e, constr)
	if f is None:
		raise _HxException("No such constructor " + Std.string(constr))
	
	if _hx_c.Reflect.isFunction(f):
		if params is None:
			raise _HxException(Std.string("Constructor " + Std.string(constr)) + " need parameters")
		
		return _hx_c.Reflect.callMethod(e, f, params)
	
	
	if params is not None and _hx_builtin.len(params) != 0:
		raise _HxException(Std.string("Constructor " + Std.string(constr)) + " does not need parameters")
	
	return f
	
Type.createEnum = Type_statics_createEnum
def Type_statics_createEnumIndex(e,index,params = None):
	if params is None:
		params = None
	
	c = _hx_array_get(e._hx_constructs,index)
	if c is None:
		raise _HxException(Std.string(index) + " is not a valid enum constructor index")
	
	return _hx_c.Type.createEnum(e, c, params)
	
Type.createEnumIndex = Type_statics_createEnumIndex
def Type_statics_getInstanceFields(c):
	f = None
	if _hx_builtin.hasattr(c, "_hx_fields"):
		x = c._hx_fields
		x2 = c._hx_methods
		f = x + x2
	
	else:
		f = []
	sc = _hx_c.Type.getSuperClass(c)
	if sc is None:
		return f
	else:
		scArr = _hx_c.Type.getInstanceFields(sc)
		scMap = None
		_g = _hx_c.haxe_ds_StringMap()
		_g1 = 0
		while _g1 < _hx_builtin.len(scArr):
			f1 = _hx_array_get(scArr,_g1)
			_g1 = _g1 + 1
			_g.set(f1, f1)
		
		
		scMap = _g
		
		res = []
		_g11 = 0
		while _g11 < _hx_builtin.len(f):
			f11 = _hx_array_get(f,_g11)
			_g11 = _g11 + 1
			if not scMap.exists(f11):
				scArr.append(f11)
				_hx_builtin.len(scArr)
			
			
		
		
		return scArr
	
	
Type.getInstanceFields = Type_statics_getInstanceFields
def Type_statics_getClassFields(c):
	if _hx_builtin.hasattr(c, "_hx_statics"):
		x = c._hx_statics
		return _hx_builtin.list(x)
	
	else:
		return []
Type.getClassFields = Type_statics_getClassFields
def Type_statics_getEnumConstructs(e):
	if _hx_builtin.hasattr(e, "_hx_constructs"):
		x = e._hx_constructs
		return _hx_builtin.list(x)
	
	else:
		return []
Type.getEnumConstructs = Type_statics_getEnumConstructs
def Type_statics_typeof(v):
	if v is None:
		return _hx_c.ValueType.TNull
	elif _hx_builtin.isinstance(v, bool):
		return _hx_c.ValueType.TBool
	elif _hx_builtin.isinstance(v, int):
		return _hx_c.ValueType.TInt
	elif _hx_builtin.isinstance(v, float):
		return _hx_c.ValueType.TFloat
	elif _hx_builtin.isinstance(v, _hx_c.String):
		return _hx_c.ValueType.TClass(_hx_c.String)
	elif _hx_builtin.isinstance(v, list):
		return _hx_c.ValueType.TClass(list)
	elif _hx_builtin.isinstance(v, _hx_c._hx_AnonObject) or _hx_c.python_lib_Inspect.isclass(v):
		return _hx_c.ValueType.TObject
	elif _hx_builtin.isinstance(v, _hx_c.Enum):
		return _hx_c.ValueType.TEnum(v.__class__)
	elif _hx_builtin.isinstance(v, type) or _hx_builtin.hasattr(v, "_hx_class"):
		return _hx_c.ValueType.TClass(v.__class__)
	elif _hx_builtin.callable(v):
		return _hx_c.ValueType.TFunction
	else:
		return _hx_c.ValueType.TUnknown
Type.typeof = Type_statics_typeof
def Type_statics_enumEq(a,b):
	if a == b:
		return True
	
	try:
		if b is None and a != b:
			return False
		
		if a.tag != b.tag:
			return False
		
		p1 = a.params
		p2 = b.params
		if _hx_builtin.len(p1) != _hx_builtin.len(p2):
			return False
		
		_g1 = 0
		_g = _hx_builtin.len(p1)
		while _g1 < _g:
			i = _g1
			_g1 = _g1 + 1
			
			if not _hx_c.Type.enumEq(_hx_array_get(p1,i), _hx_array_get(p2,i)):
				return False
			
		
		
		if a._hx_class != b._hx_class:
			return False
		
	
	except Exception as _hx_e:
		_hx_e1 = _hx_e.val if isinstance(_hx_e, _HxException) else _hx_e
		if True:
			e = _hx_e1
			return False
		else:
			raise _hx_e
	return True
	
Type.enumEq = Type_statics_enumEq
def Type_statics_enumConstructor(e):
	return e.tag
Type.enumConstructor = Type_statics_enumConstructor
def Type_statics_enumParameters(e):
	return e.params
Type.enumParameters = Type_statics_enumParameters
def Type_statics_enumIndex(e):
	return e.index
Type.enumIndex = Type_statics_enumIndex
def Type_statics_allEnums(e):
	ctors = _hx_c.Type.getEnumConstructs(e)
	ret = []
	_g = 0
	while _g < _hx_builtin.len(ctors):
		ctor = _hx_array_get(ctors,_g)
		_g = _g + 1
		v = _hx_c.Reflect.field(e, ctor)
		if _hx_c.Std._hx_is(v, e):
			ret.append(v)
			_hx_builtin.len(ret)
		
		
	
	
	return ret
	
Type.allEnums = Type_statics_allEnums

Xml.Element = None;
Xml.PCData = None;
Xml.CData = None;
Xml.Comment = None;
Xml.DocType = None;
Xml.ProcessingInstruction = None;
Xml.Document = None;
def Xml_statics_parse(str):
	return _hx_c.haxe_xml_Parser.parse(str)
Xml.parse = Xml_statics_parse
def Xml_statics_createElement(name):
	r = _hx_c.Xml()
	r.nodeType = _hx_c.Xml.Element
	r._children = list()
	r._attributes = _hx_c.haxe_ds_StringMap()
	r.set_nodeName(name)
	return r
	
Xml.createElement = Xml_statics_createElement
def Xml_statics_createPCData(data):
	r = _hx_c.Xml()
	r.nodeType = _hx_c.Xml.PCData
	r.set_nodeValue(data)
	return r
	
Xml.createPCData = Xml_statics_createPCData
def Xml_statics_createCData(data):
	r = _hx_c.Xml()
	r.nodeType = _hx_c.Xml.CData
	r.set_nodeValue(data)
	return r
	
Xml.createCData = Xml_statics_createCData
def Xml_statics_createComment(data):
	r = _hx_c.Xml()
	r.nodeType = _hx_c.Xml.Comment
	r.set_nodeValue(data)
	return r
	
Xml.createComment = Xml_statics_createComment
def Xml_statics_createDocType(data):
	r = _hx_c.Xml()
	r.nodeType = _hx_c.Xml.DocType
	r.set_nodeValue(data)
	return r
	
Xml.createDocType = Xml_statics_createDocType
def Xml_statics_createProcessingInstruction(data):
	r = _hx_c.Xml()
	r.nodeType = _hx_c.Xml.ProcessingInstruction
	r.set_nodeValue(data)
	return r
	
Xml.createProcessingInstruction = Xml_statics_createProcessingInstruction
def Xml_statics_createDocument():
	r = _hx_c.Xml()
	r.nodeType = _hx_c.Xml.Document
	r._children = list()
	return r
	
Xml.createDocument = Xml_statics_createDocument

_hx_c.Xml.Element = "element"
_hx_c.Xml.PCData = "pcdata"
_hx_c.Xml.CData = "cdata"
_hx_c.Xml.Comment = "comment"
_hx_c.Xml.DocType = "doctype"
_hx_c.Xml.ProcessingInstruction = "processingInstruction"
_hx_c.Xml.Document = "document"
	
def CallStack_statics_callStack():
	oldValue = Error.prepareStackTrace
	def _hx_local_0(error,callsites):
		stack = []
		_g = 0
		while _g < _hx_builtin.len(callsites):
			site = _hx_array_get(callsites,_g)
			_g = _g + 1
			method = None
			fullName = site.getFunctionName()
			if fullName is not None:
				idx = None
				if None is None:
					idx = fullName.rfind(".", 0, _hx_builtin.len(fullName))
				else:
					i = fullName.rfind(".", 0, None + 1)
					startLeft = None
					if i == -1:
						b = None + 1 - _hx_builtin.len(".")
						if _hx_math.isnan(0):
							startLeft = 0
						elif _hx_math.isnan(b):
							startLeft = b
						else:
							startLeft = _hx_builtin.max(0, b)
					
					else:
						startLeft = i + 1
					check = fullName.find(".", startLeft, _hx_builtin.len(fullName))
					if check > i and check <= None:
						idx = check
					else:
						idx = i
				
				if idx >= 0:
					className = _hx_c.python_Tools.substr(fullName, 0, idx)
					methodName = _hx_c.python_Tools.substr(fullName, idx + 1, None)
					method = _hx_c.haxe_StackItem.Method(className, methodName)
				
				
			
			
			x = _hx_c.haxe_StackItem.FilePos(method, site.getFileName(), site.getLineNumber())
			stack.append(x)
			_hx_builtin.len(stack)
			
			
		
		
		return stack
	
	Error.prepareStackTrace = _hx_local_0
	a = _hx_c.haxe_CallStack.makeStack("Error"().stack)
	if _hx_builtin.len(a) == 0:
		None
	else:
		a.pop(0)
	Error.prepareStackTrace = oldValue
	return a
	
haxe_CallStack.callStack = CallStack_statics_callStack
def CallStack_statics_exceptionStack():
	return []
haxe_CallStack.exceptionStack = CallStack_statics_exceptionStack
def CallStack_statics_toString(stack):
	b = _hx_c.StringBuf()
	_g = 0
	while _g < _hx_builtin.len(stack):
		s = _hx_array_get(stack,_g)
		_g = _g + 1
		s1 = _hx_c.Std.string("\nCalled from ")
		b.b.write(s1)
		
		_hx_c.haxe_CallStack.itemToString(b, s)
	
	
	return b.b.getvalue()
	
haxe_CallStack.toString = CallStack_statics_toString
def CallStack_statics_itemToString(b,s):
	if (s.index) == 0:
		s1 = _hx_c.Std.string("a C function")
		b.b.write(s1)
	
	elif (s.index) == 1:
		m = s.params[0]
		s2 = _hx_c.Std.string("module ")
		b.b.write(s2)
		
		s3 = _hx_c.Std.string(m)
		b.b.write(s3)
		
		
	
	elif (s.index) == 2:
		line = s.params[2]
		file = s.params[1]
		s4 = s.params[0]
		if s4 is not None:
			_hx_c.haxe_CallStack.itemToString(b, s4)
			s5 = _hx_c.Std.string(" (")
			b.b.write(s5)
			
		
		
		s6 = _hx_c.Std.string(file)
		b.b.write(s6)
		
		s7 = _hx_c.Std.string(" line ")
		b.b.write(s7)
		
		s8 = _hx_c.Std.string(line)
		b.b.write(s8)
		
		if s4 is not None:
			s9 = _hx_c.Std.string(")")
			b.b.write(s9)
		
		
		
	
	elif (s.index) == 3:
		meth = s.params[1]
		cname = s.params[0]
		s10 = _hx_c.Std.string(cname)
		b.b.write(s10)
		
		s11 = _hx_c.Std.string(".")
		b.b.write(s11)
		
		s12 = _hx_c.Std.string(meth)
		b.b.write(s12)
		
		
	
	elif (s.index) == 4:
		n = s.params[0]
		s13 = _hx_c.Std.string("local function #")
		b.b.write(s13)
		
		s14 = _hx_c.Std.string(n)
		b.b.write(s14)
		
		
	
	
haxe_CallStack.itemToString = CallStack_statics_itemToString
def CallStack_statics_makeStack(s):
	if __js__("typeof")(s) == "string":
		stack = s.split("\n")
		m = []
		_g = 0
		while _g < _hx_builtin.len(stack):
			line = _hx_array_get(stack,_g)
			_g = _g + 1
			x = _hx_c.haxe_StackItem.Module(line)
			m.append(x)
			_hx_builtin.len(m)
			
			
		
		
		return m
	
	else:
		return s
haxe_CallStack.makeStack = CallStack_statics_makeStack

def EnumFlags_Impl__statics__new(i = 0):
	if i is None:
		i = 0
	
	return i
	
haxe_EnumFlags_EnumFlags_Impl_._new = EnumFlags_Impl__statics__new
def EnumFlags_Impl__statics_has(this1,v):
	return (this1 & 1 << v.index) != 0
haxe_EnumFlags_EnumFlags_Impl_.has = EnumFlags_Impl__statics_has
def EnumFlags_Impl__statics_set(this1,v):
	this1 = this1 | 1 << v.index
haxe_EnumFlags_EnumFlags_Impl_.set = EnumFlags_Impl__statics_set
def EnumFlags_Impl__statics_unset(this1,v):
	this1 = this1 & 268435455 - (1 << v.index)
haxe_EnumFlags_EnumFlags_Impl_.unset = EnumFlags_Impl__statics_unset
def EnumFlags_Impl__statics_ofInt(i):
	return i
haxe_EnumFlags_EnumFlags_Impl_.ofInt = EnumFlags_Impl__statics_ofInt
def EnumFlags_Impl__statics_toInt(this1):
	return this1
haxe_EnumFlags_EnumFlags_Impl_.toInt = EnumFlags_Impl__statics_toInt

def Int32_Impl__statics_preIncrement(this1):
	def _hx_local_2():
		def _hx_local_1():
			nonlocal this1
			def _hx_local_0():
				nonlocal this1
				this1 = this1 + 1
				return this1
				
			
			this1 = _hx_c.haxe_Int32_Int32_Impl_.clamp(_hx_local_0())
			return this1
			
		
		return _hx_local_1()
	
	return _hx_local_2()
	
haxe_Int32_Int32_Impl_.preIncrement = Int32_Impl__statics_preIncrement
def Int32_Impl__statics_postIncrement(this1):
	ret = this1
	this1 = this1 + 1
	
	this1 = _hx_c.haxe_Int32_Int32_Impl_.clamp(this1)
	return ret
	
haxe_Int32_Int32_Impl_.postIncrement = Int32_Impl__statics_postIncrement
def Int32_Impl__statics_preDecrement(this1):
	def _hx_local_2():
		def _hx_local_1():
			nonlocal this1
			def _hx_local_0():
				nonlocal this1
				this1 = this1 - 1
				return this1
				
			
			this1 = _hx_c.haxe_Int32_Int32_Impl_.clamp(_hx_local_0())
			return this1
			
		
		return _hx_local_1()
	
	return _hx_local_2()
	
haxe_Int32_Int32_Impl_.preDecrement = Int32_Impl__statics_preDecrement
def Int32_Impl__statics_postDecrement(this1):
	ret = this1
	this1 = this1 - 1
	
	this1 = _hx_c.haxe_Int32_Int32_Impl_.clamp(this1)
	return ret
	
haxe_Int32_Int32_Impl_.postDecrement = Int32_Impl__statics_postDecrement
def Int32_Impl__statics_add(a,b):
	return _hx_c.haxe_Int32_Int32_Impl_.clamp(a + b)
haxe_Int32_Int32_Impl_.add = Int32_Impl__statics_add
def Int32_Impl__statics_addInt(a,b):
	return _hx_c.haxe_Int32_Int32_Impl_.clamp(a + b)
haxe_Int32_Int32_Impl_.addInt = Int32_Impl__statics_addInt
def Int32_Impl__statics_sub(a,b):
	return _hx_c.haxe_Int32_Int32_Impl_.clamp(a - b)
haxe_Int32_Int32_Impl_.sub = Int32_Impl__statics_sub
def Int32_Impl__statics_subInt(a,b):
	return _hx_c.haxe_Int32_Int32_Impl_.clamp(a - b)
haxe_Int32_Int32_Impl_.subInt = Int32_Impl__statics_subInt
def Int32_Impl__statics_mul(a,b):
	def _hx_local_1():
		def _hx_local_0():
			b1 = _hx_c.haxe_Int32_Int32_Impl_.clamp(_hx_c.haxe_Int32_Int32_Impl_.shlInt(a * (_hx_rshift(b, 16)), 16))
			return _hx_c.haxe_Int32_Int32_Impl_.clamp(a * (b & 65535) + b1)
		
		return _hx_c.haxe_Int32_Int32_Impl_.clamp(_hx_local_0())
	
	return _hx_local_1()
	
haxe_Int32_Int32_Impl_.mul = Int32_Impl__statics_mul
def Int32_Impl__statics_mulInt(a,b):
	def _hx_local_1():
		def _hx_local_0():
			b1 = _hx_c.haxe_Int32_Int32_Impl_.clamp(_hx_c.haxe_Int32_Int32_Impl_.shlInt(a * (_hx_rshift(b, 16)), 16))
			return _hx_c.haxe_Int32_Int32_Impl_.clamp(a * (b & 65535) + b1)
		
		return _hx_c.haxe_Int32_Int32_Impl_.clamp(_hx_local_0())
	
	return _hx_local_1()
	
haxe_Int32_Int32_Impl_.mulInt = Int32_Impl__statics_mulInt
def Int32_Impl__statics_shl(a,b):
	return _hx_c.haxe_Int32_Int32_Impl_.clamp(a << b)
haxe_Int32_Int32_Impl_.shl = Int32_Impl__statics_shl
def Int32_Impl__statics_shlInt(a,b):
	return _hx_c.haxe_Int32_Int32_Impl_.clamp(a << b)
haxe_Int32_Int32_Impl_.shlInt = Int32_Impl__statics_shlInt
def Int32_Impl__statics_toFloat(this1):
	return this1
haxe_Int32_Int32_Impl_.toFloat = Int32_Impl__statics_toFloat
def Int32_Impl__statics_ucompare(a,b):
	if a < 0:
		if b < 0:
			return _hx_c.haxe_Int32_Int32_Impl_.clamp(~b - ~a)
		else:
			return 1
	
	if b < 0:
		return -1
	else:
		return _hx_c.haxe_Int32_Int32_Impl_.clamp(a - b)
	
haxe_Int32_Int32_Impl_.ucompare = Int32_Impl__statics_ucompare
def Int32_Impl__statics_clamp(x):
	return (x + 2**31) % 2**32 - 2**31
haxe_Int32_Int32_Impl_.clamp = Int32_Impl__statics_clamp

def Int64_statics_ushr32(v,n):
	return _hx_rshift(v, n)
haxe_Int64.ushr32 = Int64_statics_ushr32
def Int64_statics_i32(i):
	return (i + 2**31) % 2**32 - 2**31
haxe_Int64.i32 = Int64_statics_i32
def Int64_statics_make(high,low):
	return _hx_c.haxe_Int64(high, low)
haxe_Int64.make = Int64_statics_make
def Int64_statics_ofInt(x):
	return _hx_c.haxe_Int64(x >> 31, x)
haxe_Int64.ofInt = Int64_statics_ofInt
def Int64_statics_toInt(x):
	if x.high != 0:
		if x.high < 0:
			def _hx_local_2():
				def _hx_local_0():
					high = _hx_c.haxe_Int64.i32(~x.high)
					low = _hx_c.haxe_Int64.i32(-x.low)
					if low == 0:
						high = high + 1
					
					return _hx_c.haxe_Int64(high, low)
				
				return -_hx_c.haxe_Int64.toInt(_hx_local_0())
			
			return _hx_local_2()
		
		
		raise _HxException("Overflow")
	
	
	return x.low
	
haxe_Int64.toInt = Int64_statics_toInt
def Int64_statics_getLow(x):
	return x.low
haxe_Int64.getLow = Int64_statics_getLow
def Int64_statics_getHigh(x):
	return x.high
haxe_Int64.getHigh = Int64_statics_getHigh
def Int64_statics_add(a,b):
	high = _hx_c.haxe_Int64.i32(a.high + b.high)
	low = _hx_c.haxe_Int64.i32(a.low + b.low)
	if _hx_c.haxe_Int64.uicompare(low, a.low) < 0:
		high = high + 1
	
	return _hx_c.haxe_Int64(high, low)
	
haxe_Int64.add = Int64_statics_add
def Int64_statics_sub(a,b):
	high = _hx_c.haxe_Int64.i32(a.high - b.high)
	low = _hx_c.haxe_Int64.i32(a.low - b.low)
	if _hx_c.haxe_Int64.uicompare(a.low, b.low) < 0:
		high = high - 1
	
	return _hx_c.haxe_Int64(high, low)
	
haxe_Int64.sub = Int64_statics_sub
def Int64_statics_mul(a,b):
	mask = 65535
	al = a.low & mask
	ah = _hx_rshift(a.low, 16)
	bl = b.low & mask
	bh = _hx_rshift(b.low, 16)
	p00 = al * bl
	p10 = ah * bl
	p01 = al * bh
	p11 = ah * bh
	low = p00
	high = _hx_c.haxe_Int64.i32(p11 + (_hx_rshift(p01, 16)) + (_hx_rshift(p10, 16)))
	p01 = _hx_c.haxe_Int64.i32(p01 << 16)
	low = _hx_c.haxe_Int64.i32(low + p01)
	if _hx_c.haxe_Int64.uicompare(low, p01) < 0:
		high = _hx_c.haxe_Int64.i32(high + 1)
	
	p10 = _hx_c.haxe_Int64.i32(p10 << 16)
	low = _hx_c.haxe_Int64.i32(low + p10)
	if _hx_c.haxe_Int64.uicompare(low, p10) < 0:
		high = _hx_c.haxe_Int64.i32(high + 1)
	
	def _hx_local_0():
		b1 = b.high
		a1 = a.low
		return _hx_c.haxe_Int64.i32(_hx_c.haxe_Int64.i32(a1 * (_hx_rshift(b1, 16)) << 16) + a1 * (b1 & 65535))
	
	high = _hx_c.haxe_Int64.i32(high + _hx_local_0())
	def _hx_local_1():
		b2 = b.low
		a2 = a.high
		return _hx_c.haxe_Int64.i32(_hx_c.haxe_Int64.i32(a2 * (_hx_rshift(b2, 16)) << 16) + a2 * (b2 & 65535))
	
	high = _hx_c.haxe_Int64.i32(high + _hx_local_1())
	return _hx_c.haxe_Int64(high, low)
	
haxe_Int64.mul = Int64_statics_mul
def Int64_statics_divMod(modulus,divisor):
	quotient = _hx_c.haxe_Int64(0, 0)
	mask = _hx_c.haxe_Int64(0, 1)
	divisor = _hx_c.haxe_Int64(divisor.high, divisor.low)
	while divisor.high >= 0:
		cmp = None
		v = _hx_c.haxe_Int64.uicompare(divisor.high, modulus.high)
		if v != 0:
			cmp = v
		else:
			cmp = _hx_c.haxe_Int64.uicompare(divisor.low, modulus.low)
		
		divisor.high = _hx_c.haxe_Int64.i32(_hx_c.haxe_Int64.i32(divisor.high << 1) | _hx_rshift(divisor.low, 31))
		divisor.low = _hx_c.haxe_Int64.i32(divisor.low << 1)
		mask.high = _hx_c.haxe_Int64.i32(_hx_c.haxe_Int64.i32(mask.high << 1) | _hx_rshift(mask.low, 31))
		mask.low = _hx_c.haxe_Int64.i32(mask.low << 1)
		if cmp >= 0:
			break
		
	
	while _hx_c.haxe_Int64.i32(mask.low | mask.high) != 0:
		def _hx_local_0():
			v1 = _hx_c.haxe_Int64.uicompare(modulus.high, divisor.high)
			return v1 if (v1 != 0) else _hx_c.haxe_Int64.uicompare(modulus.low, divisor.low)
		
		if _hx_local_0() >= 0:
			quotient.high = _hx_c.haxe_Int64.i32(quotient.high | mask.high)
			quotient.low = _hx_c.haxe_Int64.i32(quotient.low | mask.low)
			modulus = _hx_c.haxe_Int64.sub(modulus, divisor)
		
		
		mask.low = _hx_c.haxe_Int64.i32(_hx_rshift(mask.low, 1) | _hx_c.haxe_Int64.i32(mask.high << 31))
		mask.high = _hx_rshift(mask.high, 1)
		divisor.low = _hx_c.haxe_Int64.i32(_hx_rshift(divisor.low, 1) | _hx_c.haxe_Int64.i32(divisor.high << 31))
		divisor.high = _hx_rshift(divisor.high, 1)
	
	return _hx_c._hx_AnonObject(quotient = quotient ,modulus = modulus )
	
haxe_Int64.divMod = Int64_statics_divMod
def Int64_statics_div(a,b):
	if b.high == 0:
		_g = b.low
		if (_g) == 0:
			raise _HxException("divide by zero")
		elif (_g) == 1:
			return _hx_c.haxe_Int64(a.high, a.low)
		
	
	
	sign = (a.high < 0 or b.high < 0) and not (a.high < 0 and b.high < 0)
	if a.high < 0:
		high = _hx_c.haxe_Int64.i32(~a.high)
		low = _hx_c.haxe_Int64.i32(-a.low)
		if low == 0:
			high = high + 1
		
		a = _hx_c.haxe_Int64(high, low)
	
	
	if b.high < 0:
		high1 = _hx_c.haxe_Int64.i32(~b.high)
		low1 = _hx_c.haxe_Int64.i32(-b.low)
		if low1 == 0:
			high1 = high1 + 1
		
		b = _hx_c.haxe_Int64(high1, low1)
	
	
	q = _hx_c.haxe_Int64.divMod(a, b).quotient
	if sign:
		high2 = _hx_c.haxe_Int64.i32(~q.high)
		low2 = _hx_c.haxe_Int64.i32(-q.low)
		if low2 == 0:
			high2 = high2 + 1
		
		return _hx_c.haxe_Int64(high2, low2)
	
	else:
		return q
	
haxe_Int64.div = Int64_statics_div
def Int64_statics_mod(a,b):
	if b.high == 0:
		_g = b.low
		if (_g) == 0:
			raise _HxException("modulus by zero")
		elif (_g) == 1:
			return _hx_c.haxe_Int64(0 >> 31, 0)
		
	
	
	sign = a.high < 0
	if a.high < 0:
		high = _hx_c.haxe_Int64.i32(~a.high)
		low = _hx_c.haxe_Int64.i32(-a.low)
		if low == 0:
			high = high + 1
		
		a = _hx_c.haxe_Int64(high, low)
	
	
	if b.high < 0:
		high1 = _hx_c.haxe_Int64.i32(~b.high)
		low1 = _hx_c.haxe_Int64.i32(-b.low)
		if low1 == 0:
			high1 = high1 + 1
		
		b = _hx_c.haxe_Int64(high1, low1)
	
	
	m = _hx_c.haxe_Int64.divMod(a, b).modulus
	if sign:
		high2 = _hx_c.haxe_Int64.i32(~m.high)
		low2 = _hx_c.haxe_Int64.i32(-m.low)
		if low2 == 0:
			high2 = high2 + 1
		
		return _hx_c.haxe_Int64(high2, low2)
	
	else:
		return m
	
haxe_Int64.mod = Int64_statics_mod
def Int64_statics_shl(a,b):
	if (b & 63) == 0:
		return a
	elif (b & 63) < 32:
		def _hx_local_1():
			def _hx_local_0():
				n = _hx_c.haxe_Int64.i32(32 - (b & 63))
				return _hx_rshift(a.low, n)
			
			return _hx_c.haxe_Int64(a.high << b | _hx_local_0(), a.low << b)
		
		return _hx_local_1()
	
	else:
		return _hx_c.haxe_Int64(a.low << _hx_c.haxe_Int64.i32(b - 32), 0)
haxe_Int64.shl = Int64_statics_shl
def Int64_statics_shr(a,b):
	if (b & 63) == 0:
		return a
	elif (b & 63) < 32:
		return _hx_c.haxe_Int64(a.high >> b, _hx_rshift(a.low, b) | a.high << _hx_c.haxe_Int64.i32(32 - (b & 63)))
	else:
		return _hx_c.haxe_Int64(a.high >> 31, a.high >> _hx_c.haxe_Int64.i32(b - 32))
haxe_Int64.shr = Int64_statics_shr
def Int64_statics_ushr(a,b):
	if (b & 63) == 0:
		return a
	elif (b & 63) < 32:
		return _hx_c.haxe_Int64(_hx_rshift(a.high, b), _hx_rshift(a.low, b) | a.high << _hx_c.haxe_Int64.i32(32 - (b & 63)))
	else:
		def _hx_local_1():
			def _hx_local_0():
				n = _hx_c.haxe_Int64.i32(b - 32)
				return _hx_rshift(a.high, n)
			
			return _hx_c.haxe_Int64(0, _hx_local_0())
		
		return _hx_local_1()
	
haxe_Int64.ushr = Int64_statics_ushr
def Int64_statics__hx_and(a,b):
	return _hx_c.haxe_Int64(a.high & b.high, a.low & b.low)
haxe_Int64._hx_and = Int64_statics__hx_and
def Int64_statics__hx_or(a,b):
	return _hx_c.haxe_Int64(a.high | b.high, a.low | b.low)
haxe_Int64._hx_or = Int64_statics__hx_or
def Int64_statics_xor(a,b):
	return _hx_c.haxe_Int64(a.high ^ b.high, a.low ^ b.low)
haxe_Int64.xor = Int64_statics_xor
def Int64_statics_neg(a):
	high = _hx_c.haxe_Int64.i32(~a.high)
	low = _hx_c.haxe_Int64.i32(-a.low)
	if low == 0:
		high = high + 1
	
	return _hx_c.haxe_Int64(high, low)
	
haxe_Int64.neg = Int64_statics_neg
def Int64_statics_isNeg(a):
	return a.high < 0
haxe_Int64.isNeg = Int64_statics_isNeg
def Int64_statics_isZero(a):
	return (a.high | a.low) == 0
haxe_Int64.isZero = Int64_statics_isZero
def Int64_statics_uicompare(a,b):
	if a < 0:
		if b < 0:
			return _hx_c.haxe_Int64.i32(~b - ~a)
		else:
			return 1
	elif b < 0:
		return -1
	else:
		return _hx_c.haxe_Int64.i32(a - b)
haxe_Int64.uicompare = Int64_statics_uicompare
def Int64_statics_compare(a,b):
	v = _hx_c.haxe_Int64.i32(a.high - b.high)
	if v != 0:
		return v
	else:
		return _hx_c.haxe_Int64.uicompare(a.low, b.low)
	
haxe_Int64.compare = Int64_statics_compare
def Int64_statics_ucompare(a,b):
	v = _hx_c.haxe_Int64.uicompare(a.high, b.high)
	if v != 0:
		return v
	else:
		return _hx_c.haxe_Int64.uicompare(a.low, b.low)
	
haxe_Int64.ucompare = Int64_statics_ucompare
def Int64_statics_toStr(a):
	return a.toString()
haxe_Int64.toStr = Int64_statics_toStr

def Json_statics_parse(text):
	return _hx_c.haxe_Json().doParse(text)
haxe_Json.parse = Json_statics_parse
def Json_statics_stringify(value,replacer = None):
	if replacer is None:
		replacer = None
	
	return _hx_c.haxe_Json().toString(value, replacer)
	
haxe_Json.stringify = Json_statics_stringify

def Log_statics_trace(v,infos = None):
	if infos is None:
		infos = None
	
	str = None
	if infos is not None:
		str = Std.string(Std.string(Std.string(Std.string(infos.fileName) + ":") + Std.string(_hx_c.Std.string(infos.lineNumber))) + ": ") + Std.string(_hx_c.Std.string(v))
		if _hx_builtin.hasattr(infos, "customParams"):
			str = Std.string(str) + Std.string("," + Std.string(",".join(_hx_builtin.list(_hx_builtin.map(_hx_c.Std.string, infos.customParams)))))
		
	
	else:
		str = v
	print(str)
	
haxe_Log.trace = Log_statics_trace
def Log_statics_clear():
	_hx_c.js_Boot.__clear_trace()
haxe_Log.clear = Log_statics_clear

haxe_Resource.content = None;
def Resource_statics_listNames():
	names = list()
	def _hx_local_0():
		p = None
		_this = _hx_c.haxe_Resource.content.keys()
		p = _hx_builtin.iter(_this)
		
		return _hx_c.python_HaxeIterator(p)
	
	_it = _hx_local_0()
	while _it.hasNext():
		k = _it.next()
		names.append(k)
		_hx_builtin.len(names)
	
	return names
	
haxe_Resource.listNames = Resource_statics_listNames
def Resource_statics_getString(name):
	def _hx_local_0():
		p = None
		_this = _hx_c.haxe_Resource.content.keys()
		p = _hx_builtin.iter(_this)
		
		return _hx_c.python_HaxeIterator(p)
	
	_it = _hx_local_0()
	while _it.hasNext():
		k = _it.next()
		if k == name:
			b = _hx_c.haxe_crypto_Base64.decode(_hx_c.haxe_Resource.content.get(k, None))
			return b.toString()
	
		
	return None
	
haxe_Resource.getString = Resource_statics_getString
def Resource_statics_getBytes(name):
	def _hx_local_0():
		p = None
		_this = _hx_c.haxe_Resource.content.keys()
		p = _hx_builtin.iter(_this)
		
		return _hx_c.python_HaxeIterator(p)
	
	_it = _hx_local_0()
	while _it.hasNext():
		k = _it.next()
		if k == name:
			b = _hx_c.haxe_crypto_Base64.decode(_hx_c.haxe_Resource.content.get(k, None))
			return b
	
		
	return None
	
haxe_Resource.getBytes = Resource_statics_getBytes

_hx_c.haxe_Resource.content = _hx_resources__()
haxe_Serializer.USE_CACHE = False
haxe_Serializer.USE_ENUM_INDEX = False
haxe_Serializer.BASE64 = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789%:"
def Serializer_statics_run(v):
	s = _hx_c.haxe_Serializer()
	s.serialize(v)
	return s.toString()
	
haxe_Serializer.run = Serializer_statics_run

import builtins as python_lib_Builtin
_hx_c.python_lib_Builtin = python_lib_Builtin
	
import re as python_lib_Re
_hx_c.python_lib_Re = python_lib_Re
	
haxe_Template.splitter = _hx_c.EReg("(::[A-Za-z0-9_ ()&|!+=/><*.\"-]+::|\\$\\$([A-Za-z0-9_-]+)\\()", "")
haxe_Template.expr_splitter = _hx_c.EReg("(\\(|\\)|[ \r\n\t]*\"[^\"]*\"[ \r\n\t]*|[!+=/><*.&|-]+)", "")
haxe_Template.expr_trim = _hx_c.EReg("^[ ]*([^ ]+)[ ]*$", "")
haxe_Template.expr_int = _hx_c.EReg("^[0-9]+$", "")
haxe_Template.expr_float = _hx_c.EReg("^([+-]?)(?=\\d|,\\d)\\d*(,\\d*)?([Ee]([+-]?\\d+))?$", "")
haxe_Template.globals = _hx_c._hx_AnonObject()

def Timer_statics_measure(f,pos = None):
	if pos is None:
		pos = None
	
	t0 = _hx_c.haxe_Timer.stamp()
	r = f()
	_hx_c.haxe_Log.trace(Std.string(_hx_c.haxe_Timer.stamp() - t0) + "s", pos)
	return r
	
haxe_Timer.measure = Timer_statics_measure
def Timer_statics_stamp():
	def _hx_local_1():
		def _hx_local_0():
			_this = _hx_c.Date.now()
			return _this.date.timestamp() * 1000.0
		
		return _hx_local_0() / 1000
	
	return _hx_local_1()
	
haxe_Timer.stamp = Timer_statics_stamp

haxe_Unserializer.DEFAULT_RESOLVER = _hx_c.Type
haxe_Unserializer.BASE64 = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789%:"
haxe_Unserializer.CODES = None
def Unserializer_statics_initCodes():
	codes = list()
	_g1 = 0
	_g = _hx_builtin.len(_hx_c.haxe_Unserializer.BASE64)
	while _g1 < _g:
		i = _g1
		_g1 = _g1 + 1
		
		def _hx_local_0():
			s = _hx_c.haxe_Unserializer.BASE64
			return -1 if (i >= _hx_builtin.len(s)) else ord(_hx_array_get(s,i))
		
		_hx_array_set(codes,_hx_local_0(), i)
	
	
	return codes
	
haxe_Unserializer.initCodes = Unserializer_statics_initCodes
def Unserializer_statics_run(v):
	return _hx_c.haxe_Unserializer(v).unserialize()
haxe_Unserializer.run = Unserializer_statics_run

def Bytes_statics_alloc(length):
	a = list()
	_g = 0
	while _g < length:
		i = _g
		_g = _g + 1
		
		a.append(0)
		_hx_builtin.len(a)
	
	
	return _hx_c.haxe_io_Bytes(length, a)
	
haxe_io_Bytes.alloc = Bytes_statics_alloc
def Bytes_statics_ofString(s):
	a = list()
	_g1 = 0
	_g = _hx_builtin.len(s)
	while _g1 < _g:
		i = _g1
		_g1 = _g1 + 1
		
		c = None
		if i >= _hx_builtin.len(s):
			c = -1
		else:
			c = ord(_hx_array_get(s,i))
		if c <= 127:
			a.append(c)
			_hx_builtin.len(a)
		
		elif c <= 2047:
			a.append(192 | c >> 6)
			_hx_builtin.len(a)
			
			a.append(128 | c & 63)
			_hx_builtin.len(a)
			
		
		elif c <= 65535:
			a.append(224 | c >> 12)
			_hx_builtin.len(a)
			
			a.append(128 | c >> 6 & 63)
			_hx_builtin.len(a)
			
			a.append(128 | c & 63)
			_hx_builtin.len(a)
			
		
		else:
			a.append(240 | c >> 18)
			_hx_builtin.len(a)
			
			a.append(128 | c >> 12 & 63)
			_hx_builtin.len(a)
			
			a.append(128 | c >> 6 & 63)
			_hx_builtin.len(a)
			
			a.append(128 | c & 63)
			_hx_builtin.len(a)
			
		
	
	
	return _hx_c.haxe_io_Bytes(_hx_builtin.len(a), a)
	
haxe_io_Bytes.ofString = Bytes_statics_ofString
def Bytes_statics_ofData(b):
	return _hx_c.haxe_io_Bytes(_hx_builtin.len(b), b)
haxe_io_Bytes.ofData = Bytes_statics_ofData
def Bytes_statics_fastGet(b,pos):
	return _hx_array_get(b,pos)
haxe_io_Bytes.fastGet = Bytes_statics_fastGet

haxe_crypto_Base64.CHARS = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"
haxe_crypto_Base64.BYTES = _hx_c.haxe_io_Bytes.ofString(_hx_c.haxe_crypto_Base64.CHARS)
def Base64_statics_encode(bytes,complement = True):
	if complement is None:
		complement = True
	
	str = _hx_c.haxe_crypto_BaseCode(_hx_c.haxe_crypto_Base64.BYTES).encodeBytes(bytes).toString()
	if complement:
		_g1 = 0
		_g = (3 - bytes.length * 4 % 3) % 3
		while _g1 < _g:
			i = _g1
			_g1 = _g1 + 1
			
			str = Std.string(str) + "="
		
	
	
	return str
	
haxe_crypto_Base64.encode = Base64_statics_encode
def Base64_statics_decode(str,complement = True):
	if complement is None:
		complement = True
	
	if complement:
		def _hx_local_0():
			index = _hx_builtin.len(str) - 1
			return _hx_c.python_internal_StringImpl.charCodeAt(str, index)
		
		while _hx_local_0() == 61:
			str = _hx_c.python_Tools.substr(str, 0, -1)
	
	
	return _hx_c.haxe_crypto_BaseCode(_hx_c.haxe_crypto_Base64.BYTES).decodeBytes(_hx_c.haxe_io_Bytes.ofString(str))
	
haxe_crypto_Base64.decode = Base64_statics_decode

def BaseCode_statics_encode(s,base):
	b = _hx_c.haxe_crypto_BaseCode(_hx_c.haxe_io_Bytes.ofString(base))
	return b.encodeString(s)
	
haxe_crypto_BaseCode.encode = BaseCode_statics_encode
def BaseCode_statics_decode(s,base):
	b = _hx_c.haxe_crypto_BaseCode(_hx_c.haxe_io_Bytes.ofString(base))
	return b.decodeString(s)
	
haxe_crypto_BaseCode.decode = BaseCode_statics_decode

def Md5_statics_encode(s):
	m = _hx_c.haxe_crypto_Md5()
	h = m.doEncode(_hx_c.haxe_crypto_Md5.str2blks(s))
	return m.hex(h)
	
haxe_crypto_Md5.encode = Md5_statics_encode
def Md5_statics_make(b):
	h = _hx_c.haxe_crypto_Md5().doEncode(_hx_c.haxe_crypto_Md5.bytes2blks(b))
	out = _hx_c.haxe_io_Bytes.alloc(16)
	p = 0
	_g = 0
	while _g < 4:
		i = _g
		_g = _g + 1
		
		pos = p
		p = p + 1
		
		_hx_array_set(out.b,pos, _hx_array_get(h,i) & 255 & 255)
		
		pos1 = p
		p = p + 1
		
		_hx_array_set(out.b,pos1, _hx_array_get(h,i) >> 8 & 255 & 255)
		
		pos2 = p
		p = p + 1
		
		_hx_array_set(out.b,pos2, _hx_array_get(h,i) >> 16 & 255 & 255)
		
		pos3 = p
		p = p + 1
		
		_hx_array_set(out.b,pos3, _hx_rshift(_hx_array_get(h,i), 24) & 255)
		
	
	
	return out
	
haxe_crypto_Md5.make = Md5_statics_make
def Md5_statics_bytes2blks(b):
	nblk = (b.length + 8 >> 6) + 1
	blks = list()
	blksSize = nblk * 16
	_g = 0
	while _g < blksSize:
		i = _g
		_g = _g + 1
		
		_hx_array_set(blks,i, 0)
	
	
	i1 = 0
	while i1 < b.length:
		_hx_local_0 = blks
		_hx_local_1 = i1 >> 2
		_hx_local_2 = _hx_array_get(_hx_local_0,_hx_local_1)
		_hx_array_set(_hx_local_0,_hx_local_1, _hx_local_2 | _hx_array_get(b.b,i1) << (((b.length << 3) + i1 & 3) << 3))
		_hx_array_get(_hx_local_0,_hx_local_1)
		
		i1 = i1 + 1
	
	_hx_local_5 = blks
	_hx_local_6 = i1 >> 2
	_hx_local_7 = _hx_array_get(_hx_local_5,_hx_local_6)
	_hx_array_set(_hx_local_5,_hx_local_6, _hx_local_7 | 128 << (b.length * 8 + i1) % 4 * 8)
	_hx_array_get(_hx_local_5,_hx_local_6)
	
	l = b.length * 8
	k = nblk * 16 - 2
	_hx_array_set(blks,k, l & 255)
	_hx_array_set(blks,k, _hx_array_get(blks,k) | (_hx_rshift(l, 8) & 255) << 8)
	_hx_array_set(blks,k, _hx_array_get(blks,k) | (_hx_rshift(l, 16) & 255) << 16)
	_hx_array_set(blks,k, _hx_array_get(blks,k) | (_hx_rshift(l, 24) & 255) << 24)
	return blks
	
haxe_crypto_Md5.bytes2blks = Md5_statics_bytes2blks
def Md5_statics_str2blks(str):
	nblk = (_hx_builtin.len(str) + 8 >> 6) + 1
	blks = list()
	blksSize = nblk * 16
	_g = 0
	while _g < blksSize:
		i = _g
		_g = _g + 1
		
		_hx_array_set(blks,i, 0)
	
	
	i1 = 0
	while i1 < _hx_builtin.len(str):
		_hx_local_0 = blks
		_hx_local_1 = i1 >> 2
		_hx_local_2 = _hx_array_get(_hx_local_0,_hx_local_1)
		_hx_array_set(_hx_local_0,_hx_local_1, _hx_local_2 | _hx_c.python_internal_StringImpl.charCodeAt(str, i1) << (_hx_builtin.len(str) * 8 + i1) % 4 * 8)
		_hx_array_get(_hx_local_0,_hx_local_1)
		
		i1 = i1 + 1
	
	_hx_local_5 = blks
	_hx_local_6 = i1 >> 2
	_hx_local_7 = _hx_array_get(_hx_local_5,_hx_local_6)
	_hx_array_set(_hx_local_5,_hx_local_6, _hx_local_7 | 128 << (_hx_builtin.len(str) * 8 + i1) % 4 * 8)
	_hx_array_get(_hx_local_5,_hx_local_6)
	
	l = _hx_builtin.len(str) * 8
	k = nblk * 16 - 2
	_hx_array_set(blks,k, l & 255)
	_hx_array_set(blks,k, _hx_array_get(blks,k) | (_hx_rshift(l, 8) & 255) << 8)
	_hx_array_set(blks,k, _hx_array_get(blks,k) | (_hx_rshift(l, 16) & 255) << 16)
	_hx_array_set(blks,k, _hx_array_get(blks,k) | (_hx_rshift(l, 24) & 255) << 24)
	return blks
	
haxe_crypto_Md5.str2blks = Md5_statics_str2blks

def Sha1_statics_encode(s):
	sh = _hx_c.haxe_crypto_Sha1()
	h = sh.doEncode(_hx_c.haxe_crypto_Sha1.str2blks(s))
	return sh.hex(h)
	
haxe_crypto_Sha1.encode = Sha1_statics_encode
def Sha1_statics_make(b):
	h = _hx_c.haxe_crypto_Sha1().doEncode(_hx_c.haxe_crypto_Sha1.bytes2blks(b))
	out = _hx_c.haxe_io_Bytes.alloc(20)
	p = 0
	_g = 0
	while _g < 5:
		i = _g
		_g = _g + 1
		
		pos = p
		p = p + 1
		
		_hx_array_set(out.b,pos, _hx_rshift(_hx_array_get(h,i), 24) & 255)
		
		pos1 = p
		p = p + 1
		
		_hx_array_set(out.b,pos1, _hx_array_get(h,i) >> 16 & 255 & 255)
		
		pos2 = p
		p = p + 1
		
		_hx_array_set(out.b,pos2, _hx_array_get(h,i) >> 8 & 255 & 255)
		
		pos3 = p
		p = p + 1
		
		_hx_array_set(out.b,pos3, _hx_array_get(h,i) & 255 & 255)
		
	
	
	return out
	
haxe_crypto_Sha1.make = Sha1_statics_make
def Sha1_statics_str2blks(s):
	nblk = (_hx_builtin.len(s) + 8 >> 6) + 1
	blks = list()
	_g1 = 0
	_g = nblk * 16
	while _g1 < _g:
		i = _g1
		_g1 = _g1 + 1
		
		_hx_array_set(blks,i, 0)
	
	
	_g11 = 0
	_g2 = _hx_builtin.len(s)
	while _g11 < _g2:
		i1 = _g11
		_g11 = _g11 + 1
		
		p = i1 >> 2
		_hx_array_set(blks,p, _hx_array_get(blks,p) | _hx_c.python_internal_StringImpl.charCodeAt(s, i1) << 24 - ((i1 & 3) << 3))
	
	
	i2 = _hx_builtin.len(s)
	p1 = i2 >> 2
	_hx_array_set(blks,p1, _hx_array_get(blks,p1) | 128 << 24 - ((i2 & 3) << 3))
	_hx_array_set(blks,nblk * 16 - 1, _hx_builtin.len(s) * 8)
	return blks
	
haxe_crypto_Sha1.str2blks = Sha1_statics_str2blks
def Sha1_statics_bytes2blks(b):
	nblk = (b.length + 8 >> 6) + 1
	blks = list()
	_g1 = 0
	_g = nblk * 16
	while _g1 < _g:
		i = _g1
		_g1 = _g1 + 1
		
		_hx_array_set(blks,i, 0)
	
	
	_g11 = 0
	_g2 = b.length
	while _g11 < _g2:
		i1 = _g11
		_g11 = _g11 + 1
		
		p = i1 >> 2
		_hx_array_set(blks,p, _hx_array_get(blks,p) | _hx_array_get(b.b,i1) << 24 - ((i1 & 3) << 3))
	
	
	i2 = b.length
	p1 = i2 >> 2
	_hx_array_set(blks,p1, _hx_array_get(blks,p1) | 128 << 24 - ((i2 & 3) << 3))
	_hx_array_set(blks,nblk * 16 - 1, b.length * 8)
	return blks
	
haxe_crypto_Sha1.bytes2blks = Sha1_statics_bytes2blks

def ArraySort_statics_sort(a,cmp):
	_hx_c.haxe_ds_ArraySort.rec(a, cmp, 0, _hx_builtin.len(a))
haxe_ds_ArraySort.sort = ArraySort_statics_sort
def ArraySort_statics_rec(a,cmp,_hx_from,to):
	middle = _hx_from + to >> 1
	if to - _hx_from < 12:
		if to <= _hx_from:
			return
		
		_g = _hx_from + 1
		while _g < to:
			i = _g
			_g = _g + 1
			
			j = i
			while j > _hx_from:
				if cmp(_hx_array_get(a,j), _hx_array_get(a,j - 1)) < 0:
					_hx_c.haxe_ds_ArraySort.swap(a, j - 1, j)
				else:
					break
				j = j - 1
			
		
		
		return
	
	
	_hx_c.haxe_ds_ArraySort.rec(a, cmp, _hx_from, middle)
	_hx_c.haxe_ds_ArraySort.rec(a, cmp, middle, to)
	_hx_c.haxe_ds_ArraySort.doMerge(a, cmp, _hx_from, middle, to, middle - _hx_from, to - middle)
	
haxe_ds_ArraySort.rec = ArraySort_statics_rec
def ArraySort_statics_doMerge(a,cmp,_hx_from,pivot,to,len1,len2):
	first_cut = None
	second_cut = None
	len11 = None
	len22 = None
	new_mid = None
	if len1 == 0 or len2 == 0:
		return
	
	if len1 + len2 == 2:
		if cmp(_hx_array_get(a,pivot), _hx_array_get(a,_hx_from)) < 0:
			_hx_c.haxe_ds_ArraySort.swap(a, pivot, _hx_from)
		
		return
	
	
	if len1 > len2:
		len11 = len1 >> 1
		first_cut = _hx_from + len11
		second_cut = _hx_c.haxe_ds_ArraySort.lower(a, cmp, pivot, to, first_cut)
		len22 = second_cut - pivot
	
	else:
		len22 = len2 >> 1
		second_cut = pivot + len22
		first_cut = _hx_c.haxe_ds_ArraySort.upper(a, cmp, _hx_from, pivot, second_cut)
		len11 = first_cut - _hx_from
	
	_hx_c.haxe_ds_ArraySort.rotate(a, cmp, first_cut, pivot, second_cut)
	new_mid = first_cut + len22
	_hx_c.haxe_ds_ArraySort.doMerge(a, cmp, _hx_from, first_cut, new_mid, len11, len22)
	_hx_c.haxe_ds_ArraySort.doMerge(a, cmp, new_mid, second_cut, to, len1 - len11, len2 - len22)
	
haxe_ds_ArraySort.doMerge = ArraySort_statics_doMerge
def ArraySort_statics_rotate(a,cmp,_hx_from,mid,to):
	n = None
	if _hx_from == mid or mid == to:
		return
	
	n = _hx_c.haxe_ds_ArraySort.gcd(to - _hx_from, mid - _hx_from)
	def _hx_local_1():
		nonlocal n
		_hx_local_0 = n
		n = n - 1
		return _hx_local_0
		
	
	while _hx_local_1() != 0:
		val = _hx_array_get(a,_hx_from + n)
		shift = mid - _hx_from
		p1 = _hx_from + n
		p2 = _hx_from + n + shift
		while p2 != _hx_from + n:
			_hx_array_set(a,p1, _hx_array_get(a,p2))
			p1 = p2
			if to - p2 > shift:
				p2 = p2 + shift
			else:
				p2 = _hx_from + (shift - (to - p2))
		
		_hx_array_set(a,p1, val)
	
	
haxe_ds_ArraySort.rotate = ArraySort_statics_rotate
def ArraySort_statics_gcd(m,n):
	while n != 0:
		t = m % n
		m = n
		n = t
	
	return m
	
haxe_ds_ArraySort.gcd = ArraySort_statics_gcd
def ArraySort_statics_upper(a,cmp,_hx_from,to,val):
	len = to - _hx_from
	half = None
	mid = None
	while len > 0:
		half = len >> 1
		mid = _hx_from + half
		if cmp(_hx_array_get(a,val), _hx_array_get(a,mid)) < 0:
			len = half
		else:
			_hx_from = mid + 1
			len = len - half - 1
		
	
	return _hx_from
	
haxe_ds_ArraySort.upper = ArraySort_statics_upper
def ArraySort_statics_lower(a,cmp,_hx_from,to,val):
	len = to - _hx_from
	half = None
	mid = None
	while len > 0:
		half = len >> 1
		mid = _hx_from + half
		if cmp(_hx_array_get(a,mid), _hx_array_get(a,val)) < 0:
			_hx_from = mid + 1
			len = len - half - 1
		
		else:
			len = half
	
	return _hx_from
	
haxe_ds_ArraySort.lower = ArraySort_statics_lower
def ArraySort_statics_swap(a,i,j):
	tmp = _hx_array_get(a,i)
	_hx_array_set(a,i, _hx_array_get(a,j))
	_hx_array_set(a,j, tmp)
	
haxe_ds_ArraySort.swap = ArraySort_statics_swap
def ArraySort_statics_compare(a,cmp,i,j):
	return cmp(_hx_array_get(a,i), _hx_array_get(a,j))
haxe_ds_ArraySort.compare = ArraySort_statics_compare






def HashMap_Impl__statics__new():
	return _hx_c._hx_AnonObject(keys = _hx_c.haxe_ds_IntMap() ,values = _hx_c.haxe_ds_IntMap() )
haxe_ds_HashMap_HashMap_Impl_._new = HashMap_Impl__statics__new
def HashMap_Impl__statics_set(this1,k,v):
	this1.keys.set(k.hashCode(), k)
	this1.values.set(k.hashCode(), v)
	
haxe_ds_HashMap_HashMap_Impl_.set = HashMap_Impl__statics_set
def HashMap_Impl__statics_get(this1,k):
	key = k.hashCode()
	return this1.values.h.get(key, None)
	
haxe_ds_HashMap_HashMap_Impl_.get = HashMap_Impl__statics_get
def HashMap_Impl__statics_exists(this1,k):
	key = k.hashCode()
	return key in this1.values.h
	
haxe_ds_HashMap_HashMap_Impl_.exists = HashMap_Impl__statics_exists
def HashMap_Impl__statics_remove(this1,k):
	this1.values.remove(k.hashCode())
	return this1.keys.remove(k.hashCode())
	
haxe_ds_HashMap_HashMap_Impl_.remove = HashMap_Impl__statics_remove
def HashMap_Impl__statics_keys(this1):
	return this1.keys.iterator()
haxe_ds_HashMap_HashMap_Impl_.keys = HashMap_Impl__statics_keys
def HashMap_Impl__statics_iterator(this1):
	return this1.values.iterator()
haxe_ds_HashMap_HashMap_Impl_.iterator = HashMap_Impl__statics_iterator




def Vector_Impl__statics__new(length):
	this1 = None
	this1 = list()
	_g = 0
	while _g < length:
		i = _g
		_g = _g + 1
		
		_hx_array_set(this1,i, None)
	
	
	return this1
	
haxe_ds_Vector_Vector_Impl_._new = Vector_Impl__statics__new
def Vector_Impl__statics_get(this1,index):
	return _hx_array_get(this1,index)
haxe_ds_Vector_Vector_Impl_.get = Vector_Impl__statics_get
def Vector_Impl__statics_set(this1,index,val):
	def _hx_local_1():
		def _hx_local_0():
			_hx_array_set(this1,index, val)
			return _hx_array_get(this1,index)
		
		return _hx_local_0()
	
	return _hx_local_1()
	
haxe_ds_Vector_Vector_Impl_.set = Vector_Impl__statics_set
haxe_ds_Vector_Vector_Impl_.length = None;
def Vector_Impl__statics_get_length(this1):
	return _hx_builtin.len(this1)
haxe_ds_Vector_Vector_Impl_.get_length = Vector_Impl__statics_get_length
def Vector_Impl__statics_blit(src,srcPos,dest,destPos,len):
	_g = 0
	while _g < len:
		i = _g
		_g = _g + 1
		
		_hx_array_set(dest,destPos + i, _hx_array_get(src,srcPos + i))
	
	
haxe_ds_Vector_Vector_Impl_.blit = Vector_Impl__statics_blit
def Vector_Impl__statics_toData(this1):
	return this1
haxe_ds_Vector_Vector_Impl_.toData = Vector_Impl__statics_toData
def Vector_Impl__statics_fromData(data):
	return data
haxe_ds_Vector_Vector_Impl_.fromData = Vector_Impl__statics_fromData
def Vector_Impl__statics_fromArrayCopy(array):
	vec = None
	length = _hx_builtin.len(array)
	this1 = None
	this1 = list()
	_g = 0
	while _g < length:
		i = _g
		_g = _g + 1
		
		_hx_array_set(this1,i, None)
	
	
	vec = this1
	
	_g1 = 0
	_g2 = _hx_builtin.len(array)
	while _g1 < _g2:
		i1 = _g1
		_g1 = _g1 + 1
		
		_hx_array_set(vec,i1, _hx_array_get(array,i1))
	
	
	return vec
	
haxe_ds_Vector_Vector_Impl_.fromArrayCopy = Vector_Impl__statics_fromArrayCopy





haxe_io_Output.LN2 = float("-inf") if (2 == 0.0) else float("nan") if (2 < 0.0) else _hx_math.log(2)



def Path_statics_withoutExtension(path):
	s = _hx_c.haxe_io_Path(path)
	s.ext = None
	return s.toString()
	
haxe_io_Path.withoutExtension = Path_statics_withoutExtension
def Path_statics_withoutDirectory(path):
	s = _hx_c.haxe_io_Path(path)
	s.dir = None
	return s.toString()
	
haxe_io_Path.withoutDirectory = Path_statics_withoutDirectory
def Path_statics_directory(path):
	s = _hx_c.haxe_io_Path(path)
	if s.dir is None:
		return ""
	
	return s.dir
	
haxe_io_Path.directory = Path_statics_directory
def Path_statics_extension(path):
	s = _hx_c.haxe_io_Path(path)
	if s.ext is None:
		return ""
	
	return s.ext
	
haxe_io_Path.extension = Path_statics_extension
def Path_statics_withExtension(path,ext):
	s = _hx_c.haxe_io_Path(path)
	s.ext = ext
	return s.toString()
	
haxe_io_Path.withExtension = Path_statics_withExtension
def Path_statics_addTrailingSlash(path):
	if _hx_builtin.len(path) == 0:
		return "/"
	
	c1 = None
	if None is None:
		c1 = path.rfind("/", 0, _hx_builtin.len(path))
	else:
		i = path.rfind("/", 0, None + 1)
		startLeft = None
		if i == -1:
			b = None + 1 - _hx_builtin.len("/")
			if _hx_math.isnan(0):
				startLeft = 0
			elif _hx_math.isnan(b):
				startLeft = b
			else:
				startLeft = _hx_builtin.max(0, b)
		
		else:
			startLeft = i + 1
		check = path.find("/", startLeft, _hx_builtin.len(path))
		if check > i and check <= None:
			c1 = check
		else:
			c1 = i
	
	c2 = None
	if None is None:
		c2 = path.rfind("\\", 0, _hx_builtin.len(path))
	else:
		i1 = path.rfind("\\", 0, None + 1)
		startLeft1 = None
		if i1 == -1:
			b1 = None + 1 - _hx_builtin.len("\\")
			if _hx_math.isnan(0):
				startLeft1 = 0
			elif _hx_math.isnan(b1):
				startLeft1 = b1
			else:
				startLeft1 = _hx_builtin.max(0, b1)
		
		else:
			startLeft1 = i1 + 1
		check1 = path.find("\\", startLeft1, _hx_builtin.len(path))
		if check1 > i1 and check1 <= None:
			c2 = check1
		else:
			c2 = i1
	
	if c1 < c2:
		if c2 != _hx_builtin.len(path) - 1:
			return Std.string(path) + "\\"
		else:
			return path
	elif c1 != _hx_builtin.len(path) - 1:
		return Std.string(path) + "/"
	else:
		return path
	
haxe_io_Path.addTrailingSlash = Path_statics_addTrailingSlash
def Path_statics_removeTrailingSlash(path):
	_g = None
	index = _hx_builtin.len(path) - 1
	_g = _hx_c.python_internal_StringImpl.charCodeAt(path, index)
	
	if (_g) == 92 or (_g) == 47:
		return _hx_c.python_Tools.substr(path, 0, -1)
	else:
		return path
	
haxe_io_Path.removeTrailingSlash = Path_statics_removeTrailingSlash



def ExprTools_statics_toString(e):
	return _hx_c.haxe_macro_Printer().printExpr(e)
haxe_macro_ExprTools.toString = ExprTools_statics_toString
def ExprTools_statics_iter(e,f):
	_g = e.expr
	if (_g.index) == 26 or (_g.index) == 20 or (_g.index) == 21 or (_g.index) == 0:
		None
	elif (_g.index) == 3:
		e1 = _g.params[0]
		f(e1)
	
	elif (_g.index) == 4:
		e1 = _g.params[0]
		f(e1)
	
	elif (_g.index) == 22:
		e1 = _g.params[0]
		f(e1)
	
	elif (_g.index) == 23:
		e1 = _g.params[0]
		f(e1)
	
	elif (_g.index) == 25:
		e1 = _g.params[0]
		f(e1)
	
	elif (_g.index) == 28:
		e1 = _g.params[0]
		f(e1)
	
	elif (_g.index) == 9:
		e1 = _g.params[2]
		f(e1)
	
	elif (_g.index) == 24:
		e1 = _g.params[0]
		f(e1)
	
	elif (_g.index) == 29:
		e1 = _g.params[1]
		f(e1)
	
	elif (_g.index) == 1:
		e2 = _g.params[1]
		e11 = _g.params[0]
		f(e11)
		f(e2)
		
	
	elif (_g.index) == 16:
		e2 = _g.params[1]
		e11 = _g.params[0]
		f(e11)
		f(e2)
		
	
	elif (_g.index) == 2:
		e2 = _g.params[2]
		e11 = _g.params[1]
		f(e11)
		f(e2)
		
	
	elif (_g.index) == 13:
		e2 = _g.params[1]
		e11 = _g.params[0]
		f(e11)
		f(e2)
		
	
	elif (_g.index) == 14:
		e2 = _g.params[1]
		e11 = _g.params[0]
		f(e11)
		f(e2)
		
	
	elif (_g.index) == 10:
		vl = _g.params[0]
		_g1 = 0
		while _g1 < _hx_builtin.len(vl):
			v = _hx_array_get(vl,_g1)
			_g1 = _g1 + 1
			e3 = v.expr
			if e3 is not None:
				f(e3)
			
		
		
	
	elif (_g.index) == 18:
		cl = _g.params[1]
		e4 = _g.params[0]
		f(e4)
		_g11 = 0
		while _g11 < _hx_builtin.len(cl):
			c = _hx_array_get(cl,_g11)
			_g11 = _g11 + 1
			f(c.expr)
		
		
		
	
	elif (_g.index) == 27:
		e31 = _g.params[2]
		e21 = _g.params[1]
		e12 = _g.params[0]
		f(e12)
		f(e21)
		if e31 is not None:
			f(e31)
		
		
	
	elif (_g.index) == 15:
		e31 = _g.params[2]
		e21 = _g.params[1]
		e12 = _g.params[0]
		f(e12)
		f(e21)
		if e31 is not None:
			f(e31)
		
		
	
	elif (_g.index) == 6:
		el = _g.params[0]
		_hx_c.haxe_macro_ExprArrayTools.iter(el, f)
	
	elif (_g.index) == 8:
		el = _g.params[1]
		_hx_c.haxe_macro_ExprArrayTools.iter(el, f)
	
	elif (_g.index) == 12:
		el = _g.params[0]
		_hx_c.haxe_macro_ExprArrayTools.iter(el, f)
	
	elif (_g.index) == 5:
		fl = _g.params[0]
		_g12 = 0
		while _g12 < _hx_builtin.len(fl):
			fd = _hx_array_get(fl,_g12)
			_g12 = _g12 + 1
			f(fd.expr)
		
		
	
	elif (_g.index) == 7:
		el1 = _g.params[1]
		e5 = _g.params[0]
		f(e5)
		_hx_c.haxe_macro_ExprArrayTools.iter(el1, f)
		
	
	elif (_g.index) == 19:
		e6 = _g.params[0]
		if e6 is not None:
			f(e6)
		
	
	elif (_g.index) == 11:
		func = _g.params[1]
		_g13 = 0
		_g2 = func.args
		while _g13 < _hx_builtin.len(_g2):
			arg = _hx_array_get(_g2,_g13)
			_g13 = _g13 + 1
			e7 = arg.value
			if e7 is not None:
				f(e7)
			
		
		
		e8 = func.expr
		if e8 is not None:
			f(e8)
		
		
		
	
	elif (_g.index) == 17:
		edef = _g.params[2]
		cl1 = _g.params[1]
		e9 = _g.params[0]
		f(e9)
		_g14 = 0
		while _g14 < _hx_builtin.len(cl1):
			c1 = _hx_array_get(cl1,_g14)
			_g14 = _g14 + 1
			_hx_c.haxe_macro_ExprArrayTools.iter(c1.values, f)
			e10 = c1.guard
			if e10 is not None:
				f(e10)
			
			
			e13 = c1.expr
			if e13 is not None:
				f(e13)
			
			
		
		
		if edef is not None and edef.expr is not None:
			f(edef)
		
		
	
	
	
haxe_macro_ExprTools.iter = ExprTools_statics_iter
def ExprTools_statics_map(e,f):
	def _hx_local_125():
		def _hx_local_0():
			_g = e.expr
			def _hx_local_124():
				def _hx_local_29():
					def _hx_local_32():
						def _hx_local_31():
							def _hx_local_30():
								e24 = _g.params[1]
								m = _g.params[0]
								return _hx_c.haxe_macro_ExprDef.EMeta(m, f(e24))
							
							return _hx_local_30()
						
						return _hx_local_31()
					
					_hx_local_1 = _hx_local_32
					def _hx_local_38():
						def _hx_local_37():
							def _hx_local_33():
								func = _g.params[1]
								name = _g.params[0]
								def _hx_local_36():
									def _hx_local_34():
										ret4 = []
										_g14 = 0
										_g2 = func.args
										while _g14 < _hx_builtin.len(_g2):
											arg = _hx_array_get(_g2,_g14)
											_g14 = _g14 + 1
											def _hx_local_35():
												e23 = arg.value
												return None if (e23 is None) else f(e23)
											
											x4 = _hx_c._hx_AnonObject(name = arg.name ,opt = arg.opt ,type = arg.type ,value = _hx_local_35() )
											ret4.append(x4)
											_hx_builtin.len(ret4)
											
										
										
										return _hx_c.haxe_macro_ExprDef.EFunction(name, _hx_c._hx_AnonObject(args = ret4 ,ret = func.ret ,params = func.params ,expr = f(func.expr) ))
									
									return _hx_local_34()
								
								return _hx_local_36()
							
							return _hx_local_33()
						
						return _hx_local_37()
					
					_hx_local_2 = _hx_local_38
					def _hx_local_45():
						def _hx_local_44():
							def _hx_local_39():
								edef = _g.params[2]
								cases = _g.params[1]
								e18 = _g.params[0]
								def _hx_local_43():
									def _hx_local_40():
										ret3 = []
										_g13 = 0
										while _g13 < _hx_builtin.len(cases):
											c1 = _hx_array_get(cases,_g13)
											_g13 = _g13 + 1
											def _hx_local_41():
												e19 = c1.expr
												return None if (e19 is None) else f(e19)
											
											def _hx_local_42():
												e20 = c1.guard
												return None if (e20 is None) else f(e20)
											
											x3 = _hx_c._hx_AnonObject(expr = _hx_local_41() ,guard = _hx_local_42() ,values = _hx_c.haxe_macro_ExprArrayTools.map(c1.values, f) )
											ret3.append(x3)
											_hx_builtin.len(ret3)
											
										
										
										return _hx_c.haxe_macro_ExprDef.ESwitch(f(e18), ret3, edef if (edef is None or edef.expr is None) else f(edef))
									
									return _hx_local_40()
								
								return _hx_local_43()
							
							return _hx_local_39()
						
						return _hx_local_44()
					
					_hx_local_3 = _hx_local_45
					def _hx_local_50():
						def _hx_local_49():
							def _hx_local_46():
								catches = _g.params[1]
								e17 = _g.params[0]
								def _hx_local_48():
									def _hx_local_47():
										ret2 = []
										_g12 = 0
										while _g12 < _hx_builtin.len(catches):
											c = _hx_array_get(catches,_g12)
											_g12 = _g12 + 1
											x2 = _hx_c._hx_AnonObject(name = c.name ,type = c.type ,expr = f(c.expr) )
											ret2.append(x2)
											_hx_builtin.len(ret2)
											
										
										
										return _hx_c.haxe_macro_ExprDef.ETry(f(e17), ret2)
									
									return _hx_local_47()
								
								return _hx_local_48()
							
							return _hx_local_46()
						
						return _hx_local_49()
					
					_hx_local_4 = _hx_local_50
					def _hx_local_51():
						return e.expr
					_hx_local_5 = _hx_local_51
					def _hx_local_54():
						def _hx_local_53():
							def _hx_local_52():
								t1 = _g.params[1]
								e16 = _g.params[0]
								return _hx_c.haxe_macro_ExprDef.ECheckType(f(e16), t1)
							
							return _hx_local_52()
						
						return _hx_local_53()
					
					_hx_local_6 = _hx_local_54
					def _hx_local_57():
						def _hx_local_56():
							def _hx_local_55():
								eelse1 = _g.params[2]
								eif1 = _g.params[1]
								econd2 = _g.params[0]
								return _hx_c.haxe_macro_ExprDef.ETernary(f(econd2), f(eif1), f(eelse1))
							
							return _hx_local_55()
						
						return _hx_local_56()
					
					_hx_local_7 = _hx_local_57
					def _hx_local_60():
						def _hx_local_59():
							def _hx_local_58():
								isCall = _g.params[1]
								e15 = _g.params[0]
								return _hx_c.haxe_macro_ExprDef.EDisplay(f(e15), isCall)
							
							return _hx_local_58()
						
						return _hx_local_59()
					
					_hx_local_8 = _hx_local_60
					def _hx_local_63():
						def _hx_local_62():
							def _hx_local_61():
								t = _g.params[1]
								e14 = _g.params[0]
								return _hx_c.haxe_macro_ExprDef.ECast(f(e14), t)
							
							return _hx_local_61()
						
						return _hx_local_62()
					
					_hx_local_9 = _hx_local_63
					def _hx_local_66():
						def _hx_local_65():
							def _hx_local_64():
								e13 = _g.params[0]
								return _hx_c.haxe_macro_ExprDef.EThrow(f(e13))
							
							return _hx_local_64()
						
						return _hx_local_65()
					
					_hx_local_10 = _hx_local_66
					def _hx_local_69():
						def _hx_local_68():
							def _hx_local_67():
								e10 = _g.params[0]
								return _hx_c.haxe_macro_ExprDef.EUntyped(f(e10))
							
							return _hx_local_67()
						
						return _hx_local_68()
					
					_hx_local_11 = _hx_local_69
					def _hx_local_72():
						def _hx_local_71():
							def _hx_local_70():
								e9 = _g.params[0]
								return _hx_c.haxe_macro_ExprDef.EReturn(None if (e9 is None) else f(e9))
							
							return _hx_local_70()
						
						return _hx_local_71()
					
					_hx_local_12 = _hx_local_72
					def _hx_local_75():
						def _hx_local_74():
							def _hx_local_73():
								normalWhile = _g.params[2]
								e8 = _g.params[1]
								econd1 = _g.params[0]
								return _hx_c.haxe_macro_ExprDef.EWhile(f(econd1), f(e8), normalWhile)
							
							return _hx_local_73()
						
						return _hx_local_74()
					
					_hx_local_13 = _hx_local_75
					def _hx_local_78():
						def _hx_local_77():
							def _hx_local_76():
								eelse = _g.params[2]
								eif = _g.params[1]
								econd = _g.params[0]
								return _hx_c.haxe_macro_ExprDef.EIf(f(econd), f(eif), None if (eelse is None) else f(eelse))
							
							return _hx_local_76()
						
						return _hx_local_77()
					
					_hx_local_14 = _hx_local_78
					def _hx_local_81():
						def _hx_local_80():
							def _hx_local_79():
								e22 = _g.params[1]
								e12 = _g.params[0]
								return _hx_c.haxe_macro_ExprDef.EIn(f(e12), f(e22))
							
							return _hx_local_79()
						
						return _hx_local_80()
					
					_hx_local_15 = _hx_local_81
					def _hx_local_84():
						def _hx_local_83():
							def _hx_local_82():
								expr = _g.params[1]
								it = _g.params[0]
								return _hx_c.haxe_macro_ExprDef.EFor(f(it), f(expr))
							
							return _hx_local_82()
						
						return _hx_local_83()
					
					_hx_local_16 = _hx_local_84
					def _hx_local_87():
						def _hx_local_86():
							def _hx_local_85():
								el1 = _g.params[0]
								return _hx_c.haxe_macro_ExprDef.EBlock(_hx_c.haxe_macro_ExprArrayTools.map(el1, f))
							
							return _hx_local_85()
						
						return _hx_local_86()
					
					_hx_local_17 = _hx_local_87
					def _hx_local_93():
						def _hx_local_92():
							def _hx_local_88():
								vars = _g.params[0]
								def _hx_local_91():
									def _hx_local_89():
										ret1 = []
										_g11 = 0
										while _g11 < _hx_builtin.len(vars):
											v = _hx_array_get(vars,_g11)
											_g11 = _g11 + 1
											def _hx_local_90():
												e7 = v.expr
												return None if (e7 is None) else f(e7)
											
											x1 = _hx_c._hx_AnonObject(name = v.name ,type = v.type ,expr = _hx_local_90() )
											ret1.append(x1)
											_hx_builtin.len(ret1)
											
										
										
										return _hx_c.haxe_macro_ExprDef.EVars(ret1)
									
									return _hx_local_89()
								
								return _hx_local_91()
							
							return _hx_local_88()
						
						return _hx_local_92()
					
					_hx_local_18 = _hx_local_93
					def _hx_local_96():
						def _hx_local_95():
							def _hx_local_94():
								e6 = _g.params[2]
								postFix = _g.params[1]
								op1 = _g.params[0]
								return _hx_c.haxe_macro_ExprDef.EUnop(op1, postFix, f(e6))
							
							return _hx_local_94()
						
						return _hx_local_95()
					
					_hx_local_19 = _hx_local_96
					def _hx_local_99():
						def _hx_local_98():
							def _hx_local_97():
								params1 = _g.params[1]
								tp = _g.params[0]
								return _hx_c.haxe_macro_ExprDef.ENew(tp, _hx_c.haxe_macro_ExprArrayTools.map(params1, f))
							
							return _hx_local_97()
						
						return _hx_local_98()
					
					_hx_local_20 = _hx_local_99
					def _hx_local_102():
						def _hx_local_101():
							def _hx_local_100():
								params = _g.params[1]
								e5 = _g.params[0]
								return _hx_c.haxe_macro_ExprDef.ECall(f(e5), _hx_c.haxe_macro_ExprArrayTools.map(params, f))
							
							return _hx_local_100()
						
						return _hx_local_101()
					
					_hx_local_21 = _hx_local_102
					def _hx_local_105():
						def _hx_local_104():
							def _hx_local_103():
								el = _g.params[0]
								return _hx_c.haxe_macro_ExprDef.EArrayDecl(_hx_c.haxe_macro_ExprArrayTools.map(el, f))
							
							return _hx_local_103()
						
						return _hx_local_104()
					
					_hx_local_22 = _hx_local_105
					def _hx_local_110():
						def _hx_local_109():
							def _hx_local_106():
								fields = _g.params[0]
								def _hx_local_108():
									def _hx_local_107():
										ret = []
										_g1 = 0
										while _g1 < _hx_builtin.len(fields):
											field1 = _hx_array_get(fields,_g1)
											_g1 = _g1 + 1
											x = _hx_c._hx_AnonObject(field = field1.field ,expr = f(field1.expr) )
											ret.append(x)
											_hx_builtin.len(ret)
											
										
										
										return _hx_c.haxe_macro_ExprDef.EObjectDecl(ret)
									
									return _hx_local_107()
								
								return _hx_local_108()
							
							return _hx_local_106()
						
						return _hx_local_109()
					
					_hx_local_23 = _hx_local_110
					def _hx_local_113():
						def _hx_local_112():
							def _hx_local_111():
								e4 = _g.params[0]
								return _hx_c.haxe_macro_ExprDef.EParenthesis(f(e4))
							
							return _hx_local_111()
						
						return _hx_local_112()
					
					_hx_local_24 = _hx_local_113
					def _hx_local_116():
						def _hx_local_115():
							def _hx_local_114():
								field = _g.params[1]
								e3 = _g.params[0]
								return _hx_c.haxe_macro_ExprDef.EField(f(e3), field)
							
							return _hx_local_114()
						
						return _hx_local_115()
					
					_hx_local_25 = _hx_local_116
					def _hx_local_119():
						def _hx_local_118():
							def _hx_local_117():
								e21 = _g.params[2]
								e11 = _g.params[1]
								op = _g.params[0]
								return _hx_c.haxe_macro_ExprDef.EBinop(op, f(e11), f(e21))
							
							return _hx_local_117()
						
						return _hx_local_118()
					
					_hx_local_26 = _hx_local_119
					def _hx_local_122():
						def _hx_local_121():
							def _hx_local_120():
								e2 = _g.params[1]
								e1 = _g.params[0]
								return _hx_c.haxe_macro_ExprDef.EArray(f(e1), f(e2))
							
							return _hx_local_120()
						
						return _hx_local_121()
					
					_hx_local_27 = _hx_local_122
					def _hx_local_123():
						return e.expr
					_hx_local_28 = _hx_local_123
					return _hx_local_28() if (_g.index) == 0 else _hx_local_27() if (_g.index) == 1 else _hx_local_26() if (_g.index) == 2 else _hx_local_25() if (_g.index) == 3 else _hx_local_24() if (_g.index) == 4 else _hx_local_23() if (_g.index) == 5 else _hx_local_22() if (_g.index) == 6 else _hx_local_21() if (_g.index) == 7 else _hx_local_20() if (_g.index) == 8 else _hx_local_19() if (_g.index) == 9 else _hx_local_18() if (_g.index) == 10 else _hx_local_17() if (_g.index) == 12 else _hx_local_16() if (_g.index) == 13 else _hx_local_15() if (_g.index) == 14 else _hx_local_14() if (_g.index) == 15 else _hx_local_13() if (_g.index) == 16 else _hx_local_12() if (_g.index) == 19 else _hx_local_11() if (_g.index) == 22 else _hx_local_10() if (_g.index) == 23 else _hx_local_9() if (_g.index) == 24 else _hx_local_8() if (_g.index) == 25 else _hx_local_7() if (_g.index) == 27 else _hx_local_6() if (_g.index) == 28 else _hx_local_5() if (_g.index) == 20 or (_g.index) == 21 or (_g.index) == 26 else _hx_local_4() if (_g.index) == 18 else _hx_local_3() if (_g.index) == 17 else _hx_local_2() if (_g.index) == 11 else _hx_local_1() if (_g.index) == 29 else None
				
				return _hx_local_29()
			
			return _hx_local_124()
		
		return _hx_c._hx_AnonObject(pos = e.pos ,expr = _hx_local_0() )
	
	return _hx_local_125()
	
haxe_macro_ExprTools.map = ExprTools_statics_map
def ExprTools_statics_opt(e,f):
	if e is None:
		return None
	else:
		return f(e)
haxe_macro_ExprTools.opt = ExprTools_statics_opt
def ExprTools_statics_opt2(e,f):
	if e is not None:
		f(e)
	
haxe_macro_ExprTools.opt2 = ExprTools_statics_opt2

def ExprArrayTools_statics_map(el,f):
	ret = []
	_g = 0
	while _g < _hx_builtin.len(el):
		e = _hx_array_get(el,_g)
		_g = _g + 1
		x = f(e)
		ret.append(x)
		_hx_builtin.len(ret)
		
	
	
	return ret
	
haxe_macro_ExprArrayTools.map = ExprArrayTools_statics_map
def ExprArrayTools_statics_iter(el,f):
	_g = 0
	while _g < _hx_builtin.len(el):
		e = _hx_array_get(el,_g)
		_g = _g + 1
		f(e)
	
	
haxe_macro_ExprArrayTools.iter = ExprArrayTools_statics_iter


def Meta_statics_getType(t):
	meta = _hx_c.Reflect.field(t, "_hx_meta")
	if meta is None or meta.obj is None:
		return _hx_c._hx_AnonObject()
	else:
		return meta.obj
	
haxe_rtti_Meta.getType = Meta_statics_getType
def Meta_statics_getStatics(t):
	meta = _hx_c.Reflect.field(t, "_hx_meta")
	if meta is None or meta.statics is None:
		return _hx_c._hx_AnonObject()
	else:
		return meta.statics
	
haxe_rtti_Meta.getStatics = Meta_statics_getStatics
def Meta_statics_getFields(t):
	meta = _hx_c.Reflect.field(t, "_hx_meta")
	if meta is None or meta.fields is None:
		return _hx_c._hx_AnonObject()
	else:
		return meta.fields
	
haxe_rtti_Meta.getFields = Meta_statics_getFields

def _hx_init_haxe_xml_Parser_escapes():
	def _hx_local_0():
		h = _hx_c.haxe_ds_StringMap()
		h.set("lt", "<")
		h.set("gt", ">")
		h.set("amp", "&")
		h.set("quot", "\"")
		h.set("apos", "'")
		def _hx_local_1():
			c = 160
			return "".join(_hx_builtin.map(_hx_builtin.chr, [c]))
		
		h.set("nbsp", _hx_local_1())
		return h
	
	return _hx_local_0()
	
haxe_xml_Parser.escapes = _hx_init_haxe_xml_Parser_escapes()
def Parser_statics_parse(str):
	doc = _hx_c.Xml.createDocument()
	_hx_c.haxe_xml_Parser.doParse(str, 0, doc)
	return doc
	
haxe_xml_Parser.parse = Parser_statics_parse
def Parser_statics_doParse(str,p = 0,parent = None):
	if p is None:
		p = 0
	
	if parent is None:
		parent = None
	
	xml = None
	state = 1
	next = 1
	aname = None
	start = 0
	nsubs = 0
	nbrackets = 0
	c = None
	if p >= _hx_builtin.len(str):
		c = -1
	else:
		c = ord(_hx_array_get(str,p))
	buf = _hx_c.StringBuf()
	while not (c == -1):
		if (state) == 0:
			if (c) == 32 or (c) == 9 or (c) == 13 or (c) == 10:
				None
			else:
				state = next
				continue
		
		elif (state) == 1:
			if (c) == 60:
				state = 0
				next = 2
		
			else:
				start = p
				state = 13
				continue
		
		elif (state) == 13:
			if c == 60:
				child = _hx_c.Xml.createPCData(Std.string(buf.b.getvalue()) + Std.string(_hx_c.python_Tools.substr(str, start, p - start)))
				buf = _hx_c.StringBuf()
				parent.addChild(child)
				nsubs = nsubs + 1
				state = 0
				next = 2
		
			elif c == 38:
				len = p - start
				s = None
				if len is None:
					s = _hx_c.python_Tools.substr(str, start, None)
				else:
					s = _hx_c.python_Tools.substr(str, start, len)
				buf.b.write(s)
				
				
				state = 18
				next = 13
				start = p + 1
		
			
		elif (state) == 17:
			def _hx_local_2():
				index = p + 1
				return -1 if (index >= _hx_builtin.len(str)) else ord(_hx_array_get(str,index))
			
			def _hx_local_1():
				index1 = p + 2
				return -1 if (index1 >= _hx_builtin.len(str)) else ord(_hx_array_get(str,index1))
			
			if c == 93 and _hx_local_2() == 93 and _hx_local_1() == 62:
				child1 = _hx_c.Xml.createCData(_hx_c.python_Tools.substr(str, start, p - start))
				parent.addChild(child1)
				nsubs = nsubs + 1
				p = p + 2
				state = 1
			
			
		
		elif (state) == 2:
			if (c) == 33:
				def _hx_local_5():
					index2 = p + 1
					return -1 if (index2 >= _hx_builtin.len(str)) else ord(_hx_array_get(str,index2))
				
				if _hx_local_5() == 91:
					p = p + 2
					def _hx_local_7():
						_this = _hx_c.python_Tools.substr(str, p, 6)
						return _this.upper()
					
					if _hx_local_7() != "CDATA[":
						raise _HxException("Expected <![CDATA[")
					
					p = p + 5
					state = 17
					start = p + 1
				
				else:
					def _hx_local_10():
						index3 = p + 1
						return -1 if (index3 >= _hx_builtin.len(str)) else ord(_hx_array_get(str,index3))
					
					def _hx_local_9():
						index4 = p + 1
						return -1 if (index4 >= _hx_builtin.len(str)) else ord(_hx_array_get(str,index4))
					
					if _hx_local_10() == 68 or _hx_local_9() == 100:
						def _hx_local_11():
							_this1 = _hx_c.python_Tools.substr(str, p + 2, 6)
							return _this1.upper()
						
						if _hx_local_11() != "OCTYPE":
							raise _HxException("Expected <!DOCTYPE")
						
						p = p + 8
						state = 16
						start = p + 1
					
					else:
						def _hx_local_14():
							index5 = p + 1
							return -1 if (index5 >= _hx_builtin.len(str)) else ord(_hx_array_get(str,index5))
						
						def _hx_local_13():
							index6 = p + 2
							return -1 if (index6 >= _hx_builtin.len(str)) else ord(_hx_array_get(str,index6))
						
						if _hx_local_14() != 45 or _hx_local_13() != 45:
							raise _HxException("Expected <!--")
						else:
							p = p + 2
							state = 15
							start = p + 1
						
					
				
		
			elif (c) == 63:
				state = 14
				start = p
		
			elif (c) == 47:
				if parent is None:
					raise _HxException("Expected node name")
				
				start = p + 1
				state = 0
				next = 10
		
			else:
				state = 3
				start = p
				continue
		
		elif (state) == 3:
			if not (c >= 97 and c <= 122 or c >= 65 and c <= 90 or c >= 48 and c <= 57 or c == 58 or c == 46 or c == 95 or c == 45):
				if p == start:
					raise _HxException("Expected node name")
				
				xml = _hx_c.Xml.createElement(_hx_c.python_Tools.substr(str, start, p - start))
				parent.addChild(xml)
				state = 0
				next = 4
				continue
		
			
		elif (state) == 4:
			if (c) == 47:
				state = 11
				nsubs = nsubs + 1
		
			elif (c) == 62:
				state = 9
				nsubs = nsubs + 1
		
			else:
				state = 5
				start = p
				continue
		
		elif (state) == 5:
			if not (c >= 97 and c <= 122 or c >= 65 and c <= 90 or c >= 48 and c <= 57 or c == 58 or c == 46 or c == 95 or c == 45):
				tmp = None
				if start == p:
					raise _HxException("Expected attribute name")
				
				tmp = _hx_c.python_Tools.substr(str, start, p - start)
				aname = tmp
				if xml.exists(aname):
					raise _HxException("Duplicate attribute")
				
				state = 0
				next = 6
				continue
		
			
		elif (state) == 6:
			if (c) == 61:
				state = 0
				next = 7
		
			else:
				raise _HxException("Expected =")
		elif (state) == 7:
			if (c) == 39 or (c) == 34:
				state = 8
				start = p
		
			else:
				raise _HxException("Expected \"")
		elif (state) == 8:
			if c == (-1 if (start >= _hx_builtin.len(str)) else ord(_hx_array_get(str,start))):
				val = _hx_c.python_Tools.substr(str, start + 1, p - start - 1)
				xml.set(aname, val)
				state = 0
				next = 4
		
			
		elif (state) == 9:
			p = _hx_c.haxe_xml_Parser.doParse(str, p, xml)
			start = p
			state = 1
		
		elif (state) == 11:
			if (c) == 62:
				state = 1
			else:
				raise _HxException("Expected >")
		elif (state) == 12:
			if (c) == 62:
				if nsubs == 0:
					parent.addChild(_hx_c.Xml.createPCData(""))
				
				return p
		
			else:
				raise _HxException("Expected >")
		elif (state) == 10:
			if not (c >= 97 and c <= 122 or c >= 65 and c <= 90 or c >= 48 and c <= 57 or c == 58 or c == 46 or c == 95 or c == 45):
				if start == p:
					raise _HxException("Expected node name")
				
				v = _hx_c.python_Tools.substr(str, start, p - start)
				if v != parent.get_nodeName():
					raise _HxException(Std.string("Expected </" + Std.string(parent.get_nodeName())) + ">")
				
				state = 0
				next = 12
				continue
		
			
		elif (state) == 15:
			def _hx_local_19():
				index7 = p + 1
				return -1 if (index7 >= _hx_builtin.len(str)) else ord(_hx_array_get(str,index7))
			
			def _hx_local_18():
				index8 = p + 2
				return -1 if (index8 >= _hx_builtin.len(str)) else ord(_hx_array_get(str,index8))
			
			if c == 45 and _hx_local_19() == 45 and _hx_local_18() == 62:
				parent.addChild(_hx_c.Xml.createComment(_hx_c.python_Tools.substr(str, start, p - start)))
				p = p + 2
				state = 1
			
			
		
		elif (state) == 16:
			if c == 91:
				nbrackets = nbrackets + 1
			elif c == 93:
				nbrackets = nbrackets - 1
			elif c == 62 and nbrackets == 0:
				parent.addChild(_hx_c.Xml.createDocType(_hx_c.python_Tools.substr(str, start, p - start)))
				state = 1
		
			
		elif (state) == 14:
			def _hx_local_23():
				index9 = p + 1
				return -1 if (index9 >= _hx_builtin.len(str)) else ord(_hx_array_get(str,index9))
			
			if c == 63 and _hx_local_23() == 62:
				p = p + 1
				str1 = _hx_c.python_Tools.substr(str, start + 1, p - start - 2)
				parent.addChild(_hx_c.Xml.createProcessingInstruction(str1))
				state = 1
			
			
		
		elif (state) == 18:
			if c == 59:
				s1 = _hx_c.python_Tools.substr(str, start, p - start)
				if (-1 if (0 >= _hx_builtin.len(s1)) else ord(_hx_array_get(s1,0))) == 35:
					i = None
					if (-1 if (1 >= _hx_builtin.len(s1)) else ord(_hx_array_get(s1,1))) == 120:
						def _hx_local_25():
							len1 = _hx_builtin.len(s1) - 1
							return _hx_c.python_Tools.substr(s1, 1, len1)
						
						i = _hx_c.Std.parseInt("0" + Std.string(_hx_local_25()))
					
					else:
						def _hx_local_26():
							len2 = _hx_builtin.len(s1) - 1
							return _hx_c.python_Tools.substr(s1, 1, len2)
						
						i = _hx_c.Std.parseInt(_hx_local_26())
					
					x = None
					c1 = i
					x = "".join(_hx_builtin.map(_hx_builtin.chr, [c1]))
					
					s2 = _hx_c.Std.string(x)
					buf.b.write(s2)
					
					
				
				elif not _hx_c.haxe_xml_Parser.escapes.exists(s1):
					s3 = _hx_c.Std.string(Std.string("&" + Std.string(s1)) + ";")
					buf.b.write(s3)
				
				else:
					x1 = _hx_c.haxe_xml_Parser.escapes.get(s1)
					s4 = _hx_c.Std.string(x1)
					buf.b.write(s4)
					
				
				start = p + 1
				state = next
		
			
		
		p = p + 1
		index10 = p
		
		if index10 >= _hx_builtin.len(str):
			c = -1
		else:
			c = ord(_hx_array_get(str,index10))
		
	
	if state == 1:
		start = p
		state = 13
	
	
	if state == 13:
		if p != start or nsubs == 0:
			parent.addChild(_hx_c.Xml.createPCData(Std.string(buf.b.getvalue()) + Std.string(_hx_c.python_Tools.substr(str, start, p - start))))
		
		return p
	
	
	raise _HxException("Unexpected end")
	
haxe_xml_Parser.doParse = Parser_statics_doParse
def Parser_statics_isValidChar(c):
	return c >= 97 and c <= 122 or c >= 65 and c <= 90 or c >= 48 and c <= 57 or c == 58 or c == 46 or c == 95 or c == 45
haxe_xml_Parser.isValidChar = Parser_statics_isValidChar



def Lib_statics__hx_print(v):
	_hx_c.python_lib_Sys.stdout.write(_hx_c.Std.string(v))
	_hx_c.python_lib_Sys.stdout.flush()
	
python_Lib._hx_print = Lib_statics__hx_print
def Lib_statics_println(v):
	_g = 0
	while _g < _hx_builtin.len(v):
		e = _hx_array_get(v,_g)
		_g = _g + 1
		print(_hx_c.Std.string(e))
	
	
python_Lib.println = Lib_statics_println
def Lib_statics_toPythonIterable(it):
	def _hx_local_3():
		def _hx_local_2():
			it1 = _hx_functools.partial(HxOverrides_iterator, it)()
			self = None
			def _hx_local_0():
				if it1.hasNext():
					return it1.next()
				else:
					raise _HxException(StopIteration())
			def _hx_local_1():
				return self
			self = _hx_c._hx_AnonObject(__next__ = _hx_local_0 ,__iter__ = _hx_local_1 )
			return self
		
		return _hx_c._hx_AnonObject(__iter__ = _hx_local_2 )
	
	return _hx_local_3()
	
python_Lib.toPythonIterable = Lib_statics_toPythonIterable
def Lib_statics_toHaxeIterable(it):
	return _hx_c.python_HaxeIterable(it)
python_Lib.toHaxeIterable = Lib_statics_toHaxeIterable
def Lib_statics_toHaxeIterator(it):
	return _hx_c.python_HaxeIterator(it)
python_Lib.toHaxeIterator = Lib_statics_toHaxeIterator


def Tools_statics_substring(s,startIndex,endIndex = None):
	if endIndex is None:
		endIndex = None
	
	if startIndex < 0:
		startIndex = 0
	
	if endIndex is None:
		return s[startIndex:]
	else:
		if endIndex < 0:
			endIndex = 0
		
		if endIndex < startIndex:
			return s[endIndex:startIndex]
		else:
			return s[startIndex:endIndex]
	
	
python_Tools.substring = Tools_statics_substring
def Tools_statics_substr(s,startIndex,len = None):
	if len is None:
		len = None
	
	if len is None:
		return s[startIndex:]
	else:
		if len == 0:
			return ""
		
		return s[startIndex:startIndex+len]
	
	
python_Tools.substr = Tools_statics_substr

def _hx_init_python_internal_KeywordHandler_keywords():
	def _hx_local_0():
		_g = _hx_c.haxe_ds_StringMap()
		_g.set("and", True)
		_g.set("del", True)
		_g.set("from", True)
		_g.set("not", True)
		_g.set("while", True)
		_g.set("as", True)
		_g.set("elif", True)
		_g.set("global", True)
		_g.set("or", True)
		_g.set("with", True)
		_g.set("assert", True)
		_g.set("else", True)
		_g.set("if", True)
		_g.set("pass", True)
		_g.set("yield", True)
		_g.set("break", True)
		_g.set("except", True)
		_g.set("import", True)
		_g.set("print", True)
		_g.set("float", True)
		_g.set("class", True)
		_g.set("exec", True)
		_g.set("in", True)
		_g.set("raise", True)
		_g.set("continue", True)
		_g.set("finally", True)
		_g.set("is", True)
		_g.set("return", True)
		_g.set("def", True)
		_g.set("for", True)
		_g.set("lambda", True)
		_g.set("try", True)
		_g.set("None", True)
		return _g
	
	return _hx_local_0()
	
python_internal_KeywordHandler.keywords = _hx_init_python_internal_KeywordHandler_keywords()
def KeywordHandler_statics_handleKeywords(name):
	if _hx_c.python_internal_KeywordHandler.keywords.exists(name):
		return "_hx_" + Std.string(name)
	
	return name
	
python_internal_KeywordHandler.handleKeywords = KeywordHandler_statics_handleKeywords
def KeywordHandler_statics_unhandleKeywords(name):
	if _hx_c.python_Tools.substr(name, 0, 4) == "_hx_":
		real = _hx_c.python_Tools.substr(name, 4, None)
		if _hx_c.python_internal_KeywordHandler.keywords.exists(real):
			return real
		
	
	
	return name
	
python_internal_KeywordHandler.unhandleKeywords = KeywordHandler_statics_unhandleKeywords

import inspect as python_lib_Inspect
_hx_c.python_lib_Inspect = python_lib_Inspect
	
import random as python_lib_Random
_hx_c.python_lib_Random = python_lib_Random
	
def RegexHelper_statics_findallDynamic(r,string,pos = None,endpos = None):
	if pos is None:
		pos = None
	
	if endpos is None:
		endpos = None
	
	if endpos is None:
		if pos is None:
			return r.findall(string)
		else:
			return r.findall(string, pos)
	else:
		return r.findall(string, pos, endpos)
	
python_lib_Re_RegexHelper.findallDynamic = RegexHelper_statics_findallDynamic

import sys as python_lib_Sys
_hx_c.python_lib_Sys = python_lib_Sys
	
def Choice_Impl__statics_fromA(x):
	return x
python_lib_Types_Choice_Impl_.fromA = Choice_Impl__statics_fromA
def Choice_Impl__statics_fromB(x):
	return x
python_lib_Types_Choice_Impl_.fromB = Choice_Impl__statics_fromB

def KwArgs_Impl__statics_get(this1,key,_hx_def):
	return this1.get(key, _hx_def)
python_lib_Types_KwArgs_Impl_.get = KwArgs_Impl__statics_get

from builtins import bytes as python_lib_Bytes
_hx_c.python_lib_Bytes = python_lib_Bytes
	
def PyIterator_Impl__statics__new(p):
	return p
python_lib_Types_PyIterator_Impl_._new = PyIterator_Impl__statics__new
def PyIterator_Impl__statics_toHaxeIterator(p):
	return _hx_c.python_HaxeIterator(p)
python_lib_Types_PyIterator_Impl_.toHaxeIterator = PyIterator_Impl__statics_toHaxeIterator
def PyIterator_Impl__statics_toPyIterable(p):
	return p
python_lib_Types_PyIterator_Impl_.toPyIterable = PyIterator_Impl__statics_toPyIterable
def PyIterator_Impl__statics_getNativeIterator(this1):
	return this1
python_lib_Types_PyIterator_Impl_.getNativeIterator = PyIterator_Impl__statics_getNativeIterator

def PyIterable_Impl__statics_toHaxeIterable(p):
	return _hx_c.python_HaxeIterable(p)
python_lib_Types_PyIterable_Impl_.toHaxeIterable = PyIterable_Impl__statics_toHaxeIterable
def PyIterable_Impl__statics_iterator(this1):
	_this = _hx_c.python_HaxeIterable(this1)
	return _hx_c.python_HaxeIterator(_this.x.__iter__())
	
python_lib_Types_PyIterable_Impl_.iterator = PyIterable_Impl__statics_iterator
def PyIterable_Impl__statics_getNativeIterable(this1):
	return this1
python_lib_Types_PyIterable_Impl_.getNativeIterable = PyIterable_Impl__statics_getNativeIterable
def PyIterable_Impl__statics_getNativeIterator(this1):
	return this1.__iter__()
python_lib_Types_PyIterable_Impl_.getNativeIterator = PyIterable_Impl__statics_getNativeIterator

def IterHelper_statics_iterableToIterator(it):
	_this = _hx_c.python_HaxeIterable(it)
	return _hx_c.python_HaxeIterator(_this.x.__iter__())
	
python_lib_IterHelper.iterableToIterator = IterHelper_statics_iterableToIterator

from builtins import set as python_lib_Set
_hx_c.python_lib_Set = python_lib_Set
	
from builtins import dict as python_lib_Dict
_hx_c.python_lib_Dict = python_lib_Dict
	
def DictImpl_statics_fromObject(x):
	d = _hx_c.python_lib_Dict()
	_g = 0
	_g1 = _hx_c.Reflect.fields(x)
	while _g < _hx_builtin.len(_g1):
		f = _hx_array_get(_g1,_g)
		_g = _g + 1
		val = _hx_c.Reflect.field(x, f)
		d[f] = val
		
	
	
	return d
	
python_lib_DictImpl.fromObject = DictImpl_statics_fromObject
def DictImpl_statics_hasKey(d,key):
	return key in d
python_lib_DictImpl.hasKey = DictImpl_statics_hasKey
def DictImpl_statics_remove(d,key):
	del d[key]
python_lib_DictImpl.remove = DictImpl_statics_remove
def DictImpl_statics_set(d,key,val):
	d[key] = val
python_lib_DictImpl.set = DictImpl_statics_set

from datetime import datetime as python_lib_datetime_DateTime
_hx_c.python_lib_datetime_DateTime = python_lib_datetime_DateTime
	
from datetime import timedelta as python_lib_datetime_TimeDelta
_hx_c.python_lib_datetime_TimeDelta = python_lib_datetime_TimeDelta
	
from datetime import tzinfo as python_lib_datetime_TzInfo
_hx_c.python_lib_datetime_TzInfo = python_lib_datetime_TzInfo
	
from datetime import timezone as python_lib_datetime_Timezone
_hx_c.python_lib_datetime_Timezone = python_lib_datetime_Timezone
	
from io import StringIO as python_lib_io_StringIO
_hx_c.python_lib_io_StringIO = python_lib_io_StringIO
	
def MyAbstract_Impl__statics__new(x):
	return x
unit_MyAbstract_MyAbstract_Impl_._new = MyAbstract_Impl__statics__new
def MyAbstract_Impl__statics_incr(this1):
	def _hx_local_1():
		def _hx_local_0():
			nonlocal this1
			this1 = this1 + 1
			return this1
			
		
		return _hx_local_0()
	
	return _hx_local_1()
	
unit_MyAbstract_MyAbstract_Impl_.incr = MyAbstract_Impl__statics_incr
def MyAbstract_Impl__statics_toInt(this1):
	return this1
unit_MyAbstract_MyAbstract_Impl_.toInt = MyAbstract_Impl__statics_toInt

def TemplateWrap_Impl__statics__new(x):
	return _hx_c.haxe_Template(x)
unit_MyAbstract_TemplateWrap_Impl_._new = TemplateWrap_Impl__statics__new
def TemplateWrap_Impl__statics_get(this1):
	return this1
unit_MyAbstract_TemplateWrap_Impl_.get = TemplateWrap_Impl__statics_get
def TemplateWrap_Impl__statics_fromString(s):
	return _hx_c.haxe_Template(s)
unit_MyAbstract_TemplateWrap_Impl_.fromString = TemplateWrap_Impl__statics_fromString
def TemplateWrap_Impl__statics_toString(this1):
	return this1.execute(_hx_c._hx_AnonObject(t = "really works!" ))
unit_MyAbstract_TemplateWrap_Impl_.toString = TemplateWrap_Impl__statics_toString

def Meter_Impl__statics__new(f):
	return f
unit_MyAbstract_Meter_Impl_._new = Meter_Impl__statics__new
def Meter_Impl__statics_get(this1):
	return this1
unit_MyAbstract_Meter_Impl_.get = Meter_Impl__statics_get
def Meter_Impl__statics_toString(this1):
	return Std.string(this1) + "m"
unit_MyAbstract_Meter_Impl_.toString = Meter_Impl__statics_toString

def Kilometer_Impl__statics__new(f):
	return f
unit_MyAbstract_Kilometer_Impl_._new = Kilometer_Impl__statics__new
def Kilometer_Impl__statics_toString(this1):
	return Std.string(this1) + "km"
unit_MyAbstract_Kilometer_Impl_.toString = Kilometer_Impl__statics_toString
def Kilometer_Impl__statics_fromMeter(m):
	return m / 1000.
unit_MyAbstract_Kilometer_Impl_.fromMeter = Kilometer_Impl__statics_fromMeter


def MyHash_Impl__statics__new():
	return _hx_c.haxe_ds_StringMap()
unit_MyAbstract_MyHash_Impl_._new = MyHash_Impl__statics__new
def MyHash_Impl__statics_set(this1,k,v):
	this1.set(k, v)
unit_MyAbstract_MyHash_Impl_.set = MyHash_Impl__statics_set
def MyHash_Impl__statics_get(this1,k):
	return this1.get(k)
unit_MyAbstract_MyHash_Impl_.get = MyHash_Impl__statics_get
def MyHash_Impl__statics_toString(this1):
	return this1.toString()
unit_MyAbstract_MyHash_Impl_.toString = MyHash_Impl__statics_toString
def MyHash_Impl__statics_fromStringArray(arr):
	hash = _hx_c.haxe_ds_StringMap()
	i = 0
	while i < _hx_builtin.len(arr):
		def _hx_local_1():
			nonlocal i
			_hx_local_0 = i
			i = i + 1
			return _hx_local_0
			
		
		k = _hx_array_get(arr,_hx_local_1())
		def _hx_local_3():
			nonlocal i
			_hx_local_2 = i
			i = i + 1
			return _hx_local_2
			
		
		v = _hx_array_get(arr,_hx_local_3())
		hash.set(k, v)
	
	return hash
	
unit_MyAbstract_MyHash_Impl_.fromStringArray = MyHash_Impl__statics_fromStringArray
def MyHash_Impl__statics_fromArray(arr):
	hash = _hx_c.haxe_ds_StringMap()
	i = 0
	while i < _hx_builtin.len(arr):
		def _hx_local_1():
			nonlocal i
			_hx_local_0 = i
			i = i + 1
			return _hx_local_0
			
		
		k = _hx_array_get(arr,_hx_local_1())
		def _hx_local_3():
			nonlocal i
			_hx_local_2 = i
			i = i + 1
			return _hx_local_2
			
		
		v = _hx_array_get(arr,_hx_local_3())
		k1 = _hx_c.Std.string("_s" + Std.string(_hx_c.Std.string(k)))
		hash.set(k1, v)
		
	
	return hash
	
unit_MyAbstract_MyHash_Impl_.fromArray = MyHash_Impl__statics_fromArray


def AbstractZ_Impl__statics_toFoo(a):
	return a.value
unit_MyAbstract_AbstractZ_Impl_.toFoo = AbstractZ_Impl__statics_toFoo
def AbstractZ_Impl__statics_toString(a):
	return a.value
unit_MyAbstract_AbstractZ_Impl_.toString = AbstractZ_Impl__statics_toString


unit_MyAbstract_MyVector_Impl_.x = None;
unit_MyAbstract_MyVector_Impl_.y = None;
unit_MyAbstract_MyVector_Impl_.z = None;
def MyVector_Impl__statics_get_x(this1):
	return this1.x
unit_MyAbstract_MyVector_Impl_.get_x = MyVector_Impl__statics_get_x
def MyVector_Impl__statics_get_y(this1):
	return this1.y
unit_MyAbstract_MyVector_Impl_.get_y = MyVector_Impl__statics_get_y
def MyVector_Impl__statics_get_z(this1):
	return this1.z
unit_MyAbstract_MyVector_Impl_.get_z = MyVector_Impl__statics_get_z
def MyVector_Impl__statics_set_x(this1,x):
	def _hx_local_1():
		def _hx_local_0():
			this1.x = x
			return this1.x
		
		return _hx_local_0()
	
	return _hx_local_1()
	
unit_MyAbstract_MyVector_Impl_.set_x = MyVector_Impl__statics_set_x
def MyVector_Impl__statics_set_y(this1,y):
	def _hx_local_1():
		def _hx_local_0():
			this1.y = y
			return this1.y
		
		return _hx_local_0()
	
	return _hx_local_1()
	
unit_MyAbstract_MyVector_Impl_.set_y = MyVector_Impl__statics_set_y
def MyVector_Impl__statics_set_z(this1,z):
	def _hx_local_1():
		def _hx_local_0():
			this1.z = z
			return this1.z
		
		return _hx_local_0()
	
	return _hx_local_1()
	
unit_MyAbstract_MyVector_Impl_.set_z = MyVector_Impl__statics_set_z
def MyVector_Impl__statics_add(lhs,rhs):
	return _hx_c.unit_MyPoint3(_hx_c.unit_MyAbstract_MyVector_Impl_.get_x(lhs) + _hx_c.unit_MyAbstract_MyVector_Impl_.get_x(rhs), _hx_c.unit_MyAbstract_MyVector_Impl_.get_y(lhs) + _hx_c.unit_MyAbstract_MyVector_Impl_.get_y(rhs), _hx_c.unit_MyAbstract_MyVector_Impl_.get_z(lhs) + _hx_c.unit_MyAbstract_MyVector_Impl_.get_z(rhs))
unit_MyAbstract_MyVector_Impl_.add = MyVector_Impl__statics_add
def MyVector_Impl__statics_scalarAssign(lhs,rhs):
	_g = lhs
	_hx_c.unit_MyAbstract_MyVector_Impl_.set_x(_g, _hx_c.unit_MyAbstract_MyVector_Impl_.get_x(_g) * rhs)
	
	_g1 = lhs
	_hx_c.unit_MyAbstract_MyVector_Impl_.set_y(_g1, _hx_c.unit_MyAbstract_MyVector_Impl_.get_y(_g1) * rhs)
	
	_g2 = lhs
	_hx_c.unit_MyAbstract_MyVector_Impl_.set_z(_g2, _hx_c.unit_MyAbstract_MyVector_Impl_.get_z(_g2) * rhs)
	
	return lhs
	
unit_MyAbstract_MyVector_Impl_.scalarAssign = MyVector_Impl__statics_scalarAssign
def MyVector_Impl__statics_scalar(lhs,rhs):
	return _hx_c.unit_MyPoint3(_hx_c.unit_MyAbstract_MyVector_Impl_.get_x(lhs) * rhs, _hx_c.unit_MyAbstract_MyVector_Impl_.get_y(lhs) * rhs, _hx_c.unit_MyAbstract_MyVector_Impl_.get_z(lhs) * rhs)
unit_MyAbstract_MyVector_Impl_.scalar = MyVector_Impl__statics_scalar
def MyVector_Impl__statics_invert(t):
	return _hx_c.unit_MyPoint3(-_hx_c.unit_MyAbstract_MyVector_Impl_.get_x(t), -_hx_c.unit_MyAbstract_MyVector_Impl_.get_y(t), -_hx_c.unit_MyAbstract_MyVector_Impl_.get_z(t))
unit_MyAbstract_MyVector_Impl_.invert = MyVector_Impl__statics_invert
def MyVector_Impl__statics_get(this1):
	return this1
unit_MyAbstract_MyVector_Impl_.get = MyVector_Impl__statics_get
def MyVector_Impl__statics_toString(this1):
	return Std.string(Std.string(Std.string(Std.string(Std.string("(" + Std.string(this1.x)) + ",") + Std.string(this1.y)) + ",") + Std.string(this1.z)) + ")"
unit_MyAbstract_MyVector_Impl_.toString = MyVector_Impl__statics_toString

def MyInt_Impl__statics_repeat(lhs,rhs):
	s = _hx_c.StringBuf()
	_g = 0
	while _g < lhs:
		i = _g
		_g = _g + 1
		
		s1 = _hx_c.Std.string(rhs)
		s.b.write(s1)
		
	
	
	return s.b.getvalue()
	
unit_MyAbstract_MyInt_Impl_.repeat = MyInt_Impl__statics_repeat
def MyInt_Impl__statics_cut(lhs,rhs):
	return _hx_c.python_Tools.substr(lhs, 0, rhs)
unit_MyAbstract_MyInt_Impl_.cut = MyInt_Impl__statics_cut

def MyInt2_Impl__statics__new(v):
	return v
unit_MyAbstract_MyInt2_Impl_._new = MyInt2_Impl__statics__new
def MyInt2_Impl__statics_get(this1):
	return this1
unit_MyAbstract_MyInt2_Impl_.get = MyInt2_Impl__statics_get
def MyInt2_Impl__statics_invert(this1):
	return -this1
unit_MyAbstract_MyInt2_Impl_.invert = MyInt2_Impl__statics_invert
def MyInt2_Impl__statics_incr(this1):
	this1 = this1 + 1
unit_MyAbstract_MyInt2_Impl_.incr = MyInt2_Impl__statics_incr



def MyReflect_Impl__statics_arrayAccess(this1,key):
	return _hx_c.Reflect.field(this1, key)
unit_MyAbstract_MyReflect_Impl_.arrayAccess = MyReflect_Impl__statics_arrayAccess
def MyReflect_Impl__statics_arrayWrite(this1,key,value):
	field = None
	if _hx_c.python_internal_KeywordHandler.keywords.exists(key):
		field = "_hx_" + Std.string(key)
	else:
		field = key
	_hx_builtin.setattr(this1, field, value)
	
	return value
	
unit_MyAbstract_MyReflect_Impl_.arrayWrite = MyReflect_Impl__statics_arrayWrite

def MyAbstractClosure_Impl__statics__new(value):
	return value
unit_MyAbstract_MyAbstractClosure_Impl_._new = MyAbstractClosure_Impl__statics__new
def MyAbstractClosure_Impl__statics_test(this1):
	def _hx_local_0():
		return this1
	fn = _hx_local_0
	return fn
	
unit_MyAbstract_MyAbstractClosure_Impl_.test = MyAbstractClosure_Impl__statics_test
def MyAbstractClosure_Impl__statics_setVal(this1,v):
	this1 = v
unit_MyAbstract_MyAbstractClosure_Impl_.setVal = MyAbstractClosure_Impl__statics_setVal

unit_MyAbstract_MyAbstractSetter_Impl_.value = None;
def MyAbstractSetter_Impl__statics__new():
	return _hx_c._hx_AnonObject()
unit_MyAbstract_MyAbstractSetter_Impl_._new = MyAbstractSetter_Impl__statics__new
def MyAbstractSetter_Impl__statics_get_value(this1):
	return this1.value
unit_MyAbstract_MyAbstractSetter_Impl_.get_value = MyAbstractSetter_Impl__statics_get_value
def MyAbstractSetter_Impl__statics_set_value(this1,s):
	this1.value = s
	return s
	
unit_MyAbstract_MyAbstractSetter_Impl_.set_value = MyAbstractSetter_Impl__statics_set_value

unit_MyAbstract_MyAbstractCounter_Impl_.counter = 0
def MyAbstractCounter_Impl__statics__new(v):
	this1 = None
	this1 = v
	_hx_local_0 = _hx_c.unit_MyAbstract_MyAbstractCounter_Impl_
	_hx_local_1 = _hx_local_0.counter
	_hx_local_0.counter = _hx_local_1 + 1
	_hx_local_1
	
	return this1
	
unit_MyAbstract_MyAbstractCounter_Impl_._new = MyAbstractCounter_Impl__statics__new
def MyAbstractCounter_Impl__statics_fromInt(v):
	this1 = None
	this1 = v
	_hx_local_0 = _hx_c.unit_MyAbstract_MyAbstractCounter_Impl_
	_hx_local_1 = _hx_local_0.counter
	_hx_local_0.counter = _hx_local_1 + 1
	_hx_local_1
	
	return this1
	
unit_MyAbstract_MyAbstractCounter_Impl_.fromInt = MyAbstractCounter_Impl__statics_fromInt
def MyAbstractCounter_Impl__statics_getValue(this1):
	return this1 + 1
unit_MyAbstract_MyAbstractCounter_Impl_.getValue = MyAbstractCounter_Impl__statics_getValue

def MyAbstractThatCallsAMember_Impl__statics__new(i):
	this1 = None
	this1 = i
	this1 = this1 + 1
	return this1
	
unit_MyAbstract_MyAbstractThatCallsAMember_Impl_._new = MyAbstractThatCallsAMember_Impl__statics__new
def MyAbstractThatCallsAMember_Impl__statics_bar(this1):
	this1 = this1 + 1
unit_MyAbstract_MyAbstractThatCallsAMember_Impl_.bar = MyAbstractThatCallsAMember_Impl__statics_bar

def MyDebugString_Impl__statics__new(s):
	return s
unit_MyAbstract_MyDebugString_Impl_._new = MyDebugString_Impl__statics__new
def MyDebugString_Impl__statics_substr(this1,i,len = None):
	if len is None:
		len = None
	
	return _hx_c.python_Tools.substr(this1, i, None)
	
unit_MyAbstract_MyDebugString_Impl_.substr = MyDebugString_Impl__statics_substr

unit_MyAbstract_MySpecialString_Impl_._new = None;
def MySpecialString_Impl__statics_substr(this1,i,len = None):
	if len is None:
		len = None
	
	if len is None:
		return _hx_c.python_Tools.substr(this1, i, None)
	else:
		return _hx_c.python_Tools.substr(this1, i, len)
	
unit_MyAbstract_MySpecialString_Impl_.substr = MySpecialString_Impl__statics_substr
def MySpecialString_Impl__statics_toNormal(t,value):
	return value
unit_MyAbstract_MySpecialString_Impl_.toNormal = MySpecialString_Impl__statics_toNormal

unit_MyAbstract_FakeEnumAbstract_Impl_.NotFound = 404
unit_MyAbstract_FakeEnumAbstract_Impl_.MethodNotAllowed = 405

def ExposingAbstract_Impl__statics__new():
	return []
unit_MyAbstract_ExposingAbstract_Impl_._new = ExposingAbstract_Impl__statics__new





























unit_InitBase.si = 2
unit_InitBase.sop = 27
unit_InitBase.st = _hx_c.String
unit_InitBase.sp = 6
unit_InitBase.sinline = 60000.





def ParamConstraintsClass_statics_staticSingle(a):
	return a
unit_ParamConstraintsClass.staticSingle = ParamConstraintsClass_statics_staticSingle


def UsingBase_statics_privFunc(s):
	return s.upper()
unit_UsingBase.privFunc = UsingBase_statics_privFunc
def UsingBase_statics_pupFunc(s):
	return s.upper()
unit_UsingBase.pupFunc = UsingBase_statics_pupFunc

def UsingChild1_statics_test():
	return Std.string(Std.string(_hx_c.unit_UsingBase.pupFunc("foo")) + Std.string(_hx_c.unit_UsingBase.privFunc("foo"))) + Std.string(_hx_c.unit_UsingChild2.siblingFunc("FOO"))
unit_UsingChild1.test = UsingChild1_statics_test
def UsingChild1_statics_siblingFunc(s):
	return s.lower()
unit_UsingChild1.siblingFunc = UsingChild1_statics_siblingFunc

def UsingChild2_statics_test():
	return _hx_c.unit_UsingChild2.siblingFunc("foo")
unit_UsingChild2.test = UsingChild2_statics_test
def UsingChild2_statics_siblingFunc(s):
	return s.upper()
unit_UsingChild2.siblingFunc = UsingChild2_statics_siblingFunc

def UsingUnrelated_statics_test():
	return Std.string(_hx_c.unit_UsingBase.pupFunc("foo")) + Std.string(_hx_c.unit_UsingChild2.siblingFunc("foo"))
unit_UsingUnrelated.test = UsingUnrelated_statics_test

unit_VarProps.SX = None;
unit_VarProps.SY = None;
def VarProps_statics_get_SX():
	return 1
unit_VarProps.get_SX = VarProps_statics_get_SX
def VarProps_statics_set_SX(v):
	return v
unit_VarProps.set_SX = VarProps_statics_set_SX
def VarProps_statics_get_SY():
	return _hx_c.unit_VarProps.SY
unit_VarProps.get_SY = VarProps_statics_get_SY
def VarProps_statics_set_SY(v):
	_hx_c.unit_VarProps.SY = v
	return v
	
unit_VarProps.set_SY = VarProps_statics_set_SY













unit_MySubClass.XXX = 3

def Using1_statics_usingTest(s):
	return "1"
unit_Using1.usingTest = Using1_statics_usingTest

def Using2_statics_usingTest(s):
	return "2"
unit_Using2.usingTest = Using2_statics_usingTest

def Using3_statics_usingTest(s):
	return "3"
unit_Using3.usingTest = Using3_statics_usingTest





unit_Test.count = 0
unit_Test.reportInfos = None
unit_Test.reportCount = 0
unit_Test.checkCount = 0
unit_Test.asyncWaits = list()
unit_Test.asyncCache = list()
unit_Test.AMAX = 3
unit_Test.timer = None;
unit_Test.success = True
def Test_statics_report(msg,pos = None):
	if pos is None:
		pos = None
	
	if _hx_c.unit_Test.reportInfos is not None:
		msg = Std.string(msg) + Std.string(Std.string(" (" + Std.string(_hx_c.unit_Test.reportInfos)) + ")")
		_hx_c.unit_Test.reportInfos = None
	
	
	_hx_c.haxe_Log.trace(msg, pos)
	_hx_local_1 = _hx_c.unit_Test
	_hx_local_2 = _hx_local_1.reportCount
	_hx_local_1.reportCount = _hx_local_2 + 1
	_hx_local_2
	
	
unit_Test.report = Test_statics_report
def Test_statics_checkDone():
	if _hx_builtin.len(_hx_c.unit_Test.asyncWaits) != 0:
		return
	
	if _hx_builtin.len(_hx_c.unit_Test.asyncCache) == 0:
		_hx_c.unit_Test.report(Std.string("DONE [" + Std.string(_hx_c.unit_Test.count)) + " tests]", _hx_c._hx_AnonObject(fileName = "Test.hx" ,lineNumber = 189 ,className = "unit.Test" ,methodName = "checkDone" ))
		return
	
	
	_hx_c.unit_Test.resetTimer()
	while _hx_builtin.len(_hx_c.unit_Test.asyncCache) > 0 and _hx_builtin.len(_hx_c.unit_Test.asyncWaits) < _hx_c.unit_Test.AMAX:
		def _hx_local_0():
			_this = _hx_c.unit_Test.asyncCache
			return None if (_hx_builtin.len(_this) == 0) else _this.pop(0)
		
		(_hx_local_0())()
	
	
unit_Test.checkDone = Test_statics_checkDone
def Test_statics_asyncTimeout():
	if _hx_builtin.len(_hx_c.unit_Test.asyncWaits) == 0:
		return
	
	_g = 0
	_g1 = _hx_c.unit_Test.asyncWaits
	while _g < _hx_builtin.len(_g1):
		pos = _hx_array_get(_g1,_g)
		_g = _g + 1
		_hx_c.unit_Test.report("TIMEOUT", pos)
		_hx_c.unit_Test.success = False
	
	
	_hx_c.unit_Test.asyncWaits = list()
	_hx_c.unit_Test.checkDone()
	
unit_Test.asyncTimeout = Test_statics_asyncTimeout
def Test_statics_resetTimer():
	None
unit_Test.resetTimer = Test_statics_resetTimer
def Test_statics_onError(e,msg,context):
	msg1 = "???"
	stack = _hx_c.haxe_CallStack.toString(_hx_c.haxe_CallStack.exceptionStack())
	try:
		msg1 = _hx_c.Std.string(e)
	except Exception as _hx_e:
		_hx_e1 = _hx_e.val if isinstance(_hx_e, _HxException) else _hx_e
		if True:
			e1 = _hx_e1
			None
		else:
			raise _hx_e
	_hx_c.unit_Test.reportCount = 0
	_hx_c.unit_Test.report(Std.string(Std.string("ABORTED : " + Std.string(msg1)) + " in ") + Std.string(context), _hx_c._hx_AnonObject(fileName = "Test.hx" ,lineNumber = 226 ,className = "unit.Test" ,methodName = "onError" ))
	_hx_c.unit_Test.success = False
	_hx_c.unit_Test.reportInfos = None
	_hx_c.haxe_Log.trace("STACK :\n" + Std.string(stack), _hx_c._hx_AnonObject(fileName = "Test.hx" ,lineNumber = 229 ,className = "unit.Test" ,methodName = "onError" ))
	
unit_Test.onError = Test_statics_onError
def Test_statics_main():
	_hx_c.unit_Test.resetTimer()
	_hx_c.haxe_Log.trace("Generated at: " + "2014-01-28 22:30:06", _hx_c._hx_AnonObject(fileName = "Test.hx" ,lineNumber = 242 ,className = "unit.Test" ,methodName = "main" ))
	_hx_c.haxe_Log.trace("START", _hx_c._hx_AnonObject(fileName = "Test.hx" ,lineNumber = 244 ,className = "unit.Test" ,methodName = "main" ))
	_hx_c.haxe_Unserializer.run(_hx_c.haxe_Serializer.run(1))
	classes = [_hx_c.unit_TestOps(), _hx_c.unit_TestBytes(), _hx_c.unit_TestEReg(), _hx_c.unit_TestSerialize(), _hx_c.unit_TestLocals(), _hx_c.unit_TestGADT(), _hx_c.unit_TestOrder(), _hx_c.unit_TestGeneric(), _hx_c.unit_TestXML(), _hx_c.unit_TestMisc(), _hx_c.unit_TestBasetypes(), _hx_c.unit_TestReflect(), _hx_c.unit_TestMatch(), _hx_c.unit_TestIO(), _hx_c.unit_TestInt64(), _hx_c.unit_TestType(), _hx_c.unit_TestResource(), _hx_c.unit_TestMeta(), _hx_c.unit_TestSpecification()]
	current = None
	_this = _hx_c.unit_Test.asyncWaits
	_this.append(None)
	_hx_builtin.len(_this)
	
	
	_g = 0
	while _g < _hx_builtin.len(classes):
		inst = _hx_array_get(classes,_g)
		_g = _g + 1
		current = _hx_c.Type.getClass(inst)
		_g1 = 0
		_g2 = _hx_c.Type.getInstanceFields(current)
		while _g1 < _hx_builtin.len(_g2):
			f = _hx_array_get(_g2,_g1)
			_g1 = _g1 + 1
			if _hx_c.python_Tools.substr(f, 0, 4) == "test":
				_hx_c.Reflect.callMethod(inst, _hx_c.Reflect.field(inst, f), [])
				_hx_c.unit_Test.reportInfos = None
			
			
		
		
	
	
	_hx_c.python_internal_ArrayImpl.remove(_hx_c.unit_Test.asyncWaits, None)
	_hx_c.unit_Test.checkDone()
	
	_hx_c.haxe_Log.trace("SUCCESS: " + Std.string(_hx_c.Std.string(_hx_c.unit_Test.success)), _hx_c._hx_AnonObject(fileName = "Test.hx" ,lineNumber = 352 ,className = "unit.Test" ,methodName = "main" ))
	
unit_Test.main = Test_statics_main




def TestGADT_statics_evalConst(c):
	if (c.index) == 0:
		s = c.params[0]
		return s
	
	elif (c.index) == 1:
		i = c.params[0]
		return _hx_c.Std.parseInt(i)
	
	elif (c.index) == 2:
		f = c.params[0]
		return _hx_c.Std.parseFloat(f)
	
	
unit_TestGADT.evalConst = TestGADT_statics_evalConst
def TestGADT_statics_evalBinop(op,e1,e2):
	if (op.index) == 0:
		return _hx_c.unit_TestGADT.eval(e1) + _hx_c.unit_TestGADT.eval(e2)
	elif (op.index) == 1:
		return _hx_c.unit_TestGADT.eval(e1) == _hx_c.unit_TestGADT.eval(e2)
	
unit_TestGADT.evalBinop = TestGADT_statics_evalBinop
def TestGADT_statics_eval(e):
	if (e.index) == 0:
		c = e.params[0]
		return _hx_c.unit_TestGADT.evalConst(c)
	
	elif (e.index) == 1:
		_e2 = e.params[2]
		_e1 = e.params[1]
		_op = e.params[0]
		return _hx_c.unit_TestGADT.evalBinop(_op, _e1, _e2)
	
	
unit_TestGADT.eval = TestGADT_statics_eval













def TestMatch_statics_switchNormal(e):
	_g = e.expr
	if (_g.index) == 0:
		if (_g.params[0].index) == 2:
			s = _g.params[0].params[0]
			return s
	
		else:
			return "not_found"
	elif (_g.index) == 4:
		if (_g.params[0].expr.index) == 0:
			if (_g.params[0].expr.params[0].index) == 2:
				s1 = _g.params[0].expr.params[0].params[0]
				return s1
	
			else:
				return "not_found"
		else:
			return "not_found"
	elif (_g.index) == 22:
		if (_g.params[0].expr.index) == 0:
			if (_g.params[0].expr.params[0].index) == 2:
				s1 = _g.params[0].expr.params[0].params[0]
				return s1
	
			else:
				return "not_found"
		else:
			return "not_found"
	elif (_g.index) == 3:
		s2 = _g.params[1]
		return s2
	
	elif (_g.index) == 1:
		if (_g.params[1].expr.index) == 0:
			if (_g.params[1].expr.params[0].index) == 0:
				i = _g.params[1].expr.params[0].params[0]
				return _hx_c.Std.string(i)
	
			elif (_g.params[1].expr.params[0].index) == 1:
				i = _g.params[1].expr.params[0].params[0]
				return _hx_c.Std.string(i)
	
			else:
				return "not_found"
		else:
			return "not_found"
	elif (_g.index) == 14:
		e1 = _g.params[1].expr
		return _hx_c.Std.string(e1)
	
	else:
		return "not_found"
	
unit_TestMatch.switchNormal = TestMatch_statics_switchNormal
def TestMatch_statics_switchCapture(e):
	if (e.expr.index) == 0:
		const = e.expr.params[0]
		if (e.expr.params[0].index) == 2:
			if (e.expr.params[0].params[0]) == "foobar":
				return const
			else:
				return None
		elif (e.expr.params[0].index) == 0:
			if (e.expr.params[0].params[0]) == "9":
				return const
			else:
				return None
		else:
			return None
	
	else:
		return None
unit_TestMatch.switchCapture = TestMatch_statics_switchCapture
def TestMatch_statics_switchArray(e):
	_g = e.expr
	if (_g.index) == 6:
		if (_hx_builtin.len(_g.params[0])) == 0:
			return "[]"
		elif (_hx_builtin.len(_g.params[0])) == 1:
			a = _hx_array_get(_g.params[0],0)
			return Std.string("[" + Std.string(_hx_c.Std.string(a.expr))) + "]"
	
		elif (_hx_builtin.len(_g.params[0])) == 2:
			b = _hx_array_get(_g.params[0],1)
			a1 = _hx_array_get(_g.params[0],0)
			return Std.string(Std.string(Std.string("[" + Std.string(_hx_c.Std.string(a1.expr))) + ",") + Std.string(_hx_c.Std.string(b.expr))) + "]"
	
		else:
			return "_"
	else:
		return "_"
	
unit_TestMatch.switchArray = TestMatch_statics_switchArray
def TestMatch_statics_switchArray2(a):
	a1 = a
	if (_hx_builtin.len(a)) == 2:
		a2 = _hx_array_get(a,0)
		if (_hx_array_get(a,0)) == "a":
			b = _hx_array_get(a,1)
			if (_hx_array_get(a,1)) == "b":
				return "0"
			else:
				return Std.string(Std.string("4:" + Std.string(a2)) + ",") + Std.string(b)
		
		else:
			b = _hx_array_get(a,1)
			return Std.string(Std.string("4:" + Std.string(a2)) + ",") + Std.string(b)
		
	
	elif (_hx_builtin.len(a)) == 1:
		a3 = _hx_array_get(a,0)
		if (_hx_array_get(a,0)) == "a":
			return "1"
		elif (_hx_array_get(a,0)) == "b":
			return "2"
		else:
			return "3:" + Std.string(a3)
	
	elif (_hx_builtin.len(a)) == 0:
		if _hx_builtin.len(a1) == 3:
			return "5:" + Std.string(_hx_builtin.len(a1))
		else:
			return "6"
	elif _hx_builtin.len(a1) == 3:
		return "5:" + Std.string(_hx_builtin.len(a1))
	else:
		return "7"
	
unit_TestMatch.switchArray2 = TestMatch_statics_switchArray2
def TestMatch_statics_switchStructure(a):
	if (a.foo) == "val1":
		a1 = a.bar
		if (a.bar) == "val2":
			return "0"
		else:
			return "1"
	
	else:
		a1 = a.bar
		if (a.bar) == "val2":
			return "2"
		else:
			return a1
	
unit_TestMatch.switchStructure = TestMatch_statics_switchStructure
def TestMatch_statics_switchCrazy(e):
	_g = e.expr
	if (_g.index) == 22:
		if (_g.params[0].expr.index) == 4:
			if (_g.params[0].expr.params[0].expr.index) == 1:
				a = _g.params[0].expr.params[0].expr.params[0].expr
				if (_g.params[0].expr.params[0].expr.params[0].expr.index) == 0:
					if (_g.params[0].expr.params[0].expr.params[0].expr.params[0].index) == 2:
						if (_g.params[0].expr.params[0].expr.params[1].expr.index) == 0:
							if (_g.params[0].expr.params[0].expr.params[1].expr.params[0].index) == 0:
								b = _g.params[0].expr.params[0].expr.params[1].expr.params[0].params[0]
								return Std.string(Std.string(_hx_c.Std.string(a)) + ":") + Std.string(b)
				
							else:
								return "_"
						else:
							return "_"
					else:
						return "_"
				else:
					return "_"
	
			else:
				return "_"
		else:
			return "_"
	else:
		return "_"
	
unit_TestMatch.switchCrazy = TestMatch_statics_switchCrazy
def TestMatch_statics_switchGuard(e):
	_g = e.expr
	if (_g.index) == 0:
		if (_g.params[0].index) == 2:
			s = _g.params[0].params[0]
			if _hx_c.StringTools.startsWith(s, "foo"):
				return "1"
			else:
				s1 = _g.params[0].params[0]
				if _hx_c.StringTools.startsWith(s1, "bar"):
					return "2"
				else:
					return "4"
			
	
		elif (_g.params[0].index) == 0:
			i = _g.params[0].params[0]
			def _hx_local_0():
				_g1 = _hx_c.Std.parseInt(i) * 2
				def _hx_local_4():
					def _hx_local_2():
						def _hx_local_3():
							return True
						_hx_local_1 = _hx_local_3
						return _hx_local_1() if (_g1) == 4 else False
					
					return _hx_local_2()
				
				return _hx_local_4()
			
			if _hx_local_0():
				return "3"
			else:
				return "4"
	
		else:
			return "4"
	else:
		return "5"
	
unit_TestMatch.switchGuard = TestMatch_statics_switchGuard
def TestMatch_statics_switchClass(cl):
	a = cl
	if (cl) == _hx_c.String:
		return "String"
	elif (cl) == _hx_c.unit_MyClass:
		return "unit.MyClass"
	else:
		return "other: " + Std.string(_hx_c.Type.getClassName(a))
	
unit_TestMatch.switchClass = TestMatch_statics_switchClass
def TestMatch_statics_toStringX(x1):
	if (x1.index) == 0:
		x = x1.params[0]
		if x > 1:
			return ">1"
		else:
			x2 = x1.params[0]
			if x2 <= 1:
				return "<=1"
			else:
				raise _HxException("this is impossible to reach actually")
		
	
	elif (x1.index) == 1:
		return "U2"
	
unit_TestMatch.toStringX = TestMatch_statics_toStringX
def TestMatch_statics_orMatch(e1,e2):
	_g = e1.expr
	_g1 = e2.expr
	if (_g.index) == 0:
		if (_g.params[0].index) == 1:
			if (_g1.index) == 0:
				if (_g1.params[0].index) == 1:
					a = _g.params[0].params[0]
					b = _g1.params[0].params[0]
					return Std.string(a) + Std.string(b)
	
				elif (_g1.params[0].index) == 0:
					a = _g.params[0].params[0]
					b = _g1.params[0].params[0]
					return Std.string(a) + Std.string(b)
	
				else:
					return None
			else:
				return None
		elif (_g.params[0].index) == 0:
			if (_g1.index) == 0:
				if (_g1.params[0].index) == 1:
					a = _g.params[0].params[0]
					b = _g1.params[0].params[0]
					return Std.string(a) + Std.string(b)
	
				elif (_g1.params[0].index) == 0:
					a = _g.params[0].params[0]
					b = _g1.params[0].params[0]
					return Std.string(a) + Std.string(b)
	
				else:
					return None
			else:
				return None
		else:
			return None
	else:
		return None
	
unit_TestMatch.orMatch = TestMatch_statics_orMatch
def TestMatch_statics_isPair(t):
	if _hx_builtin.len(t) == 2:
		return _hx_c.haxe_ds_Option.Some(_hx_c._hx_AnonObject(a = _hx_array_get(t,0) ,b = _hx_array_get(t,1) ))
	else:
		return _hx_c.haxe_ds_Option._hx_None
unit_TestMatch.isPair = TestMatch_statics_isPair
def TestMatch_statics_even(i):
	return (i & 1) == 0
unit_TestMatch.even = TestMatch_statics_even
def TestMatch_statics_deref(ref):
	return ref.get()
unit_TestMatch.deref = TestMatch_statics_deref

unit_TestMeta.__meta__ = _hx_c._hx_AnonObject(obj = _hx_c._hx_AnonObject(classMeta = ["x"] ) ,statics = _hx_c._hx_AnonObject(foo = _hx_c._hx_AnonObject(empty = None ,_int = [-45] ,complex = [[_hx_c._hx_AnonObject(x = 0 ,y = "hello" ,z = -1.48 ,b = True ,k = None )]] ) ) ,fields = _hx_c._hx_AnonObject(_ = _hx_c._hx_AnonObject(new = None ) ) )
unit_TestMeta.foo = None;

unit_MyDynamicClass.Z = 10
def MyDynamicClass_statics_staticDynamic(x,y):
	return _hx_c.unit_MyDynamicClass.Z + x + y
unit_MyDynamicClass.staticDynamic = MyDynamicClass_statics_staticDynamic
unit_MyDynamicClass.W = 55
def MyDynamicClass_statics_get_W():
	return _hx_c.unit_MyDynamicClass.W + 2
unit_MyDynamicClass.get_W = MyDynamicClass_statics_get_W
def MyDynamicClass_statics_set_W(v):
	_hx_c.unit_MyDynamicClass.W = v
	return v
	
unit_MyDynamicClass.set_W = MyDynamicClass_statics_set_W











unit_TestMisc.unit = "testing package conflict"
def TestMisc_statics_foo(x):
	return x + 5
unit_TestMisc.foo = TestMisc_statics_foo
def _hx_init_unit_TestMisc_add():
	def _hx_local_0(x,y):
		return x + y
	return _hx_local_0
	
unit_TestMisc.add = _hx_init_unit_TestMisc_add()




unit_ClassWithProp.STAT_X = None;
def ClassWithProp_statics_set_STAT_X(v):
	_hx_c.unit_ClassWithProp.STAT_X = v * 2
	return v
	
unit_ClassWithProp.set_STAT_X = ClassWithProp_statics_set_STAT_X

_hx_c.unit_ClassWithProp.set_STAT_X(3)

unit_TestReflect.TYPES = [None, _hx_c.Int, _hx_c.String, _hx_c.Bool, _hx_c.Float, list, _hx_c.haxe_ds_StringMap, _hx_c.List, _hx_c.Date, _hx_c.Xml, _hx_math, _hx_c.unit_MyEnum, _hx_c.unit_MyClass, _hx_c.unit_MySubClass, _hx_c.Class, _hx_c.Enum, _hx_c.Dynamic, _hx_c.unit_MyInterface]
def TestReflect_statics_u(s):
	return s
unit_TestReflect.u = TestReflect_statics_u
def TestReflect_statics_u2(s,s2):
	return Std.string(Std.string(s) + ".") + Std.string(s2)
unit_TestReflect.u2 = TestReflect_statics_u2
unit_TestReflect.TNAMES = ["null", "Int", "String", "Bool", "Float", "Array", "haxe.ds.StringMap", "List", "Date", "Xml", "Math", Std.string("unit" + ".") + "MyEnum", Std.string("unit" + ".") + "MyClass", Std.string("unit" + ".") + "MySubClass", "Class", "Enum", "Dynamic", Std.string("unit" + ".") + "MyInterface"]

unit_TestResource.STR = "Héllo World !"


def C_statics_staticFunc():
	None
unit_C.staticFunc = C_statics_staticFunc
unit_C.staticVar = None;
unit_C.staticProp = None;











def IntWrap_statics_compare(a,b):
	if a.i == b.i:
		return 0
	elif a.i > b.i:
		return 1
	else:
		return -1
unit_TestSpecification_IntWrap.compare = IntWrap_statics_compare


def TestType_statics_overloadFake_Int(a):
	return a
unit_TestType.overloadFake_Int = TestType_statics_overloadFake_Int
def TestType_statics_gf3_haxe_Template_Array(a,b):
	clone = _hx_c.haxe_Template("foo")
	b.append(clone)
	_hx_builtin.len(b)
	
	return b
	
unit_TestType.gf3_haxe_Template_Array = TestType_statics_gf3_haxe_Template_Array
def TestType_statics_gf3_String_Array(a,b):
	clone = _hx_c.String("foo")
	b.append(clone)
	_hx_builtin.len(b)
	
	return b
	
unit_TestType.gf3_String_Array = TestType_statics_gf3_String_Array
def TestType_statics_gf2_String_Array(a,b):
	return Std.string(_hx_c.Std.string(a)) + Std.string(_hx_c.Std.string(b))
unit_TestType.gf2_String_Array = TestType_statics_gf2_String_Array
def TestType_statics_gf2_String_Int(a,b):
	return Std.string(_hx_c.Std.string(a)) + Std.string(_hx_c.Std.string(b))
unit_TestType.gf2_String_Int = TestType_statics_gf2_String_Int
def TestType_statics_gf1_haxe_ds_GenericStack(a):
	return a
unit_TestType.gf1_haxe_ds_GenericStack = TestType_statics_gf1_haxe_ds_GenericStack
def TestType_statics_gf1_haxe_Template(a):
	return a
unit_TestType.gf1_haxe_Template = TestType_statics_gf1_haxe_Template
def TestType_statics_gf1_Bool(a):
	return a
unit_TestType.gf1_Bool = TestType_statics_gf1_Bool
def TestType_statics_gf1_String(a):
	return a
unit_TestType.gf1_String = TestType_statics_gf1_String
def TestType_statics_gf1_Int(a):
	return a
unit_TestType.gf1_Int = TestType_statics_gf1_Int
def TestType_statics_u(s):
	return s
unit_TestType.u = TestType_statics_u
def TestType_statics_overloadFake_String(a):
	return Std.string(a) + "foo"
unit_TestType.overloadFake_String = TestType_statics_overloadFake_String
def TestType_statics__mapMe(map):
	None
unit_TestType._mapMe = TestType_statics__mapMe


_hx_c.unit_Test.main()